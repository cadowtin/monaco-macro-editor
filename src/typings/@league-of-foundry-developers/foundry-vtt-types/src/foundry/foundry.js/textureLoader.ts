
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\textureLoader.d.ts",
      "/**\n * A Loader class which helps with loading video and image textures\n */\ndeclare class TextureLoader {\n  constructor();\n\n  cache: Map<string, PIXI.Texture>;\n\n  /**\n   * Load all the textures which are required for a particular Scene\n   * @param scene - The Scene to load\n   */\n  static loadSceneTextures(scene: Scene): Promise<void>;\n\n  /**\n   * Load an Array of provided source URL paths\n   * @param sources - The source URLs to load\n   * @param message - The status message to display in the load bar\n   * @returns A Promise which resolves once all textures are loaded\n   */\n  load(sources: string[], { message }?: { message?: string }): Promise<void>;\n\n  /**\n   * Load a single texture on-demand from a given source URL path\n   * @param src -\n   */\n  loadTexture(src: string): Promise<PIXI.Texture>;\n\n  /**\n   * Log texture loading progress in the console and in the Scene loading bar\n   */\n  protected _onProgress(src: string, progress: TextureLoader.Progress, message: string): void;\n\n  /**\n   * Log failed texture loading\n   */\n  protected _onError(src: string, progress: TextureLoader.Progress, error: Error): void;\n\n  /**\n   * Load an image texture from a provided source url\n   * @param src -\n   */\n  loadImageTexture(src: string): Promise<PIXI.Texture>;\n\n  /**\n   * If an attempted image load failed, we may attempt a re-load in case the issue was CORS + caching\n   * Cross-origin requests which failed might be CORS, or might be 404, no way to know - so try a 2nd time\n   * @param src     - The source URL being attempted\n   * @param resolve - Resolve the promise\n   * @param reject  - Reject the promise\n   */\n  protected _attemptCORSReload<T>(\n    src: string,\n    resolve: (texture: PIXI.Texture) => void,\n    reject: () => T\n  ): Promise<PIXI.Texture> | T;\n\n  /**\n   * Load a video texture from a provided source url\n   * @param src -\n   */\n  loadVideoTexture(src: string): Promise<PIXI.Texture>;\n\n  /**\n   * Add an image url to the texture cache\n   * @param src - The source URL\n   * @param tex - The readied texture\n   */\n  setCache(src: string, tex: PIXI.Texture): void;\n\n  /**\n   * Retrieve a texture from the texture cache\n   * @param src - The source URL\n   */\n  getCache(src: string): PIXI.Texture | undefined;\n\n  /**\n   * A global reference to the singleton texture loader\n   */\n  static loader: TextureLoader;\n}\n\ndeclare namespace TextureLoader {\n  interface Progress {\n    message: string;\n    loaded: number;\n    failed: number;\n    total: number;\n    pct: number;\n  }\n}\n"
    ]
  