
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\quadtree.d.ts",
      "declare interface QuadTreeObject<T> {\n  /**\n   * Rectangle of this object\n   */\n  r: Rectangle;\n  /**\n   * The stored data\n   */\n  t: T;\n  /**\n   * Set of quadtrees that hold this object\n   */\n  n: Set<Quadtree<T>>;\n}\n\n/**\n * A Quadtree implementation that supports collision detection for rectangles.\n */\ndeclare class Quadtree<T> {\n  /**\n   * @param bounds  - The outer bounds of the region\n   * @param options - Additional options which configure the Quadtree\n   */\n  constructor(bounds: Rectangle, { maxObjects, maxDepth, _depth }?: Quadtree.Options);\n\n  /**\n   * The bounding rectangle of the region\n   */\n  bounds: Rectangle;\n\n  /**\n   * The maximum number of objects allowed within this node before it must split\n   * @defaultValue `20`\n   */\n  maxObjects: number;\n\n  /**\n   * The maximum number of levels that the base quadtree is allowed\n   * @defaultValue `4`\n   */\n  maxDepth: number;\n\n  /**\n   * The depth of this node within the root Quadtree\n   * @defaultValue `0`\n   */\n  depth: number;\n\n  /**\n   * The objects contained at this level of the tree\n   * @defaultValue `[]`\n   */\n  objects: QuadTreeObject<T>[];\n\n  /**\n   * Children of this node\n   * @defaultValue `[]`\n   */\n  nodes: Quadtree<T>[];\n\n  /**\n   * Return an array of all the objects in the Quadtree (recursive)\n   */\n  get all(): QuadTreeObject<T>[];\n\n  /**\n   * Clear the quadtree of all existing contents\n   * @returns The cleared Quadtree\n   */\n  clear(): this;\n\n  /**\n   * Add a rectangle object to the tree\n   * @param obj - The object being inserted\n   * @returns The Quadtree nodes the object was added to.\n   */\n  insert(obj: QuadTreeObject<T>): Quadtree<T>[];\n\n  /**\n   * Remove an object from the quadtree\n   * @param target - The quadtree target being removed\n   * @returns The Quadtree for method chaining\n   */\n  remove(target: T): this;\n\n  /**\n   * Split this node into 4 sub-nodes.\n   * @returns The split Quadtree\n   */\n  split(): this;\n\n  /**\n   * Get all the objects which could collide with the provided rectangle\n   * @param rect - The target rectangle\n   * @param _s   - The existing result set, for internal use.\n   * @returns The objects in the Quadtree which represent potential collisions\n   */\n  getObjects(rect: Rectangle, _s: Set<T>): Set<T>;\n\n  /**\n   * Obtain the leaf nodes to which a target rectangle belongs.\n   * This traverses the quadtree recursively obtaining the final nodes which have no children.\n   * @param rect - The target rectangle.\n   * @returns The Quadtree nodes to which the target rectangle belongs\n   */\n  getLeafNodes(rect: Rectangle): Quadtree<T>[];\n\n  /**\n   * Obtain the child nodes within the current node which a rectangle belongs to.\n   * Note that this function is not recursive, it only returns nodes at the current or child level.\n   * @param rect - The target rectangle.\n   * @returns The Quadtree nodes to which the target rectangle belongs\n   */\n  getChildNodes(rect: Rectangle): Quadtree<T>[];\n\n  /**\n   * Visualize the nodes and objects in the quadtree\n   * @param objects - Visualize the rectangular bounds of objects in the Quadtree. Default is false.\n   */\n  visualize({ objects }?: { objects?: boolean }): void;\n\n  /**\n   * A constant that enumerates the index order of the quadtree nodes from top-left to bottom-right.\n   */\n  static readonly INDICES: {\n    tl: 0;\n    tr: 1;\n    bl: 2;\n    br: 3;\n  };\n}\n\ndeclare namespace Quadtree {\n  /**\n   * Additional options which configure the Quadtree\n   */\n  interface Options {\n    /**\n     * The maximum number of objects per node\n     */\n    maxObjects?: number;\n    /**\n     * The maximum number of levels within the root Quadtree\n     */\n    maxDepth?: number;\n    /**\n     * The depth level of the sub-tree. For internal use only\n     * @internal\n     */\n    _depth?: number;\n  }\n}\n"
    ]
  