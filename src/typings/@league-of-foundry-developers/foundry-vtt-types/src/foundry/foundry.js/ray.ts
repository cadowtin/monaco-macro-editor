
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\ray.d.ts",
      "/**\n * A ray for the purposes of computing sight and collision\n * Given points A[x,y] and B[x,y]\n *\n * Slope-Intercept form:\n * y = a + bx\n * y = A.y + ((B.y - A.Y) / (B.x - A.x))x\n *\n * Parametric form:\n * R(t) = (1-t)A + tB\n */\ndeclare class Ray {\n  /**\n   * @param A - The origin of the Ray\n   * @param B - The destination of the Ray\n   */\n  constructor(A: Point, B: Point);\n\n  // Points\n  A: Point;\n  B: Point;\n\n  // Origins\n  x0: number;\n  y0: number;\n\n  // Slopes\n  dx: number;\n  dy: number;\n\n  /**\n   * The slope of the ray, dy over dx\n   */\n  slope: number;\n\n  /**\n   * The normalized angle of the ray in radians on the range (-PI, PI)\n   */\n  angle: number;\n\n  /**\n   * The distance of the ray\n   */\n  distance: number;\n\n  /**\n   * A bounding rectangle that encompasses the Ray\n   */\n  get bounds(): NormalizedRectangle;\n\n  /**\n   * Return the value of the angle normalized to the range (0, 2*PI)\n   * This is useful for testing whether an angle falls between two others\n   */\n  get normAngle(): number;\n\n  /**\n   * A factory method to construct a Ray from an origin point, an angle, and a distance\n   * @param x        - The origin x-coordinate\n   * @param y        - The origin y-coordinate\n   * @param radians  - The ray angle in radians\n   * @param distance - The distance of the ray in pixels\n   * @returns The constructed Ray instance\n   */\n  static fromAngle(x: number, y: number, radians: number, distance: number): Ray;\n\n  /**\n   * A factory method to construct a Ray from points in array format.\n   * @param A - The origin point [x,y]\n   * @param B - The destination point [x,y]\n   * @returns The constructed Ray instance\n   */\n  static fromArrays(A: [x: number, y: number], B: [x: number, y: number]): Ray;\n\n  /**\n   * Project the Array by some proportion of it's initial distance.\n   * Return the coordinates of that point along the path.\n   * @param t - The distance along the Ray\n   * @returns The coordinates of the projected point\n   */\n  project(t: number): Point;\n\n  /**\n   * Create a new ray which uses the same origin point, but a slightly offset angle and distance\n   * @param offset   - An offset in radians which modifies the angle of the original Ray\n   * @param distance - A distance the new ray should project, otherwise uses the same distance.\n   * @returns A new Ray with an offset angle\n   */\n  shiftAngle(angleOffset: number, distance?: number): Ray;\n\n  /**\n   * Find the point I[x,y] and distance t* on ray R(t) which intersects another ray\n   * http://paulbourke.net/geometry/pointlineplane/\n   *\n   * @param coords - An array of coordinates [x0, y0, x1, y1] which defines a line segment to test\n   *\n   * @returns\n   *    The point of collision [x,y] the position of that collision point along the Ray (t0) an the tested\n   *    segment (t1). Returns false if no collision occurs.\n   */\n  intersectSegment(coords: [x0: number, y0: number, x1: number, y1: number]): Ray.CollisionPoint | false;\n\n  /**\n   * An internal helper method for computing the intersection between two lines.\n   * @internal\n   */\n  static _getIntersection(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    x3: number,\n    y3: number,\n    x4: number,\n    y4: number\n  ): Ray.CollisionPoint | false;\n}\n\ndeclare namespace Ray {\n  /**\n   * A representation of a the computed collision between a Ray and a segment\n   */\n  interface CollisionPoint {\n    /**\n     * Distance of collision along the Ray\n     */\n    t0: number;\n\n    /**\n     * Distance of collision along the Segment\n     */\n    t1: number;\n\n    /**\n     * Point of collision x\n     */\n    x: number;\n\n    /**\n     * Point of collision y\n     */\n    y: number;\n  }\n}\n"
    ]
  