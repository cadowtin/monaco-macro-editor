
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\drawingsLayer.d.ts",
      "/**\n * The DrawingsLayer subclass of PlaceablesLayer\n *\n * This layer implements a container for drawings which are rendered immediately above the TilesLayer\n * and immediately below the GridLayer.\n */\ndeclare class DrawingsLayer extends PlaceablesLayer<Drawing> {\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.layerOptions, {\n   *   canDragCreate: true,\n   *   canDelete: true,\n   *   controllableObjects: true,\n   *   rotatableObjects: true,\n   *   objectClass: Drawing,\n   *   sheetClass: DrawingConfig,\n   *   zIndex: 20\n   * })\n   * ```\n   */\n  static get layerOptions(): PlaceablesLayer.LayerOptions;\n\n  /**\n   * Use an adaptive precision depending on the size of the grid\n   * @remarks Returns `2 | 4 | 8 | 16`\n   */\n  get gridPrecision(): number;\n\n  /** @override */\n  get hud(): Canvas['hud']['drawing'];\n\n  /**\n   * Render a configuration sheet to configure the default Drawing settings\n   */\n  configureDefault(): void;\n\n  /**\n   * Override the deactivation behavior of this layer.\n   * Placeables on this layer remain visible even when the layer is inactive.\n   */\n  deactivate(): void;\n\n  /**\n   * Get initial data for a new drawing.\n   * Start with some global defaults, apply user default config, then apply mandatory overrides per tool.\n   * @param origin - The initial coordinate\n   * @returns The new drawing data\n   */\n  protected _getNewDrawingData(origin: Point): typeof foundry.CONST['DRAWING_DEFAULT_VALUES'] &\n    (\n      | {\n          type: typeof foundry.CONST['DRAWING_TYPES']['RECTANGLE'] | typeof foundry.CONST['DRAWING_TYPES']['ELLIPSE'];\n        }\n      | {\n          type: typeof foundry.CONST['DRAWING_TYPES']['POLYGON'];\n          points: PointArray[];\n        }\n      | {\n          type: typeof foundry.CONST['DRAWING_TYPES']['FREEHAND'];\n          points: PointArray[];\n          bezierFactor: number;\n        }\n      | {\n          type: typeof foundry.CONST['DRAWING_TYPES']['TEXT'];\n          fillColor: string;\n          fillAlpha: number;\n          strokeColor: string;\n          text: string;\n        }\n    ) & {\n      author: string;\n      fillColor: string;\n      fillAlpha: number;\n      fontFamily: typeof CONFIG['defaultFontFamily'];\n      x: number;\n      y: number;\n    };\n\n  /** @override */\n  protected _onClickLeft(event: PIXI.InteractionEvent): void;\n\n  /** @override */\n  protected _onClickLeft2(event: PIXI.InteractionEvent): void;\n\n  /** @override */\n  protected _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n  /** @override */\n  protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handling of mouse-up events which conclude a new object creation after dragging\n   */\n  protected _onDragLeftDrop(event: PIXI.InteractionEvent): void;\n\n  /** @override */\n  protected _onDragLeftCancel(event: PointerEvent): void;\n\n  /** @override */\n  protected _onClickRight(event: PIXI.InteractionEvent): void;\n\n  /**\n   * @defaultValue `\"defaultDrawingConfig\"`\n   */\n  static DEFAULT_CONFIG_SETTING: string;\n}\n"
    ]
  