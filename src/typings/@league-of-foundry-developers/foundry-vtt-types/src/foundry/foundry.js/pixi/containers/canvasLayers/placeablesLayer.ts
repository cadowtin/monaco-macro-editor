
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayer.d.ts",
      "/**\n * The base PlaceablesLayer subclass of CanvasLayer\n * @typeParam P - the type of the PlaceableObject in the layer\n */\ndeclare abstract class PlaceablesLayer<P extends PlaceableObject = PlaceableObject> extends CanvasLayer {\n  constructor();\n\n  /**\n   * Placeable Layer Objects\n   * @defaultValue `null`\n   */\n  objects: PIXI.Container | null;\n\n  /**\n   * Preview Object Placement\n   * @defaultValue `null`\n   */\n  preview: PIXI.Container;\n\n  /**\n   * Keep track of history so that CTRL+Z can undo changes\n   */\n  history: Array<PlaceablesLayer.HistoryEvent<P>>;\n\n  /**\n   * Track the PlaceableObject on this layer which is currently being hovered upon\n   * @defaultValue `null`\n   */\n  protected _hover: P | null;\n\n  /**\n   * Track the set of PlaceableObjects on this layer which are currently controlled by their id\n   * @defaultValue `{}`\n   */\n  protected _controlled: Record<string, P>;\n\n  /**\n   * Keep track of an object copied with CTRL+C which can be pasted later\n   * @defaultValue `[]`\n   */\n  protected _copy: P[];\n\n  /**\n   * PlaceableObject layer options\n   * @defaultValue is set from {@link PlaceablesLayer.layerOptions}\n   */\n  options: PlaceablesLayer.LayerOptions;\n\n  /**\n   * A Quadtree which partitions and organizes Walls into quadrants for efficient target identification.\n   */\n  quadtree: Quadtree<P> | null;\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * {@inheritDoc CanvasLayer.layerOptions}\n   */\n  static get layerOptions(): PlaceablesLayer.LayerOptions;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Define the named Array within Scene.data containing the placeable objects displayed in this layer\n   */\n  static get dataArray(): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Define a Container implementation used to render placeable objects contained in this layer\n   */\n  static get placeableClass(): (...args: any[]) => PlaceableObject;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return the precision relative to the Scene grid with which Placeable objects should be snapped\n   */\n  get gridPrecision(): number;\n\n  /* -------------------------------------------- */\n\n  /**\n   * If objects on this PlaceableLayer have a HUD UI, provide a reference to its instance\n   * @remarks Returns `null` unless overridden\n   */\n  get hud(): BasePlaceableHUD<P> | null;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A convenience method for accessing the placeable object instances contained in this layer\n   */\n  get placeables(): P[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * An Array of placeable objects in this layer which have the _controlled attribute\n   */\n  get controlled(): P[];\n\n  /* -------------------------------------------- */\n  /*  Rendering\n  /* -------------------------------------------- */\n\n  /**\n   * @override\n   * @remarks Returns `Promise<P[]>`\n   */\n  draw(): unknown;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Draw a single placeable object\n   */\n  createObject(data: PlaceablesLayer.DataType<P>): P;\n\n  /* -------------------------------------------- */\n\n  /**\n   * @override\n   */\n  tearDown(): Promise<void>;\n\n  /* -------------------------------------------- */\n  /*  Methods                                     */\n  /* -------------------------------------------- */\n\n  /**\n   * @override\n   * @remarks Returns `this`\n   */\n  activate(): unknown;\n\n  /* -------------------------------------------- */\n\n  /**\n   * @override\n   * @remarks Returns `this`\n   */\n  deactivate(): unknown;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get a PlaceableObject contained in this layer by it's ID\n   * @param objectId - The ID of the contained object to retrieve\n   * @returns The object instance, or undefined\n   */\n  get(objectId: string): P;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Acquire control over all PlaceableObject instances which are visible and controllable within the layer.\n   * @param options - Options passed to the control method of each object\n   *                  (default: `{}`)\n   * @returns An array of objects that were controlled\n   */\n  controlAll(options?: PlaceableObject.ControlOptions): P[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * Release all controlled PlaceableObject instance from this layer.\n   * @param options - Options passed to the release method of each object\n   *                  (default: `{}`)\n   * @returns The number of PlaceableObject instances which were released\n   */\n  releaseAll(options?: PlaceableObject.ReleaseOptions): number;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Simultaneously rotate multiple PlaceableObjects using a provided angle or incremental.\n   * This executes a single database operation using Scene.update.\n   * If rotating only a single object, it is better to use the PlaceableObject.rotate instance method.\n   *\n   * @param angle - A target angle of rotation (in degrees) where zero faces\n   *                \"south\"\n   *                (default: `null`)\n   * @param delta - An incremental angle of rotation (in degrees)\n   *                (default: `null`)\n   * @param snap  - Snap the resulting angle to a multiple of some increment (in\n   *                degrees)\n   *                (default: `null`)\n   * @param ids   - An Array or Set of object IDs to target for rotation\n   *                (default: `null`)\n   *\n   * @returns The resulting Promise from the Scene.update operation\n   */\n  rotateMany({\n    angle,\n    delta,\n    snap,\n    ids\n  }?: {\n    angle?: number;\n    delta?: number;\n    ids?: string[] | Set<string>;\n    snap?: number;\n  }): Promise<Array<Partial<P>> | Partial<P>>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Simultaneously move multiple PlaceableObjects via keyboard movement offsets.\n   * This executes a single database operation using Scene.update.\n   * If moving only a single object, this will delegate to PlaceableObject.update for performance reasons.\n   *\n   * @param dx     - The number of incremental grid units in the horizontal direction\n   *                 (default: `0`)\n   * @param dy     - The number of incremental grid units in the vertical direction\n   *                 (default: `0`)\n   * @param rotate - Rotate the token to the keyboard direction instead of moving\n   *                 (default: `false`)\n   * @param ids    - An Array or Set of object IDs to target for rotation\n   *                 (default: `null`)\n   *\n   * @returns The resulting Promise from the Scene.update operation\n   */\n  moveMany({\n    dx,\n    dy,\n    rotate,\n    ids\n  }?: {\n    dx: number;\n    dy: number;\n    ids: string[] | Set<string>;\n    rotate: boolean;\n  }): Promise<Array<Partial<P>> | Partial<P>>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Undo a change to the objects in this layer\n   * This method is typically activated using CTRL+Z while the layer is active\n   */\n  undoHistory(): Promise<Partial<P>>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create multiple embedded entities in a parent Entity collection using an Array of provided data\n   *\n   * @param data    - An Array of update data Objects which provide incremental data\n   * @param options - Additional options which customize the update workflow\n   *                  (default: `{}`)\n   *\n   * @returns A Promise which resolves to the returned socket response (if successful)\n   */\n  createMany(data: Array<PlaceablesLayer.DataType<P>>, options?: Entity.CreateOptions): Promise<P[]>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update multiple embedded entities in a parent Entity collection using an Array of provided data\n   *\n   * @param data    - An Array of update data Objects which provide incremental data\n   * @param options - Additional options which customize the update workflow\n   *                  (default: `{}`)\n   *\n   * @returns A Promise which resolves to the returned socket response (if successful)\n   */\n  // TODO: update later\n  updateMany(data: any[], options?: Entity.UpdateOptions): Promise<Partial<P>>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Simultaneously delete multiple PlaceableObjects.\n   * This executes a single database operation using Scene.update.\n   * If deleting only a single object, this will delegate to PlaceableObject.delete for performance reasons.\n   *\n   * @param ids     - An Array of object IDs to target for deletion\n   * @param options - Additional options which customize the update workflow\n   *                  (default: `{}`)\n   *\n   * @returns A Promise which resolves to the returned socket response (if successful)\n   */\n  deleteMany(ids: string[], options?: Entity.DeleteOptions): Promise<Array<Partial<P>> | Partial<P>>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update all objects in this layer with a provided transformation.\n   * Conditionally filter to only apply to objects which match a certain condition.\n   * @param transformation - An object of data or function to apply to all matched objects\n   * @param condition      - A function which tests whether to target each object\n   *                         (default: `null`)\n   * @param options        - Additional options passed to Entity.update\n   *                         (default: `{}`)\n   * @returns An array of updated data once the operation is complete\n   */\n  updateAll(\n    transformation: ((placeable: P) => P) | P,\n    condition?: (placeable: P) => boolean,\n    options?: Entity.UpdateOptions\n  ): Promise<Array<Partial<P>> | Partial<P>>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A helper method to prompt for deletion of all PlaceableObject instances within the Scene\n   * Renders a confirmation dialogue to confirm with the requester that all objects will be deleted\n   */\n  deleteAll(): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Record a new CRUD event in the history log so that it can be undone later\n   * @param type - The event type (create, update, delete)\n   * @param data - The object data\n   */\n  storeHistory(type: PlaceablesLayer.HistoryEventType, data: Array<Partial<P>> | Partial<P>): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Copy currently controlled PlaceableObjects to a temporary Array, ready to paste back into the scene later\n   * @returns The Array of copied PlaceableObject instances\n   */\n  copyObjects(): P[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * Paste currently copied PlaceableObjects back to the layer by creating new copies\n   * @param position - The destination position for the copied data.\n   * @param hidden   - Paste data in a hidden state, if applicable. Default is false.\n   * @param snap     - Snap the resulting objects to the grid. Default is true.\n   * @returns An Array of created PlaceableObject instances\n   */\n  pasteObjects(position: Point, { hidden, snap }?: { hidden: boolean; snap: boolean }): Promise<P[]>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Select all PlaceableObject instances which fall within a coordinate rectangle.\n   * @param x              - The top-left x-coordinate of the selection rectangle\n   * @param y              - The top-left y-coordinate of the selection rectangle\n   * @param width          - The width of the selection rectangle\n   * @param height         - The height of the selection rectangle\n   * @param releaseOptions - Optional arguments provided to any called release() method\n   *                         (default: `{}`)\n   * @param controlOptions - Optional arguments provided to any called control() method\n   *                         (default: `{}`)\n   * @returns A boolean for whether the controlled set was changed in the operation\n   */\n  selectObjects({\n    x,\n    y,\n    width,\n    height,\n    releaseOptions,\n    controlOptions\n  }?: {\n    /** The top-left x-coordinate of the selection rectangle */\n    x: number;\n\n    /** The top-left y-coordinate of the selection rectangle */\n    y: number;\n\n    /** The width of the selection rectangle */\n    width: number;\n\n    /** The height of the selection rectangle */\n    height: number;\n\n    /**\n     * Optional arguments provided to any called release() method\n     * @defaultValue `{}`\n     */\n    releaseOptions?: PlaceableObject.ReleaseOptions;\n\n    /**\n     * Optional arguments provided to any called control() method\n     * @defaultValue `{ releaseOthers: false }`\n     */\n    controlOptions?: PlaceableObject.ControlOptions;\n  }): boolean;\n\n  /* -------------------------------------------- */\n  /*  Event Listeners and Handlers                */\n  /* -------------------------------------------- */\n\n  /**\n   * Handle left mouse-click events which originate from the Canvas stage and are dispatched to this Layer.\n   * @param event - (unused)\n   * @see {@link Canvas#_onClickLeft}\n   */\n  protected _onClickLeft(event?: any): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle double left-click events which originate from the Canvas stage and are dispatched to this Layer.\n   * @param event - (unused)\n   * @see {@link Canvas#_onClickLeft2}\n   */\n  protected _onClickLeft2(event?: any): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Start a left-click drag workflow originating from the Canvas stage.\n   * @see {@link Canvas#_onDragLeftStart}\n   */\n  protected _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Continue a left-click drag workflow originating from the Canvas stage.\n   * @see {@link Canvas#_onDragLeftMove}\n   */\n  protected _onDragLeftMove(event?: PIXI.InteractionEvent): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Conclude a left-click drag workflow originating from the Canvas stage.\n   * @see {@link Canvas#_onDragLeftDrop}\n   */\n  protected _onDragLeftDrop(event: PIXI.InteractionEvent): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Cancel a left-click drag workflow originating from the Canvas stage.\n   * @param event - (unused)\n   * @see {@link Canvas#_onDragLeftDrop}\n   */\n  protected _onDragLeftCancel(event?: PointerEvent): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle right mouse-click events which originate from the Canvas stage and are dispatched to this Layer.\n   * @param event - (unused)\n   * @see {@link Canvas#_onClickRight}\n   */\n  protected _onClickRight(event?: PIXI.InteractionEvent): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle mouse-wheel events at the PlaceableObjects layer level to rotate multiple objects at once.\n   * This handler will rotate all controlled objects by some incremental angle.\n   * @param event - The mousewheel event which originated the request\n   */\n  protected _onMouseWheel(event: WheelEvent): Promise<Array<Partial<P>> | Partial<P>> | null;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle a DELETE keypress while a placeable object is hovered\n   * @param event - The delete key press event which triggered the request\n   *                (unused)\n   */\n  protected _onDeleteKey(event?: any): Promise<string[]>;\n}\n\ndeclare namespace PlaceablesLayer {\n  // TODO: maybe move this somewhere else\n  type DataType<P extends PlaceableObject> = P extends PlaceableObject<infer D> ? D : never;\n\n  interface HistoryEvent<P extends PlaceableObject> {\n    data: Partial<P>;\n    type: HistoryEventType;\n  }\n\n  type HistoryEventType = 'create' | 'update' | 'delete';\n\n  interface LayerOptions extends CanvasLayer.LayerOptions {\n    /**\n     * Does this layer support a mouse-drag workflow to create new objects?\n     * @defaultValue whether the user is GM\n     */\n    canDragCreate: boolean;\n\n    /**\n     * Can objects be deleted from this layer?\n     * @defaultValue whether the user is GM\n     */\n    canDelete: boolean;\n\n    /**\n     * Can placeable objects in this layer be controlled?\n     * @defaultValue `false`\n     */\n    controllableObjects: boolean;\n\n    /**\n     * Can placeable objects in this layer be rotated?\n     * @defaultValue `false`\n     */\n    rotatableObjects: boolean;\n\n    /**\n     * Do objects in this layer snap to the grid\n     * @defaultValue `true`\n     */\n    snapToGrid: boolean;\n\n    /**\n     * At what numeric grid precision do objects snap?\n     * @defaultValue `2`\n     */\n    gridPrecision: number;\n\n    /**\n     * The class used to represent an object on this layer.\n     * @defaultValue `null`\n     */\n    objectClass: PlaceableObject | null;\n\n    /**\n     * Does this layer use a quadtree to track object positions?\n     * @defaultValue `false`\n     */\n    quadtree: boolean;\n\n    /**\n     * The FormApplication class used to configure objects on this layer.\n     * @defaultValue `null`\n     */\n    sheetClass: FormApplication | null;\n  }\n}\n"
    ]
  