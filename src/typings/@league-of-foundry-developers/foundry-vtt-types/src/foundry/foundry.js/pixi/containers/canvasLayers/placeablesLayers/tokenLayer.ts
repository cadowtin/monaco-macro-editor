
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\tokenLayer.d.ts",
      "// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The Tokens Container\n */\ndeclare class TokenLayer extends PlaceablesLayer<Token> {\n  constructor();\n\n  /**\n   * The current index position in the tab cycle\n   */\n  protected _tabIndex: number | null;\n\n  /**\n   * Remember the last drawn wildcard token image to avoid repetitions\n   */\n  protected _lastWildcard: string | null;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.layerOptions, {\n   *   canDragCreate: false,\n   *   controllableObjects: true,\n   *   rotatableObjects: true,\n   *   gridPrecision: 1,\n   *   objectClass: Token,\n   *   sheetClass: TokenConfig,\n   *   zIndex: 100\n   * })\n   * ```\n   */\n  static get layerOptions(): PlaceablesLayer.LayerOptions;\n\n  /**\n   * Token objects on this layer utilize the TokenHUD\n   */\n  get hud(): TokenHUD;\n\n  /**\n   * An Array of tokens which belong to actors which are owned\n   */\n  get ownedTokens(): Token[];\n\n  /** @override */\n  tearDown(): Promise<void>;\n\n  /**\n   * @override\n   */\n  activate(): void;\n\n  /**\n   * @override\n   */\n  deactivate(): void;\n\n  /**\n   * Initialize the TokenLayer by preparing all Token sources which appear in the Scene.\n   */\n  initialize(): void;\n\n  /**\n   * @override\n   * @remarks Returns void\n   */\n  controlAll(options?: PlaceableObject.ControlOptions): any;\n\n  /** @override */\n  releaseAll(options?: PlaceableObject.ReleaseOptions): number;\n\n  /** @override */\n  selectObjects({\n    x,\n    y,\n    width,\n    height,\n    releaseOptions,\n    controlOptions\n  }?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    releaseOptions?: PlaceableObject.ReleaseOptions;\n    controlOptions?: PlaceableObject.ControlOptions;\n  }): boolean;\n\n  /**\n   * Target all Token instances which fall within a coordinate rectangle.\n   *\n   * @param x             - The top-left x-coordinate of the selection rectangle\n   * @param y             - The top-left y-coordinate of the selection rectangle\n   * @param width         - The width of the selection rectangle\n   * @param height        - The height of the selection rectangle\n   * @param releaseOthers - Whether or not to release other targeted tokens\n   *                        (default: `true`)\n   * @returns The number of Token instances which were targeted.\n   */\n  targetObjects(\n    { x, y, width, height }: { x: number; y: number; width: number; height: number },\n    { releaseOthers }?: { releaseOthers?: boolean }\n  ): number;\n\n  /**\n   * Cycle the controlled token by rotating through the list of Owned Tokens that are available within the Scene\n   * Tokens are currently sorted in order of their TokenID\n   *\n   * @param forwards - Which direction to cycle. A truthy value cycles forward, while a false value cycles backwards.\n   * @param reset    - Restart the cycle order back at the beginning?\n   * @returns The Token object which was cycled to, or null\n   */\n  cycleTokens(forwards: boolean, reset: boolean): Token | null;\n\n  /**\n   * Add or remove the set of currently controlled Tokens from the active combat encounter\n   * @param  state  - The desired combat state which determines if each Token is added (true) or removed (false)\n   *                  (default: `true`)\n   * @param  combat - A Combat encounter from which to add or remove the Token\n   *                  (default: `null`)\n   * @param  token  - A specific Token which is the origin of the group toggle request\n   *                  (default: `null`)\n   * @returns The updated Combat encounter\n   * @remarks Returns the created Combatants or undefiend if there is no combat and one can't be created.\n   */\n  toggleCombat(\n    state?: boolean,\n    combat?: Combat | null,\n    { token }?: { token: Token | null }\n  ): Promise<Combat.Combatant | Combat.Combatant[] | undefined>;\n\n  /**\n   * Get the tab cycle order for tokens by sorting observable tokens based on their distance from top-left.\n   */\n  protected _getCycleOrder(): Token[];\n\n  /**\n   * Immediately conclude the animation of any/all tokens\n   */\n  concludeAnimation(): void;\n\n  /**\n   * Handle dropping of Actor data onto the Scene canvas\n   */\n  protected _onDropActorData(event: DragEvent, data: TokenLayer.DropData): Promise<void | false | Token>;\n}\n\ndeclare namespace TokenLayer {\n  interface DropData extends Canvas.DropPosition {\n    id?: string;\n    type?: 'Actor';\n    pack?: string;\n  }\n}\n"
    ]
  