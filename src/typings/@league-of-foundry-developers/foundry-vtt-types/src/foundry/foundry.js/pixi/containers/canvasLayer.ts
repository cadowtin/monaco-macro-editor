
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayer.d.ts",
      "/**\n * An abstract pattern for primary layers of the game canvas to implement\n */\ndeclare abstract class CanvasLayer extends PIXI.Container {\n  constructor();\n\n  /**\n   * Track whether the canvas layer is currently active for interaction\n   * @defaultValue `false`\n   */\n  protected _active: boolean;\n\n  /**\n   * @defaultValue `false`\n   */\n  interactive: boolean;\n\n  /**\n   * @defaultValue `false`\n   */\n  interactiveChildren: boolean;\n\n  /* -------------------------------------------- */\n  /*  Properties and Attributes\n  /* -------------------------------------------- */\n\n  /**\n   * Customize behaviors of this CanvasLayer by modifying some behaviors at a class level.\n   */\n  static get layerOptions(): CanvasLayer.LayerOptions;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return a reference to the active instance of this canvas layer\n   */\n  static get instance(): CanvasLayer;\n\n  /* -------------------------------------------- */\n\n  /**\n   * The canonical name of the CanvasLayer\n   * @remarks Foundry defines this as a getter, but since CanvasLayer extends PIXI.Container, it has to be a property.\n   */\n  name: string;\n\n  /* -------------------------------------------- */\n  /*  Rendering\n  /* -------------------------------------------- */\n\n  /**\n   * Deconstruct data used in the current layer in preparation to re-draw the canvas\n   */\n  tearDown(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Draw the canvas layer, rendering its internal components and returning a Promise\n   * The Promise resolves to the drawn layer once its contents are successfully rendered.\n   * @remarks Base implementation returns `Promise<this>`\n   */\n  draw(): unknown;\n\n  /* -------------------------------------------- */\n  /*  Methods\n  /* -------------------------------------------- */\n\n  /**\n   * Activate the CanvasLayer, deactivating other layers and marking this layer's children as interactive.\n   * @returns The layer instance, now activated\n   * @remarks The base implementation returns `this`\n   */\n  activate(): unknown;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Deactivate the CanvasLayer, removing interactivity from its children.\n   * @returns The layer instance, now inactive\n   */\n  deactivate(): void;\n}\n\ndeclare namespace CanvasLayer {\n  interface LayerOptions {\n    /**\n     * Should this layer be sorted to the top when it is active?\n     */\n    sortActiveTop: boolean;\n\n    /**\n     * The zIndex sorting of this layer relative to other layers\n     */\n    zIndex: number;\n  }\n}\n"
    ]
  