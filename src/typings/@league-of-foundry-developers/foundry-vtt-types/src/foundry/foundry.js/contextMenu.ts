
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\contextMenu.d.ts",
      "/**\n * Display a right-click activated Context Menu which provides a dropdown menu of options\n * A ContextMenu is constructed by designating a parent HTML container and a target selector\n * An Array of menuItems defines the entries of the menu which is displayed\n *\n * @param element - The containing HTML element within which the menu is positioned\n * @param selector - A CSS selector which activates the context menu.\n * @param menuItems - An Array of entries to display in the menu\n * @param eventName - Optionally override the triggering event which can spawn the menu\n *                    (default: `'contextmenu'`)\n */\ndeclare class ContextMenu {\n  constructor(\n    element: JQuery,\n    selector: string | null | undefined,\n    menuItems: ContextMenu.Item[],\n    { eventName }?: { eventName?: string }\n  );\n\n  /**\n   * The target HTMLElement being selected\n   */\n  element: JQuery;\n\n  /**\n   * The target CSS selector which activates the menu\n   * @defaultValue `element.attr(\"id\")`\n   */\n  selector: string;\n\n  /**\n   * An interaction event name which activates the menu\n   */\n  eventName: string;\n\n  /**\n   * The array of menu items being rendered\n   */\n  menuItems: ContextMenu.Item[];\n\n  /**\n   * Track which direction the menu is expanded in\n   * @defaultValue `false`\n   */\n  protected _expandUp: boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A convenience accessor to the context menu HTML object\n   */\n  get menu(): JQuery;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Attach a ContextMenu instance to an HTML selector\n   */\n  bind(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Animate closing the menu by sliding up and removing from the DOM\n   */\n  close(): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  protected _animateOpen(menu: JQuery): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  protected _animateClose(menu: JQuery): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Render the Context Menu by iterating over the menuItems it contains\n   * Check the visibility of each menu item, and only render ones which are allowed by the item's logical condition\n   * Attach a click handler to each item which is rendered\n   */\n  render(target: JQuery): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Set the position of the context menu, taking into consideration whether the menu should expand upward or downward\n   */\n  protected _setPosition(html: JQuery, target: JQuery): void;\n\n  /* -------------------------------------------- */\n\n  static eventListeners(): void;\n}\n\ndeclare namespace ContextMenu {\n  interface Item {\n    /**\n     * The displayed item name\n     */\n    name: string;\n\n    /**\n     * An icon glyph HTML string\n     */\n    icon: string;\n\n    /**\n     * A function which returns a Boolean for whether or not to display the item\n     */\n    condition?: boolean | ((target: JQuery) => boolean);\n\n    /**\n     * A callback function to trigger when the entry of the menu is clicked\n     */\n    callback: (target: JQuery) => void;\n  }\n}\n"
    ]
  