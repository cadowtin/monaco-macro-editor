
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\searchFilter.d.ts",
      "/**\n * A controller class for managing a text input widget that filters the contents of some other UI element\n * @see {@link Application}\n *\n */\ndeclare class SearchFilter {\n  /**\n   * @param inputSelector   - The CSS selector used to target the text input element.\n   * @param contentSelector - The CSS selector used to target the content container for these tabs.\n   * @param initial         - The initial value of the search query.\n   *                          (default: `''`)\n   * @param callback        - A callback function which executes when the filter changes.\n   * @param delay           - The number of milliseconds to wait for text input before processing.\n   *                          (default: `100`)\n   */\n  constructor({ inputSelector, contentSelector, initial, callback, delay }: SearchFilter.Options);\n\n  /**\n   * The value of the current query string\n   */\n  query: string;\n\n  /**\n   * A callback function to trigger when the tab is changed\n   */\n  callback: (event: KeyboardEvent, query: string, content: string) => void;\n\n  /**\n   * The CSS selector used to target the tab navigation element\n   */\n  protected _inputSelector: string;\n\n  /**\n   * A reference to the HTML navigation element the tab controller is bound to\n   */\n  protected _input: HTMLElement | null;\n\n  /**\n   * The CSS selector used to target the tab content element\n   */\n  protected _contentSelector: string;\n\n  /**\n   * A reference to the HTML container element of the tab content\n   */\n  protected _content: HTMLElement | null;\n\n  /**\n   * A debounced function which applies the search filtering\n   */\n  protected _filter: this['callback'];\n\n  /**\n   * Bind the SearchFilter controller to an HTML application\n   */\n  bind(html: HTMLElement): void;\n\n  /**\n   * Handle key-up events within the filter input field\n   * @param event - The key-up event\n   */\n  protected _onKeyUp(event: KeyboardEvent): void;\n}\n\ndeclare namespace SearchFilter {\n  interface Options {\n    /**\n     * The CSS selector used to target the text input element.\n     */\n    inputSelector: string;\n\n    /**\n     * The CSS selector used to target the content container for these tabs.\n     */\n    contentSelector: string;\n\n    /**\n     * The initial value of the search query.\n     * @defaultValue `''`\n     */\n    initial?: SearchFilter['query'];\n\n    /**\n     * A callback function which executes when the filter changes.\n     */\n    callback: SearchFilter['callback'];\n\n    /**\n     * The number of milliseconds to wait for text input before processing.\n     * @defaultValue `100`\n     */\n    delay?: number;\n  }\n}\n"
    ]
  