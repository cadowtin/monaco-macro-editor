
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectory.d.ts",
      "/**\n * A shared pattern for the sidebar directory which Actors, Items, and Scenes all use\n * @typeParam P - the type of the options object\n */\ndeclare abstract class SidebarDirectory<\n  P extends SidebarDirectory.Options = SidebarDirectory.Options\n> extends SidebarTab<P> {\n  /**\n   * References to the set of Entities which are displayed in the Sidebar\n   */\n  entities: Entity[];\n\n  /**\n   * Reference the set of Folders which exist in this Sidebar\n   * @defaultValue `null`\n   */\n  folders: Folder[];\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): SidebarDirectory.Options;\n\n  /**\n   * The named entity which this Sidebar Directory contains\n   * @remarks This method is abstract in SidebarTab.\n   */\n  static get entity(): string;\n\n  /**\n   * The Entity collection which this Sidebar Directory contains\n   * @remarks This method is abstract in SidebarTab.\n   */\n  static get collection(): WorldCollection<any, any> | undefined;\n\n  /**\n   * A reference to the Entity class which is displayed within this EntityCollection\n   */\n  static get cls(): ConstructorOf<Entity>;\n\n  /**\n   * Initialize the content of the directory by categorizing folders and entities into a hierarchical tree structure.\n   */\n  initialize(): void;\n\n  tree: SidebarDirectory.Tree;\n\n  /**\n   * Given an entity type and a list of entities, set up the folder tree for that entity\n   * @param folders  - The Array of Folder objects to organize\n   * @param entities - The Array of Entity objects to organize\n   * @returns A tree structure containing the folders and entities\n   */\n  static setupFolders(folders: Folder[], entities: Entity[]): SidebarDirectory.Tree;\n\n  /**\n   * Populate a single folder with child folders and content\n   * This method is called recursively when building the folder tree\n   * @param allowChildren - (default: `true`)\n   */\n  protected static _populate(\n    folder: Folder,\n    folders: Folder[],\n    entities: Entity[],\n    {\n      allowChildren\n    }: {\n      allowChildren: boolean;\n    }\n  ): [Folder[], Entity[]];\n\n  /**\n   * @override\n   */\n  render(force?: boolean, context?: Partial<SidebarDirectory.RenderContext>): this | void;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): SidebarDirectory.Data | PlaylistDirectory.Data;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n  /**\n   * Collapse all subfolders in this directory\n   */\n  collapseAll(): void;\n\n  /**\n   * Activate event listeners triggered within the Actor Directory HTML\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle clicking on an Entity name in the Sidebar directory\n   * @param event - The originating click event\n   */\n  protected _onClickEntityName(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle new creation request\n   * @param event - The originating button click event\n   */\n  protected _onCreateEntity(event: JQuery.ClickEvent): Promise<Entity>;\n\n  /**\n   * Create a new Folder in this SidebarDirectory\n   * @param event - The originating button click event\n   */\n  protected _onCreateFolder(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle toggling the collapsed or expanded state of a folder within the directory tab\n   * @param event - The originating click event\n   */\n  protected _toggleFolder(event: JQuery.ClickEvent): void;\n\n  /**\n   * @override\n   */\n  protected _onDragStart(event: DragEvent): void;\n\n  protected _dragType: string;\n\n  /**\n   * Highlight folders as drop targets when a drag event enters or exits their area\n   * @param event - The DragEvent which is in progress\n   */\n  protected _onDragHighlight(event: JQuery.DragEnterEvent | JQuery.DragLeaveEvent): void;\n\n  /**\n   * @override\n   */\n  protected _onDrop(event: DragEvent): void;\n\n  /**\n   * Define the behavior of the sidebar tab when it received a dropped data object\n   * @param event - The original drop event\n   * @param data  - The data being dropped\n   */\n  protected _handleDropData(event: DragEvent, data: unknown): unknown;\n\n  /**\n   * Default folder context actions\n   */\n  protected _contextMenu(html: JQuery): void;\n\n  /**\n   * Get the set of ContextMenu options which should be used for Folders in a SidebarDirectory\n   * @returns The Array of context options passed to the ContextMenu instance\n   */\n  protected _getFolderContextOptions(): ContextMenu.Item[];\n\n  /**\n   * Get the set of ContextMenu options which should be used for Entities in a SidebarDirectory\n   * @returns The Array of context options passed to the ContextMenu instance\n   */\n  protected _getEntryContextOptions(): ContextMenu.Item[];\n}\n\ndeclare namespace SidebarDirectory {\n  interface Data {\n    user: User;\n\n    tree: SidebarDirectory['tree'];\n\n    canCreate: boolean;\n\n    sidebarIcon: string;\n  }\n\n  interface Options extends SidebarTab.Options {\n    /**\n     * @defaultValue\n     * ```typescript\n     * `${this.entity.toLowerCase()}s`\n     * ```\n     */\n    id: string;\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * `templates/sidebar/${this.entity.toLowerCase()}-directory.html`\n     * ```\n     */\n    template: string;\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * `${this.entity}s Directory`\n     * ```\n     */\n    title: string;\n\n    /**\n     * @defaultValue `['name', 'img', 'thumb', 'permission', 'sort', 'folder']`\n     */\n    renderUpdateKeys: string[];\n\n    /**\n     * @defaultValue `'auto'`\n     */\n    height: number | 'auto';\n\n    /**\n     * @defaultValue `['ol.directory-list']`\n     */\n    scrollY: string[];\n\n    dragDrop: Array<\n      DragDrop.Options & {\n        /**\n         * @defaultValue `'.directory-item'`\n         */\n        dragSelector: string;\n\n        /**\n         * @defaultValue `'.directory-list'`\n         */\n        dropSelector: string;\n      }\n    >;\n\n    filters: Array<\n      SearchFilter.Options & {\n        /**\n         * @defaultValue `'input[name=\"search\"]'`\n         */\n        inputSelector: string;\n\n        /**\n         * @defaultValue `'.directory-list'`\n         */\n        contentSelector: string;\n      }\n    >;\n  }\n\n  interface RenderContext extends Application.RenderOptions {\n    action: string;\n\n    data: string;\n\n    entityType: string;\n  }\n\n  interface Tree {\n    root: boolean;\n\n    content: Entity[];\n\n    children: Folder[];\n  }\n}\n"
    ]
  