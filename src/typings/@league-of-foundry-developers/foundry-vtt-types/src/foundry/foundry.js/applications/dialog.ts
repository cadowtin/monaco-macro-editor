
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\dialog.d.ts",
      "/**\n * Create a modal dialog window displaying a title, a message, and a set of buttons which trigger callback functions.\n *\n * @example <caption>Constructing a custom dialog instance</caption>\n * ```typescript\n * let d = new Dialog({\n *  title: \"Test Dialog\",\n *  content: \"<p>You must choose either Option 1, or Option 2</p>\",\n *  buttons: {\n *   one: {\n *    icon: '<i class=\"fas fa-check\"></i>',\n *    label: \"Option One\",\n *    callback: () => console.log(\"Chose One\")\n *   },\n *   two: {\n *    icon: '<i class=\"fas fa-times\"></i>',\n *    label: \"Option Two\",\n *    callback: () => console.log(\"Chose Two\")\n *   }\n *  },\n *  default: \"two\",\n *  render: html => console.log(\"Register interactivity in the rendered dialog\"),\n *  close: html => console.log(\"This always is logged no matter which option is chosen\")\n * });\n * d.render(true);\n * ```\n * @typeParam Options - the type of the options object\n */\ndeclare class Dialog<Options extends Dialog.Options = Dialog.Options> extends Application<Options> {\n  /**\n   * @param data    - An object of dialog data which configures how the modal window is rendered\n   * @param options - Dialog rendering options, see {@link Application}\n   */\n  constructor(data: Dialog.Data, options?: Partial<Options>);\n\n  data: Dialog.Data;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * foundry.utils.mergeObject(super.defaultOptions, {\n   *   template: \"templates/hud/dialog.html\",\n   *   classes: [\"dialog\"],\n   *   width: 400,\n   *   jQuery: true\n   * })\n   * ```\n   */\n  static get defaultOptions(): Dialog.Options;\n\n  /**\n   * @override\n   */\n  static get title(): string;\n\n  /**\n   * @override\n   */\n  getData(options?: Application.RenderOptions): { content: string; buttons: Record<string, Dialog.Button> };\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle a left-mouse click on one of the dialog choice buttons\n   * @param event - The left-mouse click event\n   */\n  protected _onClickButton(event: MouseEvent): void;\n\n  /**\n   * Handle a keydown event while the dialog is active\n   * @param event - The keydown event\n   */\n  protected _onKeyDown(event: KeyboardEvent & { key: 'Escape' }): Promise<void>;\n  protected _onKeyDown(event: KeyboardEvent): void;\n\n  /**\n   * Submit the Dialog by selecting one of its buttons\n   * @param button - The configuration of the chosen button\n   */\n  protected submit(button: Dialog.Button): void;\n\n  /**\n   * @override\n   */\n  close(options?: Application.CloseOptions): Promise<void>;\n\n  /**\n   * A helper factory method to create simple confirmation dialog windows which consist of simple yes/no prompts.\n   * If you require more flexibility, a custom Dialog instance is preferred.\n   *\n   * @param title       - The confirmation window title\n   * @param content     - The confirmation message\n   * @param yes         - Callback function upon yes\n   * @param no          - Callback function upon no\n   * @param render      - A function to call when the dialog is rendered\n   * @param defaultYes  - Make \"yes\" the default choice?\n   *                      (default: `true`)\n   * @param rejectClose - Reject the Promise if the Dialog is closed without making a choice.\n   *                      (default: `false`)\n   * @param options     - Additional rendering options passed to the Dialog\n   *                      (default: `{}`)\n   *\n   * @returns A promise which resolves once the user makes a choice or closes the window\n   *\n   * @example\n   * ```typescript\n   * let d = Dialog.confirm({\n   *  title: \"A Yes or No Question\",\n   *  content: \"<p>Choose wisely.</p>\",\n   *  yes: () => console.log(\"You chose ... wisely\"),\n   *  no: () => console.log(\"You chose ... poorly\"),\n   *  defaultYes: false\n   * });\n   * ```\n   */\n  static confirm<Yes = true, No = false, RejectClose extends boolean = false>({\n    title,\n    content,\n    yes,\n    no,\n    render,\n    defaultYes,\n    rejectClose,\n    options\n  }?: {\n    title: string;\n    content: string;\n    yes?: (html: JQuery) => Yes;\n    no?: (html: JQuery) => No;\n    render?: (html: JQuery) => void;\n    defaultYes?: boolean;\n    rejectClose?: RejectClose;\n    options?: Partial<Dialog.Options> & { jQuery?: true };\n  }): Promise<RejectClose extends true ? Yes | No : Yes | No | null>;\n  static confirm<Yes = true, No = false, RejectClose extends boolean = false>({\n    title,\n    content,\n    yes,\n    no,\n    render,\n    defaultYes,\n    rejectClose,\n    options\n  }?: {\n    title: string;\n    content: string;\n    yes?: (html: HTMLElement) => Yes;\n    no?: (html: HTMLElement) => No;\n    render?: (html: HTMLElement) => void;\n    defaultYes?: boolean;\n    rejectClose?: RejectClose;\n    options: Partial<Dialog.Options> & { jQuery: false };\n  }): Promise<RejectClose extends true ? Yes | No : Yes | No | null>;\n  static confirm<Yes = true, No = false, RejectClose extends boolean = false>({\n    title,\n    content,\n    yes,\n    no,\n    render,\n    defaultYes,\n    rejectClose,\n    options\n  }?: {\n    title: string;\n    content: string;\n    yes?: (html: JQuery | HTMLElement) => Yes;\n    no?: (html: JQuery | HTMLElement) => No;\n    render?: (html: JQuery | HTMLElement) => void;\n    defaultYes?: boolean;\n    rejectClose?: RejectClose;\n    options: Partial<Dialog.Options>;\n  }): Promise<RejectClose extends true ? Yes | No : Yes | No | null>;\n\n  /**\n   * A helper factory method to display a basic \"prompt\" style Dialog with a single button\n   * @param title    - The confirmation window title\n   * @param content  - The confirmation message\n   * @param label    - The confirmation button text\n   * @param callback - A callback function to fire when the button is clicked\n   * @param render   - A function that fires after the dialog is rendered\n   * @param options  - Additional rendering options\n   * @returns A promise which resolves when clicked, or rejects if closed\n   */\n  static prompt<T>({\n    title,\n    content,\n    label,\n    callback,\n    render,\n    options\n  }?: {\n    title: string;\n    content: string;\n    label?: string;\n    callback: (html: JQuery) => T;\n    render?: (html: JQuery) => void;\n    options?: Partial<Dialog.Options> & { jQuery?: true };\n  }): Promise<T>;\n  static prompt<T>({\n    title,\n    content,\n    label,\n    callback,\n    render,\n    options\n  }?: {\n    title: string;\n    content: string;\n    label?: string;\n    callback: (html: HTMLElement) => T;\n    render?: (html: HTMLElement) => void;\n    options: Partial<Dialog.Options> & { jQuery: false };\n  }): Promise<T>;\n  static prompt<T>({\n    title,\n    content,\n    label,\n    callback,\n    render,\n    options\n  }?: {\n    title: string;\n    content: string;\n    label?: string;\n    callback: (html: JQuery | HTMLElement) => T;\n    render?: (html: JQuery | HTMLElement) => void;\n    options: Partial<Dialog.Options>;\n  }): Promise<T>;\n}\n\ndeclare namespace Dialog {\n  interface Button<T = unknown> {\n    /**\n     * A Font Awesome icon for the button\n     */\n    icon?: string;\n\n    /**\n     * The label for the button\n     */\n    label?: string;\n\n    /**\n     * A callback function that fires when the button is clicked\n     */\n    callback?: (html: JQuery | HTMLElement) => T;\n  }\n\n  interface Data {\n    /**\n     * The window title\n     */\n    title: string;\n\n    /**\n     * HTML content\n     */\n    content: string;\n\n    /**\n     * A callback function invoked when the dialog is rendered\n     */\n    render?: (element: JQuery | HTMLElement) => void;\n\n    /**\n     * Common callback operations to perform when the dialog is closed\n     */\n    close?: (element: JQuery | HTMLElement) => void;\n\n    /**\n     * The buttons which are displayed as action choices for the dialog\n     */\n    buttons: Record<string, Button>;\n\n    /**\n     * The name of the default button which should be triggered on Enter\n     */\n    default: string;\n  }\n\n  interface Options extends Application.Options {\n    /**\n     * @defaultValue `400`\n     */\n    width: number;\n\n    /**\n     * @defaultValue `['dialog']`\n     */\n    classes: string[];\n\n    /**\n     * @defaultValue `'templates/hud/dialog.html'`\n     */\n    template: string;\n\n    /**\n     * Whether to provide jQuery objects to callback functions (if true) or plain\n     * HTMLElement instances (if false). This is currently true by default but in the\n     * future will become false by default.\n     * @defaultValue `true`\n     */\n    jQuery: boolean;\n  }\n}\n"
    ]
  