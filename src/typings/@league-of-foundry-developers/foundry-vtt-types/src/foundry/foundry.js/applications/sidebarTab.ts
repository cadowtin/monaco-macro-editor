
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTab.d.ts",
      "/**\n * An abstract pattern followed by the different tabs of the sidebar\n */\ndeclare abstract class SidebarTab<P extends SidebarTab.Options = SidebarTab.Options> extends Application<P> {\n  /**\n   * The base name of this sidebar tab\n   */\n  tabName: string;\n\n  /**\n   * A reference to the pop-out variant of this SidebarTab, if one exists\n   */\n  protected _popout: SidebarTab | null;\n\n  /**\n   * Denote whether or not this is the original version of the sidebar tab, or a pop-out variant\n   */\n  protected _original: SidebarTab | null;\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): SidebarTab.Options;\n\n  /**\n   * @override\n   */\n  protected _renderInner(data: object): Promise<JQuery>;\n\n  /**\n   * @override\n   */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * Activate this SidebarTab, switching focus to it\n   */\n  activate(): void;\n\n  /**\n   * @override\n   */\n  close(options?: Application.CloseOptions): Promise<void>;\n\n  /**\n   * Create a second instance of this SidebarTab class which represents a singleton popped-out container\n   * @returns The popped out sidebar tab instance\n   */\n  createPopout(): SidebarTab;\n\n  /**\n   * Render the SidebarTab as a pop-out container\n   */\n  renderPopout(): void;\n\n  /**\n   * Handle lazy loading for sidebar images to only load them once they become observed\n   */\n  protected _onLazyLoadImage(entries: IntersectionObserverEntry[], observer: IntersectionObserver): void;\n}\n\ndeclare namespace SidebarTab {\n  interface Options extends Application.Options {\n    /**\n     * @defaultValue `false`\n     */\n    popOut: boolean;\n\n    /**\n     * @defaultValue `300`\n     */\n    width: number;\n\n    /**\n     * @defaultValue `'SidebarTab'`\n     */\n    baseApplication: string;\n  }\n}\n"
    ]
  