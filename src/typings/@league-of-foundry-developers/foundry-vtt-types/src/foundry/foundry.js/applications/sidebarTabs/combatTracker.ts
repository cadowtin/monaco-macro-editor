
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\combatTracker.d.ts",
      "// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The combat and turn order tracker tab\n */\ndeclare class CombatTracker extends SidebarTab<CombatTracker.Options> {\n  /**\n   * Record a reference to the currently highlighted Token\n   * @defaultValue `null`\n   */\n  protected _highlighted: Token | null;\n\n  /**\n   * Record the currently tracked Combat encounter\n   * @defaultValue `null`\n   */\n  combat: Combat | null;\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): CombatTracker.Options;\n\n  /**\n   * @override\n   */\n  createPopout(): CombatTracker;\n\n  /**\n   * Initialize the combat tracker to display a specific combat encounter.\n   * If no encounter is provided, the tracker will be initialized with the first encounter in the viewed scene.\n   * @param combat - The combat encounter to initialize\n   *                 (default: `null`)\n   * @param render - Whether to re-render the sidebar after initialization\n   *                 (default: `true`)\n   */\n  initialize({ combat, render }?: { combat?: Combat | null; render?: boolean }): void;\n\n  /**\n   * Scroll the combat log container to ensure the current Combatant turn is centered vertically\n   */\n  scrollToTurn(): void;\n\n  /**\n   * @override\n   */\n  getData(options?: Application.RenderOptions): Promise<CombatTracker.Data>;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle new Combat creation request\n   */\n  protected _onCombatCreate(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle a Combat deletion request\n   * @remarks This is never called\n   */\n  protected _onCombatDelete(event: Event): Promise<void>;\n\n  /**\n   * Handle a Combat cycle request\n   */\n  protected _onCombatCycle(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle click events on Combat control buttons\n   * @param event - The originating mousedown event\n   */\n  protected _onCombatControl(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle a Combatant control toggle\n   * @param event - The originating mousedown event\n   */\n  protected _onCombatantControl(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle toggling the defeated status effect on a combatant Token\n   * @param c - The combatant data being modified\n   */\n  protected _onToggleDefeatedStatus(c: Combat.Combatant): Promise<void>;\n\n  /**\n   * Handle mouse-down event on a combatant name in the tracker\n   * @param event - The originating mousedown event\n   * @returns A Promise that resolves once the pan is complete\n   */\n  protected _onCombatantMouseDown(event: JQuery.ClickEvent): Promise<void> | void;\n\n  /**\n   * Handle mouse-hover events on a combatant in the tracker\n   */\n  protected _onCombatantHover(event: JQuery.MouseEnterEvent): void;\n\n  /**\n   * Handle mouse-unhover events for a combatant in the tracker\n   */\n  protected _onCombatantHoverOut(event: JQuery.MouseLeaveEvent): void;\n\n  /**\n   * Default folder context actions\n   */\n  protected _contextMenu(html: JQuery): void;\n\n  /**\n   * Get the sidebar directory entry context options\n   * @returns The sidebar entry context options\n   */\n  protected _getEntryContextOptions(): ContextMenu.Item[];\n\n  /**\n   * Display a dialog which prompts the user to enter a new initiative value for a Combatant\n   */\n  protected _onConfigureCombatant(li: JQuery): void;\n}\n\ndeclare namespace CombatTracker {\n  type Data = {\n    user: User;\n    started: boolean;\n    settings: Combat.ConfigValue;\n  } & (\n    | {\n        combats: [];\n        currentIndex: -1;\n        combatCount: 0;\n        hasCombat: false;\n        combat: null;\n        turns: [];\n        previousId: null;\n        nextId: null;\n        control: false;\n      }\n    | {\n        combats: Combat[];\n        currentIndex: number;\n        combatCount: number;\n        hasCombat: true;\n        combat: Combat;\n        turns: Turn[];\n        previousId: string | null;\n        nextId: string | null;\n        round: number;\n        turn: number;\n        control: boolean;\n      }\n  );\n\n  interface Options extends SidebarTab.Options {\n    /**\n     * @defaultValue `'combat'`\n     */\n    id: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/combat-tracker.html'`\n     */\n    template: string;\n\n    /**\n     * @defaultValue `'Combat Tracker'`\n     */\n    title: string;\n\n    /**\n     * @defaultValue `['.directory-list']`\n     */\n    scrollY: string[];\n  }\n\n  type Turn = foundry.utils.Duplicated<Combat.Combatant> & {\n    effects: Set<unknown>;\n    active: boolean;\n    css: string;\n    hasRolled: boolean;\n    hasResource: boolean;\n  };\n}\n"
    ]
  