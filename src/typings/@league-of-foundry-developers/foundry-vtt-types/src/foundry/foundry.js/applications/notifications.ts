
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\notifications.d.ts",
      "/**\n * A common framework for displaying notifications to the client.\n * Submitted notifications are added to a queue, and up to 3 notifications are displayed at once.\n * Each notification is displayed for 5 seconds at which point further notifications are pulled from the queue.\n *\n * @example\n * ```typescript\n * ui.notifications.info(\"This is an info message\");\n * ui.notifications.warn(\"This is a warning message\");\n * ui.notifications.error(\"This is an error message\");\n * ui.notifications.info(\"This is a 4th message which will not be shown until the first info message is done\");\n * ```\n */\ndeclare class Notifications extends Application {\n  /** Notifications which are currently displayed */\n  active: JQuery[];\n\n  /** Submitted notifications which are queued for display */\n  queue: Notifications.Notification[];\n\n  /** @override */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /**\n   * Initialize the Notifications system by displaying any system-generated messages which were passed from the server.\n   */\n  initialize(): void;\n\n  /** @override */\n  protected _renderInner(data: object): JQuery;\n\n  /** @override */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * Push a new notification into the queue\n   * @param message   - The content of the notification message\n   * @param type      - The type of notification, currently \"info\", \"warning\", and \"error\" are supported\n   *                    (default: `'info'`)\n   * @param permanent - Whether the notification should be permanently displayed unless otherwise dismissed\n   *                    (default: `false`)\n   */\n  notify(message: string, type?: 'info' | 'warning' | 'error', { permanent }?: { permanent?: boolean }): void;\n\n  /**\n   * Display a notification with the \"info\" type\n   * @param message - The content of the notification message\n   * @param options - Notification options passed to the notify function\n   */\n  info(message: string, options?: { permanent?: boolean }): void;\n\n  /**\n   * Display a notification with the \"warning\" type\n   * @param message - The content of the notification message\n   * @param options - Notification options passed to the notify function\n   */\n  warn(message: string, options?: { permanent?: boolean }): void;\n\n  /**\n   * Display a notification with the \"error\" type\n   * @param message - The content of the notification message\n   * @param options - Notification options passed to the notify function\n   */\n  error(message: string, options?: { permanent?: boolean }): void;\n\n  /**\n   * Retrieve a pending notification from the queue and display it\n   */\n  protected fetch(): void;\n}\n\ndeclare namespace Notifications {\n  interface Notification {\n    message: string;\n    type: 'info' | 'warning' | 'error';\n    timestamp: number;\n    permanent: boolean;\n  }\n}\n"
    ]
  