
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sceneControls.d.ts",
      "declare interface SceneControl {\n  activeTool: string;\n  icon: string;\n  layer: string;\n  name: string;\n  title: string;\n  tools: SceneControlTool[];\n  visible: boolean;\n}\n\ndeclare interface SceneControlTool {\n  active?: boolean;\n  button?: boolean;\n  icon: string;\n  name: string;\n  onClick?: () => void;\n  title: string;\n  toggle?: boolean;\n  visible?: boolean;\n}\n\n/**\n * Scene controls navigation menu\n */\ndeclare class SceneControls extends Application {\n  /**\n   * The name of the active Scene Control toolset\n   * @defaultValue `\"token\"`\n   */\n  activeControl: string;\n\n  /**\n   * The Array of Scene Control buttons which are currently rendered\n   */\n  controls: SceneControl[];\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.defaultOptions, {\n   *   width: 100,\n   *   id: \"controls\",\n   *   template: \"templates/hud/controls.html\",\n   *   popOut: false,\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /**\n   * Return the active control set\n   */\n  get control(): SceneControl | null;\n\n  /**\n   * Return the name of the active tool within the active control set\n   */\n  get activeTool(): string | null;\n\n  /**\n   * Return the actively controlled tool\n   */\n  get tool(): SceneControlTool | null;\n\n  /**\n   * A convenience reference for whether the currently active tool is a Ruler\n   */\n  get isRuler(): boolean;\n\n  /**\n   * Initialize the Scene Controls by obtaining the set of control buttons and rendering the HTML\n   * @param control - An optional control set to set as active\n   * @param layer   - An optional layer name to target as the active control\n   * @param tool    - A specific named tool to set as active for the palette\n   */\n  initialize({ control, layer, tool }?: { control?: string; layer?: string; tool?: string }): void;\n\n  /** @override */\n  getData(options?: Application.RenderOptions): {\n    active: boolean;\n    cssClass: '' | 'disabled';\n    controls: SceneControl[];\n  };\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle click events on a Control set\n   * @param event - A click event on a tool control\n   */\n  protected _onClickLayer(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle click events on Tool controls\n   * @param event - A click event on a tool control\n   */\n  protected _onClickTool(event: JQuery.ClickEvent): void;\n\n  /**\n   * Get the set of Control sets and tools that are rendered as the Scene Controls.\n   * These controls may be extended using the \"getSceneControlButtons\" Hook.\n   */\n  protected _getControlButtons(): SceneControl[];\n}\n"
    ]
  