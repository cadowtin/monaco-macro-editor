
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\basePlaceableHUDs\\tokenHUD.d.ts",
      "/**\n * An implementation of the PlaceableHUD base class which renders a heads-up-display interface for Token objects.\n * This interface provides controls for visibility, attribute bars, elevation, status effects, and more.\n */\ndeclare class TokenHUD extends BasePlaceableHUD<Token> {\n  /**\n   * Track whether the status effects control palette is currently expanded or hidden\n   * @defaultValue `false`\n   */\n  protected _statusEffects: boolean;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.defaultOptions, {\n   *   id: \"token-hud\",\n   *   template: \"templates/hud/token-hud.html\"\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /** @override */\n  bind(object: Token): void;\n\n  /**\n   * Refresh the currently active state of all status effect icons in the Token HUD selector.\n   */\n  refreshStatusIcons(): void;\n\n  /** @override */\n  setPosition(_position?: Partial<Application.Position>): void;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.getData(), {\n   *   canConfigure: game.user.can(\"TOKEN_CONFIGURE\"),\n   *   canToggleCombat: ui.combat !== null,\n   *   displayBar1: bar1 && (bar1.type !== \"none\"),\n   *   bar1Data: bar1,\n   *   displayBar2: bar2 && (bar2.type !== \"none\"),\n   *   bar2Data: bar2,\n   *   visibilityClass: data.hidden ? \"active\" : \"\",\n   *   effectsClass: this._statusEffects ? \"active\" : \"\",\n   *   combatClass: this.object.inCombat ? \"active\" : \"\",\n   *   targetClass: this.object.targeted.has(game.user) ? \"active\" : \"\",\n   *   statusEffects: this._getStatusEffectChoices(data)\n   * });\n   * ```\n   */\n  getData(options?: Application.RenderOptions): ReturnType<BasePlaceableHUD<Token>['getData']> & {\n    canConfigure: boolean;\n    canToggleCombat: boolean;\n    displayBar1: boolean;\n    bar1Data: ReturnType<Token['getBarAttribute']>;\n    displayBar2: boolean;\n    bar2Data: ReturnType<Token['getBarAttribute']>;\n    visibilityClass: 'active' | '';\n    effectsClass: 'active' | '';\n    combatClass: 'active' | '';\n    targetClass: 'active' | '';\n    statusEffects: ReturnType<TokenHUD['_getStatusEffectChoices']>;\n  };\n\n  /**\n   * Get an array of icon paths which represent valid status effect choices\n   */\n  protected _getStatusEffectChoices(): Partial<\n    Record<\n      string,\n      {\n        id: string;\n        isActive: boolean;\n        isOverlay: boolean;\n        src: string;\n        title: string;\n      }\n    >\n  >;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle initial click to focus an attribute update field\n   */\n  protected _onAttributeClick(event: JQuery.ClickEvent): void;\n\n  /**\n   * Force field handling on an Enter keypress even if the value of the field did not change.\n   * This is important to suppose use cases with negative number values.\n   * @param event - The originating keydown event\n   */\n  protected _onAttributeKeydown(event: JQuery.KeyDownEvent): void;\n\n  /**\n   * Handle attribute bar update\n   */\n  protected _onAttributeUpdate(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Toggle Token combat state\n   */\n  protected _onToggleCombat(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle Token configuration button click\n   */\n  protected _onTokenConfig(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle left-click events to toggle the displayed state of the status effect selection palette\n   */\n  protected _onClickStatusEffects(event: JQuery.ClickEvent): void;\n\n  /**\n   * Assign css selectors for the active state of the status effects selection palette\n   */\n  protected _toggleStatusEffects(active: boolean): void;\n\n  /**\n   * Handle toggling a token status effect icon\n   * @param overlay - (default: `false`)\n   */\n  protected _onToggleEffect(\n    event: JQuery.ClickEvent | JQuery.ContextMenuEvent,\n    { overlay }?: { overlay?: boolean }\n  ): Promise<boolean>;\n\n  /**\n   * Handle toggling the target state for this Token\n   */\n  protected _onToggleTarget(event: JQuery.ClickEvent): void;\n}\n"
    ]
  