
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\journalSheet.d.ts",
      "// TODO: Update this class once the `DocumentSheet` class has been updated to use `foundry.abstract.Document`s!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The JournalEntry Configuration Sheet\n * @typeParam P - the type of the options object\n * @typeParam D - The data structure used to render the handlebars template.\n * @typeParam O - the type of the Entity which should be managed by this form sheet\n */\ndeclare class JournalSheet<\n  P extends JournalSheet.Options = JournalSheet.Options,\n  D extends object = DocumentSheet.Data<JournalEntry>,\n  O extends JournalEntry = D extends DocumentSheet.Data<infer T> ? T : JournalEntry\n> extends DocumentSheet<P, D, O> {\n  /**\n   * @param entity  - The JournalEntry instance which is being edited\n   * @param options - JournalSheet options\n   */\n  constructor(entity: O, options?: Partial<P>);\n\n  protected _sheetMode: JournalSheet.SheetMode | null;\n\n  /** @override */\n  static get defaultOptions(): JournalSheet.Options;\n\n  /** @override */\n  get id(): string;\n\n  /** @override */\n  get template(): string;\n\n  /** @override */\n  get title(): string;\n\n  /** @override */\n  getData(options?: Application.RenderOptions): Promise<D> | D;\n\n  /**\n   * Guess the default view mode for the sheet based on the player's permissions to the Entry\n   */\n  protected _inferDefaultMode(): JournalSheet.SheetMode | null;\n\n  /** @override */\n  protected _render(force?: boolean, options?: JournalSheet.RenderOptions): Promise<void>;\n\n  /** @override */\n  protected _getHeaderButtons(): Application.HeaderButton[];\n\n  /** @override */\n  protected _updateObject(event: Event, formData: object): Promise<O>;\n\n  /**\n   * Handle requests to switch the rendered mode of the Journal Entry sheet\n   * Save the form before triggering the show request, in case content has changed\n   */\n  protected _onSwapMode(event: Event, mode: JournalSheet.SheetMode): Promise<void>;\n\n  /**\n   * Handle requests to show the referenced Journal Entry to other Users\n   * Save the form before triggering the show request, in case content has changed\n   */\n  protected _onShowPlayers(event: Event): Promise<void>;\n}\n\ndeclare namespace JournalSheet {\n  interface RenderOptions extends Application.RenderOptions {\n    sheetMode?: SheetMode | null;\n  }\n\n  interface Options extends DocumentSheet.Options {\n    /**\n     * @defaultValue `['sheet', 'journal-sheet']`\n     */\n    classes: string[];\n    /**\n     * @defaultValue `720`\n     */\n    width: number;\n    /**\n     * @defaultValue `800`\n     */\n    height: number;\n    /**\n     * @defaultValue `true`\n     */\n    resizable: boolean;\n    /**\n     * @defaultValue `false`\n     */\n    closeOnSubmit: boolean;\n    /**\n     * @defaultValue `true`\n     */\n    submitOnClose: boolean;\n    /**\n     * @defaultValue {@link ENTITY_PERMISSIONS.NONE}\n     */\n    viewPermission: foundry.CONST.EntityPermission;\n    sheetMode?: SheetMode | null;\n  }\n\n  interface Data<O extends JournalEntry = JournalEntry> extends DocumentSheet.Data<O> {\n    image: string;\n    folders: Folder[];\n  }\n\n  type SheetMode = 'text' | 'image';\n}\n"
    ]
  