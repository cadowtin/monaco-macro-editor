
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\handlebarsHelpers.d.ts",
      "/* -------------------------------------------- */\n/*  Handlebars Template Helpers                 */\n/* -------------------------------------------- */\n\n/**\n * A collection of Handlebars template helpers which can be used within HTML templates.\n */\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\ndeclare class HandlebarsHelpers {\n  /**\n   * For checkboxes, if the value of the checkbox is true, add the \"checked\" property, otherwise add nothing.\n   */\n  static checked(value: any): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Construct an editor element for rich text editing with TinyMCE\n   */\n  static editor(options: HandlebarsHelpers.EditorOptions): Handlebars.SafeString;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Render a file-picker button linked to an <input> field\n   */\n  static filePicker(options: object): Handlebars.SafeString | string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Translate a provided string key by using the loaded dictionary of localization strings.\n   *\n   * @example <caption>Translate a provided localization string, optionally including formatting parameters</caption>\n   * ```handlebars\n   * <label>{{localize \"ACTOR.Create\"}}</label> <!-- \"Create Actor\" -->\n   * <label>{{localize \"CHAT.InvalidCommand\", command=foo}}</label> <!-- \"foo is not a valid chat message command.\" -->\n   * ```\n   */\n  static localize(value: string, options: Record<string, any>): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A string formatting helper to display a number with a certain fixed number of decimals and an explicit sign.\n   */\n  static numberFormat(value: any, options: HandlebarsHelpers.NumberFormatOptions): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A helper to create a set of radio checkbox input elements in a named set.\n   * The provided keys are the possible radio values while the provided values are human readable labels.\n   *\n   * @param name     - The radio checkbox field name\n   * @param choices  - A mapping of radio checkbox values to human readable labels\n   * @param checked  - Which key is currently checked?\n   * @param localize - Pass each label through string localization?\n   *\n   * @example <caption>The provided input data</caption>\n   * ```typescript\n   * let groupName = \"importantChoice\";\n   * let choices = {a: \"Choice A\", b: \"Choice B\"};\n   * let chosen = \"a\";\n   * ```\n   *\n   * @example <caption>The template HTML structure</caption>\n   * ```handlebars\n   * <div class=\"form-group\">\n   *   <label>Radio Group Label</label>\n   *   <div class=\"form-fields\">\n   *     {{radioBoxes groupName choices checked=chosen localize=true}}\n   *   </div>\n   * </div>\n   * ```\n   */\n  static radioBoxes(\n    name: string,\n    choices: Record<string, string>,\n    options: HandlebarsHelpers.RadioBoxesOptions\n  ): Handlebars.SafeString;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A helper to assign an <option> within a <select> block as selected based on its value\n   * Escape the string as handlebars would, then escape any regexp characters in it\n   */\n  static select(selected: string, { fn }: { fn: Handlebars.TemplateDelegate }): Handlebars.SafeString;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A helper to create a set of <option> elements in a <select> block based on a provided dictionary.\n   * The provided keys are the option values while the provided values are human readable labels.\n   * This helper supports both single-select as well as multi-select input fields.\n   *\n   * @param choices  - A mapping of radio checkbox values to human readable labels\n   * @param selected - Which key or array of keys that are currently selected?\n   * @param localize - Pass each label through string localization?\n   *\n   * @example <caption>The provided input data</caption>\n   * ```typescript\n   * let choices = {a: \"Choice A\", b: \"Choice B\"};\n   * let value = \"a\";\n   * ```\n   *\n   * @example <caption>The template HTML structure</caption>\n   * ```handlebars\n   * <select name=\"importantChoice\">\n   *   {{selectOptions choices selected=value localize=true}}\n   * </select>\n   * ```\n   */\n  static selectOptions(\n    choices: Record<string, string>,\n    options: HandlebarsHelpers.SelectOptionsOptions\n  ): Handlebars.SafeString;\n}\n\ndeclare namespace HandlebarsHelpers {\n  interface EditorOptions {\n    hash: {\n      button?: boolean;\n\n      /**\n       * @defaultValue `''`\n       */\n      content?: string;\n\n      editable?: boolean;\n\n      owner?: boolean;\n\n      target: string;\n    };\n  }\n\n  interface NumberFormatOptions {\n    hash: {\n      /**\n       * @defaultValue `0`\n       */\n      decimals?: number;\n\n      /**\n       * @defaultValue `false`\n       */\n      sign?: boolean;\n    };\n  }\n\n  interface RadioBoxesOptions {\n    hash: {\n      /**\n       * @defaultValue `null`\n       */\n      checked?: string;\n\n      /**\n       * @defaultValue `false`\n       */\n      localize?: boolean;\n    };\n  }\n\n  interface SelectOptionsOptions {\n    hash: {\n      /**\n       * @defaultValue `null`\n       */\n      blank?: string;\n\n      /**\n       * @defaultValue `false`\n       */\n      localize?: boolean;\n\n      /**\n       * @defaultValue `null`\n       */\n      selected?: string | string[];\n    };\n  }\n}\n"
    ]
  