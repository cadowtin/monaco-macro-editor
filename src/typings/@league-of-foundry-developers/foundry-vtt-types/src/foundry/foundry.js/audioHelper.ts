
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\audioHelper.d.ts",
      "/**\n * A helper class to provide common functionality for working with HTML5 audio and Howler instances\n * A singleton instance of this class is available as `game.audio`\n *\n * Audio playback in Foundry VTT is managed by Howler.js (https://howlerjs.com/). Several methods and\n * attributes in this API return :class:`Howl` instances. See the Howler documentation for details\n * and example usage of the Howl API.\n */\ndeclare class AudioHelper {\n  constructor();\n\n  /**\n   * The set of Howl instances which have been created for different audio paths\n   * @defaultValue `{}`\n   */\n  sounds: Record<string, AudioHelper.Sound>;\n\n  /**\n   * A user gesture must be registered before audio can be played.\n   * This Array contains the Howl instances which are requested for playback prior to a gesture.\n   * Once a gesture is observed, we begin playing all elements of this Array.\n   * @defaultValue `[]`\n   */\n  pending: any[];\n\n  /**\n   * A flag for whether video playback is currently locked by awaiting a user gesture\n   * @defaultValue `false`\n   */\n  locked: boolean;\n\n  /**\n   * Audio Context singleton used for analysing audio levels of each stream\n   * Only created if necessary to listen to audio streams.\n   * @defaultValue `null`\n   */\n  protected _audioContext: AudioContext | null;\n\n  /**\n   * Map of all streams that we listen to for determining the decibel levels.\n   * Used for analyzing audio levels of each stream.\n   */\n  protected _analyserStreams: Record<string, AudioHelper.AnalyserStream>;\n\n  /**\n   * Interval ID as returned by setInterval for analysing the volume of streams\n   * When set to 0, means no timer is set.\n   * @defaultValue `0`\n   */\n  protected _analyserInterval: number;\n\n  /**\n   * Fast Fourrier Transform Array.\n   * Used for analysing the decibel level of streams. The array is allocated only once\n   * then filled by the analyser repeatedly. We only generate it when we need to listen to\n   * a stream's level, so we initialize it to null.\n   * @defaultValue `null`\n   */\n  protected _fftArray: Float32Array[] | null;\n\n  /**\n   * The Native interval for the AudioHelper to analyse audio levels from streams\n   * Any interval passed to startLevelReports() would need to be a multiple of this value.\n   * Defaults to 50ms.\n   * @defaultValue `50`\n   */\n  levelAnalyserNativeInterval: number;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Register client-level settings for global volume overrides\n   */\n  static registerSettings(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a Howl instance for a given audio source URL\n   * @param preload  - (default: `false`)\n   * @param autoplay - (default: `false`)\n   * @param html5    - (default: `false`)\n   * @param volume   - (default: `0.0`)\n   * @param loop     - (default: `false`)\n   */\n  create({\n    src,\n    preload,\n    autoplay,\n    html5,\n    volume,\n    loop\n  }?: {\n    src: string;\n    preload?: boolean;\n    autoplay?: boolean;\n    html5?: boolean;\n    volume?: number;\n    loop?: boolean;\n  }): any;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Test whether a source file has a supported audio extension type\n   * @param src - A requested audio source path\n   * @returns Does the filename end with a valid audio extension?\n   */\n  static hasAudioExtension(src: string): boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Play a single audio effect by it's source path and Howl ID\n   */\n  play(src: string, id: number): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Register an event listener to await the first mousemove gesture and begin\n   * playback once observed\n   */\n  awaitFirstGesture(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle the first observed user gesture\n   * @param event - The mouse-move event which enables playback\n   */\n  protected _onFirstGesture(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  preload(data: any): void;\n\n  /* -------------------------------------------- */\n  /*  Socket Listeners and Handlers               */\n  /* -------------------------------------------- */\n\n  /**\n   * Open socket listeners which transact ChatMessage data\n   */\n  protected static socketListeners(socket: any): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Play a one-off sound effect which is not part of a Playlist\n   *\n   * @param data     - An object configuring the audio data to play\n   * @param src      - The audio source file path, either a public URL or a local path relative to the public directory\n   *                   (default: `null`)\n   * @param volume   - The volume level at which to play the audio, between 0 and 1\n   *                   (default: `1.0`)\n   * @param autoplay - Begin playback of the audio effect immediately once it is loaded.\n   *                   (default: `true`)\n   * @param loop     - Loop the audio effect and continue playing it until it is manually stopped.\n   *                   (default: `false`)\n   * @param push     - Push the audio sound effect to other connected clients?\n   *                   (default: `false`)\n   *\n   * @returns A Howl instance which controls audio playback.\n   *\n   * @example\n   * ```typescript\n   * // Play the sound of a locked door for all players\n   * AudioHelper.play({src: \"sounds/lock.wav\", volume: 0.8, autoplay: true, loop: false}, true);\n   * ```\n   */\n  static play(\n    data: {\n      /**\n       * The audio source file path, either a public URL or a local path relative to the public directory\n       * @defaultValue `null`\n       */\n      src: string;\n\n      /**\n       * The volume level at which to play the audio, between 0 and 1\n       * @defaultValue `1.0`\n       */\n      volume: number;\n\n      /**\n       * Begin playback of the audio effect immediately once it is loaded.\n       * @defaultValue `true`\n       */\n      autoplay: boolean;\n\n      /**\n       * Push the audio sound effect to other connected clients?\n       * @defaultValue `false`\n       */\n      loop: boolean;\n    },\n    push: boolean\n  ): any;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a Howl object and load it to be ready for later playback\n   * @param data - The audio data to preload\n   */\n  static preload(data: object): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Returns the volume value based on a range input volume control's position.\n   * This is using an exponential approximation of the logarithmic nature of audio level perception\n   * @param value - Value between [0, 1] of the range input\n   * @param order - the exponent of the curve\n   *                (default: `1.5`)\n   */\n  static inputToVolume(control: number | string, order?: number): number;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Counterpart to inputToVolume()\n   * Returns the input range value based on a volume\n   * @param volume - Value between [0, 1] of the volume level\n   * @param order - the exponent of the curve\n   *                (default: `1.5`)\n   */\n  static volumeToInput(volume: number, order?: number): number;\n\n  /* -------------------------------------------- */\n  /*  Audio Stream Analysis                       */\n  /* -------------------------------------------- */\n\n  /**\n   * Returns a singleton AudioContext if one can be created.\n   * An audio context may not be available due to limited resources or browser compatibility\n   * in which case null will be returned\n   *\n   * @returns A singleton AudioContext or null if one is not available\n   */\n  getAudioContext(): AudioContext | null;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Registers a stream for periodic reports of audio levels.\n   * Once added, the callback will be called with the maximum decibel level of\n   * the audio tracks in that stream since the last time the event was fired.\n   * The interval needs to be a multiple of `AudioHelper.levelAnalyserNativeInterval` which defaults at 50ms\n   *\n   * @param id        - An id to assign to this report. Can be used to stop reports\n   * @param stream    - The MediaStream instance to report activity on.\n   * @param callback  - The callback function to call with the decibel level.\n   * @param interval  - The interval at which to produce reports.\n   *                    (default: `50`)\n   * @param smoothing - The smoothingTimeConstant to set on the audio analyser.\n   *                    Refer to AudioAnalyser API docs.\n   *                    (default: `0.1`)\n   * @returns Returns whether or not listening to the stream was successful\n   */\n  startLevelReports(\n    id: string,\n    stream: MediaStream,\n    callback: (maxDecibel: number, fftArray: Float32Array) => void,\n    interval?: number,\n    smoothing?: number\n  ): boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Stop sending audio level reports\n   * This stops listening to a stream and stops sending reports.\n   * If we aren't listening to any more streams, cancel the global analyser timer.\n   * @param id - The id of the reports that passed to startLevelReports.\n   */\n  stopLevelReports(id: string): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Ensures the global analyser timer is started\n   *\n   * We create only one timer that runs every 50ms and only create it if needed, this is meant to optimize things\n   * and avoid having multiple timers running if we want to analyse multiple streams at the same time.\n   * I don't know if it actually helps much with performance but it's expected that limiting the number of timers\n   * running at the same time is good practice and with JS itself, there's a potential for a timer congestion\n   * phenomenon if too many are created.\n   */\n  protected _ensureAnalyserTimer(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Cancel the global analyser timer\n   * If the timer is running and has become unnecessary, stops it.\n   */\n  protected _cancelAnalyserTimer(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Capture audio level for all speakers and emit a webrtcVolumes custom event with all the volume levels\n   * detected since the last emit.\n   * The event's detail is in the form of `{userId: decibelLevel}`\n   */\n  protected _emitVolumes(): void;\n}\n\ndeclare namespace AudioHelper {\n  interface AnalyserStream {\n    stream: MediaStream;\n    analyser: AnalyserNode;\n    interval: number;\n    callback: (maxDecibel: number) => void;\n\n    /**\n     * Used as a counter of 50ms increments in case the interval is more than 50\n     * @defaultValue `0`\n     */\n    _lastEmit: number;\n  }\n\n  interface Sound {\n    howl: any;\n    loaded: boolean;\n    ids: [];\n  }\n}\n"
    ]
  