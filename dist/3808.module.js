(self.webpackChunkmonaco_macro=self.webpackChunkmonaco_macro||[]).push([[3808],{87971:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\index.d.ts","import 'jquery';\nimport 'handlebars';\nimport 'pixi.js';\nimport './src';\n"]},10115:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\abstract\\backend.mjs.d.ts","import { BaseUser } from '../documents.mjs';\nimport { AnyDocumentData } from './data.mjs';\nimport Document from './document.mjs';\n\n/**\n * An interface shared by both the client and server-side which defines how creation, update, and deletion operations are transacted.\n */\ndeclare abstract class DatabaseBackend {\n  /**\n   * Retrieve Documents based on provided query parameters\n   * @param documentClass - The Document definition\n   * @param request       - The requested operation\n   * @param user          - The requesting User\n   * @returns The created Document instances\n   */\n  get<T extends Document<any, any>>(documentClass: ConstructorOf<T>, request: Request, user: BaseUser): T[];\n\n  /**\n   * Validate the arguments passed to the get operation\n   * @param query   - A document search query to execute\n   *                  (default: `{}`)\n   * @param options - Operation options\n   *                  (default: `{}`)\n   * @param pack    - A Compendium pack identifier\n   */\n  protected _getArgs({ query, options, pack }?: Request): { query: object; options: RequestOptions; pack?: string };\n\n  /**\n   * Get primary Document instances\n   */\n  protected abstract _getDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    query: Request,\n    options: RequestOptions,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Get embedded Document instances\n   */\n  protected abstract _getEmbeddedDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    parent: T extends Document<any, infer U> ? U : never,\n    query: Request,\n    options: RequestOptions,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Get the parent Document (if any) associated with a request\n   * @param request - The requested operation\n   * @returns The parent Document, or null\n   *\n   * @remarks Actually, this returns `undefined` if  there is no parent, the JSDoc is incorrect.\n   */\n  protected _getParent(request: Request): Promise<Document<any, any> | undefined>;\n\n  /**\n   * Perform document creation operations\n   * @param documentClass - The Document definition\n   * @param request       - The requested operation\n   * @param user          - The requesting User\n   * @returns The created Document instances\n   */\n  create<T extends Document<any, any>>(documentClass: ConstructorOf<T>, request: Request, user: BaseUser): Promise<T[]>;\n\n  /**\n   * Validate the arguments passed to the create operation\n   * @param data    - An array of document data\n   *                  (default: `[]`)\n   * @param options - Operation options\n   *                  (default: `{}`)\n   * @param pack    - A Compendium pack identifier\n   */\n  protected _createArgs({ data, options, pack }?: Request): {\n    data: AnyDocumentData[];\n    options: RequestOptions;\n    pack?: string;\n  };\n\n  /**\n   * Create primary Document instances\n   */\n  protected abstract _createDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Create embedded Document instances\n   */\n  protected abstract _createEmbeddedDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    parent: T extends Document<any, infer U> ? U : never,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Perform document update operations\n   * @param documentClass - The Document definition\n   * @param request       - The requested operation\n   * @param user          - The requesting User\n   * @returns The updated Document instances\n   */\n  update<T extends Document<any, any>>(documentClass: ConstructorOf<T>, request: Request, user: BaseUser): Promise<T[]>;\n\n  /**\n   * Validate the arguments passed to the update operation\n   * @param updates - An array of document data\n   *                  (default: `[]`)\n   * @param options - Operation options\n   *                  (default: `{}`)\n   * @param pack    - A Compendium pack identifier\n   */\n  protected _updateArgs({ updates, options, pack }?: Request): {\n    updates: AnyDocumentData[];\n    options: RequestOptions;\n    pack?: string;\n  };\n\n  /**\n   * Update primary Document instances\n   */\n  protected abstract _updateDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Update embedded Document instances\n   */\n  protected abstract _updateEmbeddedDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    parent: T extends Document<any, infer U> ? U : never,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Perform document deletion operations\n   * @param documentClass - The Document definition\n   * @param request       - The requested operation\n   * @param user          - The requesting User\n   * @returns The deleted Document instances\n   */\n  delete<T extends Document<any, any>>(documentClass: ConstructorOf<T>, request: Request, user: BaseUser): Promise<T[]>;\n\n  /**\n   * Validate the arguments passed to the delete operation\n   * @param request - The requested operation\n   * @param ids     - An array of document ids\n   *                  (default: `[]`)\n   * @param options - Operation options\n   *                  (default: `{}`)\n   * @param pack    - A Compendium pack identifier\n   */\n  protected _deleteArgs({ ids, options, pack }?: Request): { ids: string[]; options: RequestOptions; pack?: string };\n\n  /**\n   * Delete primary Document instances\n   */\n  protected abstract _deleteDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Delete embedded Document instances\n   */\n  protected abstract _deleteEmbeddedDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    parent: T extends Document<any, infer U> ? U : never,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Describe the scopes which are suitable as the namespace for a flag key\n   */\n  protected getFlagScopes(): string[];\n\n  /**\n   * Describe the scopes which are suitable as the namespace for a flag key\n   */\n  protected getCompendiumScopes(): string[];\n\n  /**\n   * Provide the Logger implementation that should be used for database operations\n   */\n  protected _getLogger(): Console;\n\n  /**\n   * Log a database operation for an embedded document, capturing the action taken and relevant IDs\n   * @param action    - The action performed\n   * @param type      - The document type\n   * @param documents - The documents modified\n   * @param info      - The logging level\n   * @param parent    - A parent document\n   * @param pack      - A compendium pack within which the operation occurred\n   */\n  protected _logOperation(\n    action: string,\n    type: string,\n    documents: Document<any, any>[],\n    { parent, pack, level }?: { parent?: Document<any, any>; pack?: string; level?: string }\n  ): void;\n\n  /**\n   * Construct a standardized error message given the context of an attempted operation\n   */\n  protected _logError(\n    user: BaseUser,\n    action: string,\n    subject: Document<any, any> | string,\n    { parent, pack }?: { parent?: Document<any, any>; pack?: string }\n  ): string;\n\n  /**\n   * Determine a string suffix for a log message based on the parent and/or compendium context.\n   */\n  protected _logContext({ parent, pack }?: { parent?: Document<any, any>; pack?: string }): string;\n}\n\ninterface Request {\n  data?: AnyDocumentData[];\n  updates?: AnyDocumentData[];\n  ids?: string[];\n  parent?: Document<any, any>;\n  query?: object | IdQuery | SceneIdUserQuery;\n  options?: RequestOptions;\n  pack?: string;\n}\n\nexport interface IdQuery {\n  _id: string;\n}\nexport interface SceneIdUserQuery {\n  sceneId: string;\n  user: string;\n}\n\ninterface RequestOptions {\n  index?: boolean;\n  broadcast?: boolean;\n  temporary?: boolean;\n  nohook?: boolean;\n  [key: string]: unknown;\n}\n\nexport default DatabaseBackend;\n"]},8754:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\abstract\\data.mjs.d.ts","import Document from './document.mjs';\nimport EmbeddedCollection from './embedded-collection.mjs';\nimport {\n  DocumentConstructor,\n  PropertiesToSource,\n  PropertyTypeToSourceParameterType,\n  ToObjectFalseType\n} from '../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * A schema entry which describes a field of DocumentData\n   * @typeparam T - the inner type of the document field\n   */\n  interface DocumentField<T> {\n    /**\n     * An object which defines the data type of this field\n     */\n    type: object;\n\n    /**\n     * Is this field required to have an assigned value? Default is false.\n     */\n    required: boolean;\n\n    /**\n     * Can the field be populated by a null value? Default is true.\n     */\n    nullable?: boolean;\n\n    /**\n     * A static default value or a function which assigns a default value\n     */\n    default?: PropertyTypeToSourceParameterType<T> | ((data?: object) => T);\n\n    collection?: boolean;\n\n    /**\n     * An optional cleaning function which sanitizes input data to this field\n     */\n    clean?: (input: unknown) => T;\n\n    /**\n     * A function which asserts that the value of this field is valid\n     */\n    validate?: (value: T) => boolean;\n\n    /**\n     * An error message which is displayed if validation fails\n     */\n    validationError?: string;\n\n    /**\n     * Is the field an embedded Document collection?\n     */\n    isCollection?: boolean;\n  }\n\n  /**\n   * The schema of a Document\n   */\n  type DocumentSchema = Partial<Record<string, DocumentField<any>>>;\n}\n\n/**\n * The abstract base class which defines the data schema contained within a Document.\n * @typeParam ConcreteDocumentSchema - the schema of the document data\n * @typeParam PropertiesData - the runtime document properties of the the DocumentData\n * @typeParam SourceData - the type of the `_source` property\n * @typeParam ConstructorData - the data to construct a new instance of this DocumentData\n * @typeParam ConcreteDocument - the document, the document data belongs to\n */\ndeclare abstract class DocumentData<\n  ConcreteDocumentSchema extends DocumentSchema,\n  PropertiesData extends object,\n  SourceData extends object = PropertiesToSource<PropertiesData>,\n  ConstructorData extends object = DeepPartial<SourceData>,\n  ConcreteDocument extends Document<any, any> | null = null\n> {\n  /**\n   * @param data     - Initial data used to construct the data object\n   *                   (default: `{}`)\n   * @param document - The document to which this data object belongs\n   *                   (default: `null`)\n   */\n  constructor(data?: ConstructorData, document?: ConcreteDocument | null);\n\n  /**\n   * An immutable reverse-reference to the Document to which this data belongs, possibly null.\n   */\n  readonly document: ConcreteDocument | null;\n\n  /**\n   * The source data object. The contents of this object can be updated, but the object itself may not be replaced.\n   */\n  readonly _source: SourceData;\n\n  /**\n   * The primary identifier for the Document to which this data object applies.\n   * This identifier is unique within the parent collection which contains the Document.\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * Define the data schema for documents of this type.\n   * The schema is populated the first time it is accessed and cached for future reuse.\n   *\n   * @remarks This method needs to be implemented by subclasses.\n   */\n  static defineSchema(): DocumentSchema;\n\n  /**\n   * Define the data schema for documents of this type.\n   */\n  static get schema(): DocumentSchema;\n\n  /**\n   * Define the data schema for this document instance.\n   */\n  get schema(): ConcreteDocumentSchema;\n\n  /**\n   * Initialize the source data object in-place\n   */\n  _initializeSource(data: ConstructorData): SourceData;\n\n  /**\n   * Get the default value for a schema field, conditional on the provided data\n   * @param field - The configured data field\n   * @param data  - The provided data object\n   * @returns The default value for the field\n   */\n  protected static _getFieldDefaultValue<ConcreteDocumentField extends DocumentField<any>>(\n    field: ConcreteDocumentField,\n    data: object\n  ): ConcreteDocumentField extends { default?: undefined }\n    ? undefined\n    : ConcreteDocumentField extends { default: (data?: object) => infer V }\n    ? V\n    : ConcreteDocumentField['default'];\n\n  /**\n   * Initialize the instance by copying data from the source object to instance attributes.\n   */\n  protected _initialize(): void;\n\n  /**\n   * Initialize the value for a given data type\n   * @param type  - The type of the data field\n   * @param value - The un-initialized value\n   * @returns The initialized value\n   */\n  protected _initializeType(type: undefined, value: unknown): void;\n  protected _initializeType<Value extends object>(type: typeof Object, value: Value): Value;\n  protected _initializeType<Type extends typeof String | typeof Number | typeof Boolean>(\n    type: Type,\n    value: ReturnType<Type> | Parameters<Type>[0]\n  ): ReturnType<Type>;\n  protected _initializeType<Value extends Array<any> | ConstructorParameters<typeof Array>>(\n    type: typeof Array,\n    value: Value\n  ): Value extends Array<any> ? Value : Array<any>;\n  protected _initializeType<Value extends number | string>(type: typeof Date, value: Value): number;\n  protected _initializeType<Type extends ConstructorOf<Document<any, any>>>(\n    type: Type,\n    value: ConstructorParameters<Type>[0]\n  ): InstanceType<Type>; // TODO: Actually this returns an instance of the subclass configured in CONFIG\n  protected _initializeType<Type extends ConstructorOf<AnyDocumentData>>(\n    type: Type,\n    value: ConstructorParameters<Type>[0]\n  ): InstanceType<Type>;\n\n  /**\n   * Validate the data contained in the document to check for type and content\n   * This function throws an error if data within the document is not valid\n   *\n   * @param changes  - Only validate the keys of an object that was changed.\n   * @param children - Validate the data of child embedded documents? Default is true.\n   * @param clean    - Apply field-specific cleaning functions to the provided value.\n   * @param replace  - Replace any invalid values with valid defaults? Default is false.\n   * @param strict   - If strict, will throw errors for any invalid data. Default is false.\n   * @returns An indicator for whether or not the document contains valid data\n   */\n  validate({\n    changes,\n    children,\n    clean,\n    replace,\n    strict\n  }: {\n    changes?: DeepPartial<ConstructorData>;\n    children?: boolean;\n    clean?: boolean;\n    replace?: boolean;\n    strict?: boolean;\n  }): boolean;\n\n  /**\n   * Build and return the error message for a Missing Field\n   * @param name  - The named field that is missing\n   * @param field - The configured DocumentField from the Schema\n   * @returns The error message\n   */\n  protected _getMissingFieldErrorMessage(name: string, field: DocumentField<unknown>): string;\n\n  /**\n   * Build and return the error message for an Invalid Field Value\n   * @param name  - The named field that is invalid\n   * @param field - The configured DocumentField from the Schema\n   * @param value - The value that is invalid\n   * @returns The error message\n   */\n  protected _getInvalidFieldValueErrorMessage(name: string, field: DocumentField<unknown>, value: unknown): string;\n\n  /**\n   * Validate a single field in the data object.\n   * Assert that required fields are present and that each value passes it's validator function if one is provided.\n   * @param name     - The named field being validated\n   * @param field    - The configured DocumentField from the Schema\n   * @param value    - The current field value\n   * @param children - Validate the data of child embedded documents? Default is true.\n   *                   (default: `true`)\n   */\n  protected _validateField<Name extends keyof ConcreteDocumentSchema>(\n    name: Name,\n    field: ConcreteDocumentSchema[Name],\n    value: unknown,\n    { children }: { children?: boolean }\n  ): void;\n\n  /**\n   * Jointly validate the overall document after each field has been individually validated.\n   * Throw an Error if any issue is encountered.\n   *\n   * @remarks\n   * The base implementation doesn't do anything. Supposedly, subclasses can implement their own validation here.\n   */\n  protected _validateDocument(): void;\n\n  /**\n   * Reset the state of this data instance back to mirror the contained source data, erasing any changes.\n   */\n  reset(): void;\n\n  /**\n   * Update the data by applying a new data object. Data is compared against and merged with the existing data.\n   * Updating data which already exists is strict - it must pass validation or else the update is rejected.\n   * An object is returned which documents the set of changes which were applied to the original data.\n   * @see foundry.utils.mergeObject\n   * @param data    - New values with which to update the Data object\n   *                  (default: `{}`)\n   * @param options - Options which determine how the new data is merged\n   *                  (default: `{}`)\n   * @returns The changed keys and values which are different than the previous data\n   */\n  update<U>(\n    data?: Expanded<U> extends DeepPartial<ConstructorData> ? U : DeepPartial<ConstructorData>,\n    options?: UpdateOptions\n  ): Expanded<U> extends DeepPartial<SourceData> ? DeepPartial<U> : DeepPartial<SourceData>;\n\n  /**\n   * Update an EmbeddedCollection using an array of provided document data\n   * @param collection   - The EmbeddedCollection to update\n   * @param documentData - An array of provided Document data\n   * @param options      - Additional options which modify how the collection is updated\n   *                       (default: `{}`)\n   */\n  updateCollection<T extends DocumentConstructor>(\n    collection: EmbeddedCollection<T, this>,\n    documentData: DeepPartial<InstanceType<T>['data']['_source']>[],\n    options?: UpdateOptions\n  ): void;\n\n  /**\n   * Copy and transform the DocumentData into a plain object.\n   * Draw the values of the extracted object from the data source (by default) otherwise from its transformed values.\n   * @param source - Draw values from the underlying data source rather than transformed values\n   *                 (default: `true`)\n   * @returns The extracted primitive object\n   */\n  toObject(source?: true): ReturnType<this['toJSON']>;\n  toObject(source: false): {\n    [Key in keyof ConcreteDocumentSchema as string extends Key ? never : Key]: Key extends keyof this\n      ? ToObjectFalseType<this[Key]>\n      : undefined;\n  };\n\n  /**\n   * Extract the source data for the DocumentData into a simple object format that can be serialized.\n   * @returns The document source data expressed as a plain object\n   */\n  toJSON(): SourceData;\n\n  /**\n   * Create a DocumentData instance using a provided serialized JSON string.\n   * @param json - Serialized document data in string format\n   * @returns constructed data instance\n   */\n  static fromJSON<ConcreteDocumentData extends AnyDocumentData>(\n    this: ConcreteDocumentData,\n    json: string\n  ): ConcreteDocumentData;\n}\n\ninterface UpdateOptions {\n  diff?: boolean;\n  recursive?: boolean;\n  insertValues?: boolean;\n  insertKeys?: boolean;\n  enforceTypes?: boolean;\n}\n\nexport default DocumentData;\n\nexport type AnyDocumentData = DocumentData<any, any, any, any, any>;\n"]},9475:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\abstract\\document.mjs.d.ts",'import { BaseUser } from \'../documents.mjs\';\nimport DatabaseBackend from \'./backend.mjs\';\nimport { AnyDocumentData } from \'./data.mjs\';\nimport {\n  ConfiguredDocumentClass,\n  DocumentConstructor,\n  ToObjectFalseType,\n  DocumentType,\n  ConstructorDataType\n} from \'../../../types/helperTypes\';\nimport EmbeddedCollection from \'./embedded-collection.mjs\';\n\ntype ParentType<T extends Document<any, any>> = T extends Document<any, infer U> ? U : never;\nexport type ContextType<T extends Document<any, any>> = Context<ParentType<T>>;\nexport type DocumentDataType<T extends Document<any, any>> = T extends Document<infer U, any> ? U : never;\n\n/**\n * The abstract base class shared by both client and server-side which defines the model for a single document type.\n */\ndeclare abstract class Document<\n  ConcreteDocumentData extends AnyDocumentData,\n  Parent extends Document<any, any> | null = null\n> {\n  /**\n   * Create a new Document by providing an initial data object.\n   * @param data    - Initial data provided to construct the Document\n   * @param context - Additional parameters which define Document context\n   */\n  constructor(data?: ConstructorDataType<ConcreteDocumentData>, context?: Context<Parent>);\n\n  /**\n   * An immutable reverse-reference to the parent Document to which this embedded Document belongs.\n   */\n  readonly parent: Parent | null;\n\n  /**\n   * An immutable reference to a containing Compendium collection to which this Document belongs.\n   */\n  readonly pack: string | null;\n\n  /**\n   * The base data object for this Document which persists both the original source and any derived data.\n   */\n  readonly data: ConcreteDocumentData;\n\n  /**\n   * Perform one-time initialization tasks which only occur when the Document is first constructed.\n   */\n  protected _initialize(): void;\n\n  /**\n   * Every document must define an object which represents its data schema.\n   * This must be a subclass of the DocumentData interface.\n   *\n   * @remarks\n   * This method is abstract and needs to be implemented by inheriting classes.\n   */\n  static get schema(): ConstructorOf<AnyDocumentData>;\n\n  /**\n   * Default metadata which applies to each instance of this Document type.\n   * @defaultValue\n   * ```typescript\n   * {\n   *   name: "Document",\n   *   collection: "documents",\n   *   label: "DOCUMENT.Document",\n   *   types: [],\n   *   embedded: {},\n   *   hasSystemData: false,\n   *   permissions: {\n   *     create: "ASSISTANT",\n   *     update: "ASSISTANT",\n   *     delete: "ASSISTANT"\n   *   },\n   *   pack: null\n   * }\n   * ```\n   */\n  static get metadata(): Metadata<any>;\n\n  /**\n   * The database backend used to execute operations and handle results\n   */\n  static get database(): DatabaseBackend; // TODO: Reference type defined in CONFIG\n\n  /**\n   * Return a reference to the implemented subclass of this base document type.\n   */\n  static get implementation(): ConstructorOf<Document<any, any>>; // Referencing the concrete class the config is not possible because accessors cannot be generic and there is not static polymorphic this type\n\n  /**\n   * The named collection to which this Document belongs.\n   */\n  static get collectionName(): string;\n\n  /**\n   * The canonical name of this Document type, for example "Actor".\n   */\n  static get documentName(): string;\n\n  /**\n   * The named collection to which this Document belongs.\n   */\n  get collectionName(): string;\n\n  /**\n   * The canonical name of this Document type, for example "Actor".\n   */\n  get documentName(): string;\n\n  /**\n   * The canonical identifier for this Document\n   */\n  get id(): string | null;\n\n  /**\n   * Test whether this Document is embedded within a parent Document\n   */\n  get isEmbedded(): boolean;\n\n  /**\n   * The name of this Document, if it has one assigned\n   */\n  get name(): string | null;\n\n  /**\n   * Test whether a given User has a sufficient role in order to create Documents of this type.\n   * @param user - The User being tested\n   * @returns Does the User have a sufficient role to create?\n   */\n  static canUserCreate(user: BaseUser): boolean;\n\n  /**\n   * Clone a document, creating a new document by combining current data with provided overrides.\n   * The cloned document is ephemeral and not yet saved to the database.\n   * @param data   - Additional data which overrides current document data at the time of creation\n   *                 (default: `{}`)\n   * @param save   - Save the clone to the World database?\n   *                 (default: `false`)\n   * @param keepId - Keep the original Document ID? Otherwise the ID will become undefined\n   *                 (default: `false`)\n   * @returns The cloned Document instance\n   */\n  clone(\n    data?: DeepPartial<\n      ConstructorDataType<ConcreteDocumentData> | (ConstructorDataType<ConcreteDocumentData> & Record<string, unknown>)\n    >,\n    { save, keepId }?: { save?: boolean; keepId?: boolean }\n  ): this | Promise<this | undefined>;\n\n  /**\n   * Get the permission level that a specific User has over this Document, a value in CONST.ENTITY_PERMISSIONS.\n   * @param user - The User being tested\n   * @returns A numeric permission level from CONST.ENTITY_PERMISSIONS or null\n   */\n  getUserLevel(user: BaseUser): foundry.CONST.EntityPermission | null;\n\n  /**\n   * Test whether a certain User has a requested permission level (or greater) over the Document\n   * @param user       - The User being tested\n   * @param permission - The permission level from ENTITY_PERMISSIONS to test\n   * @param exact      - Require the exact permission level requested?\n   *                     (default: `false`)\n   * @returns Does the user have this permission level over the Document?\n   */\n  testUserPermission(\n    user: BaseUser,\n    permission: keyof typeof foundry.CONST.ENTITY_PERMISSIONS | foundry.CONST.EntityPermission,\n    { exact }?: { exact?: boolean }\n  ): boolean;\n\n  /**\n   * Test whether a given User has permission to perform some action on this Document\n   * @param user   - The User attempting modification\n   * @param action - The attempted action\n   * @param data   - Data involved in the attempted action\n   *                 (default: `{}`)\n   * @returns  Does the User have permission?\n   */\n  canUserModify(user: BaseUser, action: \'create\' | \'update\' | \'delete\', data?: object): boolean;\n\n  /**\n   * Create multiple Documents using provided input data.\n   * Data is provided as an array of objects where each individual object becomes one new Document.\n   *\n   * @param data    - An array of data objects used to create multiple documents\n   *                  (default: `[]`)\n   * @param context - Additional context which customizes the creation workflow\n   *                  (default: `{}`)\n   * @returns An array of created Document instances\n   *Additional context which customizes the creation workflow\n   * @example <caption>Create a single Document</caption>\n   * ```typescript\n   * const data = [{name: "New Actor", type: "character", img: "path/to/profile.jpg"}];\n   * const created = await Actor.createDocuments(data);\n   * ```\n   *\n   * @example <caption>Create multiple Documents</caption>\n   * ```typescript\n   * const data = [{name: "Tim", type: "npc"], [{name: "Tom", type: "npc"}];\n   * const created = await Actor.createDocuments(data);\n   * ```\n   *\n   * @example <caption>Create multiple embedded Documents within a parent</caption>\n   * ```typescript\n   * const actor = game.actors.getName("Tim");\n   * const data = [{name: "Sword", type: "weapon"}, {name: "Breastplate", type: "equipment"}];\n   * const created = await Item.createDocuments(data, {parent: actor});this\n   * ```\n   *\n   * @example <caption>Create a Document within a Compendium pack</caption>\n   * ```typescript\n   * const data = [{name: "Compendium Actor", type: "character", img: "path/to/profile.jpg"}];\n   * const created = await Actor.createDocuments(data, {pack: "mymodule.mypack"});\n   * ```\n   */\n  static createDocuments<T extends DocumentConstructor>(\n    this: T,\n    data?: Array<\n      | ConstructorDataType<InstanceType<T>[\'data\']>\n      | (ConstructorDataType<InstanceType<T>[\'data\']> & Record<string, unknown>)\n    >,\n    context?: DocumentModificationContext\n  ): Promise<InstanceType<ConfiguredDocumentClass<T>>[]>;\n\n  /**\n   * Update multiple Document instances using provided differential data.\n   * Data is provided as an array of objects where each individual object updates one existing Document.\n   *\n   * @param updates - An array of differential data objects, each used to update a single Document\n   *                  (default: `[]`)\n   * @param context - Additional context which customizes the update workflow\n   *                  (default: `{}`)\n   * @returns An array of updated Document instances\n   *\n   * @example <caption>Update a single Document</caption>\n   * ```typescript\n   * const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}];\n   * const updated = await Actor.updateDocuments(updates);\n   * ```\n   *\n   * @example <caption>Update multiple Documents</caption>\n   * ```typescript\n   * const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}, {_id: "kj549dk48k34jk34", name: "Thomas"}]};\n   * const updated = await Actor.updateDocuments(updates);\n   * ```\n   *\n   * @example <caption>Update multiple embedded Documents within a parent</caption>\n   * ```typescript\n   * const actor = game.actors.getName("Timothy");\n   * const updates = [{_id: sword.id, name: "Magic Sword"}, {_id: shield.id, name: "Magic Shield"}];\n   * const updated = await Item.updateDocuments(updates, {parent: actor});\n   * ```\n   *\n   * @example <caption>Update Documents within a Compendium pack</caption>\n   * ```typescript\n   * const actor = await pack.getDocument(documentId);\n   * const updated = await Actor.updateDocuments([{_id: actor.id, name: "New Name"}], {pack: "mymodule.mypack"});\n   * ```\n   */\n  static updateDocuments<T extends DocumentConstructor>(\n    this: T,\n    updates?: Array<\n      DeepPartial<\n        | ConstructorDataType<InstanceType<T>[\'data\']>\n        | (ConstructorDataType<InstanceType<T>[\'data\']> & Record<string, unknown>)\n      >\n    >,\n    context?: DocumentModificationContext & foundry.utils.MergeObjectOptions\n  ): Promise<InstanceType<ConfiguredDocumentClass<T>>[]>;\n\n  /**\n   * Delete one or multiple existing Documents using an array of provided ids.\n   * Data is provided as an array of string ids for the documents to delete.\n   *\n   * @param ids - An array of string ids for the documents to be deleted\n   *              (default: `[]`)\n   * @param context - Additional context which customizes the update workflow\n   *                  (default: `{}`)\n   * @returns An array of deleted Document instances\n   *\n   * @example <caption>Delete a single Document</caption>\n   * ```typescript\n   * const tim = game.actors.getName("Tim");\n   * const deleted = await Actor.deleteDocuments([tim.id]);\n   * ```\n   *\n   * @example <caption>Delete multiple Documents</caption>\n   * ```typescript\n   * const tim = game.actors.getName("Tim");\n   * const tom = game.actors.getName("Tom");\n   * const deleted = await Actor.deleteDocuments([tim.id, tom.id]);\n   * ```\n   *\n   * @example <caption>Delete multiple embedded Documents within a parent</caption>\n   * ```typescript\n   * const tim = game.actors.getName("Tim");\n   * const sword = tim.items.getName("Sword");\n   * const shield = tim.items.getName("Shield");\n   * const deleted = await Item.deleteDocuments([sword.id, shield.id], parent: actor});\n   * ```\n   *\n   * @example <caption>Delete Documents within a Compendium pack</caption>\n   * ```typescript\n   * const actor = await pack.getDocument(documentId);\n   * const deleted = await Actor.deleteDocuments([actor.id], {pack: "mymodule.mypack"});\n   * ```\n   */\n  static deleteDocuments<T extends DocumentConstructor>(\n    this: T,\n    ids?: string[],\n    context?: DocumentModificationContext\n  ): Promise<InstanceType<ConfiguredDocumentClass<T>>[]>;\n\n  /**\n   * Create a new Document using provided input data, saving it to the database.\n   * @see {@link Document.createDocuments}\n   * @param data    - Initial data used to create this Document\n   * @param context - Additional context which customizes the creation workflow\n   *                  (default: `{}`)\n   * @returns The created Document instance\n   *\n   * @example <caption>Create a World-level Item</caption>\n   * ```typescript\n   * const data = [{name: "Special Sword", type: "weapon"}];\n   * const created = await Item.create(data);\n   * ```\n   *\n   * @example <caption>Create an Actor-owned Item</caption>\n   * ```typescript\n   * const data = [{name: "Special Sword", type: "weapon"}];\n   * const actor = game.actors.getName("My Hero");\n   * const created = await Item.create(data, {parent: actor});\n   * ```\n   *\n   * @example <caption>Create an Item in a Compendium pack</caption>\n   * ```typescript\n   * const data = [{name: "Special Sword", type: "weapon"}];\n   * const created = await Item.create(data, {pack: "mymodule.mypack"});\n   * ```\n   *\n   * @remarks If no document has actually been created, the returned {@link Promise} resolves to `undefined`.\n   */\n  static create<T extends DocumentConstructor>(\n    this: T,\n    data:\n      | ConstructorDataType<InstanceType<T>[\'data\']>\n      | (ConstructorDataType<InstanceType<T>[\'data\']> & Record<string, unknown>),\n    context?: DocumentModificationContext\n  ): Promise<InstanceType<ConfiguredDocumentClass<T>> | undefined>;\n\n  /**\n   * Update this Document using incremental data, saving it to the database.\n   * @see {@link Document.updateDocuments}\n   * @param data    - Differential update data which modifies the existing values of this document data\n   *                  (default: `{}`)\n   * @param context - Additional context which customizes the update workflow\n   *                  (default: `{}`)\n   * @returns The updated Document instance\n   *\n   * @remarks If no document has actually been updated, the returned {@link Promise} resolves to `undefined`.\n   */\n  update(\n    data?: DeepPartial<\n      ConstructorDataType<ConcreteDocumentData> | (ConstructorDataType<ConcreteDocumentData> & Record<string, unknown>)\n    >,\n    context?: DocumentModificationContext & foundry.utils.MergeObjectOptions\n  ): Promise<this | undefined>;\n\n  /**\n   * Delete this Document, removing it from the database.\n   * @see {@link Document.deleteDocuments}\n   * @param context - Additional context which customizes the deletion workflow\n   *                  (default: `{}`)\n   * @returns The deleted Document instance\n   *\n   * @remarks If no document has actually been deleted, the returned {@link Promise} resolves to `undefined`.\n   */\n  delete(context?: DocumentModificationContext): Promise<this | undefined>;\n\n  /**\n   * Obtain a reference to the Array of source data within the data object for a certain embedded Document name\n   * @param embeddedName - The name of the embedded Document type\n   * @returns The Collection instance of embedded Documents of the requested type\n   */\n  getEmbeddedCollection(embeddedName: string): EmbeddedCollection<DocumentConstructor, AnyDocumentData>; // TODO: Improve\n\n  /**\n   * Get an embedded document by it\'s id from a named collection in the parent document.\n   * @param embeddedName - The name of the embedded Document type\n   * @param id           - The id of the child document to retrieve\n   * @param options      - Additional options which modify how embedded documents are retrieved\n   * @param strict       - Throw an Error if the requested id does not exist. See Collection#get\n   *                       (default: `false`)\n   * @returns The retrieved embedded Document instance, or undefined\n   */\n  getEmbeddedDocument(\n    embeddedName: string,\n    id: string,\n    { strict }?: { strict?: boolean }\n  ): Document<any, this> | undefined;\n\n  /**\n   * Create multiple embedded Document instances within this parent Document using provided input data.\n   * @see {@link Document.createDocuments}\n   * @param embeddedName - The name of the embedded Document type\n   * @param data         - An array of data objects used to create multiple documents\n   *                       (default: `[]`)\n   * @param context      - Additional context which customizes the creation workflow\n   *                       (default: `{}`)\n   * @returns An array of created Document instances\n   */\n  createEmbeddedDocuments(\n    embeddedName: string,\n    data?: Array<Record<string, unknown>>,\n    context?: DocumentModificationContext\n  ): Promise<Array<Document<any, this>>>;\n\n  /**\n   * Update multiple embedded Document instances within a parent Document using provided differential data.\n   * @see {@link Document.updateDocuments}\n   * @param embeddedName - The name of the embedded Document type\n   * @param updates      - An array of differential data objects, each used to update a single Document\n   *                       (default: `[]`)\n   * @param context      - Additional context which customizes the creation workflow\n   *                       (default: `{}`)\n   * @returns An array of updated Document instances\n   */\n  updateEmbeddedDocuments(\n    embeddedName: string,\n    updates?: Array<Record<string, unknown>>,\n    context?: DocumentModificationContext\n  ): Promise<Array<Document<any, this>>>;\n\n  /**\n   * Delete multiple embedded Document instances within a parent Document using provided string ids.\n   * @see {@link Document.deleteDocuments}\n   * @param embeddedName - The name of the embedded Document type\n   * @param ids          - An array of string ids for each Document to be deleted\n   * @param context      - Additional context which customizes the deletion workflow\n   *                       (default: `{}`)\n   * @returns An array of deleted Document instances\n   */\n  deleteEmbeddedDocuments(\n    embeddedName: string,\n    ids: Array<string>,\n    context?: DocumentModificationContext\n  ): Promise<Array<Document<any, this>>>;\n\n  /**\n   * Get the value of a "flag" for this document\n   * See the setFlag method for more details on flags\n   *\n   * @param scope - The flag scope which namespaces the key\n   * @param key   - The flag key\n   * @returns The flag value\n   */\n  getFlag(scope: string, key: string): unknown;\n\n  /**\n   * Assign a "flag" to this document.\n   * Flags represent key-value type data which can be used to store flexible or arbitrary data required by either\n   * the core software, game systems, or user-created modules.\n   *\n   * Each flag should be set using a scope which provides a namespace for the flag to help prevent collisions.\n   *\n   * Flags set by the core software use the "core" scope.\n   * Flags set by game systems or modules should use the canonical name attribute for the module\n   * Flags set by an individual world should "world" as the scope.\n   *\n   * Flag values can assume almost any data type. Setting a flag value to null will delete that flag.\n   *\n   * @param scope - The flag scope which namespaces the key\n   * @param key   - The flag key\n   * @param value - The flag value\n   * @returns A Promise resolving to the updated document\n   */\n  setFlag(scope: string, key: string, value: unknown): Promise<this>;\n\n  /**\n   * Remove a flag assigned to the document\n   * @param scope - The flag scope which namespaces the key\n   * @param key   - The flag key\n   * @returns The updated document instance\n   */\n  unsetFlag(scope: string, key: string): Promise<this>;\n\n  /**\n   * Perform preliminary operations before a Document of this type is created.\n   * Pre-creation operations only occur for the client which requested the operation.\n   * @param data    - The initial data used to create the document\n   * @param options - Additional options which modify the creation request\n   * @param user    - The User requesting the document creation\n   */\n  protected _preCreate(\n    data: ConstructorDataType<ConcreteDocumentData>,\n    options: DocumentModificationOptions,\n    user: BaseUser\n  ): Promise<void>;\n\n  /**\n   * Perform preliminary operations before a Document of this type is updated.\n   * Pre-update operations only occur for the client which requested the operation.\n   * @param changed - The differential data that is changed relative to the documents prior values\n   * @param options - Additional options which modify the update request\n   * @param user    - The User requesting the document update\n   */\n  protected _preUpdate(\n    changed: DeepPartial<ConstructorDataType<ConcreteDocumentData>>,\n    options: DocumentModificationOptions,\n    user: BaseUser\n  ): Promise<void>;\n\n  /**\n   * Perform preliminary operations before a Document of this type is deleted.\n   * Pre-delete operations only occur for the client which requested the operation.\n   * @param options - Additional options which modify the deletion request\n   * @param user    - The User requesting the document deletion\n   */\n  protected _preDelete(options: DocumentModificationOptions, user: BaseUser): Promise<void>;\n\n  /**\n   * Perform follow-up operations after a Document of this type is created.\n   * Post-creation operations occur for all clients after the creation is broadcast.\n   * @param data   - The data from which the document was created\n   * @param options- Additional options which modify the creation request\n   * @param user   - The id of the User requesting the document update\n   */\n  protected _onCreate(\n    data: ConcreteDocumentData[\'_source\'],\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * Perform follow-up operations after a Document of this type is updated.\n   * Post-update operations occur for all clients after the update is broadcast.\n   * @param changed - The differential data that was changed relative to the documents prior values\n   * @param options - Additional options which modify the update request\n   * @param user    - The id of the User requesting the document update\n   */\n  protected _onUpdate(\n    changed: DeepPartial<ConcreteDocumentData[\'_source\']> & Record<string, unknown>,\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * Perform follow-up operations after a Document of this type is deleted.\n   * Post-deletion operations occur for all clients after the deletion is broadcast.\n   * @param options- Additional options which modify the deletion request\n   * @param user   - The id of the User requesting the document update\n   */\n  protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n  /**\n   * Perform follow-up operations when a set of Documents of this type are created.\n   * This is where side effects of creation should be implemented.\n   * Post-creation side effects are performed only for the client which requested the operation.\n   * @param documents- The Document instances which were created\n   * @param context  - The context for the modification operation\n   *\n   * @remarks The base implementation returns `void` but it is typed as\n   * `unknown` to allow deriving classes to return whatever they want. The\n   * return type is not meant to be used.\n   */\n  protected static _onCreateDocuments<T extends DocumentConstructor>(\n    this: T,\n    documents: Array<InstanceType<ConfiguredDocumentClass<T>>>,\n    context: DocumentModificationContext\n  ): Promise<unknown>;\n\n  /**\n   * Perform follow-up operations when a set of Documents of this type are updated.\n   * This is where side effects of updates should be implemented.\n   * Post-update side effects are performed only for the client which requested the operation.\n   * @param documents - The Document instances which were updated\n   * @param context   - The context for the modification operation\n   *\n   * @remarks The base implementation returns `void` but it is typed as\n   * `unknown` to allow deriving classes to return whatever they want. The\n   * return type is not meant to be used.\n   */\n  protected static _onUpdateDocuments<T extends DocumentConstructor>(\n    this: T,\n    documents: Array<InstanceType<ConfiguredDocumentClass<T>>>,\n    context: DocumentModificationContext\n  ): Promise<unknown>;\n\n  /**\n   * Perform follow-up operations when a set of Documents of this type are deleted.\n   * This is where side effects of deletion should be implemented.\n   * Post-deletion side effects are performed only for the client which requested the operation.\n   * @param documents - The Document instances which were deleted\n   * @param context   - The context for the modification operation\n   *\n   * @remarks The base implementation returns `void` but it is typed as\n   * `unknown` to allow deriving classes to return whatever they want. The\n   * return type is not meant to be used.\n   */\n  protected static _onDeleteDocuments<T extends DocumentConstructor>(\n    this: T,\n    documents: Array<InstanceType<ConfiguredDocumentClass<T>>>,\n    context: DocumentModificationContext\n  ): Promise<unknown>;\n\n  /**\n   * Transform the Document instance into a plain object.\n   * The created object is an independent copy of the original data.\n   * See DocumentData#toObject\n   * @param source - Draw values from the underlying data source rather than transformed values\n   * @returns The extracted primitive object\n   */\n  toObject(source?: true): ReturnType<this[\'toJSON\']>;\n  toObject(source: false): ToObjectFalseType<ConcreteDocumentData>;\n\n  /**\n   * Convert the Document instance to a primitive object which can be serialized.\n   * See DocumentData#toJSON\n   * @returns The document data expressed as a plain object\n   */\n  toJSON(): ReturnType<ConcreteDocumentData[\'toJSON\']>;\n}\n\nexport interface DocumentModificationOptions {\n  /**\n   * Block the dispatch of preCreate hooks for this operation\n   * @defaultValue `false`\n   */\n  noHook?: boolean;\n\n  /**\n   * Return an index of the Document collection, used only during a get operation.\n   * @defaultValue `false`\n   */\n  index?: boolean;\n\n  /**\n   * When performing a creation operation, keep the provided _id instead of clearing it.\n   * @defaultValue `false`\n   */\n  keepId?: boolean;\n\n  /**\n   * Create a temporary document which is not saved to the database. Only used during creation.\n   * @defaultValue `false`\n   */\n  temporary?: boolean;\n\n  /**\n   * Automatically re-render existing applications associated with the document.\n   * @defaultValue `true`\n   */\n  render?: boolean;\n\n  /**\n   * Automatically create and render the Document sheet when the Document is first created.\n   * @defaultValue `false`\n   */\n  renderSheet?: boolean;\n\n  /**\n   * Difference each update object against current Document data to reduce the size of the transferred data. Only used during update.\n   * @defaultValue `true`\n   */\n  diff?: boolean;\n\n  /**\n   * Merge objects recursively. If false, inner objects will be replaced explicitly. Use with caution!\n   * @defaultValue `true`\n   */\n  recursive?: boolean;\n\n  /**\n   * Is the operation undoing a previous operation, only used by embedded Documents within a Scene\n   */\n  isUndo?: boolean;\n\n  /**\n   * Whether to delete all documents of a given type, regardless of the array of ids provided. Only used during a delete operation.\n   */\n  deleteAll?: boolean;\n}\n\ndeclare global {\n  interface DocumentModificationContext extends DocumentModificationOptions {\n    /**\n     * A parent Document within which these Documents should be embedded\n     */\n    parent?: Document<any, any>;\n\n    /**\n     * A Compendium pack identifier within which the Documents should be modified\n     */\n    pack?: string;\n  }\n}\n\ninterface Context<Parent extends Document<any, any> | null> {\n  /**\n   * A parent document within which this Document is embedded\n   */\n  parent?: Parent;\n\n  /**\n   * A named compendium pack within which this Document exists\n   */\n  pack?: string;\n}\n\nexport interface Metadata<ConcreteDocument extends Document<any, any>> {\n  name: DocumentType;\n  collection: string;\n  label: string;\n  types: string[] | Record<string, unknown>; // TODO: Record<string, unknown> is only there because In BaseTableResult this is set to CONST.TABLE_RESULT_TYPES, check if this is a bug in foundry\n  embedded: Record<string, ConstructorOf<Document<any, any>>>;\n  hasSystemData: boolean;\n  permissions: {\n    create: string | ((user: BaseUser, doc: ConcreteDocument, data?: object) => boolean); // data isn\'t actually ever passed in on the client side\n    update: string | ((user: BaseUser, doc: ConcreteDocument, data?: object) => boolean); // data isn\'t actually ever passed in on the client side\n    delete: string | ((user: BaseUser, doc: ConcreteDocument, data?: object) => boolean); // data isn\'t actually ever passed in on the client side\n  };\n  pack: any;\n}\n\nexport interface DocumentMetadata {\n  name: \'Document\';\n  collection: \'documents\';\n  label: \'DOCUMENT.Document\';\n  types: [];\n  embedded: {};\n  hasSystemData: false;\n  permissions: {\n    create: \'ASSISTANT\';\n    update: \'ASSISTANT\';\n    delete: \'ASSISTANT\';\n  };\n  pack: null;\n}\n\nexport default Document;\n']},63981:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\abstract\\embedded-collection.mjs.d.ts","import _Collection from '../utils/collection.mjs';\nimport { AnyDocumentData } from './data.mjs';\nimport { DocumentConstructor, ToObjectFalseType } from '../../../types/helperTypes';\n\ntype Collection<T> = Omit<_Collection<T>, 'set' | 'delete'>;\n\ninterface CollectionConstructor {\n  new (): Collection<any>;\n  new <T>(entries?: readonly (readonly [string, T])[] | null): Collection<T>;\n  new <T>(iterable: Iterable<readonly [string, T]>): Collection<T>;\n  readonly [Symbol.species]: CollectionConstructor;\n  readonly prototype: Collection<any>;\n}\n\ndeclare const Collection: CollectionConstructor;\n\n/**\n * An extension of the Collection.\n * Used for the specific task of containing embedded Document instances within a parent Document.\n */\ndeclare class EmbeddedCollection<\n  ContainedDocumentConstructor extends DocumentConstructor,\n  ParentDocumentData extends AnyDocumentData\n> extends Collection<InstanceType<ContainedDocumentConstructor>> {\n  /**\n   * @param documentData  - The parent DocumentData instance to which this collection belongs\n   * @param sourceArray   - The source data array for the collection in the parent Document data\n   * @param documentClass - The Document class implementation contained by the collection\n   */\n  constructor(\n    documentData: ParentDocumentData,\n    sourceArray: ConstructorParameters<ContainedDocumentConstructor>[0][],\n    documentClass: ContainedDocumentConstructor\n  );\n\n  /**\n   * The parent DocumentData to which this EmbeddedCollection instance belongs.\n   */\n  readonly parent: ParentDocumentData;\n\n  /**\n   * The parent DocumentData to which this EmbeddedCollection instance belongs.\n   */\n  readonly document: ParentDocumentData['document'];\n\n  /**\n   * The Document implementation used to construct instances within this collection\n   */\n  readonly documentClass: ContainedDocumentConstructor;\n\n  /**\n   * The source data array from which the embedded collection is created\n   */\n  readonly _source: DeepPartial<InstanceType<ContainedDocumentConstructor>['data']['_source']>[];\n\n  /**\n   * Initialize the EmbeddedCollection object by constructing its contained Document instances\n   */\n  protected _initialize(): void;\n\n  set(\n    key: string,\n    value: InstanceType<ContainedDocumentConstructor>,\n    { modifySource }: { modifySource?: boolean }\n  ): this;\n\n  delete(key: string, { modifySource }: { modifySource?: boolean }): boolean;\n\n  /**\n   * Convert the EmbeddedCollection to an array of simple objects.\n   * @param source - Draw data for contained Documents from the underlying data source?\n   *                 (default: `true`)\n   * @returns The extracted array of primitive objects\n   */\n  toObject(source?: true): ReturnType<InstanceType<ContainedDocumentConstructor>['data']['toJSON']>[];\n  toObject(source: false): ToObjectFalseType<InstanceType<ContainedDocumentConstructor>['data']>[];\n}\n\nexport default EmbeddedCollection;\n"]},86858:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\abstract\\module.mjs.d.ts","/**\n * Abstract data classes which define the interfaces for data schema, document, and embedded document types.\n */\nexport { default as DocumentData } from './data.mjs';\nexport { default as Document } from './document.mjs';\nexport { default as DatabaseBackend } from './backend.mjs';\n"]},19678:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\constants.mjs.d.ts","/**\n * The shortened software name\n */\nexport const vtt: 'Foundry VTT';\n\n/**\n * The full software name\n */\nexport const VTT: 'Foundry Virtual Tabletop';\n\n/**\n * The software website URL\n */\nexport const WEBSITE_URL: 'https://foundryvtt.com';\n\n/**\n * An ASCII greeting displayed to the client\n */\nexport const ASCII = `_______________________________________________________________\n _____ ___  _   _ _   _ ____  ______   __ __     _______ _____\n|  ___/ _ \\\\| | | | \\\\ | |  _ \\\\|  _ \\\\ \\\\ / / \\\\ \\\\   / |_   _|_   _|\n| |_ | | | | | | |  \\\\| | | | | |_) \\\\ V /   \\\\ \\\\ / /  | |   | |\n|  _|| |_| | |_| | |\\\\  | |_| |  _ < | |     \\\\ V /   | |   | |\n|_|   \\\\___/ \\\\___/|_| \\\\_|____/|_| \\\\_\\\\|_|      \\\\_/    |_|   |_|\n===============================================================`;\n\n/**\n * Define the allowed ActiveEffect application modes\n */\nexport const ACTIVE_EFFECT_MODES: {\n  CUSTOM: 0;\n  MULTIPLY: 1;\n  ADD: 2;\n  DOWNGRADE: 3;\n  UPGRADE: 4;\n  OVERRIDE: 5;\n};\n\n/**\n * Define the string name used for the base entity type when specific sub-types are not defined by the system\n */\nexport const BASE_ENTITY_TYPE: 'base';\n\n/**\n * Valid Chat Message types\n */\nexport const CHAT_MESSAGE_TYPES: {\n  OTHER: 0;\n  OOC: 1;\n  IC: 2;\n  EMOTE: 3;\n  WHISPER: 4;\n  ROLL: 5;\n};\n\n/**\n * The allowed Entity types which may exist within a Compendium pack\n * This is a subset of ENTITY_TYPES\n */\nexport const COMPENDIUM_ENTITY_TYPES: ['Actor', 'Item', 'Scene', 'JournalEntry', 'Macro', 'RollTable', 'Playlist'];\n\n/**\n * Define the set of languages which have built-in support in the core software\n */\nexport const CORE_SUPPORTED_LANGUAGES: ['en'];\n\n/**\n * The default artwork used for Token images if none is provided\n */\nexport const DEFAULT_TOKEN: 'icons/svg/mystery-man.svg';\n\n/**\n * The default artwork used for Note placeables if none is provided\n */\nexport const DEFAULT_NOTE_ICON: 'icons/svg/book.svg';\n\n/**\n * The default icon image used for Macro documents if no other image is provided\n */\nexport const DEFAULT_MACRO_ICON: 'icons/svg/dice-target.svg';\n\n/**\n * The supported dice roll visibility modes\n */\nexport const DICE_ROLL_MODES: {\n  PUBLIC: 'roll';\n  PRIVATE: 'gmroll';\n  BLIND: 'blindroll';\n  SELF: 'selfroll';\n};\n\n/**\n * The allowed Drawing types which may be saved\n */\nexport const DRAWING_TYPES: {\n  RECTANGLE: 'r';\n  ELLIPSE: 'e';\n  TEXT: 't';\n  POLYGON: 'p';\n  FREEHAND: 'f';\n};\n\n/**\n * The allowed fill types which a Drawing object may display\n * NONE: The drawing is not filled\n * SOLID: The drawing is filled with a solid color\n * PATTERN: The drawing is filled with a tiled image pattern\n */\nexport const DRAWING_FILL_TYPES: {\n  NONE: 0;\n  SOLID: 1;\n  PATTERN: 2;\n};\n\n/**\n * Define the allowed Entity class types\n */\nexport const ENTITY_TYPES: [\n  'Actor',\n  'ChatMessage',\n  'Combat',\n  'Item',\n  'Folder',\n  'JournalEntry',\n  'Macro',\n  'Playlist',\n  'RollTable',\n  'Scene',\n  'User'\n];\n\n/**\n * Define the allowed Entity types which may be dynamically linked in chat\n */\nexport const ENTITY_LINK_TYPES: ['Actor', 'Item', 'Scene', 'JournalEntry', 'Macro', 'RollTable'];\n\n/**\n * Define the allowed permission levels for a non-user Entity.\n * Each level is assigned a value in ascending order. Higher levels grant more permissions.\n */\nexport const ENTITY_PERMISSIONS: {\n  NONE: 0;\n  LIMITED: 1;\n  OBSERVER: 2;\n  OWNER: 3;\n};\n\n/**\n * Define the allowed Entity types which Folders may contain\n */\nexport const FOLDER_ENTITY_TYPES: ['Actor', 'Item', 'Scene', 'JournalEntry', 'Playlist', 'RollTable'];\n\n/**\n * The maximum allowed level of depth for Folder nesting\n */\nexport const FOLDER_MAX_DEPTH: 3;\n\n/**\n * A list of allowed game URL names\n */\nexport const GAME_VIEWS: ['game', 'stream'];\n\n/**\n * The minimum allowed grid size which is supported by the software\n */\nexport const GRID_MIN_SIZE: 50;\n\n/**\n * The allowed Grid types which are supported by the software\n */\nexport const GRID_TYPES: {\n  GRIDLESS: 0;\n  SQUARE: 1;\n  HEXODDR: 2;\n  HEXEVENR: 3;\n  HEXODDQ: 4;\n  HEXEVENQ: 5;\n};\n\n/**\n * A list of supported setup URL names\n */\nexport const SETUP_VIEWS: ['license', 'setup', 'players', 'join'];\n\n/**\n * Enumerate the source types which can be used for an AmbientLight placeable object\n */\nexport const SOURCE_TYPES: {\n  LOCAL: 'l';\n  GLOBAL: 'g';\n  UNIVERSAL: 'u';\n};\n\n/**\n * An Array of valid MacroAction scope values\n */\nexport const MACRO_SCOPES: ['global', 'actors', 'actor'];\n\n/**\n * An enumeration of valid Macro types\n */\nexport const MACRO_TYPES: {\n  SCRIPT: 'script';\n  CHAT: 'chat';\n};\n\n/**\n * The allowed playback modes for an audio Playlist\n * DISABLED: The playlist does not play on its own, only individual Sound tracks played as a soundboard\n * SEQUENTIAL: The playlist plays sounds one at a time in sequence\n * SHUFFLE: The playlist plays sounds one at a time in randomized order\n * SIMULTANEOUS: The playlist plays all contained sounds at the same time\n */\nexport const PLAYLIST_MODES: {\n  DISABLED: -1;\n  SEQUENTIAL: 0;\n  SHUFFLE: 1;\n  SIMULTANEOUS: 2;\n};\n\n/**\n * The allowed package types\n */\nexport const PACKAGE_TYPES: ['world', 'system', 'module'];\n\n/**\n * Encode the reasons why a package may be available or unavailable for use\n */\nexport const PACKAGE_AVAILABILITY_CODES: {\n  UNKNOWN: -1;\n  REQUIRES_UPDATE: 0;\n  AVAILABLE: 1;\n  REQUIRES_SYSTEM: 2;\n  REQUIRES_DEPENDENCY: 3;\n  REQUIRES_CORE: 4;\n};\n\n/**\n * A safe password string which can be displayed\n */\nexport const PASSWORD_SAFE_STRING: '••••••••••••••••';\n\n/**\n * The allowed software update channels\n */\nexport const SOFTWARE_UPDATE_CHANNELS: {\n  /**\n   * @defaultValue `'SETUP.UpdateAlpha'`\n   */\n  alpha: string;\n\n  /**\n   * @defaultValue `'SETUP.UpdateBeta'`\n   */\n  beta: string;\n\n  /**\n   * @defaultValue `'SETUP.UpdateBeta'`\n   */\n  release: string;\n};\n\n/**\n * The default sorting density for manually ordering child objects within a parent\n */\nexport const SORT_INTEGER_DENSITY: 100000;\n\n/**\n * The allowed types of a TableResult document\n */\nexport const TABLE_RESULT_TYPES: {\n  TEXT: 0;\n  ENTITY: 1;\n  COMPENDIUM: 2;\n};\n\n/**\n * Define the valid anchor locations for a Tooltip displayed on a Placeable Object\n */\nexport const TEXT_ANCHOR_POINTS: {\n  BOTTOM: 0;\n  CENTER: 1;\n  LEFT: 2;\n  RIGHT: 3;\n  TOP: 4;\n};\n\n/**\n * Define the valid occlusion modes which an overhead tile can use\n */\nexport const TILE_OCCLUSION_MODES: {\n  NONE: 0;\n  FADE: 1;\n  ROOF: 2;\n  RADIAL: 3;\n};\n\n/**\n * Describe the various thresholds of token control upon which to show certain pieces of information\n * NONE - no information is displayed\n * CONTROL - displayed when the token is controlled\n * OWNER HOVER - displayed when hovered by a GM or a user who owns the actor\n * HOVER - displayed when hovered by any user\n * OWNER - always displayed for a GM or for a user who owns the actor\n * ALWAYS - always displayed for everyone\n */\nexport const TOKEN_DISPLAY_MODES: {\n  NONE: 0;\n  CONTROL: 10;\n  OWNER_HOVER: 20;\n  HOVER: 30;\n  OWNER: 40;\n  ALWAYS: 50;\n};\n\n/**\n * The allowed Token disposition types\n * HOSTILE - Displayed as an enemy with a red border\n * NEUTRAL - Displayed as neutral with a yellow border\n * FRIENDLY - Displayed as an ally with a cyan border\n */\nexport const TOKEN_DISPOSITIONS: {\n  HOSTILE: -1;\n  NEUTRAL: 0;\n  FRIENDLY: 1;\n};\n\n/**\n * Define the allowed User permission levels.\n * Each level is assigned a value in ascending order. Higher levels grant more permissions.\n */\nexport const USER_ROLES: {\n  NONE: 0;\n  PLAYER: 1;\n  TRUSTED: 2;\n  ASSISTANT: 3;\n  GAMEMASTER: 4;\n};\n\n/**\n * Invert the User Role mapping to recover role names from a role integer\n */\nexport const USER_ROLE_NAMES: { [Key in keyof typeof USER_ROLES as typeof USER_ROLES[Key]]: Key };\n\nexport interface MeasuredTemplateTypes {\n  CIRCLE: 'circle';\n  CONE: 'cone';\n  RECTANGLE: 'rect';\n  RAY: 'ray';\n}\n\n/**\n * An enumeration of the allowed types for a MeasuredTemplate embedded document\n */\nexport const MEASURED_TEMPLATE_TYPES: MeasuredTemplateTypes;\n\n/**\n * A list of MIME types which are treated as uploaded \"media\", which are allowed to overwrite existing files.\n * Any non-media MIME type is not allowed to replace an existing file.\n * @defaultValue\n * ```typescript\n * [\n *   'application/json',\n *   'application/ogg',\n *   'application/pdf',\n *   'audio/wave',\n *   'audio/wav',\n *   'audio/webm',\n *   'audio/ogg',\n *   'audio/midi',\n *   'audio/mpeg',\n *   'audio/opus',\n *   'audio/aac',\n *   'image/apng',\n *   'image/bmp',\n *   'image/gif',\n *   'image/jpeg',\n *   'image/png',\n *   'image/svg+xml',\n *   'image/tiff',\n *   'image/webp',\n *   'text/plain',\n *   'text/markdown',\n *   'video/mpeg',\n *   'video/mp4',\n *   'video/ogg'\n * ]\n * ```\n */\nexport const MEDIA_MIME_TYPES: string[];\n\nexport interface UserCapability {\n  disableGM: boolean;\n  hint: string;\n  label: string;\n  defaultRole: UserRole;\n}\n\n/**\n * Define the recognized User capabilities which individual Users or role levels may be permitted to perform\n */\nexport const USER_PERMISSIONS: {\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.ActorCreate\",\n   *    hint: \"PERMISSION.ActorCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.ASSISTANT\n   * }\n   * ```\n   */\n  ACTOR_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.BroadcastAudio\",\n   *    hint: \"PERMISSION.BroadcastAudioHint\",\n   *    disableGM: true,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  BROADCAST_AUDIO: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.BroadcastVideo\",\n   *    hint: \"PERMISSION.BroadcastVideoHint\",\n   *    disableGM: true,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  BROADCAST_VIDEO: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.DrawingCreate\",\n   *    hint: \"PERMISSION.DrawingCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  DRAWING_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.ItemCreate\",\n   *    hint: \"PERMISSION.ItemCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.ASSISTANT\n   * }\n   * ```\n   */\n  ITEM_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.FilesBrowse\",\n   *    hint: \"PERMISSION.FilesBrowseHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  FILES_BROWSE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.FilesUpload\",\n   *    hint: \"PERMISSION.FilesUploadHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.ASSISTANT\n   * }\n   * ```\n   */\n  FILES_UPLOAD: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.JournalCreate\"\n   *    hint: \"PERMISSION.JournalCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  JOURNAL_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.MacroScript\",\n   *    hint: \"PERMISSION.MacroScriptHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  MACRO_SCRIPT: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.MessageWhisper\",\n   *    hint: \"PERMISSION.MessageWhisperHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  MESSAGE_WHISPER: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.NoteCreate\",\n   *    hint: \"PERMISSION.NoteCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  NOTE_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.SettingsModify\",\n   *    hint: \"PERMISSION.SettingsModifyHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.ASSISTANT\n   * }\n   * ```\n   */\n  SETTINGS_MODIFY: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.ShowCursor\",\n   *    hint: \"PERMISSION.ShowCursorHint\",\n   *    disableGM: true,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  SHOW_CURSOR: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.ShowRuler\",\n   *    hint: \"PERMISSION.ShowRulerHint\",\n   *    disableGM: true,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  SHOW_RULER: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.TemplateCreate\",\n   *    hint: \"PERMISSION.TemplateCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  TEMPLATE_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.TokenCreate\",\n   *    hint: \"PERMISSION.TokenCreateHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.ASSISTANT\n   * }\n   * ```\n   */\n  TOKEN_CREATE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.TokenConfigure\",\n   *    hint: \"PERMISSION.TokenConfigureHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.TRUSTED\n   * }\n   * ```\n   */\n  TOKEN_CONFIGURE: UserCapability;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *    label: \"PERMISSION.WallDoors\",\n   *    hint: \"PERMISSION.WallDoorsHint\",\n   *    disableGM: false,\n   *    defaultRole: USER_ROLES.PLAYER\n   * }\n   * ```\n   */\n  WALL_DOORS: UserCapability;\n};\n\n/**\n * The allowed directions of effect that a Wall can have\n * BOTH: The wall collides from both directions\n * LEFT: The wall collides only when a ray strikes its left side\n * RIGHT: The wall collides only when a ray strikes its right side\n */\nexport const WALL_DIRECTIONS: {\n  BOTH: 0;\n  LEFT: 1;\n  RIGHT: 2;\n};\n\n/**\n * The allowed door types which a Wall may contain\n * NONE: The wall does not contain a door\n * DOOR: The wall contains a regular door\n * SECRET: The wall contains a secret door\n */\nexport const WALL_DOOR_TYPES: {\n  NONE: 0;\n  DOOR: 1;\n  SECRET: 2;\n};\n\n/**\n * The allowed door states which may describe a Wall that contains a door\n * CLOSED: The door is closed\n * OPEN: The door is open\n * LOCKED: The door is closed and locked\n */\nexport const WALL_DOOR_STATES: {\n  CLOSED: 0;\n  OPEN: 1;\n  LOCKED: 2;\n};\n\n/**\n * The types of movement collision which a Wall may impose\n * NONE: Movement does not collide with this wall\n * NORMAL: Movement collides with this wall\n */\nexport const WALL_MOVEMENT_TYPES: {\n  NONE: 0;\n  NORMAL: 1;\n};\n\n/**\n * The types of sensory collision which a Wall may impose\n * NONE: Senses do not collide with this wall\n * NORMAL: Senses collide with this wall\n * LIMITED: Senses collide with the second intersection, bypassing the first\n */\nexport const WALL_SENSE_TYPES: {\n  NONE: 0;\n  NORMAL: 1;\n  LIMITED: 2;\n};\n\n/**\n * The allowed set of HTML template extensions\n * @defaultValue `[\"html\", \"hbs\"]`\n */\nexport const HTML_FILE_EXTENSIONS: string[];\n\n/**\n * The supported file extensions for image-type files\n * @defaultValue `[\"jpg\", \"jpeg\", \"png\", \"svg\", \"webp\"]`\n */\nexport const IMAGE_FILE_EXTENSIONS: string[];\n\n/**\n * The supported file extensions for video-type files\n * @defaultValue `[\"mp4\", \"ogg\", \"webm\", \"m4v\"]`\n */\nexport const VIDEO_FILE_EXTENSIONS: string[];\n\n/**\n * The supported file extensions for audio-type files\n * @defaultValue `[\"flac\", \"m4a\", \"mp3\", \"ogg\", \"opus\", \"wav\", \"webm\"]`\n */\nexport const AUDIO_FILE_EXTENSIONS: string[];\n\nexport type ActiveEffectMode = ValueOf<typeof ACTIVE_EFFECT_MODES>;\nexport type ChatMessageType = ValueOf<typeof CHAT_MESSAGE_TYPES>;\nexport type DiceRollMode = ValueOf<typeof DICE_ROLL_MODES>;\nexport type DrawingFillType = ValueOf<typeof DRAWING_FILL_TYPES>;\nexport type DrawingType = ValueOf<typeof DRAWING_TYPES>;\nexport type EntityPermission = ValueOf<typeof ENTITY_PERMISSIONS>;\nexport type EntityType = ValueOf<typeof ENTITY_TYPES>;\nexport type FolderEntityTypes = ValueOf<typeof FOLDER_ENTITY_TYPES>;\nexport type CompendiumEntityType = ValueOf<typeof COMPENDIUM_ENTITY_TYPES>;\nexport type GridType = ValueOf<typeof GRID_TYPES>;\nexport type MacroTypes = ValueOf<typeof CONST.MACRO_TYPES>;\nexport type MacroScopes = ValueOf<typeof CONST.MACRO_SCOPES>;\nexport type PackageAvailabilityCode = ValueOf<typeof PACKAGE_AVAILABILITY_CODES>;\nexport type PackageTypes = ValueOf<typeof PACKAGE_TYPES>;\nexport type PlaylistMode = ValueOf<typeof PLAYLIST_MODES>;\nexport type SoftwareUpdateChannel = ValueOf<typeof SOFTWARE_UPDATE_CHANNELS>;\nexport type SourceType = ValueOf<typeof SOURCE_TYPES>;\nexport type TableResultType = ValueOf<typeof TABLE_RESULT_TYPES>;\nexport type TextAnchorPoint = ValueOf<typeof TEXT_ANCHOR_POINTS>;\nexport type TileOcclusionModes = ValueOf<typeof TILE_OCCLUSION_MODES>;\nexport type TokenDisplayMode = ValueOf<typeof TOKEN_DISPLAY_MODES>;\nexport type TokenDisposition = ValueOf<typeof TOKEN_DISPOSITIONS>;\nexport type UserRole = ValueOf<typeof USER_ROLES>;\nexport type UserRoleName = ValueOf<typeof USER_ROLE_NAMES>;\nexport type WallDirection = ValueOf<typeof WALL_DIRECTIONS>;\nexport type WallDoorState = ValueOf<typeof WALL_DOOR_STATES>;\nexport type WallDoorType = ValueOf<typeof WALL_DOOR_TYPES>;\nexport type WallMovementType = ValueOf<typeof WALL_MOVEMENT_TYPES>;\nexport type WallSenseType = ValueOf<typeof WALL_SENSE_TYPES>;\n"]},53111:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\activeEffectData.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\nimport { EffectChangeData, EffectChangeDataConstructorData } from './effectChangeData';\nimport { EffectDurationData, EffectDurationDataConstructorData } from './effectDurationData';\n\ninterface ActiveEffectDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  changes: DocumentField<EffectChangeData[]> & {\n    default: [];\n    required: true;\n    type: [typeof EffectChangeData];\n  };\n  disabled: typeof fields.BOOLEAN_FIELD;\n  duration: DocumentField<EffectDurationData> & {\n    default: {};\n    required: true;\n    type: typeof EffectDurationData;\n  };\n  icon: typeof fields.IMAGE_FIELD;\n  label: typeof fields.BLANK_STRING;\n  origin: typeof fields.STRING_FIELD;\n  tint: typeof fields.COLOR_FIELD;\n  transfer: FieldReturnType<typeof fields.BOOLEAN_FIELD, { default: true }>;\n  flags: typeof fields.OBJECT_FIELD; // TODO: add more concrete object type\n}\n\ninterface ActiveEffectDataProperties {\n  /**\n   * The _id which uniquely identifies the ActiveEffect within a parent Actor or Item\n   */\n  _id: string | null;\n\n  /**\n   * The array of EffectChangeData objects which the ActiveEffect applies\n   */\n  changes: EffectChangeData[];\n\n  /**\n   * Is this ActiveEffect currently disabled?\n   * @defaultValue `false`\n   */\n  disabled: boolean;\n\n  /**\n   * An EffectDurationData object which describes the duration of the ActiveEffect\n   */\n  duration: EffectDurationData;\n\n  /**\n   * An icon image path used to depict the ActiveEffect\n   */\n  icon?: string | null;\n\n  /**\n   * A text label which describes the name of the ActiveEffect\n   * @defaultValue `''`\n   */\n  label: string;\n\n  /**\n   * A UUID reference to the document from which this ActiveEffect originated\n   */\n  origin?: string;\n\n  /**\n   * A color string which applies a tint to the ActiveEffect icon\n   */\n  tint?: string | null;\n\n  /**\n   * Does this ActiveEffect automatically transfer from an Item to an Actor?\n   * @defaultValue `true`\n   */\n  transfer: boolean;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface ActiveEffectDataConstructorData {\n  /**\n   * The _id which uniquely identifies the ActiveEffect within a parent Actor or Item\n   */\n  _id?: string | null;\n\n  /**\n   * The array of EffectChangeData objects which the ActiveEffect applies\n   */\n  changes?: EffectChangeDataConstructorData[] | null;\n\n  /**\n   * Is this ActiveEffect currently disabled?\n   * @defaultValue `false`\n   */\n  disabled?: boolean | null;\n\n  /**\n   * An EffectDurationData object which describes the duration of the ActiveEffect\n   */\n  duration?: EffectDurationDataConstructorData | null;\n\n  /**\n   * An icon image path used to depict the ActiveEffect\n   */\n  icon?: string | null;\n\n  /**\n   * A text label which describes the name of the ActiveEffect\n   * @defaultValue `''`\n   */\n  label?: string | null;\n\n  /**\n   * A UUID reference to the document from which this ActiveEffect originated\n   */\n  origin?: string | null;\n\n  /**\n   * A color string which applies a tint to the ActiveEffect icon\n   */\n  tint?: string | null;\n\n  /**\n   * Does this ActiveEffect automatically transfer from an Item to an Actor?\n   * @defaultValue `true`\n   */\n  transfer?: boolean | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for an ActiveEffect document.\n * @see BaseActiveEffect\n */\nexport declare class ActiveEffectData extends DocumentData<\n  ActiveEffectDataSchema,\n  ActiveEffectDataProperties,\n  PropertiesToSource<ActiveEffectDataProperties>,\n  ActiveEffectDataConstructorData,\n  documents.BaseActiveEffect\n> {\n  static defineSchema(): ActiveEffectDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface ActiveEffectData extends ActiveEffectDataProperties {}\n"]},62062:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\actorData.d.ts","import EmbeddedCollection from '../../abstract/embedded-collection.mjs';\nimport {\n  ConfiguredData,\n  ConfiguredDocumentClass,\n  ConfiguredSource,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\nimport { PrototypeTokenData } from '../data.mjs';\nimport { PrototypeTokenDataConstructorData } from './prototypeTokenData.js';\n\ninterface ActorDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  name: typeof fields.REQUIRED_STRING;\n  type: DocumentField<string> & {\n    type: typeof String;\n    required: true;\n    validate: (t: unknown) => boolean;\n    validationError: 'The provided Actor type must be in the array of types defined by the game system';\n  };\n  img: FieldReturnType<typeof fields.IMAGE_FIELD, { default: () => string }>;\n  data: FieldReturnType<typeof fields.OBJECT_FIELD, { default: (data: { type: string }) => any }>; // TODO\n  token: DocumentField<PrototypeTokenData> & {\n    type: typeof PrototypeTokenData;\n    required: true;\n    default: (data: unknown) => { name: string; img: string };\n  };\n  items: fields.EmbeddedCollectionField<typeof documents.BaseItem>;\n  effects: fields.EmbeddedCollectionField<typeof documents.BaseActiveEffect>;\n  folder: fields.ForeignDocumentField<{ type: typeof documents.BaseFolder }>;\n  sort: typeof fields.INTEGER_SORT_FIELD;\n  permission: typeof fields.DOCUMENT_PERMISSIONS;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface ActorDataBaseProperties {\n  /**\n   * The _id which uniquely identifies this Actor document\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * The name of this Actor\n   */\n  name: string;\n\n  /**\n   * An Actor subtype which configures the system data model applied\n   */\n  type: string;\n\n  /**\n   * An image file path which provides the artwork for this Actor\n   * @defaultValue `ActorDataConstructor.DEFAULT_ICON`\n   */\n  img: string | null;\n\n  /**\n   * The system data object which is defined by the system template.json model\n   */\n  data: object;\n\n  /**\n   * Default Token settings which are used for Tokens created from this Actor\n   */\n  token: PrototypeTokenData;\n\n  /**\n   * A Collection of Item embedded Documents\n   */\n  items: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseItem>, ActorData>;\n\n  /**\n   * A collection of ActiveEffect embedded Documents\n   */\n  effects: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseActiveEffect>, ActorData>;\n\n  /**\n   * The _id of a Folder which contains this Actor\n   * @defaultValue `null`\n   */\n  folder: string | null;\n\n  /**\n   * The numeric sort value which orders this Actor relative to its siblings\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * An object which configures user permissions to this Actor\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission: Partial<Record<string, foundry.CONST.EntityPermission>>;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface ActorDataConstructorData {\n  /**\n   * The _id which uniquely identifies this Actor document\n   * @defaultValue `null`\n   */\n  _id?: string | null;\n\n  /**\n   * The name of this Actor\n   */\n  name: string;\n\n  /**\n   * An Actor subtype which configures the system data model applied\n   */\n  type: ActorDataSource['type'];\n\n  /**\n   * An image file path which provides the artwork for this Actor\n   * @defaultValue `ActorDataConstructor.DEFAULT_ICON`\n   */\n  img?: string | null;\n\n  /**\n   * The system data object which is defined by the system template.json model\n   */\n  data?: DeepPartial<ActorDataSource['data']> | null;\n\n  /**\n   * Default Token settings which are used for Tokens created from this Actor\n   */\n  token?: PrototypeTokenDataConstructorData | null;\n\n  /**\n   * A Collection of Item embedded Documents\n   */\n  items?: ConstructorParameters<ConfiguredDocumentClass<typeof documents.BaseItem>>[0][] | null;\n\n  /**\n   * A collection of ActiveEffect embedded Documents\n   */\n  effects?: ConstructorParameters<ConfiguredDocumentClass<typeof documents.BaseActiveEffect>>[0][] | null;\n\n  /**\n   * The _id of a Folder which contains this Actor\n   * @defaultValue `null`\n   */\n  folder?: string | null;\n\n  /**\n   * The numeric sort value which orders this Actor relative to its siblings\n   * @defaultValue `0`\n   */\n  sort?: number | null;\n\n  /**\n   * An object which configures user permissions to this Actor\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission?: Partial<Record<string, foundry.CONST.EntityPermission>> | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\ntype ActorDataBaseSource = PropertiesToSource<ActorDataBaseProperties>;\ntype ActorDataProperties = ActorDataBaseProperties & ConfiguredData<'Actor'>;\ntype ActorDataSource = ActorDataBaseSource & ConfiguredSource<'Actor'>;\n\ntype DocumentDataConstructor = Pick<typeof DocumentData, keyof typeof DocumentData>;\n\ninterface ActorDataConstructor extends DocumentDataConstructor {\n  new (data: ActorDataConstructorData, document?: documents.BaseActor | null): ActorData;\n\n  defineSchema(): ActorDataSchema;\n\n  /**\n   * The default icon used for newly created Actor documents\n   * @defaultValue `CONST.DEFAULT_TOKEN`\n   */\n  DEFAULT_ICON: string;\n}\n\n/**\n * The data schema for an Actor document.\n * @see BaseActor\n */\nexport type ActorData = DocumentData<\n  ActorDataSchema,\n  ActorDataProperties,\n  ActorDataSource,\n  ActorDataConstructorData,\n  documents.BaseActor\n> &\n  ActorDataProperties & {\n    _initializeSource(data: ActorDataConstructorData): ActorDataSource;\n\n    _initialize(): void;\n  };\n\nexport declare const ActorData: ActorDataConstructor;\n"]},80350:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\ambientLightData.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as CONST from '../../constants.mjs';\nimport { BaseAmbientLight } from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\nimport { AnimationData, AnimationDataConstructorData } from './animationData';\nimport { DarknessActivation, DarknessActivationConstructorData } from './darknessActivation';\n\ninterface AmbientLightDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  t: DocumentField<CONST.SourceType> & {\n    type: String;\n    required: true;\n    default: 'l';\n    validate: (t: unknown) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.SOURCE_TYPES';\n  };\n  x: typeof fields.REQUIRED_NUMBER;\n  y: typeof fields.REQUIRED_NUMBER;\n  rotation: FieldReturnType<typeof fields.ANGLE_FIELD, { default: 0 }>;\n  dim: typeof fields.REQUIRED_NUMBER;\n  bright: typeof fields.REQUIRED_NUMBER;\n  angle: typeof fields.ANGLE_FIELD;\n  tintColor: typeof fields.COLOR_FIELD;\n  tintAlpha: FieldReturnType<typeof fields.ALPHA_FIELD, { default: 0.25 }>;\n  lightAnimation: DocumentField<AnimationData> & {\n    type: typeof AnimationData;\n    required: true;\n    default: {};\n  };\n  darknessThreshold: FieldReturnType<typeof fields.ALPHA_FIELD, { default: 0 }>;\n  darkness: DocumentField<DarknessActivation> & {\n    type: typeof DarknessActivation;\n    required: true;\n    default: {};\n  };\n  hidden: typeof fields.BOOLEAN_FIELD;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface AmbientLightDataProperties {\n  /**\n   * The _id which uniquely identifies this BaseAmbientLight embedded document\n   */\n  _id: string | null;\n\n  /**\n   * The source type in CONST.SOURCE_TYPES which defines the behavior of this light\n   * @defaultValue `'l'`\n   */\n  t: CONST.SourceType;\n\n  /**\n   * The x-coordinate position of the origin of the light\n   * @defaultValue `0`\n   */\n  x: number;\n\n  /**\n   * The y-coordinate position of the origin of the light\n   * @defaultValue `0`\n   */\n  y: number;\n\n  /**\n   * The angle of rotation for the tile between 0 and 360\n   * @defaultValue `0`\n   */\n  rotation: number;\n\n  /**\n   * The radius of dim light emitted in distance units, negative values produce darkness\n   * @defaultValue `0`\n   */\n  dim: number;\n\n  /**\n   * The radius of bright light emitted in distance units, negative values produce blackness\n   * @defaultValue `0`\n   */\n  bright: number;\n\n  /**\n   * The angle of emission of the light source in degrees\n   * @defaultValue `360`\n   */\n  angle: number;\n\n  /**\n   * An optional color string which applies coloration to the resulting light source\n   */\n  tintColor?: string | null;\n\n  /**\n   * The intensity of coloration applied to this light source, a number between 0 and 1\n   * @defaultValue `0.25`\n   */\n  tintAlpha: number;\n\n  /**\n   * A data object which configures token light animation settings, if one is applied\n   * @defaultValue `{}`\n   */\n  lightAnimation: AnimationData;\n\n  /**\n   * A value of the Scene darkness level, above which this light source will be active\n   * @defaultValue `0`\n   */\n  darknessThreshold: number;\n\n  /**\n   * @defaultValue `{}`\n   */\n  darkness: DarknessActivation;\n\n  /**\n   * Is the light source currently hidden?\n   * @defaultValue `false`\n   */\n  hidden: boolean;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface AmbientLightDataConstructorData {\n  /**\n   * The _id which uniquely identifies this BaseAmbientLight embedded document\n   */\n  _id?: string | null;\n\n  /**\n   * The source type in CONST.SOURCE_TYPES which defines the behavior of this light\n   * @defaultValue `'l'`\n   */\n  t?: CONST.SourceType | null;\n\n  /**\n   * The x-coordinate position of the origin of the light\n   * @defaultValue `0`\n   */\n  x?: number | null;\n\n  /**\n   * The y-coordinate position of the origin of the light\n   * @defaultValue `0`\n   */\n  y?: number | null;\n\n  /**\n   * The angle of rotation for the tile between 0 and 360\n   * @defaultValue `0`\n   */\n  rotation?: number | null;\n\n  /**\n   * The radius of dim light emitted in distance units, negative values produce darkness\n   * @defaultValue `0`\n   */\n  dim?: number | null;\n\n  /**\n   * The radius of bright light emitted in distance units, negative values produce blackness\n   * @defaultValue `0`\n   */\n  bright?: number | null;\n\n  /**\n   * The angle of emission of the light source in degrees\n   * @defaultValue `360`\n   */\n  angle?: number | null;\n\n  /**\n   * An optional color string which applies coloration to the resulting light source\n   */\n  tintColor?: string | null;\n\n  /**\n   * The intensity of coloration applied to this light source, a number between 0 and 1\n   * @defaultValue `0.25`\n   */\n  tintAlpha?: number | null;\n\n  /**\n   * A data object which configures token light animation settings, if one is applied\n   * @defaultValue `{}`\n   */\n  lightAnimation?: AnimationDataConstructorData | null;\n\n  /**\n   * A value of the Scene darkness level, above which this light source will be active\n   * @defaultValue `0`\n   */\n  darknessThreshold?: number | null;\n\n  /**\n   * @defaultValue `{}`\n   */\n  darkness?: DarknessActivationConstructorData | null;\n\n  /**\n   * Is the light source currently hidden?\n   * @defaultValue `false`\n   */\n  hidden?: boolean | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for a AmbientLight embedded document.\n * @see BaseAmbientLight\n */\nexport declare class AmbientLightData extends DocumentData<\n  AmbientLightDataSchema,\n  AmbientLightDataProperties,\n  PropertiesToSource<AmbientLightDataProperties>,\n  AmbientLightDataConstructorData,\n  BaseAmbientLight\n> {\n  static defineSchema(): AmbientLightDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface AmbientLightData extends AmbientLightDataProperties {}\n"]},81290:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\animationData.d.ts","import { PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport { BaseAmbientLight } from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\n\ninterface AnimationDataSchema extends DocumentSchema {\n  type: typeof fields.STRING_FIELD;\n  speed: DocumentField<number> & {\n    type: typeof Number;\n    required: false;\n    default: 5;\n    validate: (a: number) => boolean;\n    validationError: 'Light animation speed must be an integer between 1 and 10';\n  };\n  intensity: DocumentField<number> & {\n    type: typeof Number;\n    required: false;\n    default: 5;\n    validate: (a: number) => boolean;\n    validationError: 'Light animation intensity must be an integer between 1 and 10';\n  };\n}\n\ninterface AnimationDataProperties {\n  /**\n   * The animation type which is applied\n   */\n  type?: string;\n\n  /**\n   * The speed of the animation, a number between 1 and 10\n   * @defaultValue `5`\n   */\n  speed: number;\n\n  /**\n   * The intensity of the animation, a number between 1 and 10\n   * @defaultValue `5`\n   */\n  intensity: number;\n}\n\nexport interface AnimationDataConstructorData {\n  /**\n   * The animation type which is applied\n   */\n  type?: string | null;\n\n  /**\n   * The speed of the animation, a number between 1 and 10\n   * @defaultValue `5`\n   */\n  speed?: number | null;\n\n  /**\n   * The intensity of the animation, a number between 1 and 10\n   * @defaultValue `5`\n   */\n  intensity?: number | null;\n}\n\n/**\n * An embedded data object which defines the properties of a light source animation\n */\nexport declare class AnimationData extends DocumentData<\n  AnimationDataSchema,\n  AnimationDataProperties,\n  PropertiesToSource<AnimationDataProperties>,\n  AnimationDataConstructorData,\n  BaseAmbientLight\n> {\n  static defineSchema(): AnimationDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface AnimationData extends AnimationDataProperties {}\n"]},77162:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\chatMessageData.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport { CONST, documents } from '../../module.mjs';\nimport * as fields from '../fields.mjs';\nimport { ChatSpeakerData, ChatSpeakerDataConstructorData } from './chatSpeakerData';\n\ninterface ChatMessageDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  type: DocumentField<CONST.ChatMessageType> & {\n    type: typeof Number;\n    required: true;\n    default: typeof CONST.CHAT_MESSAGE_TYPES.OTHER;\n    validate: typeof _validateChatMessageType;\n    validationError: 'The provided ChatMessage type must be in CONST.CHAT_MESSAGE_TYPES';\n  };\n  user: fields.ForeignDocumentField<{ type: typeof documents.BaseUser; required: true }>;\n  timestamp: FieldReturnType<typeof fields.TIMESTAMP_FIELD, { required: true }>;\n  flavor: typeof fields.STRING_FIELD;\n  content: typeof fields.BLANK_STRING;\n  speaker: DocumentField<ChatSpeakerData> & { type: typeof ChatSpeakerData; required: true; default: {} };\n  whisper: DocumentField<string[]> & {\n    type: typeof String[];\n    clean: (users: Array<{ id: string } | string>) => string[];\n    required: true;\n    default: string[];\n  };\n  blind: typeof fields.BOOLEAN_FIELD;\n  roll: typeof fields.JSON_FIELD;\n  sound: typeof fields.AUDIO_FIELD;\n  emote: typeof fields.BOOLEAN_FIELD;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface ChatMessageDataProperties {\n  /**\n   * The _id which uniquely identifies this ChatMessage document\n   */\n  _id: string | null;\n\n  /**\n   * The message type from CONST.CHAT_MESSAGE_TYPES\n   * @defaultValue `CONST.CHAT_MESSAGE_TYPES.OTHER`\n   */\n  type: CONST.ChatMessageType;\n\n  /**\n   * The _id of the User document who generated this message\n   */\n  user: string | null;\n\n  /**\n   * The timestamp at which point this message was generated\n   * @defaultValue `Date.now()`\n   */\n  timestamp: number;\n\n  /**\n   * An optional flavor text message which summarizes this message\n   */\n  flavor?: string;\n\n  /**\n   * The HTML content of this chat message\n   * @defaultValue `\"\"`\n   */\n  content: string;\n\n  /**\n   * A ChatSpeakerData object which describes the origin of the ChatMessage\n   */\n  speaker: ChatSpeakerData;\n\n  /**\n   * An array of User _id values to whom this message is privately whispered\n   * @defaultValue `[]`\n   */\n  whisper: string[];\n\n  /**\n   * Is this message sent blindly where the creating User cannot see it?\n   * @defaultValue `false`\n   */\n  blind: boolean;\n\n  /**\n   * The serialized content of a Roll instance which belongs to the ChatMessage\n   * @defaultValue `undefined`\n   */\n  roll?: string;\n\n  /**\n   * The URL of an audio file which plays when this message is received\n   * @defaultValue `undefined`\n   */\n  sound?: string | null;\n\n  /**\n   * Is this message styled as an emote?\n   * @defaultValue `false`\n   */\n  emote: boolean;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\nexport interface ChatMessageDataConstructorData {\n  /**\n   * The _id which uniquely identifies this ChatMessage document\n   */\n  _id?: string | null;\n\n  /**\n   * The message type from CONST.CHAT_MESSAGE_TYPES\n   * @defaultValue `CONST.CHAT_MESSAGE_TYPES.OTHER`\n   */\n  type?: CONST.ChatMessageType | null;\n\n  /**\n   * The _id of the User document who generated this message\n   */\n  user?: string | null;\n\n  /**\n   * The timestamp at which point this message was generated\n   * @defaultValue `Date.now()`\n   */\n  timestamp?: number | null;\n\n  /**\n   * An optional flavor text message which summarizes this message\n   */\n  flavor?: string | null;\n\n  /**\n   * The HTML content of this chat message\n   * @defaultValue `\"\"`\n   */\n  content?: string | null;\n\n  /**\n   * A ChatSpeakerData object which describes the origin of the ChatMessage\n   */\n  speaker?: ChatSpeakerDataConstructorData | null;\n\n  /**\n   * An array of User _id values to whom this message is privately whispered\n   * @defaultValue `[]`\n   */\n  whisper?: string[] | null;\n\n  /**\n   * Is this message sent blindly where the creating User cannot see it?\n   * @defaultValue `false`\n   */\n  blind?: boolean | null;\n\n  /**\n   * The serialized content of a Roll instance which belongs to the ChatMessage\n   * @defaultValue `undefined`\n   */\n  roll?: string | null;\n\n  /**\n   * The URL of an audio file which plays when this message is received\n   * @defaultValue `undefined`\n   */\n  sound?: string | null;\n\n  /**\n   * Is this message styled as an emote?\n   * @defaultValue `false`\n   */\n  emote?: boolean | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * An embedded data object which defines the properties of a light source animation\n */\nexport declare class ChatMessageData extends DocumentData<\n  ChatMessageDataSchema,\n  ChatMessageDataProperties,\n  PropertiesToSource<ChatMessageDataProperties>,\n  ChatMessageDataConstructorData,\n  documents.BaseChatMessage\n> {\n  static defineSchema(): ChatMessageDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface ChatMessageData extends ChatMessageDataProperties {}\n\n/**\n * Validate that a ChatMessage has a valid type\n * @param type - The assigned message type\n * @returns Is it valid?\n */\ndeclare function _validateChatMessageType(type: number): boolean;\n"]},45557:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\chatSpeakerData.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport { BaseActor, BaseChatMessage, BaseScene } from '../../documents.mjs';\nimport { ForeignDocumentField } from '../fields.mjs';\nimport * as fields from '../fields.mjs';\n\ninterface ChatSpeakerDataSchema extends DocumentSchema {\n  scene: ForeignDocumentField<{ type: typeof BaseScene; required: false }>;\n  actor: ForeignDocumentField<{ type: typeof BaseActor; required: false }>;\n  token: FieldReturnType<typeof fields.DOCUMENT_ID, { required: false }>;\n  alias: typeof fields.STRING_FIELD;\n}\n\ninterface ChatSpeakerDataProperties {\n  /**\n   * The _id of the Scene where this message was created\n   */\n  scene: string | null;\n\n  /**\n   * The _id of the Actor who generated this message\n   */\n  actor: string | null;\n\n  /**\n   * The _id of the Token who generated this message\n   */\n  token: string | null;\n\n  /**\n   * An overridden alias name used instead of the Actor or Token name\n   */\n  alias?: string;\n}\n\ninterface ChatSpeakerDataConstructorData {\n  /**\n   * The _id of the Scene where this message was created\n   */\n  scene?: string | null;\n\n  /**\n   * The _id of the Actor who generated this message\n   */\n  actor?: string | null;\n\n  /**\n   * The _id of the Token who generated this message\n   */\n  token?: string | null;\n\n  /**\n   * An overridden alias name used instead of the Actor or Token name\n   */\n  alias?: string | null;\n}\n\n/**\n * An embedded data object which defines the properties of a light source animation\n */\nexport declare class ChatSpeakerData extends DocumentData<\n  ChatSpeakerDataSchema,\n  ChatSpeakerDataProperties,\n  PropertiesToSource<ChatSpeakerDataProperties>,\n  ChatSpeakerDataConstructorData,\n  BaseChatMessage\n> {\n  static defineSchema(): ChatSpeakerDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface ChatSpeakerData extends ChatSpeakerDataProperties {}\n"]},24458:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\combatData.d.ts","import {\n  ConfiguredDocumentClass,\n  ConstructorDataType,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport EmbeddedCollection from '../../abstract/embedded-collection.mjs';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\nimport { CombatantData } from './combatantData';\n\ninterface CombatDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  scene: fields.ForeignDocumentField<{ type: typeof documents.BaseScene }>;\n  combatants: fields.EmbeddedCollectionField<typeof documents.BaseCombatant>;\n  active: typeof fields.BOOLEAN_FIELD;\n  round: FieldReturnType<typeof fields.NONNEGATIVE_INTEGER_FIELD, { default: 0; required: true }>;\n  turn: FieldReturnType<typeof fields.NONNEGATIVE_INTEGER_FIELD, { default: 0; required: true }>;\n  sort: typeof fields.INTEGER_SORT_FIELD;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface CombatDataProperties {\n  /** The _id which uniquely identifies this Combat document */\n  _id: string | null;\n\n  /** The _id of a Scene within which this Combat occurs */\n  scene: string | null;\n\n  /** A Collection of Combatant embedded Documents */\n  combatants: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseCombatant>, CombatData>;\n\n  /**\n   * Is the Combat encounter currently active?\n   * @defaultValue `false`\n   */\n  active: boolean;\n\n  /**\n   * The current round of the Combat encounter\n   * @defaultValue `0`\n   */\n  round: number;\n\n  /**\n   * The current turn in the Combat round\n   * @defaultValue `0`\n   */\n  turn: number;\n\n  /**\n   * The current sort order of this Combat relative to others in the same Scene\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface CombatDataConstructorData {\n  /** The _id which uniquely identifies this Combat document */\n  _id?: string | null;\n\n  /** The _id of a Scene within which this Combat occurs */\n  scene?: string | null;\n\n  /** A Collection of Combatant embedded Documents */\n  combatants?: ConstructorDataType<CombatantData>[] | null;\n\n  /**\n   * Is the Combat encounter currently active?\n   * @defaultValue `false`\n   */\n  active?: boolean | null;\n\n  /**\n   * The current round of the Combat encounter\n   * @defaultValue `0`\n   */\n  round?: number | null;\n\n  /**\n   * The current turn in the Combat round\n   * @defaultValue `0`\n   */\n  turn?: number | null;\n\n  /**\n   * The current sort order of this Combat relative to others in the same Scene\n   * @defaultValue `0`\n   */\n  sort?: number | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for an Combat document.\n * @see BaseCombat\n */\nexport declare class CombatData extends DocumentData<\n  CombatDataSchema,\n  CombatDataProperties,\n  PropertiesToSource<CombatDataProperties>,\n  CombatDataConstructorData,\n  documents.BaseCombat\n> {\n  static defineSchema(): CombatDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface CombatData extends CombatDataProperties {}\n"]},35976:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\combatantData.d.ts","import { PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\n\ninterface CombatantDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  actorId: fields.ForeignDocumentField<{ type: typeof documents.BaseActor }>;\n  tokenId: fields.ForeignDocumentField<{ type: typeof documents.BaseToken }>;\n  name: typeof fields.STRING_FIELD;\n  img: typeof fields.IMAGE_FIELD;\n  initiative: typeof fields.NUMERIC_FIELD;\n  hidden: typeof fields.BOOLEAN_FIELD;\n  defeated: typeof fields.BOOLEAN_FIELD;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface CombatantDataProperties {\n  /** The _id which uniquely identifies this Combatant embedded document */\n  _id: string | null;\n\n  actorId: string | null;\n\n  /** The _id of a Token associated with this Combatant */\n  tokenId: string | null;\n\n  /** A customized name which replaces the name of the Token in the tracker */\n  name: string | undefined;\n\n  /** A customized image which replaces the Token image in the tracker */\n  img: string | undefined | null;\n\n  /** The initiative score for the Combatant which determines its turn order */\n  initiative: number | undefined | null;\n\n  /**\n   * Is this Combatant currently hidden?\n   * @defaultValue `false`\n   */\n  hidden: boolean;\n\n  /**\n   * Has this Combatant been defeated?\n   * @defaultValue `false`\n   */\n  defeated: boolean;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\nexport interface CombatantDataConstructorData {\n  /** The _id which uniquely identifies this Combatant embedded document */\n  _id?: string | null;\n\n  actorId?: string | null;\n\n  /** The _id of a Token associated with this Combatant */\n  tokenId?: string | null;\n\n  /** A customized name which replaces the name of the Token in the tracker */\n  name?: string | null;\n\n  /** A customized image which replaces the Token image in the tracker */\n  img?: string | null;\n\n  /** The initiative score for the Combatant which determines its turn order */\n  initiative?: number | null;\n\n  /**\n   * Is this Combatant currently hidden?\n   * @defaultValue `false`\n   */\n  hidden?: boolean | null;\n\n  /**\n   * Has this Combatant been defeated?\n   * @defaultValue `false`\n   */\n  defeated?: boolean | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for a Combatant embedded document within a CombatEncounter document.\n * @see CombatantData\n */\nexport declare class CombatantData extends DocumentData<\n  CombatantDataSchema,\n  CombatantDataProperties,\n  PropertiesToSource<CombatantDataProperties>,\n  CombatantDataConstructorData,\n  documents.BaseCombatant\n> {\n  /**\n   *  @remarks\n   *  This constructor only exists to restrict the type\n   */\n  static defineSchema(): CombatantDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface CombatantData extends CombatantDataProperties {}\n"]},61521:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\darknessActivation.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport { BaseAmbientLight } from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\n\ninterface DarknessActivationSchema extends DocumentSchema {\n  min: FieldReturnType<typeof fields.ALPHA_FIELD, { default: 0 }>;\n  max: typeof fields.ALPHA_FIELD;\n}\n\ninterface DarknessActivationProperties {\n  /**\n   * The minimum darkness level for which activation occurs\n   * @defaultValue `0`\n   */\n  min: number;\n\n  /**\n   * The maximum darkness level for which activation occurs\n   * @defaultValue `1`\n   */\n  max: number;\n}\n\nexport interface DarknessActivationConstructorData {\n  /**\n   * The minimum darkness level for which activation occurs\n   * @defaultValue `0`\n   */\n  min?: number | null;\n\n  /**\n   * The maximum darkness level for which activation occurs\n   * @defaultValue `1`\n   */\n  max?: number | null;\n}\n\n/**\n * An embedded data object which defines the darkness range during which some attribute is active\n */\nexport declare class DarknessActivation extends DocumentData<\n  DarknessActivationSchema,\n  DarknessActivationProperties,\n  PropertiesToSource<DarknessActivationProperties>,\n  DarknessActivationConstructorData,\n  BaseAmbientLight\n> {\n  static defineSchema(): DarknessActivationSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface DarknessActivation extends DarknessActivationProperties {}\n"]},56633:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\drawingData.d.ts","import DocumentData from '../../abstract/data.mjs';\nimport { BaseUser } from '../../documents.mjs';\nimport { ForeignDocumentField } from '../fields.mjs';\nimport * as fields from '../fields.mjs';\nimport * as documents from '../../documents.mjs';\nimport { ConfiguredDocumentClass, FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\n\ninterface DrawingDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  author: ForeignDocumentField<{ type: typeof documents.BaseUser; required: true }>;\n  type: DocumentField<foundry.CONST.DrawingType> & {\n    type: typeof String;\n    required: true;\n    default: typeof CONST.DRAWING_TYPES.POLYGON;\n    validate: (t: unknown) => t is foundry.CONST.DrawingType;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.DRAWING_TYPES';\n  };\n  x: typeof fields.REQUIRED_NUMBER;\n  y: typeof fields.REQUIRED_NUMBER;\n  width: typeof fields.REQUIRED_NUMBER;\n  height: typeof fields.REQUIRED_NUMBER;\n  rotation: FieldReturnType<typeof fields.ANGLE_FIELD, { default: 0 }>;\n  z: typeof fields.REQUIRED_NUMBER;\n  points: DocumentField<Array<[x: number, y: number]>> & {\n    type: [typeof Array];\n    required: true;\n    default: [];\n    validate: typeof _validateDrawingPoints;\n    validationError: 'Invalid {name} {field} which must be an array of points [x,y]';\n  };\n  bezierFactor: FieldReturnType<typeof fields.ALPHA_FIELD, { default: 0 }>;\n  fillType: FieldReturnType<\n    typeof fields.REQUIRED_NUMBER,\n    {\n      default: typeof CONST.DRAWING_FILL_TYPES.NONE;\n      validate: (v: unknown) => v is foundry.CONST.DrawingFillType;\n      validationError: 'Invalid {name} {field} which must be a value in CONST.DRAWING_FILL_TYPES';\n    }\n  >;\n  fillColor: typeof fields.COLOR_FIELD;\n  fillAlpha: FieldReturnType<typeof fields.ALPHA_FIELD, { default: 0.5 }>;\n  strokeWidth: FieldReturnType<typeof fields.NONNEGATIVE_INTEGER_FIELD, { default: 8 }>;\n  strokeColor: typeof fields.COLOR_FIELD;\n  strokeAlpha: typeof fields.ALPHA_FIELD;\n  texture: typeof fields.IMAGE_FIELD;\n  text: typeof fields.STRING_FIELD;\n  fontFamily: FieldReturnType<typeof fields.REQUIRED_STRING, { default: 'Signika' }>;\n  fontSize: FieldReturnType<\n    typeof fields.POSITIVE_INTEGER_FIELD,\n    {\n      default: 48;\n      validate: (n: unknown) => boolean;\n      validationError: 'Invalid {name} {field} which must be an integer between 8 and 256';\n    }\n  >;\n  textColor: FieldReturnType<typeof fields.COLOR_FIELD, { default: '#FFFFFF' }>;\n  textAlpha: typeof fields.ALPHA_FIELD;\n  hidden: typeof fields.BOOLEAN_FIELD;\n  locked: typeof fields.BOOLEAN_FIELD;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface DrawingDataProperties {\n  /**\n   * The _id which uniquely identifies this BaseDrawing embedded document\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * @defaultValue `null`\n   */\n  author: string | null;\n\n  /**\n   * The value in CONST.DRAWING_TYPES which defines the geometry type of this drawing\n   * @defaultValue `CONST.DRAWING_TYPES.POLYGON`\n   */\n  type: foundry.CONST.DrawingType;\n\n  /**\n   * The x-coordinate position of the top-left corner of the drawn shape\n   * @defaultValue `0`\n   */\n  x: number;\n\n  /**\n   * The y-coordinate position of the top-left corner of the drawn shape\n   * @defaultValue `0`\n   */\n  y: number;\n\n  /**\n   * The pixel width of the drawing figure\n   * @defaultValue `0`\n   */\n  width: number;\n\n  /**\n   * The pixel height of the drawing figure\n   * @defaultValue `0`\n   */\n  height: number;\n\n  /**\n   * The angle of rotation for the drawing figure\n   * @defaultValue `0`\n   */\n  rotation: number;\n\n  /**\n   * The z-index of this drawing relative to other siblings\n   * @defaultValue `0`\n   */\n  z: number;\n\n  /**\n   * An array of points [x,y] which define polygon vertices\n   * @defaultValue `[]`\n   */\n  points: Array<[x: number, y: number]>;\n\n  /**\n   * An amount of bezier smoothing applied, between 0 and 1\n   * @defaultValue `0`\n   */\n  bezierFactor: number;\n\n  /**\n   * The fill type of the drawing shape, a value from CONST.DRAWING_FILL_TYPES\n   * @defaultValue `CONST.DRAWING_FILL_TYPES.NONE`\n   */\n  fillType: foundry.CONST.DrawingFillType;\n\n  /**\n   * An optional color string with which to fill the drawing geometry\n   */\n  fillColor?: string | null;\n\n  /**\n   * The opacity of the fill applied to the drawing geometry\n   * @defaultValue `0.5`\n   */\n  fillAlpha: number;\n\n  /**\n   * The width in pixels of the boundary lines of the drawing geometry\n   * @defaultValue `8`\n   */\n  strokeWidth: number;\n\n  /**\n   * The color of the boundary lines of the drawing geometry\n   */\n  strokeColor?: string | null;\n\n  /**\n   * The opacity of the boundary lines of the drawing geometry\n   * @defaultValue `1`\n   */\n  strokeAlpha: number;\n\n  /**\n   * The path to a tiling image texture used to fill the drawing geometry\n   */\n  texture?: string | null;\n\n  /**\n   * Optional text which is displayed overtop of the drawing\n   */\n  text?: string;\n\n  /**\n   * The font family used to display text within this drawing\n   * @defaultValue `'Signika'`\n   */\n  fontFamily: string;\n\n  /**\n   * The font size used to display text within this drawing\n   * @defaultValue `48`\n   */\n  fontSize: number;\n\n  /**\n   * The color of text displayed within this drawing\n   * @defaultValue `'#FFFFFF'`\n   */\n  textColor: string | null;\n\n  /**\n   * The opacity of text displayed within this drawing\n   * @defaultValue `1`\n   */\n  textAlpha: number;\n\n  /**\n   * Is the drawing currently hidden?\n   * @defaultValue `false`\n   */\n  hidden: boolean;\n\n  /**\n   * Is the drawing currently locked?\n   * @defaultValue `false`\n   */\n  locked: boolean;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface DrawingDataConstructorData {\n  /**\n   * The _id which uniquely identifies this BaseDrawing embedded document\n   * @defaultValue `null`\n   */\n  _id?: string | null;\n\n  /**\n   * @defaultValue `null`\n   */\n  author?: InstanceType<ConfiguredDocumentClass<typeof BaseUser>> | string | null;\n\n  /**\n   * The value in CONST.DRAWING_TYPES which defines the geometry type of this drawing\n   * @defaultValue `CONST.DRAWING_TYPES.POLYGON`\n   */\n  type?: foundry.CONST.DrawingType | null;\n\n  /**\n   * The x-coordinate position of the top-left corner of the drawn shape\n   * @defaultValue `0`\n   */\n  x?: number | null;\n\n  /**\n   * The y-coordinate position of the top-left corner of the drawn shape\n   * @defaultValue `0`\n   */\n  y?: number | null;\n\n  /**\n   * The pixel width of the drawing figure\n   * @defaultValue `0`\n   */\n  width?: number | null;\n\n  /**\n   * The pixel height of the drawing figure\n   * @defaultValue `0`\n   */\n  height?: number | null;\n\n  /**\n   * The angle of rotation for the drawing figure\n   * @defaultValue `0`\n   */\n  rotation?: number | null;\n\n  /**\n   * The z-index of this drawing relative to other siblings\n   * @defaultValue `0`\n   */\n  z?: number | null;\n\n  /**\n   * An array of points [x,y] which define polygon vertices\n   * @defaultValue `[]`\n   */\n  points?: Array<[x: number, y: number]> | null;\n\n  /**\n   * An amount of bezier smoothing applied, between 0 and 1\n   * @defaultValue `0`\n   */\n  bezierFactor?: number | null;\n\n  /**\n   * The fill type of the drawing shape, a value from CONST.DRAWING_FILL_TYPES\n   * @defaultValue `CONST.DRAWING_FILL_TYPES.NONE`\n   */\n  fillType?: foundry.CONST.DrawingFillType | null;\n\n  /**\n   * An optional color string with which to fill the drawing geometry\n   */\n  fillColor?: string | null;\n\n  /**\n   * The opacity of the fill applied to the drawing geometry\n   * @defaultValue `0.5`\n   */\n  fillAlpha?: number | null;\n\n  /**\n   * The width in pixels of the boundary lines of the drawing geometry\n   * @defaultValue `8`\n   */\n  strokeWidth?: number | null;\n\n  /**\n   * The color of the boundary lines of the drawing geometry\n   */\n  strokeColor?: string | null;\n\n  /**\n   * The opacity of the boundary lines of the drawing geometry\n   * @defaultValue `1`\n   */\n  strokeAlpha?: number | null;\n\n  /**\n   * The path to a tiling image texture used to fill the drawing geometry\n   */\n  texture?: string | null;\n\n  /**\n   * Optional text which is displayed overtop of the drawing\n   */\n  text?: string | null;\n\n  /**\n   * The font family used to display text within this drawing\n   * @defaultValue `'Signika'`\n   */\n  fontFamily?: string | null;\n\n  /**\n   * The font size used to display text within this drawing\n   * @defaultValue `48`\n   */\n  fontSize?: number | null;\n\n  /**\n   * The color of text displayed within this drawing\n   * @defaultValue `'#FFFFFF'`\n   */\n  textColor?: string | null;\n\n  /**\n   * The opacity of text displayed within this drawing\n   * @defaultValue `1`\n   */\n  textAlpha?: number | null;\n\n  /**\n   * Is the drawing currently hidden?\n   * @defaultValue `false`\n   */\n  hidden?: boolean | null;\n\n  /**\n   * Is the drawing currently locked?\n   * @defaultValue `false`\n   */\n  locked?: boolean | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for a Drawing embedded document.\n * @see BaseDrawing\n *\n * @param data     - Initial data used to construct the data object\n * @param document - The embedded document to which this data object belongs\n */\nexport declare class DrawingData extends DocumentData<\n  DrawingDataSchema,\n  DrawingDataProperties,\n  PropertiesToSource<DrawingDataProperties>,\n  DrawingDataConstructorData,\n  documents.BaseFolder\n> {\n  static defineSchema(): DrawingDataSchema;\n\n  /** @override */\n  protected _initialize(): void;\n\n  /** @override */\n  protected _validateDocument(): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface DrawingData extends DrawingDataProperties {}\n\n/**\n * Validate the array of points which comprises a polygon drawing\n * @param points - The candidate points\n * @returns Is the array valid?\n */\ndeclare function _validateDrawingPoints(points: number[][]): boolean;\n"]},51088:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\effectChangeData.d.ts","import { DocumentData } from '../../abstract/module.mjs';\nimport { BaseActiveEffect } from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\nimport * as CONST from '../../constants.mjs';\nimport { PropertiesToSource } from '../../../../types/helperTypes';\n\ninterface EffectChangeDataSchema extends DocumentSchema {\n  key: typeof fields.BLANK_STRING;\n  value: typeof fields.BLANK_STRING;\n  mode: DocumentField<number> & {\n    type: typeof Number;\n    required: true;\n    default: typeof CONST.ACTIVE_EFFECT_MODES.ADD;\n    validate: (m: unknown) => boolean;\n    validationError: 'Invalid mode specified for change in ActiveEffectData';\n  };\n  priority: typeof fields.NUMERIC_FIELD;\n}\n\ninterface EffectChangeDataProperties {\n  /**\n   * The attribute path in the Actor or Item data which the change modifies\n   * @defaultValue `''`\n   */\n  key: string;\n\n  /**\n   * The value of the change effect\n   * @defaultValue `''`\n   */\n  value: string;\n\n  /**\n   * The modification mode with which the change is applied\n   */\n  mode: CONST.ActiveEffectMode;\n\n  /**\n   * The priority level with which this change is applied\n   */\n  priority?: number | null;\n}\n\nexport interface EffectChangeDataConstructorData {\n  /**\n   * The attribute path in the Actor or Item data which the change modifies\n   * @defaultValue `''`\n   */\n  key?: string | null;\n\n  /**\n   * The value of the change effect\n   * @defaultValue `''`\n   */\n  value?: string | null;\n\n  /**\n   * The modification mode with which the change is applied\n   */\n  mode?: CONST.ActiveEffectMode | null;\n\n  /**\n   * The priority level with which this change is applied\n   */\n  priority?: number | null;\n}\n\n/**\n * An embedded data structure which defines the structure of a change applied by an ActiveEffect.\n * @see ActiveEffectData\n */\nexport declare class EffectChangeData extends DocumentData<\n  EffectChangeDataSchema,\n  EffectChangeDataProperties,\n  PropertiesToSource<EffectChangeDataProperties>,\n  EffectChangeDataConstructorData,\n  BaseActiveEffect\n> {\n  static defineSchema(): EffectChangeDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface EffectChangeData extends EffectChangeDataProperties {}\n"]},89353:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\effectDurationData.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport { BaseActiveEffect } from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\n\ninterface EffectDurationDataSchema extends DocumentSchema {\n  startTime: FieldReturnType<typeof fields.NUMERIC_FIELD, { default: null }>;\n  seconds: typeof fields.NONNEGATIVE_INTEGER_FIELD;\n  combat: typeof fields.STRING_FIELD;\n  rounds: typeof fields.NONNEGATIVE_INTEGER_FIELD;\n  turns: typeof fields.NONNEGATIVE_INTEGER_FIELD;\n  startRound: typeof fields.NONNEGATIVE_INTEGER_FIELD;\n  startTurn: typeof fields.NONNEGATIVE_INTEGER_FIELD;\n}\n\ninterface EffectDurationDataProperties {\n  /**\n   * The world time when the active effect first started\n   * @defaultValue `null`\n   */\n  startTime: number | null;\n\n  /**\n   * The maximum duration of the effect, in seconds\n   */\n  seconds?: number;\n\n  /**\n   * The _id of the CombatEncounter in which the effect first started\n   */\n  combat?: string;\n\n  /**\n   * The maximum duration of the effect, in combat rounds\n   */\n  rounds?: number;\n\n  /**\n   * The maximum duration of the effect, in combat turns\n   */\n  turns?: number;\n\n  /**\n   * The round of the CombatEncounter in which the effect first started\n   */\n  startRound?: number;\n\n  /**\n   * The turn of the CombatEncounter in which the effect first started\n   */\n  startTurn?: number;\n}\n\nexport interface EffectDurationDataConstructorData {\n  /**\n   * The world time when the active effect first started\n   * @defaultValue `null`\n   */\n  startTime?: number | null;\n\n  /**\n   * The maximum duration of the effect, in seconds\n   */\n  seconds?: number | null;\n\n  /**\n   * The _id of the CombatEncounter in which the effect first started\n   */\n  combat?: string | null;\n\n  /**\n   * The maximum duration of the effect, in combat rounds\n   */\n  rounds?: number | null;\n\n  /**\n   * The maximum duration of the effect, in combat turns\n   */\n  turns?: number | null;\n\n  /**\n   * The round of the CombatEncounter in which the effect first started\n   */\n  startRound?: number | null;\n\n  /**\n   * The turn of the CombatEncounter in which the effect first started\n   */\n  startTurn?: number | null;\n}\n\n/**\n * An embedded data structure which tracks the duration of an ActiveEffect.\n * @see ActiveEffectData\n */\nexport declare class EffectDurationData extends DocumentData<\n  EffectDurationDataSchema,\n  EffectDurationDataProperties,\n  PropertiesToSource<EffectDurationDataProperties>,\n  EffectDurationDataConstructorData,\n  BaseActiveEffect\n> {\n  static defineSchema(): EffectDurationDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface EffectDurationData extends EffectDurationDataProperties {}\n"]},48864:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\folderData.d.ts","import DocumentData from '../../abstract/data.mjs';\nimport * as fields from '../fields.mjs';\nimport * as documents from '../../documents.mjs';\nimport { PropertiesToSource } from '../../../../types/helperTypes';\n\ninterface FolderDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  name: typeof fields.REQUIRED_STRING;\n  type: DocumentField<foundry.CONST.FolderEntityTypes> & {\n    type: String;\n    required: true;\n    validate: (t: unknown) => t is foundry.CONST.FolderEntityTypes;\n    validationError: 'Invalid Folder type provided';\n  };\n  description: typeof fields.STRING_FIELD;\n  parent: fields.ForeignDocumentField<{ type: typeof documents.BaseFolder }>;\n  sorting: DocumentField<SortingModes> & {\n    type: String;\n    required: true;\n    default: 'a';\n    validate: (mode: unknown) => mode is SortingModes;\n    validationError: 'Invalid Folder sorting mode';\n  };\n  sort: typeof fields.INTEGER_SORT_FIELD;\n  color: typeof fields.COLOR_FIELD;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface FolderDataProperties {\n  /**\n   * The _id which uniquely identifies this Folder document\n   */\n  _id: string | null;\n\n  /**\n   * The name of this Folder\n   */\n  name: string;\n\n  /**\n   * The document type which this Folder contains, from CONST.FOLDER_ENTITY_TYPES\n   */\n  type: foundry.CONST.FolderEntityTypes;\n\n  /**\n   * An HTML description of the contents of this folder\n   */\n  description?: string;\n\n  /**\n   * The _id of a parent Folder which contains this Folder\n   * @defaultValue `null`\n   */\n  parent: string | null;\n\n  /**\n   * The sorting mode used to organize documents within this Folder, in [\"a\", \"m\"]\n   * @defaultValue `'a'`\n   */\n  sorting: SortingModes;\n\n  /**\n   * The numeric sort value which orders this Folder relative to its siblings\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * A color string used for the background color of this Folder\n   */\n  color?: string | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface FolderDataConstructorData {\n  /**\n   * The _id which uniquely identifies this Folder document\n   */\n  _id?: string | null;\n\n  /**\n   * The name of this Folder\n   */\n  name: string;\n\n  /**\n   * The document type which this Folder contains, from CONST.FOLDER_ENTITY_TYPES\n   */\n  type: foundry.CONST.FolderEntityTypes;\n\n  /**\n   * An HTML description of the contents of this folder\n   */\n  description?: string | null;\n\n  /**\n   * The _id of a parent Folder which contains this Folder\n   * @defaultValue `null`\n   */\n  parent?: string | null;\n\n  /**\n   * The sorting mode used to organize documents within this Folder, in [\"a\", \"m\"]\n   * @defaultValue `'a'`\n   */\n  sorting?: SortingModes | null;\n\n  /**\n   * The numeric sort value which orders this Folder relative to its siblings\n   * @defaultValue `0`\n   */\n  sort?: number | null;\n\n  /**\n   * A color string used for the background color of this Folder\n   */\n  color?: string | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for a Folder document.\n */\nexport declare class FolderData extends DocumentData<\n  FolderDataSchema,\n  FolderDataProperties,\n  PropertiesToSource<FolderDataProperties>,\n  FolderDataConstructorData,\n  documents.BaseFolder\n> {\n  constructor(data: FolderDataConstructorData, document?: documents.BaseFolder | null);\n\n  static defineSchema(): FolderDataSchema;\n\n  static SORTING_MODES: ['a', 'm'];\n}\n\nexport type SortingModes = ValueOf<typeof FolderData.SORTING_MODES>;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface FolderData extends FolderDataProperties {}\n"]},96170:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\index.d.ts","export { ActiveEffectData } from './activeEffectData';\nexport { ActorData } from './actorData';\nexport { AmbientLightData } from './ambientLightData';\nexport { ChatMessageData } from './chatMessageData';\nexport { CombatantData } from './combatantData';\nexport { CombatData } from './combatData';\nexport { DrawingData } from './drawingData';\nexport { FolderData } from './folderData';\nexport { ItemData } from './itemData';\nexport { JournalEntryData } from './journalEntryData';\nexport { MacroData } from './macroData';\nexport { MeasuredTemplateData } from './measuredTemplateData';\nexport { PrototypeTokenData } from './prototypeTokenData';\nexport { SceneData } from './sceneData';\nexport { TokenBarData } from './tokenBarData';\nexport { TokenData } from './tokenData';\nexport { UserData } from './userData';\n"]},37035:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\itemData.d.ts","import EmbeddedCollection from '../../abstract/embedded-collection.mjs';\nimport {\n  ConfiguredData,\n  ConfiguredDocumentClass,\n  ConfiguredSource,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\n\ninterface ItemDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  name: typeof fields.REQUIRED_STRING;\n  type: DocumentField<string> & {\n    type: typeof String;\n    required: true;\n    validate: (t: unknown) => boolean;\n    validationError: 'The provided Item type must be in the array of types defined by the game system';\n  };\n  img: FieldReturnType<typeof fields.IMAGE_FIELD, { default: () => string }>;\n  data: FieldReturnType<typeof fields.OBJECT_FIELD, { default: (data: { type: string }) => any }>; // TODO\n  effects: fields.EmbeddedCollectionField<typeof documents.BaseActiveEffect>;\n  folder: fields.ForeignDocumentField<{ type: typeof documents.BaseFolder }>;\n  sort: typeof fields.INTEGER_SORT_FIELD;\n  permission: typeof fields.DOCUMENT_PERMISSIONS;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface ItemDataBaseProperties {\n  /**\n   * The _id which uniquely identifies this Item document\n   */\n  _id: string | null;\n\n  /**\n   * The name of this Item\n   */\n  name: string;\n\n  /**\n   * An Item subtype which configures the system data model applied\n   */\n  type: string;\n\n  /**\n   * An image file path which provides the artwork for this Item\n   * @defaultValue `ItemData.DEFAULT_ICON`\n   */\n  img: string | null;\n\n  /**\n   * The system data object which is defined by the system template.json model\n   */\n  data: object;\n\n  /**\n   * A collection of ActiveEffect embedded Documents\n   */\n  effects: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseActiveEffect>, ItemData>;\n\n  /**\n   * The _id of a Folder which contains this Item\n   * @defaultValue `null`\n   */\n  folder: string | null;\n\n  /**\n   * The numeric sort value which orders this Item relative to its siblings\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * An object which configures user permissions to this Item\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission: Partial<Record<string, foundry.CONST.EntityPermission>>;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface ItemDataConstructorData {\n  /**\n   * The _id which uniquely identifies this Item document\n   */\n  _id?: string | null;\n\n  /**\n   * The name of this Item\n   */\n  name: string;\n\n  /**\n   * An Item subtype which configures the system data model applied\n   */\n  type: ItemDataSource['type'];\n\n  /**\n   * An image file path which provides the artwork for this Item\n   * @defaultValue `ItemData.DEFAULT_ICON`\n   */\n  img?: string | null;\n\n  /**\n   * The system data object which is defined by the system template.json model\n   */\n  data?: DeepPartial<ItemDataSource['data']> | null;\n\n  /**\n   * A collection of ActiveEffect embedded Documents\n   */\n  effects?: ConstructorParameters<ConfiguredDocumentClass<typeof documents.BaseActiveEffect>>[0][] | null;\n\n  /**\n   * The _id of a Folder which contains this Item\n   * @defaultValue `null`\n   */\n  folder?: string | null;\n\n  /**\n   * The numeric sort value which orders this Item relative to its siblings\n   * @defaultValue `0`\n   */\n  sort?: number | null;\n\n  /**\n   * An object which configures user permissions to this Item\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission?: Partial<Record<string, foundry.CONST.EntityPermission>> | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\ntype ItemDataBaseSource = PropertiesToSource<ItemDataBaseProperties>;\ntype ItemDataProperties = ItemDataBaseProperties & ConfiguredData<'Item'>;\ntype ItemDataSource = ItemDataBaseSource & ConfiguredSource<'Item'>;\n\ntype DocumentDataConstructor = Pick<typeof DocumentData, keyof typeof DocumentData>;\n\ninterface ItemDataConstructor extends DocumentDataConstructor {\n  new (data: ItemDataConstructorData, document?: documents.BaseItem | null): ItemData;\n\n  defineSchema(): ItemDataSchema;\n\n  /**\n   * The default icon used for newly created Item documents\n   * @defaultValue `\"icons/svg/item-bag.svg\"`\n   */\n  DEFAULT_ICON: string;\n}\n\n/**\n * The data schema for a Item document.\n * @see BaseItem\n */\nexport type ItemData = DocumentData<\n  ItemDataSchema,\n  ItemDataProperties,\n  ItemDataSource,\n  ItemDataConstructorData,\n  documents.BaseItem\n> &\n  ItemDataProperties & {\n    _initializeSource(data: ItemDataConstructorData): ItemDataSource;\n  };\nexport declare const ItemData: ItemDataConstructor;\n"]},16016:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\journalEntryData.d.ts","import { DocumentData } from '../../abstract/module.mjs';\nimport * as fields from '../fields.mjs';\nimport * as documents from '../../documents.mjs';\nimport { PropertiesToSource } from '../../../../types/helperTypes';\n\ninterface JournalEntryDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  name: typeof fields.REQUIRED_STRING;\n  content: typeof fields.BLANK_STRING;\n  img: typeof fields.IMAGE_FIELD;\n  folder: fields.ForeignDocumentField<{ type: typeof documents.BaseFolder }>;\n  sort: typeof fields.INTEGER_SORT_FIELD;\n  permission: typeof fields.DOCUMENT_PERMISSIONS;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface JournalEntryDataProperties {\n  /**\n   * The _id which uniquely identifies this JournalEntry document\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * The name of this JournalEntry\n   */\n  name: string;\n\n  /**\n   * The HTML content of the JournalEntry\n   * @defaultValue `''`\n   */\n  content: string;\n\n  /**\n   * An image file path which provides the artwork for this JournalEntry\n   */\n  img?: string | null;\n\n  /**\n   * The _id of a Folder which contains this JournalEntry\n   * @defaultValue `null`\n   */\n  folder: string | null;\n\n  /**\n   * The numeric sort value which orders this JournalEntry relative to its siblings\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * An object which configures user permissions to this JournalEntry\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission: Partial<Record<string, foundry.CONST.EntityPermission>>;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface JournalEntryConstructorData {\n  /**\n   * The _id which uniquely identifies this JournalEntry document\n   * @defaultValue `null`\n   */\n  _id?: string | null;\n\n  /**\n   * The name of this JournalEntry\n   */\n  name: string;\n\n  /**\n   * The HTML content of the JournalEntry\n   * @defaultValue `''`\n   */\n  content?: string | null;\n\n  /**\n   * An image file path which provides the artwork for this JournalEntry\n   */\n  img?: string | null;\n\n  /**\n   * The _id of a Folder which contains this JournalEntry\n   * @defaultValue `null`\n   */\n  folder?: string | null;\n\n  /**\n   * The numeric sort value which orders this JournalEntry relative to its siblings\n   * @defaultValue `0`\n   */\n  sort?: number | null;\n\n  /**\n   * An object which configures user permissions to this JournalEntry\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission?: Partial<Record<string, foundry.CONST.EntityPermission>> | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\nexport declare class JournalEntryData extends DocumentData<\n  JournalEntryDataSchema,\n  JournalEntryDataProperties,\n  PropertiesToSource<JournalEntryDataProperties>,\n  JournalEntryConstructorData,\n  documents.BaseJournalEntry\n> {\n  constructor(data: JournalEntryConstructorData, document?: documents.BaseJournalEntry | null);\n\n  static defineSchema(): JournalEntryDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface JournalEntryData extends JournalEntryDataProperties {}\n"]},50451:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\macroData.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as fields from '../fields.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as CONST from '../../constants.mjs';\n\ninterface MacroDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  name: typeof fields.REQUIRED_STRING;\n  type: DocumentField<string> & {\n    type: String;\n    required: true;\n    default: typeof CONST.MACRO_TYPES.CHAT;\n    validate: (t: unknown) => boolean;\n    validationError: 'The provided Macro type must be in CONST.MACRO_TYPES';\n  };\n  author: fields.ForeignDocumentField<{\n    type: typeof documents.BaseUser;\n    default: () => Game['user'];\n  }>;\n  img: FieldReturnType<typeof fields.IMAGE_FIELD, { required: true; default: typeof CONST.DEFAULT_MACRO_ICON }>;\n  scope: DocumentField<string> & {\n    type: String;\n    required: true;\n    default: typeof CONST.MACRO_SCOPES[0];\n    validate: (t: unknown) => boolean;\n    validationError: 'The provided Macro scope must be in CONST.MACRO_SCOPES';\n  };\n  command: typeof fields.BLANK_STRING;\n  folder: fields.ForeignDocumentField<{ type: typeof documents.BaseFolder }>;\n  sort: typeof fields.INTEGER_SORT_FIELD;\n  permission: typeof fields.DOCUMENT_PERMISSIONS;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface MacroDataProperties {\n  /**\n   * The _id which uniquely identifies this Macro document\n   */\n  _id: string | null;\n\n  /**\n   * The name of this Macro\n   */\n  name: string;\n\n  /**\n   * A Macro subtype from CONST.MACRO_TYPES\n   */\n  type: foundry.CONST.MacroTypes;\n\n  /**\n   * The _id of a User document which created this Macro *\n   */\n  author: string;\n\n  /**\n   * An image file path which provides the thumbnail artwork for this Macro\n   * @defaultValue `CONST.DEFAULT_MACRO_ICON`\n   */\n  img: string | null;\n\n  /**\n   * The scope of this Macro application from CONST.MACRO_SCOPES\n   * @defaultValue `'global'`\n   */\n  scope: foundry.CONST.MacroScopes;\n\n  /**\n   * The string content of the macro command\n   * @defaultValue `''`\n   */\n  command: string;\n\n  /**\n   * The _id of a Folder which contains this Macro\n   * @defaultValue `null`\n   */\n  folder: string | null;\n\n  /**\n   * The numeric sort value which orders this Macro relative to its siblings\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * An object which configures user permissions to this Macro\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission: Partial<Record<string, foundry.CONST.EntityPermission>>;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface MacroDataConstructorData {\n  /**\n   * The _id which uniquely identifies this Macro document\n   */\n  _id?: string | null;\n\n  /**\n   * The name of this Macro\n   */\n  name: string;\n\n  /**\n   * A Macro subtype from CONST.MACRO_TYPES\n   */\n  type?: foundry.CONST.MacroTypes | null;\n\n  /**\n   * The _id of a User document which created this Macro *\n   */\n  author?: string | null;\n\n  /**\n   * An image file path which provides the thumbnail artwork for this Macro\n   * @defaultValue `CONST.DEFAULT_MACRO_ICON`\n   */\n  img?: string | null;\n\n  /**\n   * The scope of this Macro application from CONST.MACRO_SCOPES\n   * @defaultValue `'global'`\n   */\n  scope?: foundry.CONST.MacroScopes | null;\n\n  /**\n   * The string content of the macro command\n   * @defaultValue `''`\n   */\n  command?: string | null;\n\n  /**\n   * The _id of a Folder which contains this Macro\n   * @defaultValue `null`\n   */\n  folder?: string | null;\n\n  /**\n   * The numeric sort value which orders this Macro relative to its siblings\n   * @defaultValue `0`\n   */\n  sort?: number | null;\n\n  /**\n   * An object which configures user permissions to this Macro\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission?: Partial<Record<string, foundry.CONST.EntityPermission>> | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for a Macro document.\n * @see BaseMacro\n */\nexport declare class MacroData extends DocumentData<\n  MacroDataSchema,\n  MacroDataProperties,\n  PropertiesToSource<MacroDataProperties>,\n  MacroDataConstructorData,\n  documents.BaseMacro\n> {\n  constructor(data: MacroDataConstructorData, document?: documents.BaseMacro | null);\n\n  static defineSchema(): MacroDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface MacroData extends MacroDataProperties {}\n"]},42479:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\measuredTemplateData.d.ts","import { ConfiguredDocumentClass, FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as fields from '../fields.mjs';\nimport * as documents from '../../documents.mjs';\n\ninterface MeasuredTemplateDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  user: fields.ForeignDocumentField<{ type: typeof documents.BaseUser; required: true }>;\n  t: {\n    type: typeof String;\n    required: true;\n    default: typeof CONST.MEASURED_TEMPLATE_TYPES.CIRCLE;\n    validate: (t: unknown) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.MEASURED_TEMPLATE_TYPES';\n  };\n  x: typeof fields.REQUIRED_NUMBER;\n  y: typeof fields.REQUIRED_NUMBER;\n  distance: FieldReturnType<typeof fields.REQUIRED_POSITIVE_NUMBER, { default: 1 }>;\n  direction: FieldReturnType<typeof fields.ANGLE_FIELD, { default: 0 }>;\n  angle: typeof fields.ANGLE_FIELD;\n  width: FieldReturnType<typeof fields.REQUIRED_POSITIVE_NUMBER, { default: 1 }>;\n  borderColor: FieldReturnType<typeof fields.COLOR_FIELD, { required: true; default: '#000000' }>;\n  fillColor: FieldReturnType<typeof fields.COLOR_FIELD, { required: true; default: '#FF0000' }>;\n  texture: typeof fields.VIDEO_FIELD;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface MeasuredTemplateProperties {\n  /**\n   The _id which uniquely identifies this BaseMeasuredTemplate embedded document\n   */\n  _id: string | null;\n\n  user: string | null;\n\n  /**\n   * The value in CONST.MEASURED_TEMPLATE_TYPES which defines the geometry type of this template\n   * @defaultValue `'circle'`\n   */\n  t: ValueOf<foundry.CONST.MeasuredTemplateTypes>;\n\n  /**\n   * The x-coordinate position of the origin of the template effect\n   * @defaultValue `0`\n   */\n  x: number;\n\n  /**\n   * The y-coordinate position of the origin of the template effect\n   * @defaultValue `0`\n   */\n  y: number;\n\n  /**\n   * The distance of the template effect\n   * @defaultValue `1`\n   */\n  distance: number;\n\n  /**\n   * The angle of rotation for the measured template\n   * @defaultValue `0`\n   */\n  direction: number;\n\n  /**\n   * The angle of effect of the measured template, applies to cone types\n   * @defaultValue `0`\n   */\n  angle: number;\n\n  /**\n   * The width of the measured template, applies to ray types\n   * @defaultValue `1`\n   */\n  width: number;\n\n  /**\n   * A color string used to tint the border of the template shape\n   * @defaultValue `'#000000'`\n   */\n  borderColor: string | null;\n\n  /**\n   * A color string used to tint the fill of the template shape\n   * @defaultValue `'#FF0000'`\n   */\n  fillColor: string | null;\n\n  /**\n   * A repeatable tiling texture used to add a texture fill to the template shape\n   */\n  texture: string | undefined | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface MeasuredTemplateDataConstructorData {\n  /**\n   The _id which uniquely identifies this BaseMeasuredTemplate embedded document\n   */\n  _id?: string | null;\n\n  user?: string | null;\n\n  /**\n   * The value in CONST.MEASURED_TEMPLATE_TYPES which defines the geometry type of this template\n   * @defaultValue `'circle'`\n   */\n  t?: ValueOf<foundry.CONST.MeasuredTemplateTypes> | null;\n\n  /**\n   * The x-coordinate position of the origin of the template effect\n   * @defaultValue `0`\n   */\n  x?: number | null;\n\n  /**\n   * The y-coordinate position of the origin of the template effect\n   * @defaultValue `0`\n   */\n  y?: number | null;\n\n  /**\n   * The distance of the template effect\n   * @defaultValue `1`\n   */\n  distance?: number | null;\n\n  /**\n   * The angle of rotation for the measured template\n   * @defaultValue `0`\n   */\n  direction?: number | null;\n\n  /**\n   * The angle of effect of the measured template, applies to cone types\n   * @defaultValue `0`\n   */\n  angle?: number | null;\n\n  /**\n   * The width of the measured template, applies to ray types\n   * @defaultValue `1`\n   */\n  width?: number | null;\n\n  /**\n   * A color string used to tint the border of the template shape\n   * @defaultValue `'#000000'`\n   */\n  borderColor?: string | null;\n\n  /**\n   * A color string used to tint the fill of the template shape\n   * @defaultValue `'#FF0000'`\n   */\n  fillColor?: string | null;\n\n  /**\n   * A repeatable tiling texture used to add a texture fill to the template shape\n   */\n  texture?: string | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for a MeasuredTemplate embedded document.\n * @see BaseMeasuredTemplate\n */\nexport declare class MeasuredTemplateData extends DocumentData<\n  MeasuredTemplateDataSchema,\n  MeasuredTemplateProperties,\n  PropertiesToSource<MeasuredTemplateProperties>,\n  MeasuredTemplateDataConstructorData,\n  documents.BaseMeasuredTemplate\n> {\n  /**\n   * @remarks This override does not exist in foundry but is added here to prepend runtime errors.\n   */\n  constructor(\n    data: MeasuredTemplateDataConstructorData | undefined,\n    document: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseScene>>\n  );\n\n  static defineSchema(): MeasuredTemplateDataSchema;\n\n  /** @override */\n  protected _initialize(): void;\n\n  /** @override */\n  protected _validateDocument(): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface MeasuredTemplateData extends MeasuredTemplateProperties {}\n"]},97384:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\prototypeTokenData.d.ts","import { FieldReturnType, PropertiesToSource, ToObjectFalseType } from '../../../../types/helperTypes.js';\nimport DocumentData from '../../abstract/data.mjs';\nimport { documents } from '../../module.mjs.js';\nimport * as fields from '../fields.mjs';\nimport { TokenDataConstructorData, TokenDataProperties, TokenDataSchema } from './tokenData.js';\n\ntype FieldExclusions =\n  | '_id'\n  | 'actorId'\n  | 'actorData'\n  | 'img'\n  | 'x'\n  | 'y'\n  | 'elevation'\n  | 'effects'\n  | 'overlayEffect'\n  | 'hidden';\n\ninterface PrototypeTokenDataSchema extends Omit<TokenDataSchema, FieldExclusions> {\n  randomImg: typeof fields.BOOLEAN_FIELD;\n  img: FieldReturnType<\n    typeof fields.VIDEO_FIELD,\n    { default: typeof foundry.CONST.DEFAULT_TOKEN; validate: (src: unknown) => boolean }\n  >;\n}\n\ninterface PrototypeTokenDataProperties extends Omit<TokenDataProperties, FieldExclusions> {\n  /**\n   * Uses a random \"wildcard\" image path which is resolved with a Token is created\n   * @defaultValue `false`\n   */\n  randomImg: boolean;\n\n  /**\n   * A file path to an image or video file used to depict the Token\n   * @defaultValue `CONST.DEFAULT_TOKEN`\n   */\n  img: string | null;\n}\n\nexport interface PrototypeTokenDataConstructorData extends Omit<TokenDataConstructorData, FieldExclusions> {\n  /**\n   * Uses a random \"wildcard\" image path which is resolved with a Token is created\n   * @defaultValue `false`\n   */\n  randomImg?: boolean | null;\n\n  /**\n   * A file path to an image or video file used to depict the Token\n   * @defaultValue `CONST.DEFAULT_TOKEN`\n   */\n  img?: string | null;\n}\n\nexport class PrototypeTokenData extends DocumentData<\n  PrototypeTokenDataSchema,\n  PrototypeTokenDataProperties,\n  PropertiesToSource<PrototypeTokenDataProperties>,\n  PrototypeTokenDataConstructorData,\n  documents.BaseActor\n> {\n  /**\n   * @override\n   */\n  _initialize(): void;\n\n  /**\n   * @override\n   */\n  toObject(source?: true): ReturnType<this['toJSON']> & { actorId: documents.BaseActor['id'] };\n  toObject(source: false): {\n    [Key in keyof PrototypeTokenDataSchema as string extends Key ? never : Key]: Key extends keyof this\n      ? ToObjectFalseType<this[Key]>\n      : undefined;\n  } & { actorId: documents.BaseActor['id'] };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PrototypeTokenData extends PrototypeTokenDataProperties {}\n"]},48489:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\sceneData.d.ts","// TODO: This is just a stub that must be filled with live\nimport { PropertiesToSource } from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport { BaseScene } from '../../documents.mjs';\n\ninterface SceneDataProperties {\n  _id: string | null;\n}\n\ninterface SceneDataConstructorData {\n  _id?: string | null;\n}\n\nexport declare class SceneData extends DocumentData<\n  any,\n  SceneDataProperties,\n  PropertiesToSource<SceneDataProperties>,\n  SceneDataConstructorData,\n  BaseScene\n> {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface SceneData extends SceneDataProperties {}\n"]},55830:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\tokenBarData.d.ts","import { PropertiesToSource } from '../../../../types/helperTypes.js';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport { documents } from '../../module.mjs';\n\ninterface TokenBarDataSchema extends DocumentSchema {\n  attribute: DocumentField<string> & {\n    type: String;\n    default: null;\n    nullable: true;\n    required: true;\n  };\n}\n\ninterface TokenBarDataProperties {\n  /**\n   * The attribute path within the Token's Actor data which should be displayed\n   */\n  attribute: string | null;\n}\n\nexport interface TokenBarDataConstructorData {\n  /**\n   * The attribute path within the Token's Actor data which should be displayed\n   */\n  attribute?: string | null;\n}\n\n/**\n * An embedded data structure for the contents of a Token attribute bar.\n * @see TokenData\n */\nexport declare class TokenBarData extends DocumentData<\n  TokenBarDataSchema,\n  TokenBarDataProperties,\n  PropertiesToSource<TokenBarDataProperties>,\n  TokenBarDataConstructorData,\n  documents.BaseToken\n> {\n  static defineSchema(): TokenBarDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface TokenBarData extends TokenBarDataProperties {}\n"]},81741:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\tokenData.d.ts","import DocumentData from '../../abstract/data.mjs';\nimport { FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { CONST, documents } from '../../module.mjs';\nimport * as fields from '../fields.mjs';\nimport { AnimationData, AnimationDataConstructorData } from './animationData';\nimport { TokenBarData, TokenBarDataConstructorData } from './tokenBarData';\nimport { ActorDataSource } from './actorData.js';\n\ninterface VisionFieldOptions {\n  validate: (d: number) => boolean;\n  validationError: 'Invalid {name} {field} distance which must be a number with absolute value less than 1000';\n}\n\nexport interface TokenDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  name: typeof fields.STRING_FIELD;\n  displayName: DocumentField<CONST.TokenDisplayMode> & {\n    type: typeof Number;\n    required: true;\n    default: typeof CONST.TOKEN_DISPLAY_MODES.NONE;\n    validate: (m: any) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.TOKEN_DISPLAY_MODES';\n  };\n  actorId: fields.ForeignDocumentField<{ type: documents.BaseActor; required: true }>;\n  actorLink: typeof fields.BOOLEAN_FIELD;\n  actorData: typeof fields.OBJECT_FIELD;\n  img: FieldReturnType<typeof fields.VIDEO_FIELD, { default: () => string }>;\n  tint: typeof fields.COLOR_FIELD;\n  width: FieldReturnType<typeof fields.REQUIRED_POSITIVE_NUMBER, { default: number }>;\n  height: FieldReturnType<typeof fields.REQUIRED_POSITIVE_NUMBER, { default: number }>;\n  scale: DocumentField<number> & {\n    type: typeof Number;\n    required: true;\n    default: 1;\n    validate: (s: unknown) => boolean;\n    validationError: 'Invalid {name} {field} which must be a number between 0.25 and 10';\n  };\n  mirrorX: typeof fields.BOOLEAN_FIELD;\n  mirrorY: typeof fields.BOOLEAN_FIELD;\n  x: typeof fields.REQUIRED_NUMBER;\n  y: typeof fields.REQUIRED_NUMBER;\n  elevation: typeof fields.REQUIRED_NUMBER;\n  lockRotation: typeof fields.BOOLEAN_FIELD;\n  rotation: FieldReturnType<typeof fields.ANGLE_FIELD, { default: number }>;\n  effects: DocumentField<string[]> & {\n    type: typeof String[];\n    required: true;\n    default: string[];\n  };\n  overlayEffect: typeof fields.STRING_FIELD;\n  alpha: typeof fields.ALPHA_FIELD;\n  hidden: typeof fields.BOOLEAN_FIELD;\n  vision: DocumentField<boolean> & {\n    type: typeof Boolean;\n    required: true;\n    default: (data: { readonly dimSight?: number; readonly brightSight?: number }) => boolean;\n  };\n  dimSight: FieldReturnType<typeof fields.REQUIRED_NUMBER, VisionFieldOptions>;\n  brightSight: FieldReturnType<typeof fields.REQUIRED_NUMBER, VisionFieldOptions>;\n  dimLight: FieldReturnType<typeof fields.REQUIRED_NUMBER, VisionFieldOptions>;\n  brightLight: FieldReturnType<typeof fields.REQUIRED_NUMBER, VisionFieldOptions>;\n  sightAngle: typeof fields.ANGLE_FIELD;\n  lightAngle: typeof fields.ANGLE_FIELD;\n  lightColor: typeof fields.COLOR_FIELD;\n  lightAlpha: FieldReturnType<typeof fields.ALPHA_FIELD, { default: 0.25 }>;\n  lightAnimation: DocumentField<AnimationData> & {\n    type: typeof AnimationData;\n    required: true;\n    default: {};\n  };\n  disposition: DocumentField<CONST.TokenDisposition> & {\n    type: typeof Number;\n    required: true;\n    default: typeof CONST.TOKEN_DISPOSITIONS.HOSTILE;\n    validate: (n: any) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.TOKEN_DISPOSITIONS';\n  };\n  displayBars: DocumentField<CONST.TokenDisplayMode> & {\n    type: typeof Number;\n    required: true;\n    default: typeof CONST.TOKEN_DISPLAY_MODES.NONE;\n    validate: (m: any) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.TOKEN_DISPLAY_MODES';\n  };\n  bar1: DocumentField<TokenBarData> & {\n    type: typeof TokenBarData;\n    required: true;\n    default: () => { attribute: Game['system']['data']['primaryTokenAttribute'] | null };\n  };\n  bar2: DocumentField<TokenBarData> & {\n    type: typeof TokenBarData;\n    required: true;\n    default: () => { attribute: Game['system']['data']['secondaryTokenAttribute'] | null };\n  };\n  flags: typeof fields.OBJECT_FIELD;\n}\n\nexport interface TokenDataProperties {\n  /**\n   * The Token _id which uniquely identifies it within its parent Scene\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * The name used to describe the Token\n   */\n  name?: string;\n\n  /**\n   * The display mode of the Token nameplate, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayName: CONST.TokenDisplayMode;\n\n  /**\n   * The _id of an Actor document which this Token represents\n   * @defaultValue `null`\n   */\n  actorId: string | null;\n\n  /**\n   * Does this Token uniquely represent a singular Actor, or is it one of many?\n   * @defaultValue `false`\n   */\n  actorLink: boolean;\n\n  /**\n   * Token-level data which overrides the base data of the associated Actor\n   * @defaultValue `{}`\n   */\n  actorData: Partial<ActorDataSource>;\n\n  /**\n   * A file path to an image or video file used to depict the Token\n   * @defaultValue `this.DEFAULT_ICON`\n   */\n  img: string | null;\n\n  /**\n   * An optional color tint applied to the Token image\n   */\n  tint?: string | null;\n\n  /**\n   * The width of the Token in grid units\n   * @defaultValue `1`\n   */\n  width: number;\n\n  /**\n   * The height of the Token in grid units\n   * @defaultValue `1`\n   */\n  height: number;\n\n  /**\n   * A scale factor applied to the Token image, between 0.25 and 3\n   * @defaultValue `1`\n   */\n  scale: number;\n\n  /**\n   * Flip the Token image horizontally?\n   * @defaultValue `false`\n   */\n  mirrorX: boolean;\n\n  /**\n   * Flip the Token image vertically?\n   * @defaultValue `false`\n   */\n  mirrorY: boolean;\n\n  /**\n   * The x-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  x: number;\n\n  /**\n   * The y-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  y: number;\n\n  /**\n   * The vertical elevation of the Token, in distance units\n   * @defaultValue `0`\n   */\n  elevation: number;\n\n  /**\n   * Prevent the Token image from visually rotating?\n   * @defaultValue `false`\n   */\n  lockRotation: boolean;\n\n  /**\n   * The rotation of the Token in degrees, from 0 to 360. A value of 0 represents a southward-facing Token.\n   * @defaultValue `0`\n   */\n  rotation: number;\n\n  /**\n   * An array of effect icon paths which are displayed on the Token\n   * @defaultValue `[]`\n   */\n  effects: string[];\n\n  /**\n   * A single icon path which is displayed as an overlay on the Token\n   */\n  overlayEffect?: string;\n\n  /**\n   * The opacity of the token image\n   * @defaultValue `1`\n   */\n  alpha: number;\n\n  /**\n   * Is the Token currently hidden from player view?\n   * @defaultValue `false`\n   */\n  hidden: boolean;\n\n  /**\n   * Is this Token a source of vision?\n   * @defaultValue Whether dimSight or brightSight have a value greater 0.\n   */\n  vision: boolean;\n\n  /**\n   * How far in distance units the Token can naturally see as if in dim light\n   * @defaultValue `0`\n   */\n  dimSight: number;\n\n  /**\n   * How far in distance units the Token can naturally see as if in bright light\n   * @defaultValue `0`\n   */\n  brightSight: number;\n\n  /**\n   * How far in distance units this Token emits dim light\n   * @defaultValue `0`\n   */\n  dimLight: number;\n\n  /**\n   * How far in distance units this Token emits bright light\n   * @defaultValue `0`\n   */\n  brightLight: number;\n\n  /**\n   * The angle at which this Token is able to see, if it has vision\n   * @defaultValue `360`\n   */\n  sightAngle: number;\n\n  /**\n   * The angle at which this Token is able to emit light\n   * @defaultValue `360`\n   */\n  lightAngle: number;\n\n  /**\n   * The color of the token's emitted light as an HTML hexadecimal color string\n   */\n  lightColor: string | undefined | null;\n\n  /**\n   * The intensity of any light emitted by the token\n   * @defaultValue `0.25`\n   */\n  lightAlpha: number;\n\n  /**\n   * A data object which configures token light animation settings\n   * @defaultValue `{}`\n   */\n  lightAnimation: AnimationData;\n\n  /**\n   * A displayed Token disposition from CONST.TOKEN_DISPOSITIONS\n   * @defaultValue `CONST.TOKEN_DISPOSITIONS.HOSTILE`\n   */\n  disposition: CONST.TokenDisposition;\n\n  /**\n   * The display mode of Token resource bars, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayBars: CONST.TokenDisplayMode;\n\n  /**\n   * The configuration of the Token's primary resource bar\n   * @defaultValue `{ attribute: game?.system.data.primaryTokenAttribute || null }`\n   */\n  bar1: TokenBarData;\n\n  /**\n   * The configuration of the Token's secondary resource bar\n   * @defaultValue `{ attribute: game?.system.data.secondaryTokenAttribute || null }`\n   */\n  bar2: TokenBarData;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\nexport interface TokenDataConstructorData {\n  /**\n   * The Token _id which uniquely identifies it within its parent Scene\n   * @defaultValue `null`\n   */\n  _id?: string | null;\n\n  /**\n   * The name used to describe the Token\n   */\n  name?: string | null;\n\n  /**\n   * The display mode of the Token nameplate, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayName?: CONST.TokenDisplayMode | null;\n\n  /**\n   * The _id of an Actor document which this Token represents\n   * @defaultValue `null`\n   */\n  actorId?: string | null;\n\n  /**\n   * Does this Token uniquely represent a singular Actor, or is it one of many?\n   * @defaultValue `false`\n   */\n  actorLink?: boolean;\n\n  /**\n   * Token-level data which overrides the base data of the associated Actor\n   * @defaultValue `{}`\n   */\n  actorData?: Partial<ActorDataSource> | null;\n\n  /**\n   * A file path to an image or video file used to depict the Token\n   * @defaultValue `this.DEFAULT_ICON`\n   */\n  img?: string | null;\n\n  /**\n   * An optional color tint applied to the Token image\n   */\n  tint?: string | null;\n\n  /**\n   * The width of the Token in grid units\n   * @defaultValue `1`\n   */\n  width?: number | null;\n\n  /**\n   * The height of the Token in grid units\n   * @defaultValue `1`\n   */\n  height?: number | null;\n\n  /**\n   * A scale factor applied to the Token image, between 0.25 and 3\n   * @defaultValue `1`\n   */\n  scale?: number | null;\n\n  /**\n   * Flip the Token image horizontally?\n   * @defaultValue `false`\n   */\n  mirrorX?: boolean | null;\n\n  /**\n   * Flip the Token image vertically?\n   * @defaultValue `false`\n   */\n  mirrorY?: boolean | null;\n\n  /**\n   * The x-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  x?: number | null;\n\n  /**\n   * The y-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  y?: number | null;\n\n  /**\n   * The vertical elevation of the Token, in distance units\n   * @defaultValue `0`\n   */\n  elevation?: number | null;\n\n  /**\n   * Prevent the Token image from visually rotating?\n   * @defaultValue `false`\n   */\n  lockRotation?: boolean | null;\n\n  /**\n   * The rotation of the Token in degrees, from 0 to 360. A value of 0 represents a southward-facing Token.\n   * @defaultValue `0`\n   */\n  rotation?: number | null;\n\n  /**\n   * An array of effect icon paths which are displayed on the Token\n   * @defaultValue `[]`\n   */\n  effects?: string[] | null;\n\n  /**\n   * A single icon path which is displayed as an overlay on the Token\n   */\n  overlayEffect?: string | null;\n\n  /**\n   * The opacity of the token image\n   * @defaultValue `1`\n   */\n  alpha?: number | null;\n\n  /**\n   * Is the Token currently hidden from player view?\n   * @defaultValue `false`\n   */\n  hidden?: boolean | null;\n\n  /**\n   * Is this Token a source of vision?\n   * @defaultValue Whether dimSight or brightSight have a value greater 0.\n   */\n  vision?: boolean | null;\n\n  /**\n   * How far in distance units the Token can naturally see as if in dim light\n   * @defaultValue `0`\n   */\n  dimSight?: number | null;\n\n  /**\n   * How far in distance units the Token can naturally see as if in bright light\n   * @defaultValue `0`\n   */\n  brightSight?: number | null;\n\n  /**\n   * How far in distance units this Token emits dim light\n   * @defaultValue `0`\n   */\n  dimLight?: number | null;\n\n  /**\n   * How far in distance units this Token emits bright light\n   * @defaultValue `0`\n   */\n  brightLight?: number | null;\n\n  /**\n   * The angle at which this Token is able to see, if it has vision\n   * @defaultValue `360`\n   */\n  sightAngle?: number | null;\n\n  /**\n   * The angle at which this Token is able to emit light\n   * @defaultValue `360`\n   */\n  lightAngle?: number | null;\n\n  /**\n   * The color of the token's emitted light as an HTML hexadecimal color string\n   */\n  lightColor?: string | null;\n\n  /**\n   * The intensity of any light emitted by the token\n   * @defaultValue `0.25`\n   */\n  lightAlpha?: number | null;\n\n  /**\n   * A data object which configures token light animation settings\n   * @defaultValue `{}`\n   */\n  lightAnimation?: AnimationDataConstructorData | null;\n\n  /**\n   * A displayed Token disposition from CONST.TOKEN_DISPOSITIONS\n   * @defaultValue `CONST.TOKEN_DISPOSITIONS.HOSTILE`\n   */\n  disposition?: CONST.TokenDisposition | null;\n\n  /**\n   * The display mode of Token resource bars, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayBars?: CONST.TokenDisplayMode | null;\n\n  /**\n   * The configuration of the Token's primary resource bar\n   * @defaultValue `{ attribute: game?.system.data.primaryTokenAttribute || null }`\n   */\n  bar1?: TokenBarDataConstructorData | null;\n\n  /**\n   * The configuration of the Token's secondary resource bar\n   * @defaultValue `{ attribute: game?.system.data.secondaryTokenAttribute || null }`\n   */\n  bar2?: TokenBarDataConstructorData | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for a Token document.\n */\nexport class TokenData extends DocumentData<\n  TokenDataSchema,\n  TokenDataProperties,\n  PropertiesToSource<TokenDataProperties>,\n  TokenDataConstructorData,\n  documents.BaseToken\n> {\n  static defineSchema(): TokenDataSchema;\n\n  /**\n   * The default icon used for newly created Item documents\n   * @defaultValue `CONST.DEFAULT_TOKEN`\n   */\n  static DEFAULT_ICON: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface TokenData extends TokenDataProperties {}\n"]},36714:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\userData.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport DocumentData from '../../abstract/data.mjs';\nimport * as fields from '../fields.mjs';\nimport * as documents from '../../documents.mjs';\n\ninterface UserDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  avatar: typeof fields.IMAGE_FIELD;\n  character: fields.ForeignDocumentField<{ type: typeof documents.BaseActor; required: false }>;\n  color: FieldReturnType<typeof fields.COLOR_FIELD, { required: true }>;\n  hotbar: DocumentField<Record<number | string, string>> & {\n    required: true;\n    default: Record<never, never>;\n    validate: typeof _validateHotbar;\n    validationError: 'Invalid User hotbar data structure';\n  };\n  name: typeof fields.REQUIRED_STRING;\n  password: typeof fields.BLANK_STRING;\n  passwordSalt: typeof fields.STRING_FIELD;\n  permissions: FieldReturnType<\n    typeof fields.DOCUMENT_PERMISSIONS,\n    {\n      default: Record<never, never>;\n      validate: typeof _validatePermissions;\n    }\n  >;\n  role: DocumentField<number> & {\n    required: true;\n    nullable: false;\n    default: typeof CONST.USER_ROLES.PLAYER;\n  };\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface UserDataProperties {\n  _id: string | null;\n  avatar?: string | null;\n  character: string | null;\n  color: string | null;\n  hotbar: Record<number | string, string>;\n  name: string;\n  password: string;\n  passwordSalt?: string;\n  permissions: Partial<Record<keyof typeof CONST.USER_PERMISSIONS, boolean>>;\n  role: foundry.CONST.UserRole;\n  flags: Record<string, unknown>;\n}\n\ninterface UserDataConstructorData {\n  _id?: string | null;\n  avatar?: string | null;\n  character?: string | null;\n  color?: string | null;\n  hotbar?: Record<number | string, string> | null;\n  name: string;\n  password?: string | null;\n  passwordSalt?: string | null;\n  permissions?: Partial<Record<keyof typeof CONST.USER_PERMISSIONS, boolean>> | null;\n  role?: foundry.CONST.UserRole | null;\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for a User document\n */\nexport declare class UserData extends DocumentData<\n  UserDataSchema,\n  UserDataProperties,\n  PropertiesToSource<UserDataProperties>,\n  UserDataConstructorData,\n  documents.BaseUser\n> {\n  constructor(data: UserDataConstructorData, document?: documents.BaseUser | null);\n\n  static defineSchema(): UserDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface UserData extends UserDataProperties {}\n\n/**\n * Validate the structure of the User hotbar object\n * @param bar - The attempted hotbar data\n */\ndeclare function _validateHotbar(bar: unknown): boolean;\n\n/**\n * Validate the structure of the User permissions object\n * @param perms - The attempted permissions data\n */\ndeclare function _validatePermissions(perms: unknown): boolean;\n"]},85707:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\fields.mjs.d.ts","import * as CONST from '../constants.mjs';\nimport { hasImageExtension, isColorString, isJSON } from './validators.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { FieldReturnType } from '../../../types/helperTypes';\n\n/**\n * A required boolean field which may be used in a Document.\n * @remarks\n * Property type: `boolean`\n * Constructor type: `boolean | undefined | null`\n * Default: `false`\n */\nexport declare const BOOLEAN_FIELD: BooleanField;\ninterface BooleanField extends DocumentField<boolean> {\n  type: typeof Boolean;\n  required: true;\n  default: false;\n}\n\n/**\n * A standard string color field which may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */\nexport declare const COLOR_FIELD: ColorField;\ninterface ColorField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  nullable: true;\n  validate: typeof isColorString;\n  validationError: '{name} {field} \"{value}\" is not a valid hexadecimal color string';\n}\n\n/**\n * A standard string field for an image file path which may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */\nexport declare const IMAGE_FIELD: ImageField;\ninterface ImageField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  nullable: true;\n  validate: typeof hasImageExtension;\n  validationError: '{name} {field} \"{value}\" does not have a valid image file extension';\n}\n\n/**\n * A standard string field for a video or image file path may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */\nexport declare const VIDEO_FIELD: VideoField;\ninterface VideoField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  nullable: true;\n  validate: (src: string | null) => boolean;\n  validationError: '{name} {field} \"{value}\" does not have a valid image or video file extension';\n}\n\n/**\n * A standard string field for an audio file path which may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */\nexport declare const AUDIO_FIELD: AudioField;\ninterface AudioField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  nullable: true;\n  validate: (src: string | null) => boolean;\n  validationError: '{name} {field} \"{value}\" does not have a valid audio file extension';\n}\n\n/**\n * A standard integer field which may be used in a Document.\n * @remarks\n * Property type: `string | undefined`\n * Constructor type: `string | undefined | null`\n */\nexport declare const INTEGER_FIELD: IntegerField;\ninterface IntegerField extends DocumentField<number> {\n  type: typeof Number;\n  required: false;\n  validate: typeof Number.isInteger;\n  validationError: '{name} {field} \"{value}\" does not have an integer value';\n}\n\n/**\n * A string field which contains serialized JSON data that may be used in a Document.\n * @remarks\n * Property type: `string | undefined`\n * Constructor type: `string | object | undefined | null`\n */\nexport declare const JSON_FIELD: JSONField;\ninterface JSONField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  clean: (s: unknown) => string;\n  validate: typeof isJSON;\n  validationError: '{name} {field} \"{value}\" is not a valid JSON string';\n}\n\n/**\n * A non-negative integer field which may be used in a Document.\n * @remarks\n * Property type: `number | undefined`\n * Constructor type: `number | undefined | null`\n */\nexport declare const NONNEGATIVE_INTEGER_FIELD: NonnegativeIntegerField;\ninterface NonnegativeIntegerField extends DocumentField<number> {\n  type: typeof Number;\n  required: false;\n  validate: (n: unknown) => boolean;\n  validationError: '{name} {field} \"{value}\" does not have an non-negative integer value';\n}\n\n/**\n * A non-negative integer field which may be used in a Document.\n *\n * @remarks The validation actually checks for `> 0`, the JSDoc is incorrect in foundry.\n * @remarks\n * Property type: `number | undefined`\n * Constructor type: `number | undefined | null`\n */\nexport declare const POSITIVE_INTEGER_FIELD: PositiveIntegerField;\ninterface PositiveIntegerField extends DocumentField<number> {\n  type: typeof Number;\n  required: false;\n  validate: (n: unknown) => boolean;\n  validationError: '{name} {field} \"{value}\" does not have an non-negative integer value';\n}\n\n/**\n * A template for a required inner-object field which may be used in a Document.\n * @remarks\n * Property type: `object`\n * Constructor type: `object | undefined | null`\n * Default `{}`\n */\nexport declare const OBJECT_FIELD: ObjectField;\ninterface ObjectField extends DocumentField<object> {\n  type: typeof Object;\n  default: {};\n  required: true;\n}\n\n/**\n * An optional string field which may be included by a Document.\n * @remarks\n * Property type: `string | undefined`\n * Constructor type: `string | undefined | null`\n */\nexport declare const STRING_FIELD: StringField;\ninterface StringField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  nullable: false;\n}\n\n/**\n * An optional numeric field which may be included in a Document.\n * @remarks\n * Property type: `number | undefined | null`\n * Constructor type: `number | undefined | null`\n */\nexport declare const NUMERIC_FIELD: NumericField;\ninterface NumericField extends DocumentField<number> {\n  type: typeof Number;\n  required: false;\n  nullable: true;\n}\n\n/**\n * A required numeric field which may be included in a Document and may not be null.\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `0`\n */\nexport declare const REQUIRED_NUMBER: RequiredNumber;\ninterface RequiredNumber extends DocumentField<number> {\n  type: typeof Number;\n  required: true;\n  nullable: false;\n  default: 0;\n}\n\n/**\n * A required numeric field which must be a positive finite value that may be included in a Document.\n * @remarks\n * Property type: `number`\n * Constructor type: `number`\n */\nexport declare const REQUIRED_POSITIVE_NUMBER: RequiredPositiveNumber;\ninterface RequiredPositiveNumber extends DocumentField<number> {\n  type: typeof Number;\n  required: true;\n  nullable: false;\n  validate: (n: unknown) => boolean;\n  validationError: '{name} {field} \"{value}\" is not a positive number';\n}\n\n/**\n * A required numeric field which represents an angle of rotation in degrees between 0 and 360.\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `360`\n */\nexport declare const ANGLE_FIELD: AngleField;\ninterface AngleField extends DocumentField<number> {\n  type: typeof Number;\n  required: true;\n  nullable: false;\n  default: 360;\n  clean: (n: unknown) => number;\n  validate: (n: number) => boolean;\n  validationError: '{name} {field} \"{value}\" is not a number between 0 and 360';\n}\n\n/**\n * A required numeric field which represents a uniform number between 0 and 1.\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `1`\n */\nexport declare const ALPHA_FIELD: AlphaField;\ninterface AlphaField extends DocumentField<number> {\n  type: typeof Number;\n  required: true;\n  nullable: false;\n  default: 1;\n  validate: (n: number) => boolean;\n  validationError: '{name} {field} \"{value}\" is not a number between 0 and 1';\n}\n\n/**\n * A string field which requires a non-blank value and may not be null.\n * @remarks\n * Property type: `string`\n * Constructor type: `string`\n */\nexport declare const REQUIRED_STRING: RequiredString;\ninterface RequiredString extends DocumentField<string> {\n  type: typeof String;\n  required: true;\n  nullable: false;\n  clean: <T>(v: T) => T extends undefined ? undefined : string;\n}\n\n/**\n * A string field which is required, but may be left blank as an empty string.\n * @remarks\n * Property type: `string`\n * Constructor type: `string | undefined | null`\n * Default: `''`\n */\nexport declare const BLANK_STRING: BlankString;\ninterface BlankString extends DocumentField<string> {\n  type: typeof String;\n  required: true;\n  nullable: false;\n  clean: (v: unknown) => string;\n  default: '';\n}\n\n/**\n * A field used for integer sorting of a Document relative to its siblings\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `0`\n */\nexport declare const INTEGER_SORT_FIELD: IntegerSortField;\ninterface IntegerSortField extends DocumentField<number> {\n  type: typeof Number;\n  required: true;\n  default: 0;\n  validate: typeof Number.isInteger;\n  validationError: '{name} {field} \"{value}\" is not an integer';\n}\n\n/**\n * A numeric timestamp field which may be used in a Document.\n * @remarks\n * Property type: `number | undefined`\n * Constructor type: `number | undefined | null`\n * Default: `Date.now`\n */\nexport declare const TIMESTAMP_FIELD: TimestampField;\ninterface TimestampField extends DocumentField<number> {\n  type: typeof Number;\n  required: false;\n  default: typeof Date.now;\n  nullable: false;\n}\n\n/**\n * Validate that the ID of a Document object is either null (not yet saved) or a valid string.\n * @param id - The _id to test\n * @returns Is it valid?\n */\ndeclare function _validateId(id: string | null): boolean;\n\n/**\n * The standard identifier for a Document.\n * @remarks\n * Property type: `string | null`\n * Constructor type: `string | undefined | null`\n * Default: `null`\n */\nexport declare const DOCUMENT_ID: DocumentId;\ninterface DocumentId extends DocumentField<string | null> {\n  type: typeof String;\n  required: true;\n  default: null;\n  nullable: false;\n  validate: typeof _validateId;\n  validationError: '{name} {field} \"{value}\" is not a valid document ID string';\n}\n\n/**\n * The standard permissions object which may be included by a Document.\n * @remarks\n * Property type: `Partial<Record<string, foundry.CONST.EntityPermission>>`\n * Constructor type: `Partial<Record<string, foundry.CONST.EntityPermission>> | undefined | null`\n * Default: `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n */\nexport declare const DOCUMENT_PERMISSIONS: DocumentPermissions;\ninterface DocumentPermissions extends DocumentField<Partial<Record<string, foundry.CONST.EntityPermission>>> {\n  type: typeof Object;\n  required: true;\n  nullable: false;\n  default: { default: typeof CONST.ENTITY_PERMISSIONS.NONE };\n  validate: typeof _validatePermissions;\n  validationError: '{name} {field} \"{value}\" is not a mapping of user IDs and document permission levels';\n}\n\n/**\n * Validate the structure of the permissions object: all keys are valid IDs and all values are permission levels\n * @param perms - The provided permissions object\n * @returns Is the object valid?\n */\ndeclare function _validatePermissions(perms: object): boolean;\n\ninterface ForeignDocumentFieldOptions {\n  type: {\n    readonly documentName: string;\n  };\n  required?: boolean;\n  nullable?: boolean;\n  default?: any;\n}\n\n/**\n * Create a foreign key field which references a primary Document id\n */\nexport declare function foreignDocumentField<T extends ForeignDocumentFieldOptions>(\n  options: T\n): ForeignDocumentField<T>;\ninterface ForeignDocumentField<T extends ForeignDocumentFieldOptions> extends DocumentField<string | null> {\n  type: typeof String;\n  required: T extends {\n    required: true;\n  }\n    ? true\n    : false;\n  nullable: T extends {\n    nullable?: true;\n  }\n    ? true\n    : T extends {\n        nullable: false;\n      }\n    ? false\n    : boolean;\n  default: T extends {\n    default: infer U;\n  }\n    ? U\n    : null;\n  clean: (d: unknown) => string | null;\n  validate: typeof _validateId;\n  validationError: `{name} {field} \"{value}\" is not a valid ${T['type']['documentName']} id`;\n}\n\ninterface EmbeddedCollectionFieldOptions {\n  required?: boolean;\n  default?: any[];\n}\n\n/**\n * Create a special field which contains a Collection of embedded Documents\n * @param document - The Document class definition\n * @param options  - Additional field options\n *                   (default: `{}`)\n */\nexport declare function embeddedCollectionField<\n  ConcreteDocumentConstructor extends { readonly documentName: string } & ConstructorOf<Document<any, any>>,\n  Options extends EmbeddedCollectionFieldOptions\n>(\n  document: ConcreteDocumentConstructor,\n  options?: Options\n): EmbeddedCollectionField<ConcreteDocumentConstructor, Options>;\n// TODO: Improve\ninterface EmbeddedCollectionField<\n  ConcreteDocumentConstructor extends ConstructorOf<Document<any, any>>,\n  Options extends EmbeddedCollectionFieldOptions = {}\n> extends DocumentField<any> {\n  type: Partial<Record<string, ConcreteDocumentConstructor>>;\n  required: Options extends { required?: true } ? true : Options extends { required: false } ? false : boolean;\n  default: Options extends { default?: Array<infer U> } ? Array<U> : unknown[];\n  isCollection: true;\n}\n\n/**\n * Return a document field which is a modification of a static field type\n */\nexport declare function field<T extends DocumentField<any>, U extends Partial<DocumentField<any>>>(\n  field: T,\n  options?: U\n): FieldReturnType<T, U>;\n"]},50584:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\module.mjs.d.ts","export * as validators from './validators.mjs';\nexport * as fields from './fields.mjs';\nexport * from './data.mjs';\n"]},43073:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\validators.mjs.d.ts","/**\n * Test whether a string is a valid 16 character UID\n */\nexport declare function isValidId(id: string | null): boolean;\n\n/**\n * Test whether a file path has an extension in a list of provided extensions\n */\nexport declare function _hasFileExtension(path: string | null, extensions: string[]): boolean;\n\n/**\n * Test whether a file path has a valid image file extension or is base64 PNG data\n * @param path - The image path to test\n * @returns Is the path valid?\n */\nexport function hasImageExtension(path: string | null): boolean;\n/**\n * Test whether a data blob represents a base64 image\n * @param data - A base64 data string\n * @returns Is it a base64 image?\n */\nexport declare function isBase64Image(data: string): boolean;\n\n/**\n * Test whether an input represents a valid 6-character color string\n * @param color - The input string to test\n * @returns Is the string a valid color?\n */\nexport declare function isColorString(color: string): boolean;\n/**\n * Test whether a file path has a valid audio file extension\n * @param path - The image path to test\n * @returns Is the path valid?\n */\nexport declare function hasVideoExtension(path: string | null): boolean;\n\n/**\n * Test whether a file path has a valid video file extension\n * @param path - The image path to test\n * @returns Is the path valid?\n */\nexport declare function hasAudioExtension(path: string | null): boolean;\n/**\n * Assert that the given value is in an array of allowed options\n * @param val   - The value to test\n * @param array - The set of allowed options\n * @returns Is the valid included?\n */\nexport declare function valueInArray<T>(val: T, array: T[]): boolean;\n\n/**\n * Assert that the given value parses as a valid JSON string\n * @param val - The value to test\n * @returns Is the String valid JSON?\n */\nexport declare function isJSON(val: string): boolean;\n"]},25065:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseActiveEffect.d.ts","import { DocumentMetadata, DocumentModificationOptions } from '../abstract/document.mjs';\nimport { ConfiguredDocumentClass, ConstructorDataType } from '../../../types/helperTypes';\nimport { Document } from '../abstract/module.mjs';\nimport * as data from '../data/data.mjs';\nimport { BaseActor } from './baseActor';\nimport { BaseItem } from './baseItem';\nimport { BaseUser } from './baseUser';\n\n/**\n * The base ActiveEffect model definition which defines common behavior of an ActiveEffect document between both client and server.\n */\nexport declare class BaseActiveEffect extends Document<\n  data.ActiveEffectData,\n  InstanceType<ConfiguredDocumentClass<typeof BaseActor>> | InstanceType<ConfiguredDocumentClass<typeof BaseItem>>\n> {\n  static get schema(): ConstructorOf<data.ActiveEffectData>;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'ActiveEffect';\n      collection: 'effects';\n      label: 'DOCUMENT.ActiveEffect';\n      isEmbedded: true;\n    }\n  >;\n\n  protected _preCreate(\n    data: ConstructorDataType<data.ActiveEffectData>,\n    options: DocumentModificationOptions,\n    user: BaseUser\n  ): Promise<void>;\n\n  testUserPermission(\n    user: BaseUser,\n    permission: keyof typeof foundry.CONST.ENTITY_PERMISSIONS | foundry.CONST.EntityPermission,\n    { exact }: { exact?: boolean }\n  ): boolean;\n}\n"]},71176:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseActor.d.ts","import { DocumentMetadata, DocumentModificationOptions } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { BaseActiveEffect } from './baseActiveEffect';\nimport { BaseItem } from './baseItem';\nimport * as data from '../data/data.mjs';\nimport { BaseUser } from './baseUser';\nimport { ConstructorDataType } from '../../../types/helperTypes';\n\n//TODO Add Token as parent class once it is available\n/**\n * The base Actor model definition which defines common behavior of an Actor document between both client and server.\n */\nexport declare class BaseActor extends Document<data.ActorData, Document<any, any>> {\n  static get schema(): typeof data.ActorData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Actor';\n      collection: 'actors';\n      label: 'DOCUMENT.Actor';\n      embedded: {\n        ActiveEffect: typeof BaseActiveEffect;\n        Item: typeof BaseItem;\n      };\n      isPrimary: true;\n      hasSystemData: true;\n      permissions: {\n        create: 'ACTOR_CREATE';\n      };\n      types: string[];\n    }\n  >;\n  /*\n   * A reference to the Collection of embedded ActiveEffect instances in the Actor document, indexed by _id.\n   */\n  get effects(): this['data']['effects'];\n\n  /**\n   * A reference to the Collection of embedded Item instances in the Actor document, indexed by _id.\n   */\n  get items(): this['data']['items'];\n\n  /**\n   * Migrate the system data object to conform to data model defined by the current system version.\n   * @see mergeObject\n   * @param options - Options which customize how the system data is migrated.\n   * @returns The migrated system data object, not yet saved to the database\n   */\n  migrateSystemData(options?: MigrateSystemDataOptions): object;\n\n  /**\n   * Perform preliminary operations before a Document of this type is created.\n   * Pre-creation operations only occur for the client which requested the operation.\n   * @param data    - The initial data used to create the document\n   * @param options - Additional options which modify the creation request\n   * @param user    - The User requesting the document creation\n   */\n  protected _preCreate(\n    data: ConstructorDataType<data.ActorData>,\n    options: DocumentModificationOptions,\n    user: BaseUser\n  ): Promise<void>;\n\n  /**\n   * Perform preliminary operations before a Document of this type is updated.\n   * Pre-update operations only occur for the client which requested the operation.\n   * @param changed - The differential data that is changed relative to the documents prior values\n   * @param options - Additional options which modify the update request\n   * @param user    - The User requesting the document update\n   */\n  protected _preUpdate(\n    changed: DeepPartial<ConstructorDataType<data.ActorData>>,\n    options: DocumentModificationOptions,\n    user: BaseUser\n  ): Promise<void>;\n}\n\ninterface MigrateSystemDataOptions {\n  /**\n   * Retain keys which exist in the current data, but not the model\n   * @defaultValue `false`\n   */\n  insertKeys?: boolean;\n\n  /**\n   * Retain inner-object values which exist in the current data, but not the model\n   * @defaultValue `true`\n   */\n  insertValues?: boolean;\n\n  /**\n   * Require that data types match the model exactly to be retained\n   * @defaultValue `false`\n   */\n  enforceTypes?: boolean;\n}\n"]},1135:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseAmbientLight.d.ts","import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport * as data from '../data/data.mjs';\nimport { BaseScene } from './baseScene';\n\n/**\n * The base AmbientLight model definition which defines common behavior of an AmbientLight document between both client and server.\n */\nexport declare class BaseAmbientLight extends Document<\n  data.AmbientLightData,\n  InstanceType<ConfiguredDocumentClass<typeof BaseScene>>\n> {\n  static get schema(): typeof data.AmbientLightData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'AmbientLight';\n      collection: 'lights';\n      label: 'DOCUMENT.AmbientLight';\n      isEmbedded: true;\n    }\n  >;\n\n  /** @override */\n  protected _initialize(): void;\n}\n"]},15336:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseAmbientSound.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\n\n/**\n * The base AmbientSound model definition which defines common behavior of an AmbientSound document between both client and server.\n */\nexport declare class BaseAmbientSound extends Document<any, any> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'AmbientSound';\n      collection: 'sounds';\n      label: 'DOCUMENT.AmbientSound';\n      isEmbedded: true;\n      types: ['l', 'g'];\n    }\n  >;\n}\n"]},29041:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseChatMessage.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { BaseUser } from './baseUser';\nimport * as data from '../data/data.mjs';\n\n/**\n * The base ChatMessage model definition which defines common behavior of an ChatMessage document between both client and server.\n */\nexport declare class BaseChatMessage extends Document<data.ChatMessageData, null> {\n  static get schema(): typeof data.ChatMessageData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'ChatMessage';\n      collection: 'messages';\n      label: 'DOCUMENT.ChatMessage';\n      isPrimary: true;\n      permissions: {\n        create: (user: BaseUser, doc: BaseChatMessage) => boolean;\n        update: (user: BaseUser, doc: BaseChatMessage, data?: object) => boolean;\n        delete: (user: BaseUser, doc: BaseChatMessage) => boolean;\n      };\n    }\n  >;\n\n  /**\n   * Is a user able to create a new chat message?\n   */\n  protected static _canCreate(user: BaseUser, doc: BaseChatMessage): boolean;\n\n  /**\n   * Is a user able to update an existing chat message?\n   */\n  protected static _canUpdate(user: BaseUser, doc: BaseChatMessage, data?: object): boolean;\n\n  /**\n   * Is a user able to delete an existing chat message?\n   */\n  protected static _canDelete(user: BaseUser, doc: BaseChatMessage): boolean;\n}\n"]},51689:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseCombat.d.ts","import { ConstructorDataType } from '../../../types/helperTypes';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { data } from '../module.mjs';\nimport { BaseCombatant } from './baseCombatant';\nimport { BaseUser } from './baseUser';\n\n/**\n * The base Combat model definition which defines common behavior of an Combat document between both client and server.\n */\nexport declare class BaseCombat extends Document<data.CombatData> {\n  static get schema(): typeof data.CombatData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Combat';\n      collection: 'combats';\n      label: 'DOCUMENT.Combat';\n      embedded: {\n        Combatant: typeof BaseCombatant;\n      };\n      isPrimary: true;\n      permissions: {\n        update: typeof BaseCombat._canUpdate;\n      };\n    }\n  >;\n\n  /** A reference to the Collection of Combatant instances in the Combat document, indexed by id. */\n  get combatants(): this['data']['combatants'];\n\n  /**\n   * Is a user able to update an existing Combat?\n   * @param doc - (unused)\n   */\n  protected static _canUpdate(user: BaseUser, doc: unknown, data?: ConstructorDataType<data.CombatData>): boolean;\n}\n"]},85792:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseCombatant.d.ts","import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { data } from '../module.mjs';\nimport { BaseCombat } from './baseCombat';\nimport { BaseUser } from './baseUser';\n\n/**\n * The base Combatant model definition which defines common behavior of an Combatant document between both client and server.\n */\nexport declare class BaseCombatant extends Document<\n  data.CombatantData,\n  InstanceType<ConfiguredDocumentClass<typeof BaseCombat>>\n> {\n  static get schema(): typeof data.CombatantData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Combatant';\n      collection: 'combatants';\n      label: 'DOCUMENT.Combatant';\n      isEmbedded: true;\n      permissions: {\n        create: 'PLAYER';\n        update: typeof BaseCombatant._canUpdate;\n      };\n    }\n  >;\n\n  /**\n   * Is a user able to update an existing Combatant?\n   * @remarks doc seems unused\n   */\n  protected static _canUpdate(user: BaseUser, doc: unknown, data?: object): boolean;\n}\n"]},97202:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseDrawing.d.ts","import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport * as data from '../data/data.mjs';\nimport { BaseScene } from './baseScene';\nimport { BaseUser } from './baseUser';\n\n/**\n * The base Drawing model definition which defines common behavior of an Drawing document between both client and server.\n */\nexport declare class BaseDrawing extends Document<\n  data.DrawingData,\n  InstanceType<ConfiguredDocumentClass<typeof BaseScene>>\n> {\n  static get schema(): typeof data.DrawingData;\n\n  /** @override */\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Drawing';\n      collection: 'drawings';\n      label: 'DOCUMENT.Drawing';\n      isEmbedded: true;\n      permissions: {\n        create: 'DRAWING_CREATE';\n        update: (user: BaseUser, doc: BaseDrawing, data?: object) => boolean;\n        delete: (user: BaseUser, doc: BaseDrawing, data?: object) => boolean;\n      };\n    }\n  >;\n\n  /** @override */\n  testUserPermission(\n    user: BaseUser,\n    permission: keyof typeof foundry.CONST.ENTITY_PERMISSIONS | foundry.CONST.EntityPermission,\n    { exact }?: { exact?: boolean }\n  ): boolean;\n\n  /**\n   * Is a user able to update or delete an existing Drawing document??\n   */\n  protected static _canModify(user: BaseUser, doc: BaseDrawing, data?: object): boolean;\n}\n"]},94227:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseFogExploration.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { BaseUser } from './baseUser';\n\n/**\n * The base FogExploration model definition which defines common behavior of an FogExploration document between both client and server.\n */\nexport declare class BaseFogExploration extends Document<any, any> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'FogExploration';\n      collection: 'fog';\n      label: 'DOCUMENT.FogExploration';\n      isPrimary: true;\n      permissions: {\n        create: 'PLAYER';\n        update: (user: BaseUser, doc: any, data?: object) => boolean;\n        delete: (user: BaseUser, doc: any, data?: object) => boolean;\n      };\n    }\n  >;\n}\n"]},73861:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseFolder.d.ts","import * as data from '../data/data.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { DocumentMetadata } from '../abstract/document.mjs';\n\n/**\n * The base Folder model definition which defines common behavior of an Folder document between both client and server.\n */\nexport declare class BaseFolder extends Document<data.FolderData, BaseFolder> {\n  static get schema(): typeof data.FolderData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Folder';\n      collection: 'folders';\n      label: 'DOCUMENT.Folder';\n      isPrimary: true;\n      types: typeof CONST.FOLDER_ENTITY_TYPES;\n    }\n  >;\n}\n"]},92319:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseItem.d.ts","import * as data from '../data/data.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { BaseActor } from './baseActor';\nimport { BaseActiveEffect } from './baseActiveEffect';\nimport { BaseUser } from './baseUser';\nimport { ConfiguredDocumentClass } from '../../../types/helperTypes';\n\n/**\n * The base Item model definition which defines common behavior of an Item document between both client and server.\n */\nexport declare class BaseItem extends Document<data.ItemData, InstanceType<ConfiguredDocumentClass<typeof BaseActor>>> {\n  static get schema(): typeof data.ItemData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Item';\n      collection: 'items';\n      label: 'DOCUMENT.Item';\n      embedded: {\n        ActiveEffect: typeof BaseActiveEffect;\n      };\n      isPrimary: true;\n      hasSystemData: true;\n      types: string[];\n      permissions: {\n        create: 'ITEM_CREATE';\n      };\n    }\n  >;\n\n  /**\n   * A reference to the Collection of ActiveEffect instances in the Item document, indexed by _id.\n   */\n  get effects(): this['data']['effects'];\n\n  canUserModify(user: BaseUser, action: 'create' | 'update' | 'delete', data?: object): boolean;\n\n  testUserPermission(\n    user: BaseUser,\n    permission: keyof typeof foundry.CONST.ENTITY_PERMISSIONS | foundry.CONST.EntityPermission,\n    { exact }: { exact?: boolean }\n  ): boolean;\n\n  /**\n   * Migrate the system data object to conform to data model defined by the current system version.\n   * @see mergeObject\n   * @param options - Options which customize how the system data is migrated.\n   * @returns The migrated system data object, not yet saved to the database\n   */\n  migrateSystemData(options?: MigrateSystemDataOptions): object;\n}\n\ninterface MigrateSystemDataOptions {\n  /**\n   * Retain keys which exist in the current data, but not the model\n   * @defaultValue `false`\n   */\n  insertKeys?: boolean;\n\n  /**\n   * Retain inner-object values which exist in the current data, but not the model\n   * @defaultValue `true`\n   */\n  insertValues?: boolean;\n\n  /**\n   * Require that data types match the model exactly to be retained\n   * @defaultValue `false`\n   */\n  enforceTypes?: boolean;\n}\n"]},96492:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseJournalEntry.d.ts","import * as data from '../data/data.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { DocumentMetadata } from '../abstract/document.mjs';\n\n/**\n * The base JournalEntry model definition which defines common behavior of an JournalEntry document between both client and server.\n */\nexport declare class BaseJournalEntry extends Document<data.JournalEntryData> {\n  static get schema(): typeof data.JournalEntryData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'JournalEntry';\n      collection: 'journal';\n      label: 'DOCUMENT.JournalEntry';\n      isPrimary: true;\n      permissions: {\n        create: 'JOURNAL_CREATE';\n      };\n    }\n  >;\n}\n"]},50483:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseMacro.d.ts","import * as data from '../data/data.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { DocumentMetadata, DocumentModificationOptions } from '../abstract/document.mjs';\nimport { BaseUser } from './baseUser';\nimport { ConstructorDataType } from '../../../types/helperTypes';\n\n/**\n * The base Macro model definition which defines common behavior of an Macro document between both client and server.\n */\nexport declare class BaseMacro extends Document<data.MacroData> {\n  static get schema(): typeof data.MacroData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Macro';\n      collection: 'macros';\n      label: 'DOCUMENT.Macro';\n      isPrimary: true;\n      types: ['script', 'chat']; // TODO: Automatically infer from CONST.MACRO_TYPES\n      permissions: {\n        create: 'PLAYER';\n        update: (user: BaseUser, doc: BaseMacro, data?: object) => boolean;\n        delete: (user: BaseUser, doc: BaseMacro) => boolean;\n      };\n    }\n  >;\n\n  protected _preCreate(\n    data: ConstructorDataType<data.MacroData>,\n    options: DocumentModificationOptions,\n    user: BaseUser\n  ): Promise<void>;\n\n  /**\n   * Is a user able to update an existing Macro document?\n   */\n  protected static _canUpdate(user: BaseUser, doc: BaseMacro, data?: object): boolean;\n\n  /**\n   * Is a user able to delete an existing Macro document?\n   */\n  protected static _canDelete(user: BaseUser, doc: BaseMacro): boolean;\n}\n"]},28141:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseMeasuredTemplate.d.ts","import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport * as data from '../data/data.mjs';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { BaseScene } from './baseScene';\nimport { BaseUser } from './baseUser';\n\n/**\n * The base MeasuredTemplate model definition which defines common behavior of an MeasuredTemplate document between both client and server.\n */\nexport declare class BaseMeasuredTemplate extends Document<\n  data.MeasuredTemplateData,\n  InstanceType<ConfiguredDocumentClass<typeof BaseScene>>\n> {\n  static get schema(): typeof data.MeasuredTemplateData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'MeasuredTemplate';\n      collection: 'templates';\n      label: 'DOCUMENT.MeasuredTemplate';\n      isEmbedded: true;\n      permissions: {\n        create: 'TEMPLATE_CREATE';\n        update: typeof BaseMeasuredTemplate['_canModify'];\n        delete: typeof BaseMeasuredTemplate['_canModify'];\n      };\n    }\n  >;\n\n  /** @override */\n  testUserPermission(\n    user: BaseUser,\n    permission: keyof typeof foundry.CONST.ENTITY_PERMISSIONS | foundry.CONST.EntityPermission,\n    { exact }?: { exact?: boolean }\n  ): boolean;\n\n  /**\n   * Is a user able to modify an existing MeasuredTemplate?\n   */\n  protected static _canModify(user: BaseUser, doc: BaseMeasuredTemplate, data: unknown): boolean;\n}\n"]},50566:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseNote.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\n\n/**\n * The base Note model definition which defines common behavior of an Note document between both client and server.\n */\nexport declare class BaseNote extends Document<any, any> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Note';\n      collection: 'notes';\n      label: 'DOCUMENT.Note';\n      isEmbedded: true;\n    }\n  >;\n}\n"]},43997:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\basePlaylist.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { BasePlaylistSound } from './basePlaylistSound';\n\n/**\n * The base Playlist model definition which defines common behavior of an Playlist document between both client and server.\n */\nexport declare class BasePlaylist extends Document<any, any> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Playlist';\n      collection: 'playlists';\n      label: 'DOCUMENT.Playlist';\n      embedded: {\n        PlaylistSound: typeof BasePlaylistSound;\n      };\n      isPrimary: true;\n    }\n  >;\n}\n"]},50101:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\basePlaylistSound.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\n\n/**\n * The PlaylistSound model definition which defines common behaviour of a PlaylistSound document between both client and server.\n */\nexport declare class BasePlaylistSound extends Document<any, any> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'PlaylistSound';\n      collection: 'sounds';\n      label: 'DOCUMENT.PlaylistSound';\n      isEmbedded: true;\n    }\n  >;\n}\n"]},26666:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseRollTable.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { BaseTableResult } from './baseTableResult';\n\n/**\n * The base RollTable model definition which defines common behavior of an RollTable document between both client and server.\n */\nexport declare class BaseRollTable extends Document<any, any> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'RollTable';\n      collection: 'tables';\n      label: 'DOCUMENT.RollTable';\n      embedded: {\n        TableResult: typeof BaseTableResult;\n      };\n      isPrimary: true;\n    }\n  >;\n}\n"]},61787:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseScene.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { BaseAmbientLight } from './baseAmbientLight';\nimport { BaseAmbientSound } from './baseAmbientSound';\nimport { BaseDrawing } from './baseDrawing';\nimport { BaseMeasuredTemplate } from './baseMeasuredTemplate';\nimport { BaseNote } from './baseNote';\nimport { BaseTile } from './baseTile';\nimport { BaseToken } from './baseToken';\nimport { BaseWall } from './baseWall';\n\n/**\n * The base Scene model definition which defines common behavior of an Scene document between both client and server.\n */\nexport declare class BaseScene extends Document<any, any> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Scene';\n      collection: 'scenes';\n      label: 'DOCUMENT.Scene';\n      isPrimary: true;\n      embedded: {\n        AmbientLight: typeof BaseAmbientLight;\n        AmbientSound: typeof BaseAmbientSound;\n        Drawing: typeof BaseDrawing;\n        MeasuredTemplate: typeof BaseMeasuredTemplate;\n        Note: typeof BaseNote;\n        Tile: typeof BaseTile;\n        Token: typeof BaseToken;\n        Wall: typeof BaseWall;\n      };\n    }\n  >;\n}\n"]},6871:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseSetting.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\n\n/**\n * The base Setting model definition which defines common behavior of an Setting document between both client and server.\n */\nexport declare class BaseSetting extends Document<any, any> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Setting';\n      collection: 'settings';\n      label: 'DOCUMENT.Setting';\n      isPrimary: true;\n      permissions: {\n        create: 'SETTINGS_MODIFY';\n        update: 'SETTINGS_MODIFY';\n        delete: 'SETTINGS_MODIFY';\n      };\n    }\n  >;\n}\n"]},26827:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseTableResult.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { BaseUser } from './baseUser';\n\n/**\n * The base TableResult model definition which defines common behavior of an TableResult document between both client and server.\n */\nexport declare class BaseTableResult extends Document<any, any> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'TableResult';\n      collection: 'results';\n      label: 'DOCUMENT.TableResult';\n      types: typeof CONST.TABLE_RESULT_TYPES;\n      permissions: {\n        update: (user: BaseUser, doc: any, data?: object) => boolean;\n      };\n    }\n  >;\n}\n"]},78229:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseTile.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\n\n/**\n * The base Tile model definition which defines common behavior of an Tile document between both client and server.\n */\nexport declare class BaseTile extends Document<any, any> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Tile';\n      collection: 'tiles';\n      label: 'DOCUMENT.Tile';\n      isEmbedded: true;\n    }\n  >;\n}\n"]},90510:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseToken.d.ts","import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport * as data from '../data/data.mjs';\nimport { BaseUser } from './baseUser';\n\n/**\n * The base Token model definition which defines common behavior of an Token document between both client and server.\n */\nexport declare class BaseToken extends Document<\n  data.TokenData,\n  InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseScene>>\n> {\n  static get schema(): typeof data.TokenData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Token';\n      collection: 'tokens';\n      label: 'DOCUMENT.Token';\n      isEmbedded: true;\n      permissions: {\n        create: 'TOKEN_CREATE';\n        update: typeof BaseToken['_canUpdate'];\n      };\n    }\n  >;\n\n  /**\n   * A convenience reference to the name which should be displayed for the Token\n   */\n  get name(): string;\n\n  /**\n   * Is a user able to update an existing Token?\n   */\n  protected static _canUpdate(user: BaseUser, doc: BaseToken, data: unknown): boolean;\n}\n"]},32797:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseUser.d.ts","import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport * as data from '../data/data.mjs';\n\n/**\n * The base User model definition which defines common behavior of an User document between both client and server.\n */\nexport declare class BaseUser extends Document<data.UserData, null> {\n  constructor(...args: ConstructorParameters<ConstructorOf<Document<data.UserData, null>>>);\n\n  /**\n   * Define an immutable property for the User's role\n   */\n  readonly role: ValueOf<typeof CONST.USER_ROLES>;\n\n  static get schema(): typeof data.UserData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'User';\n      collection: 'users';\n      label: 'DOCUMENT.User';\n      isPrimary: true;\n    }\n  >;\n\n  /**\n   * Test whether the User has a GAMEMASTER or ASSISTANT role in this World?\n   */\n  get isGM(): boolean;\n\n  /**\n   * Test whether the User is able to perform a certain permission action.\n   * The provided permission string may pertain to an explicit permission setting or a named user role.\n   * Alternatively, Gamemaster users are assumed to be allowed to take all actions.\n   *\n   * @param action - The action to test\n   * @returns Does the user have the ability to perform this action?\n   */\n  can(\n    action: ValueOf<typeof CONST.USER_ROLES> | keyof typeof CONST.USER_ROLES | keyof typeof CONST.USER_PERMISSIONS\n  ): boolean;\n\n  getUserLevel(user: BaseUser): typeof CONST.ENTITY_PERMISSIONS.OWNER | typeof CONST.ENTITY_PERMISSIONS.NONE;\n\n  /**\n   * Test whether the User has at least a specific permission\n   * @param permission - The permission name from USER_PERMISSIONS to test\n   * @returns Does the user have at least this permission\n   */\n  hasPermission(permission: keyof typeof CONST.USER_PERMISSIONS): boolean;\n\n  /**\n   * Test whether the User has at least the permission level of a certain role\n   * @param role  - The role name from USER_ROLES to test\n   * @param exact - Require the role match to be exact\n   *                (default: `false`)\n   * @returns Does the user have at this role level (or greater)?\n   */\n  hasRole(\n    role: ValueOf<typeof CONST.USER_ROLES> | keyof typeof CONST.USER_ROLES,\n    { exact }?: { exact?: boolean }\n  ): boolean;\n}\n"]},38895:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseWall.d.ts","import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { BaseScene } from './baseScene';\nimport { BaseUser } from './baseUser';\n\n/**\n * The base Wall model definition which defines common behavior of an Wall document between both client and server.\n */\nexport declare class BaseWall extends Document<any, InstanceType<ConfiguredDocumentClass<typeof BaseScene>>> {\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Wall';\n      collection: 'walls';\n      label: 'DOCUMENT.Wall';\n      isEmbedded: true;\n      permissions: {\n        update: (user: BaseUser, doc: any, data?: object) => boolean;\n      };\n    }\n  >;\n}\n"]},31826:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\index.d.ts","export { BaseActiveEffect } from './baseActiveEffect';\nexport { BaseActor } from './baseActor';\nexport { BaseAmbientLight } from './baseAmbientLight';\nexport { BaseAmbientSound } from './baseAmbientSound';\nexport { BaseCombat } from './baseCombat';\nexport { BaseCombatant } from './baseCombatant';\nexport { BaseChatMessage } from './baseChatMessage';\nexport { BaseDrawing } from './baseDrawing';\nexport { BaseFogExploration } from './baseFogExploration';\nexport { BaseFolder } from './baseFolder';\nexport { BaseItem } from './baseItem';\nexport { BaseJournalEntry } from './baseJournalEntry';\nexport { BaseMacro } from './baseMacro';\nexport { BaseMeasuredTemplate } from './baseMeasuredTemplate';\nexport { BaseNote } from './baseNote';\nexport { BasePlaylist } from './basePlaylist';\nexport { BasePlaylistSound } from './basePlaylistSound';\nexport { BaseRollTable } from './baseRollTable';\nexport { BaseScene } from './baseScene';\nexport { BaseSetting } from './baseSetting';\nexport { BaseTableResult } from './baseTableResult';\nexport { BaseTile } from './baseTile';\nexport { BaseToken } from './baseToken';\nexport { BaseUser } from './baseUser';\nexport { BaseWall } from './baseWall';\n"]},60083:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\module.mjs.d.ts","import './types.mjs';\nimport './utils/primitives.mjs';\nimport * as _CONST from './constants.mjs';\nimport * as _abstract from './abstract/module.mjs';\nimport * as _data from './data/module.mjs';\nimport * as _documents from './documents.mjs';\nimport * as _packages from './packages.mjs';\nimport * as _utils from './utils/module.mjs';\n\n/**\n * Constant definitions used throughout the Foundry Virtual Tabletop framework.\n */\nexport * as CONST from './constants.mjs';\n\n/**\n * Abstract class definitions providing fundamental interfaces used throughout the Foundry Virtual Tabletop framework.\n */\nexport * as abstract from './abstract/module.mjs';\n\n/**\n * Data schema definitions providing structure for Documents used throughout the Foundry Virtual Tabletop framework.\n */\nexport * as data from './data/module.mjs';\n\n/**\n * Document definitions used throughout the Foundry Virtual Tabletop framework.\n */\nexport * as documents from './documents.mjs';\n\n/**\n * Package data definitions, validations, and schema\n */\nexport * as packages from './packages.mjs';\n\n/**\n * Utility functions providing helpful functionality.\n */\nexport * as utils from './utils/module.mjs';\n\ndeclare global {\n  namespace foundry {\n    /**\n     * Constant definitions used throughout the Foundry Virtual Tabletop framework.\n     */\n    export import CONST = _CONST; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    /**\n     * Abstract class definitions providing fundamental interfaces used throughout the Foundry Virtual Tabletop framework.\n     */\n    export import abstract = _abstract; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    /**\n     * Data schema definitions providing structure for Documents used throughout the Foundry Virtual Tabletop framework.\n     */\n    export import data = _data; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    /**\n     * Utility functions providing helpful functionality.\n     */\n    export import utils = _utils; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    /**\n     * Document definitions used throughout the Foundry Virtual Tabletop framework.\n     */\n    export import documents = _documents; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    /**\n     * Package data definitions, validations, and schema\n     */\n    export import packages = _packages; // eslint-disable-line @typescript-eslint/no-unused-vars\n  }\n\n  /**\n   * Constant definitions used throughout the Foundry Virtual Tabletop framework.\n   */\n  const CONST: typeof _CONST;\n\n  type Collection<T> = _utils.Collection<T>;\n  var Collection: typeof _utils.Collection; // eslint-disable-line no-var\n\n  type Semaphore = _utils.Semaphore;\n  var Semaphore: typeof _utils.Semaphore; // eslint-disable-line no-var\n\n  var benchmark: typeof _utils.benchmark; // eslint-disable-line no-var\n  var debounce: typeof _utils.debounce; // eslint-disable-line no-var\n  var deepClone: typeof _utils.deepClone; // eslint-disable-line no-var\n  var diffObject: typeof _utils.diffObject; // eslint-disable-line no-var\n  var duplicate: typeof _utils.duplicate; // eslint-disable-line no-var\n  var encodeURL: typeof _utils.encodeURL; // eslint-disable-line no-var\n  var expandObject: typeof _utils.expandObject; // eslint-disable-line no-var\n  var filterObject: typeof _utils.filterObject; // eslint-disable-line no-var\n  var flattenObject: typeof _utils.flattenObject; // eslint-disable-line no-var\n  var getParentClasses: typeof _utils.getParentClasses; // eslint-disable-line no-var\n  var getProperty: typeof _utils.getProperty; // eslint-disable-line no-var\n  var getRoute: typeof _utils.getRoute; // eslint-disable-line no-var\n  var getType: typeof _utils.getType; // eslint-disable-line no-var\n  var hasProperty: typeof _utils.hasProperty; // eslint-disable-line no-var\n  var invertObject: typeof _utils.invertObject; // eslint-disable-line no-var\n  var isNewerVersion: typeof _utils.isNewerVersion; // eslint-disable-line no-var\n  var isObjectEmpty: typeof _utils.isObjectEmpty; // eslint-disable-line no-var\n  var mergeObject: typeof _utils.mergeObject; // eslint-disable-line no-var\n  var randomID: typeof _utils.randomID; // eslint-disable-line no-var\n  var setProperty: typeof _utils.setProperty; // eslint-disable-line no-var\n  var timeSince: typeof _utils.timeSince; // eslint-disable-line no-var\n  var rgbToHsv: typeof _utils.rgbToHsv; // eslint-disable-line no-var\n  var hsvToRgb: typeof _utils.hsvToRgb; // eslint-disable-line no-var\n  var rgbToHex: typeof _utils.rgbToHex; // eslint-disable-line no-var\n  var hexToRGB: typeof _utils.hexToRGB; // eslint-disable-line no-var\n  var hexToRGBAString: typeof _utils.hexToRGBAString; // eslint-disable-line no-var\n  var colorStringToHex: typeof _utils.colorStringToHex; // eslint-disable-line no-var\n}\n"]},23928:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\packages.mjs\\index.d.ts","export { tagPackageAvailability } from './tagPackageAvailability';\nexport { WorldData } from './worldData';\nexport { SystemData } from './systemData';\nexport { ModuleData } from './moduleData';\nexport { PackageAuthorData } from './packageAuthorData';\nexport { PackageCompendiumData } from './packageCompendiumData';\nexport { PackageDependencyData } from './packageDependencyData';\nexport { PackageLanguageData } from './packageLanguageData';\n"]},24718:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\packages.mjs\\moduleData.d.ts","import * as fields from '../data/fields.mjs';\nimport { PackageData, PackageDataConstructorData, PackageDataProperties, PackageDataSchema } from './packageData';\n\ninterface ModuleDataSchema extends PackageDataSchema {\n  coreTranslation: typeof fields.BOOLEAN_FIELD;\n  minimumSystemVersion: typeof fields.STRING_FIELD;\n}\n\ninterface ModuleDataProperties extends PackageDataProperties {\n  coreTranslation: boolean;\n\n  /** A minimum version number of the game system that this module requires */\n  minimumSystemVersion?: string;\n}\n\ninterface ModuleDataConstructorData extends PackageDataConstructorData {\n  coreTranslation?: boolean | null;\n\n  /** A minimum version number of the game system that this module requires */\n  minimumSystemVersion?: string | null;\n}\n\n/**\n * The data schema used to define Module manifest files.\n * Extends the basic PackageData schema with some additional module-specific fields.\n */\nexport declare class ModuleData extends PackageData<ModuleDataSchema, ModuleDataProperties, ModuleDataConstructorData> {\n  static defineSchema(): ModuleDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface ModuleData extends ModuleDataProperties {}\n"]},65645:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\packages.mjs\\packageAuthorData.d.ts","import { PropertiesToSource } from '../../../types/helperTypes';\nimport { DocumentData } from '../abstract/module.mjs';\nimport * as fields from '../data/fields.mjs';\n\ninterface PackageAuthorDataSchema extends DocumentSchema {\n  name: typeof fields.REQUIRED_STRING;\n  email: typeof fields.STRING_FIELD;\n  url: typeof fields.STRING_FIELD;\n  discord: typeof fields.STRING_FIELD;\n}\n\ninterface PackageAuthorDataProperties {\n  /**\n   * The author name\n   */\n  name: string;\n\n  /**\n   * The author email address\n   */\n  email?: string;\n\n  /**\n   *  A website url for the author\n   */\n  url?: string;\n\n  /**\n   *  A Discord username for the author\n   */\n  discord?: string;\n}\n\ninterface PackageAuthorDataConstructorData {\n  name: string;\n  email?: string | null;\n  url?: string | null;\n  discord?: string | null;\n}\n\n/**\n * An inner data object which represents a single package author in the authors array.\n */\nexport declare class PackageAuthorData extends DocumentData<\n  PackageAuthorDataSchema,\n  PackageAuthorDataProperties,\n  PropertiesToSource<PackageAuthorDataProperties>,\n  PackageAuthorDataConstructorData,\n  null\n> {\n  constructor(data?: DeepPartial<PropertiesToSource<PackageAuthorDataProperties>>, document?: null);\n\n  static defineSchema(): PackageAuthorDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PackageAuthorData extends PackageAuthorDataProperties {}\n"]},44134:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\packages.mjs\\packageCompendiumData.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../types/helperTypes';\nimport { DocumentData } from '../abstract/module.mjs';\nimport * as fields from '../data/fields.mjs';\n\ninterface PackageCompendiumDataSchema extends DocumentSchema {\n  name: typeof fields.REQUIRED_STRING;\n  label: typeof fields.REQUIRED_STRING;\n  path: typeof fields.REQUIRED_STRING;\n  private: FieldReturnType<\n    typeof fields.BOOLEAN_FIELD,\n    {\n      default: false;\n    }\n  >;\n  entity: FieldReturnType<\n    typeof fields.REQUIRED_STRING,\n    {\n      validate: (v: string) => v is foundry.CONST.CompendiumEntityType;\n      validationError: 'Invalid package compendium entity type provided which must be a value in CONST.COMPENDIUM_ENTITY_TYPES';\n    }\n  >;\n  system: typeof fields.STRING_FIELD;\n}\n\ninterface PackageCompendiumDataProperties {\n  /** The canonical compendium name. This should contain no spaces or special characters. */\n  name: string;\n\n  /** The human-readable compendium name. */\n  label: string;\n\n  /** The local relative path to the compendium source .db file. The filename should match the name attribute. */\n  path: string;\n\n  private: boolean;\n\n  /** The specific document type that is contained within this compendium pack */\n  entity: foundry.CONST.CompendiumEntityType;\n\n  /** Denote that this compendium pack requires a specific game system to function properly. */\n  system?: string;\n}\n\ninterface PackageCompendiumDataConstructorData {\n  /** The canonical compendium name. This should contain no spaces or special characters. */\n  name: string;\n\n  /** The human-readable compendium name. */\n  label: string;\n\n  /** The local relative path to the compendium source .db file. The filename should match the name attribute. */\n  path: string;\n\n  private?: boolean | null;\n\n  /** The specific document type that is contained within this compendium pack */\n  entity: foundry.CONST.CompendiumEntityType;\n\n  /** Denote that this compendium pack requires a specific game system to function properly. */\n  system?: string;\n}\n\n/**\n * An inner data object which represents a single compendium pack definition provided by a package in the packs array.\n */\nexport declare class PackageCompendiumData extends DocumentData<\n  PackageCompendiumDataSchema,\n  PackageCompendiumDataProperties,\n  PropertiesToSource<PackageCompendiumDataProperties>,\n  PackageCompendiumDataConstructorData\n> {\n  static defineSchema(): PackageCompendiumDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface PackageCompendiumData extends PackageCompendiumDataProperties {}\n"]},79967:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\packages.mjs\\packageData.d.ts","import { ConstructorDataType, FieldReturnType, PropertiesToSource } from '../../../types/helperTypes';\nimport { DocumentData } from '../abstract/module.mjs';\nimport * as fields from '../data/fields.mjs';\nimport { PackageAuthorData } from './packageAuthorData';\nimport { PackageCompendiumData } from './packageCompendiumData';\nimport { PackageDependencyData } from './packageDependencyData';\nimport { PackageLanguageData } from './packageLanguageData';\n\n/**\n * A helper field used for string arrays\n */\ndeclare const STRING_ARRAY_FIELD: DocumentField<string[]> & {\n  type: [String];\n  required: true;\n  default: [];\n  clean: (v: unknown) => string[];\n};\n\ntype IncludeArrayFieldReturnType<T extends ConstructorOf<DocumentData<any, any>>> = DocumentField<\n  Array<InstanceType<T>>\n> & {\n  type: [T];\n  required: true;\n  default: [];\n  clean: (v: unknown) => InstanceType<T>['_source'][];\n};\n\n/**\n * A helper field used for arrays of package include objects\n */\ndeclare const INCLUDE_ARRAY_FIELD: <T extends ConstructorOf<DocumentData<any, any>>>(\n  type: T\n) => IncludeArrayFieldReturnType<T>;\n\nexport interface PackageDataSchema extends DocumentSchema {\n  name: typeof fields.STRING_FIELD;\n  title: typeof fields.STRING_FIELD;\n  description: typeof fields.BLANK_STRING;\n  author: typeof fields.STRING_FIELD;\n  authors: IncludeArrayFieldReturnType<typeof PackageAuthorData>;\n  url: typeof fields.STRING_FIELD;\n  license: typeof fields.STRING_FIELD;\n  readme: typeof fields.STRING_FIELD;\n  bugs: typeof fields.STRING_FIELD;\n  changelog: typeof fields.STRING_FIELD;\n  flags: typeof fields.OBJECT_FIELD;\n  version: FieldReturnType<typeof fields.REQUIRED_STRING, { default: '1.0.0' }>;\n  minimumCoreVersion: typeof fields.STRING_FIELD;\n  compatibleCoreVersion: typeof fields.STRING_FIELD;\n  scripts: typeof STRING_ARRAY_FIELD;\n  esmodules: typeof STRING_ARRAY_FIELD;\n  styles: typeof STRING_ARRAY_FIELD;\n  languages: IncludeArrayFieldReturnType<typeof PackageLanguageData>;\n  packs: IncludeArrayFieldReturnType<typeof PackageCompendiumData>;\n  system: typeof STRING_ARRAY_FIELD;\n  dependencies: IncludeArrayFieldReturnType<typeof PackageDependencyData>;\n  socket: FieldReturnType<typeof fields.BOOLEAN_FIELD, { default: false }>;\n  manifest: typeof fields.STRING_FIELD;\n  download: typeof fields.STRING_FIELD;\n  protected: FieldReturnType<typeof fields.BOOLEAN_FIELD, { default: false }>;\n}\n\nexport interface PackageDataProperties {\n  /** The canonical package name, should be lower-case with no spaces or special characters */\n  name?: string;\n\n  /** The human-readable package title, containing spaces and special characters */\n  title?: string;\n\n  /** An optional package description, may contain HTML */\n  description: string;\n\n  /** A singular package author; this is an old field staged for later deprecation, please use authors */\n  author?: string;\n\n  /**\n   * An array of author objects who are co-authors of this package. Preferred to the singular author field.\n   * @defaultValue `[]`\n   */\n  authors: PackageAuthorData[];\n\n  /** A web url where more details about the package may be found */\n  url?: string;\n\n  /** A web url or relative file path where license details may be found */\n  license?: string;\n\n  /** A web url or relative file path where readme instructions may be found */\n  readme?: string;\n\n  /** A web url where bug reports may be submitted and tracked */\n  bugs?: string;\n\n  /** A web url where notes detailing package updates are available */\n  changelog?: string;\n\n  /** @defaultValue `{}` */\n  flags: Record<string, unknown>;\n\n  /**\n   * The current package version\n   * @defaultValue `'1.0.0'`\n   */\n  version: string;\n\n  /** A minimum version of the core Foundry software which is required to use this package */\n  minimumCoreVersion?: string;\n\n  /** A maximum version of the core Foundry software beyond which compatibility is not guaranteed */\n  compatibleCoreVersion?: string;\n\n  /**\n   * An array of urls or relative file paths for JavaScript files which should be included\n   * @defaultValue `[]`\n   */\n  scripts: string[];\n\n  /**\n   * An array of urls or relative file paths for ESModule files which should be included\n   * @defaultValue `[]`\n   */\n  esmodules: string[];\n\n  /**\n   * An array of urls or relative file paths for CSS stylesheet files which should be included\n   * @defaultValue `[]`\n   */\n  styles: string[];\n\n  /**\n   * An array of language data objects which are included by this package\n   * @defaultValue `[]`\n   */\n  languages: PackageLanguageData[];\n\n  /**\n   * An array of compendium packs which are included by this package\n   * @defaultValue `[]`\n   */\n  packs: PackageCompendiumData[];\n\n  /**\n   * An array of game system names which this module supports\n   * @defaultValue `[]`\n   */\n  system: string[];\n\n  /**\n   * An array of dependency objects which define required dependencies for using this package\n   * @defaultValue `[]`\n   */\n  dependencies: PackageDependencyData[];\n\n  /**\n   * Whether to require a package-specific socket namespace for this package\n   * @defaultValue `false`\n   */\n  socket: boolean;\n\n  /** A publicly accessible web URL which provides the latest available package manifest file. Required in order to support module updates. */\n  manifest?: string;\n\n  /** A publicly accessible web URL where the source files for this package may be downloaded. Required in order to support module installation. */\n  download?: string;\n\n  /***\n   * Whether this package uses the protected content access system.\n   * @defaultValue `false`\n   */\n  protected: boolean;\n}\n\nexport interface PackageDataConstructorData {\n  /** The canonical package name, should be lower-case with no spaces or special characters */\n  name?: string | null;\n\n  /** The human-readable package title, containing spaces and special characters */\n  title?: string | null;\n\n  /** An optional package description, may contain HTML */\n  description?: string | null;\n\n  /** A singular package author; this is an old field staged for later deprecation, please use authors */\n  author?: string | null;\n\n  /**\n   * An array of author objects who are co-authors of this package. Preferred to the singular author field.\n   * @defaultValue `[]`\n   */\n  authors?: ConstructorDataType<PackageAuthorData>[] | null;\n\n  /** A web url where more details about the package may be found */\n  url?: string | null;\n\n  /** A web url or relative file path where license details may be found */\n  license?: string | null;\n\n  /** A web url or relative file path where readme instructions may be found */\n  readme?: string | null;\n\n  /** A web url where bug reports may be submitted and tracked */\n  bugs?: string | null;\n\n  /** A web url where notes detailing package updates are available */\n  changelog?: string | null;\n\n  /** @defaultValue `{}` */\n  flags?: Record<string, unknown> | null;\n\n  /**\n   * The current package version\n   * @defaultValue `'1.0.0'`\n   */\n  version?: string | null;\n\n  /** A minimum version of the core Foundry software which is required to use this package */\n  minimumCoreVersion?: string | null;\n\n  /** A maximum version of the core Foundry software beyond which compatibility is not guaranteed */\n  compatibleCoreVersion?: string | null;\n\n  /**\n   * An array of urls or relative file paths for JavaScript files which should be included\n   * @defaultValue `[]`\n   */\n  scripts?: string[] | null;\n\n  /**\n   * An array of urls or relative file paths for ESModule files which should be included\n   * @defaultValue `[]`\n   */\n  esmodules?: string[] | null;\n\n  /**\n   * An array of urls or relative file paths for CSS stylesheet files which should be included\n   * @defaultValue `[]`\n   */\n  styles?: string[] | null;\n\n  /**\n   * An array of language data objects which are included by this package\n   * @defaultValue `[]`\n   */\n  languages?: ConstructorDataType<PackageLanguageData>[] | null;\n\n  /**\n   * An array of compendium packs which are included by this package\n   * @defaultValue `[]`\n   */\n  packs?: ConstructorDataType<PackageCompendiumData>[] | null;\n\n  /**\n   * An array of game system names which this module supports\n   * @defaultValue `[]`\n   */\n  system?: string[] | null;\n\n  /**\n   * An array of dependency objects which define required dependencies for using this package\n   * @defaultValue `[]`\n   */\n  dependencies?: ConstructorDataType<PackageDependencyData>[] | null;\n\n  /**\n   * Whether to require a package-specific socket namespace for this package\n   * @defaultValue `false`\n   */\n  socket?: boolean | null;\n\n  /** A publicly accessible web URL which provides the latest available package manifest file. Required in order to support module updates. */\n  manifest?: string | null;\n\n  /** A publicly accessible web URL where the source files for this package may be downloaded. Required in order to support module installation. */\n  download?: string | null;\n\n  /***\n   * Whether this package uses the protected content access system.\n   * @defaultValue `false`\n   */\n  protected?: boolean | null;\n}\n\n/**\n * The data schema used to define a Package manifest.\n * Specific types of packages extend this schema with additional fields.\n */\nexport declare class PackageData<\n  Schema extends Omit<PackageDataSchema, 'system'>,\n  Properties extends Omit<PackageDataProperties, 'system'>,\n  ConstructorData extends Omit<PackageDataConstructorData, 'system'>\n> extends DocumentData<Schema, Properties, PropertiesToSource<PackageDataProperties>, ConstructorData> {\n  static defineSchema(): Omit<PackageDataSchema, 'system'>;\n\n  /** @override */\n  _initializeSource(data: ConstructorData): PropertiesToSource<PackageDataProperties>;\n}\n"]},10245:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\packages.mjs\\packageDependencyData.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../types/helperTypes';\nimport { DocumentData } from '../abstract/module.mjs';\nimport * as fields from '../data/fields.mjs';\n\ninterface PackageDependencyDataSchema extends DocumentSchema {\n  name: typeof fields.REQUIRED_STRING;\n  type: FieldReturnType<\n    typeof fields.REQUIRED_STRING,\n    {\n      default: 'module';\n      validate: (v: unknown) => boolean;\n      validationError: 'Invalid package type \"{value}\" which must be a value from CONST.PACKAGE_TYPES';\n    }\n  >;\n  manifest: typeof fields.STRING_FIELD;\n}\n\ninterface PackageDependencyDataProperties {\n  /** The dependency package name */\n  name: string;\n\n  /** The dependency package type, from CONST.PACKAGE_TYPES */\n  type: foundry.CONST.PackageTypes;\n\n  /** An explicit manifest URL, otherwise learned from the Foundry web server */\n  manifest?: string;\n}\n\ninterface PackageDependencyDataConstructorData {\n  /** The dependency package name */\n  name: string;\n\n  /** The dependency package type, from CONST.PACKAGE_TYPES */\n  type?: foundry.CONST.PackageTypes | null;\n\n  /** An explicit manifest URL, otherwise learned from the Foundry web server */\n  manifest?: string | null;\n}\n\n/**\n * An inner data object which represents a single package dependency in the dependencies array.\n */\nexport declare class PackageDependencyData extends DocumentData<\n  PackageDependencyDataSchema,\n  PackageDependencyDataProperties,\n  PropertiesToSource<PackageDependencyDataProperties>,\n  PackageDependencyDataConstructorData\n> {\n  static defineSchema(): PackageDependencyDataSchema;\n\n  /** @override */\n  protected _getMissingFieldErrorMessage(name: string, field: DocumentField<unknown>): string;\n\n  /** @override */\n  protected _getInvalidFieldValueErrorMessage(name: string, field: DocumentField<unknown>, value: unknown): string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface PackageDependencyData extends PackageDependencyDataProperties {}\n"]},81504:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\packages.mjs\\packageLanguageData.d.ts","import { FieldReturnType, PropertiesToSource } from '../../../types/helperTypes';\nimport { DocumentData } from '../abstract/module.mjs';\nimport * as fields from '../data/fields.mjs';\n\ninterface PackageLanguageDataSchema extends DocumentSchema {\n  lang: FieldReturnType<\n    typeof fields.REQUIRED_STRING,\n    {\n      validate: (lang: string) => boolean;\n      validationError: 'Invalid language code provided which is not supported by Intl.getCanonicalLocales';\n    }\n  >;\n  name: typeof fields.STRING_FIELD;\n  path: typeof fields.STRING_FIELD;\n  system: typeof fields.STRING_FIELD;\n  module: typeof fields.STRING_FIELD;\n}\n\ninterface PackageLanguageDataProperties {\n  /** A string language code which is validated by Intl.getCanonicalLocales */\n  lang: string;\n\n  /** The human-readable language name */\n  name?: string;\n\n  /** The relative path to included JSON translation strings */\n  path?: string;\n\n  /** Only apply this set of translations when a specific system is being used */\n  system?: string;\n\n  module?: string;\n}\n\ninterface PackageLanguageDataConstructorData {\n  /** A string language code which is validated by Intl.getCanonicalLocales */\n  lang: string;\n\n  /** The human-readable language name */\n  name?: string | null;\n\n  /** The relative path to included JSON translation strings */\n  path?: string | null;\n\n  /** Only apply this set of translations when a specific system is being used */\n  system?: string | null;\n\n  module?: string | null;\n}\n\n/**\n * An inner data object which represents a single language specification provided by a package in the languages array.\n */\nexport declare class PackageLanguageData extends DocumentData<\n  PackageLanguageDataSchema,\n  PackageLanguageDataProperties,\n  PropertiesToSource<PackageLanguageDataProperties>,\n  PackageLanguageDataConstructorData\n> {\n  static defineSchema(): PackageLanguageDataSchema;\n\n  /** @override */\n  protected _initialize(): void;\n\n  /**\n   * Validate that a language code is supported as a canonical locale\n   * @param lang - The candidate language to validate\n   * @returns Is it valid?\n   */\n  static validateLocale(lang: string): boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface PackageLanguageData extends PackageLanguageDataProperties {}\n"]},93949:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\packages.mjs\\systemData.d.ts","import * as fields from '../data/fields.mjs';\nimport { PackageData, PackageDataConstructorData, PackageDataProperties, PackageDataSchema } from './packageData';\n\ninterface SystemDataSchema extends PackageDataSchema {\n  initiative: typeof fields.STRING_FIELD;\n  gridDistance: typeof fields.NUMERIC_FIELD;\n  gridUnits: typeof fields.STRING_FIELD;\n  primaryTokenAttribute: typeof fields.STRING_FIELD;\n  secondaryTokenAttribute: typeof fields.STRING_FIELD;\n}\n\ninterface SystemDataProperties extends PackageDataProperties {\n  initiative?: string;\n\n  /** A default distance measurement to use for Scenes in this system */\n  gridDistance?: number | null;\n\n  /** A default unit of measure to use for distance measurement in this system */\n  gridUnits?: string;\n\n  /** An Actor data attribute path to use for Token primary resource bars */\n  primaryTokenAttribute?: string;\n\n  /** An Actor data attribute path to use for Token secondary resource bars */\n  secondaryTokenAttribute?: string;\n}\n\ninterface SystemDataConstructorData extends PackageDataConstructorData {\n  initiative?: string | null;\n\n  /** A default distance measurement to use for Scenes in this system */\n  gridDistance?: number | null;\n\n  /** A default unit of measure to use for distance measurement in this system */\n  gridUnits?: string | null;\n\n  /** An Actor data attribute path to use for Token primary resource bars */\n  primaryTokenAttribute?: string | null;\n\n  /** An Actor data attribute path to use for Token secondary resource bars */\n  secondaryTokenAttribute?: string | null;\n}\n\n/**\n * The data schema used to define System manifest files.\n * Extends the basic PackageData schema with some additional system-specific fields.\n */\nexport declare class SystemData extends PackageData<SystemDataSchema, SystemDataProperties, SystemDataConstructorData> {\n  static defineSchema(): SystemDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface SystemData extends SystemDataProperties {}\n"]},97635:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\packages.mjs\\tagPackageAvailability.d.ts","/**\n * Checks a package against its availability code to see if it requires a compability warning, and if so, updates the pkg\n * @param pkg - The package\n * @remarks This doesn't actually update the package, it just sets the `unavailable` and `incompatible` flags if needed.\n */\nexport declare function tagPackageAvailability(pkg: {\n  availability: foundry.CONST.PackageAvailabilityCode;\n  type: foundry.CONST.PackageTypes;\n}): void;\n"]},98021:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\packages.mjs\\worldData.d.ts","import * as fields from '../data/fields.mjs';\nimport { PackageData, PackageDataConstructorData, PackageDataProperties, PackageDataSchema } from './packageData';\n\ninterface WorldDataSchema extends Omit<PackageDataSchema, 'system'> {\n  system: typeof fields.REQUIRED_STRING;\n  background: typeof fields.STRING_FIELD;\n  coreVersion: typeof fields.REQUIRED_STRING;\n  nextSession: typeof fields.STRING_FIELD;\n  resetKeys: typeof fields.BOOLEAN_FIELD;\n  safeMode: typeof fields.BOOLEAN_FIELD;\n}\n\ninterface WorldDataProperties extends Omit<PackageDataProperties, 'system'> {\n  /** The game system name which this world relies upon */\n  system: string;\n\n  /** A web URL or local file path which provides a background banner image */\n  background?: string;\n\n  /** The version of the core software for which this world has been migrated */\n  coreVersion: string;\n\n  /** An ISO datetime string when the next game session is scheduled to occur */\n  nextSession?: string;\n\n  resetKeys: boolean;\n\n  safeMode: boolean;\n}\n\ninterface WorldDataConstructorData extends Omit<PackageDataConstructorData, 'system'> {\n  /** The game system name which this world relies upon */\n  system: string;\n\n  /** A web URL or local file path which provides a background banner image */\n  background?: string | null;\n\n  /** The version of the core software for which this world has been migrated */\n  coreVersion: string;\n\n  /** An ISO datetime string when the next game session is scheduled to occur */\n  nextSession?: string | null;\n\n  resetKeys?: boolean | null;\n\n  safeMode?: boolean | null;\n}\n\n/**\n * The data schema used to define World manifest files.\n * Extends the basic PackageData schema with some additional world-specific fields.\n */\nexport declare class WorldData extends PackageData<WorldDataSchema, WorldDataProperties, WorldDataConstructorData> {\n  static defineSchema(): WorldDataSchema;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface WorldData extends WorldDataProperties {}\n"]},84190:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\types.mjs.d.ts","/**\n * A single point, expressed as an object \\{x, y\\}\n */\ndeclare type Point = PIXI.Point | { x: number; y: number };\n\n/**\n * A single point, expressed as an array \\[x,y\\]\n */\ndeclare type PointArray = [x: number, y: number];\n\n/**\n * A Ray intersection point\n */\ndeclare type RayIntersection = {\n  x: number;\n  y: number;\n  t0: number;\n  t1: number;\n};\n\n/**\n * A standard rectangle interface.\n */\ndeclare type Rectangle =\n  | PIXI.Rectangle\n  | {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    };\n\ntype RequestData = object | object[] | string | string[];\n\ninterface SocketRequest {\n  /**\n   * The server-side action being requested\n   */\n  action?: string;\n\n  /**\n   * The type of object being modified\n   */\n  type?: string;\n\n  /**\n   * Data applied to the operation\n   */\n  data?: RequestData;\n\n  /**\n   * A Compendium pack name\n   */\n  pack?: string;\n\n  /**\n   * The type of parent document\n   */\n  parentType?: string;\n\n  /**\n   * The ID of a parent document\n   */\n  parentId?: string;\n\n  /**\n   * Additional options applied to the request\n   */\n  options?: object;\n}\n\ninterface SocketResponse {\n  /**\n   * The initial request\n   */\n  request: SocketRequest;\n\n  /**\n   * An error, if one occurred\n   */\n  error?: Error;\n\n  /**\n   * The status of the request\n   */\n  status?: string;\n\n  /**\n   * The ID of the requesting User\n   */\n  userId?: string;\n\n  /**\n   * Data returned as a result of the request\n   */\n  data?: RequestData;\n}\n"]},15063:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\utils\\collection.mjs.d.ts",'interface MapReplacementMembers<K, V> {\n  set(key: K, value: V): this;\n}\n\ntype PatchedMap<K, V> = Omit<Map<K, V>, \'forEach\' | typeof Symbol.iterator | \'get\' | \'set\'> &\n  MapReplacementMembers<K, V>;\n\ninterface PatchedMapConstructor {\n  new (): PatchedMap<any, any>;\n  new <K, V>(entries?: readonly (readonly [K, V])[] | null): PatchedMap<K, V>;\n  new <K, V>(iterable: Iterable<readonly [K, V]>): PatchedMap<K, V>;\n  readonly [Symbol.species]: PatchedMapConstructor;\n  readonly prototype: PatchedMap<any, any>;\n}\n\ndeclare const Map: PatchedMapConstructor;\n\n/**\n * A reusable storage concept which blends the functionality of an Array with the efficient key-based lookup of a Map.\n * This concept is reused throughout Foundry VTT where a collection of uniquely identified elements is required.\n * @typeParam T - The type of the objects contained in the Collection\n */\ndeclare class Collection<T> extends Map<string, T> {\n  constructor(entries?: readonly (readonly [string, T])[] | null);\n\n  /**\n   * When iterating over a Collection, we should iterate over its values instead of over its entries\n   */\n  [Symbol.iterator](): IterableIterator<T>;\n\n  /**\n   * Return an Array of all the entry values in the Collection\n   */\n  get contents(): T[];\n\n  /**\n   * Find an entry in the Map using an functional condition.\n   * @see {@link Array#find}\n   *\n   * @param condition - The functional condition to test\n   * @returns The value, if found, otherwise undefined\n   *\n   * @example\n   * ```typescript\n   * let c = new Collection([["a", "A"], ["b", "B"], ["c", "C"]]);\n   * let a = c.find(entry => entry === "A");\n   * ```\n   */\n  find(condition: (e: T) => boolean): T | undefined;\n\n  /**\n   * Filter the Collection, returning an Array of entries which match a functional condition.\n   * @see {@link Array#filter}\n   *\n   * @param condition - The functional condition to test\n   * @returns An Array of matched values\n   *\n   * @example\n   * ```typescript\n   * let c = new Collection([["a", "AA"], ["b", "AB"], ["c", "CC"]]);\n   * let hasA = c.filters(entry => entry.slice(0) === "A");\n   * ```\n   */\n  filter(condition: (e: T) => boolean): T[];\n\n  /**\n   * Apply a function to each element of the collection\n   * @see Array#forEach\n   * @param fn - The function to apply\n   *\n   * @example\n   * ```typescript\n   * let c = new Collection([["a", {active: false}], ["b", {active: false}], ["c", {active: false}]]);\n   * c.forEach(e => e.active = true);\n   * ```\n   */\n  forEach(fn: (e: T) => void): void;\n\n  /**\n   * Get an element from the Collection by its key.\n   * @param key     - The key of the entry to retrieve\n   * @param strict  - Throw an Error if the requested id does not exist, otherwise\n   *                  (default: `false`)\n   * @returns The retrieved entry value, if the key exists, otherwise undefined\n   * @example\n   * ```typescript\n   * let c = new Collection([["a", "A"], ["b", "B"], ["c", "C"]]);\n   * c.get("a"); // "A"\n   * c.get("d"); // null\n   * c.get("d", {strict: true}); // throws Error\n   * ```\n   */\n  get(key: string, { strict }: { strict: true }): T;\n  get(key: string, { strict }?: { strict?: false }): T | undefined;\n\n  /**\n   * Get an entry from the Collection by name.\n   * Use of this method assumes that the objects stored in the collection have a "name" attribute.\n   * @param name    - The name of the entry to retrieve\n   * @param strict  - Throw an Error if the requested id does not exist,\n   *                  otherwise return null.\n   *                  (default: `false`)\n   * @returns The retrieved Entity, if one was found, otherwise undefined\n   */\n  getName(name: string, { strict }: { strict: true }): T;\n  getName(name: string, { strict }?: { strict?: false }): T | undefined;\n\n  /**\n   * Transform each element of the Collection into a new form, returning an Array of transformed values\n   * @param transformer - The transformation function to apply to each entry value\n   * @typeParam M       - The type of the mapped values\n   * @returns An Array of transformed values\n   */\n  map<M>(transformer: (entity: T) => M): M[];\n\n  /**\n   * Reduce the Collection by applying an evaluator function and accumulating entries\n   * @see {@link Array#reduce}\n   * @param evaluator - A function which mutates the accumulator each iteration\n   * @param initial   - An initial value which accumulates with each iteration\n   * @typeParam A     - The type of the accumulator and the return value\n   * @returns The accumulated result\n   *\n   * @example\n   * ```typescript\n   * let c = new Collection([["a", "A"], ["b", "B"], ["c", "C"]]);\n   * let letters = c.reduce((s, l) => {\n   *   return s + l;\n   * }, ""); // "ABC"\n   * ```\n   */\n  reduce<A>(evaluator: (accumulator: A, entity: T) => A, initial: A): A;\n\n  /**\n   * Test whether a condition is met by some entry in the Collection\n   * @see Array#some\n   * @param condition - A test condition to apply to each entry\n   * @returns Was the test condition passed by at least one entry?\n   */\n  some(condition: (e: T) => boolean): boolean;\n\n  /**\n   * Convert the Collection to a primitive array of its contents.\n   * @returns An array of contained values\n   */\n  toJSON(): Array<T extends { toJSON: (...args: any[]) => infer U } ? U : T>;\n}\n\nexport default Collection;\n']},8587:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\utils\\helpers.mjs.d.ts",'/**\n * Benchmark the performance of a function, calling it a requested number of iterations.\n * @param func       - The function to benchmark\n * @param iterations - The number of iterations to test\n */\nexport declare function benchmark(func: () => unknown, iterations: number): void;\n\n/**\n * Wrap a callback in a debounced timeout.\n * Delay execution of the callback function until the function has not been called for delay milliseconds\n * @param callback - A function to execute once the debounced threshold has been passed\n * @param delay    - An amount of time in milliseconds to delay\n * @returns A wrapped function which can be called to debounce execution\n */\nexport declare function debounce<T extends (...args: any[]) => unknown>(\n  callback: T,\n  delay: number\n): (...args: Parameters<T>) => void;\n\n/**\n * Quickly clone a simple piece of data, returning a copy which can be mutated safely.\n * This method DOES support recursive data structures containing inner objects or arrays.\n * This method DOES NOT support advanced object types like Set, Map, or other specialized classes.\n * @param original - Some sort of data\n * @returns The clone of that data\n */\nexport declare function deepClone<T>(original: T): T;\n\n/**\n * Deeply difference an object against some other, returning the update keys and values\n * @param original - An object comparing data against which to compare.\n * @param other    - An object containing potentially different data.\n * @param options  - Additional options which configure the diff operation\n * @returns An object of the data in other which differs from that in original.\n */\nexport declare function diffObject(original: object, other: object, { inner }?: DiffObjectOptions): object;\n\ninterface DiffObjectOptions {\n  /**\n   * Only recognize differences in other for keys which also exist in original\n   * @defaultValue `false`\n   */\n  inner?: boolean;\n}\n\n/**\n * A cheap data duplication trick which is relatively robust.\n * For a subset of cases the deepClone function will offer better performance.\n * @param original - Some sort of data\n * @typeParam T    - Type of the original data.\n *\n * @remarks This function will actually convert any occurrences of `NaN` and `Infinity` to `null`. For ease of use, this\n * is _not_ reflected in the type. Be careful if your types might contain `NaN` or `Infinity`!\n */\nexport declare function duplicate<T>(original: T): Duplicated<T>;\n\n/**\n * Internal Helper for {@link Duplicated}. A union type of all primitive types that do not have a JSON representation.\n *\n * @internal\n */\ntype NonStringifiable = undefined | Function | symbol;\n\n/**\n * Internal helper for {@link InnerDuplicated}. Maps the properties of `T` to their duplicated types.\n *\n * @typeParam T - The object type that should have its properties mapped.\n * @internal\n */\ntype MapToInnerDuplicated<T extends object> = { [k in keyof T]: InnerDuplicated<T[k]> };\n\n/**\n * Internal helper type for {@link Duplicated}. It is the main part of the implementation, which does the recursion.\n *\n * @typeParam T - Type currently being converted.\n * @internal\n */\n// prettier-ignore\ntype InnerDuplicated<T> = T extends { toJSON(): infer U }\n   ? U extends Array<unknown>\n     ? InnerDuplicated<U>\n     : U extends object\n       ? InnerDuplicated<Omit<U, \'toJSON\'>>\n       : InnerDuplicated<U>\n   : T extends NonStringifiable\n     ? undefined\n     : T extends Array<unknown>\n       ? MapToInnerDuplicated<MapTypeToType<T, NonStringifiable, null>>\n       : T extends object\n         ? MapToInnerDuplicated<\n           OmitAssignableFromType<MapTypeToType<T, NonStringifiable, undefined>, undefined> &\n             Partial<OmitOfType<OmitNotAssignableFromType<MapTypeToType<T, NonStringifiable, undefined>, undefined>, undefined>>\n           >\n         : T;\n\n/**\n * The resulting type when using {@link duplicate} on some data of type `T`.\n *\n * @typeParam T - Original type.\n * @internal\n */\nexport type Duplicated<T> = T extends NonStringifiable ? never : InnerDuplicated<T>;\n\n/**\n * Encode a url-like string by replacing any characters which need encoding\n * @param path - A fully-qualified URL or url component (like a relative path)\n * @returns An encoded URL string\n */\nexport declare function encodeURL(path: string): string;\n\n/**\n * Expand a flattened object to be a standard multi-dimensional nested Object by converting all dot-notation keys to\n * inner objects.\n *\n * @param obj - The object to expand\n * @param _d  - Track the recursion depth to prevent overflow\n *              (default: `0`)\n * @returns An expanded object\n */\nexport declare function expandObject(obj: object, _d?: number): any;\n\n/**\n * Filter the contents of some source object using the structure of a template object.\n * Only keys which exist in the template are preserved in the source object.\n *\n * @param source   - An object which contains the data you wish to filter\n * @param template - An object which contains the structure you wish to preserve\n * @param options  - Additional options which customize the filtration\n *                   (default: `{}`)\n *\n * @example\n * ```typescript\n * const source = {foo: {number: 1, name: "Tim", topping: "olives"}, bar: "baz"};\n * const template = {foo: {number: 0, name: "Mit", style: "bold"}, other: 72};\n * filterObject(source, template); // {foo: {number: 1, name: "Tim"}};\n * filterObject(source, template, {templateValues: true}); // {foo: {number: 0, name: "Mit"}};\n * ```\n */\nexport declare function filterObject(source: object, template: object, options?: FilterObjectOptions): any;\n\ninterface FilterObjectOptions {\n  /**\n   * Whether to keep special tokens like deletion keys\n   * @defaultValue `false`\n   */\n  keepSpecial?: boolean;\n\n  /**\n   * Instead of keeping values from the source, instead draw values from the template\n   * @defaultValue `false`\n   */\n  templateValues?: boolean;\n}\n\n/**\n * Flatten a possibly multi-dimensional object to a one-dimensional one by converting all nested keys to dot notation\n * @param obj - The object to flatten\n * @param d   - Track the recursion depth to prevent overflow\n * @returns A flattened object\n */\nexport declare function flattenObject(obj: object, _d?: number): any;\n\n/**\n * Obtain references to the parent classes of a certain class.\n * @param cls - An ES6 Class definition\n * @returns An array of parent Classes which the provided class extends\n */\nexport declare function getParentClasses(cls: ConstructorOf<any>): Array<ConstructorOf<any>>;\n\n/**\n * A helper function which searches through an object to retrieve a value by a string key.\n * The string key supports the notation a.b.c which would return object[a][b][c]\n * @param object - The object to traverse\n * @param key    - An object property with notation a.b.c\n * @returns The value of the found property\n */\nexport declare function getProperty(object: object, key: string): any;\n\n/**\n * Get the URL route for a certain path which includes a path prefix, if one is set\n * @param path   - The Foundry URL path\n * @param prefix - A path prefix to apply\n *                 (default: `null`)\n * @returns The absolute URL path\n */\nexport declare function getRoute(\n  path: string,\n  {\n    prefix\n  }?: {\n    prefix?: string | null;\n  }\n): string;\n\n/**\n * Learn the named type of a token - extending the functionality of typeof to recognize some core Object types\n * @param token - Some passed token\n * @returns The named type of the token\n */\nexport declare function getType(token: unknown): string;\n\n/**\n * A helper function which tests whether an object has a property or nested property given a string key.\n * The string key supports the notation a.b.c which would return true if object[a][b][c] exists\n * @param object - The object to traverse\n * @param key    - An object property with notation a.b.c\n * @returns An indicator for whether the property exists\n */\nexport declare function hasProperty(object: object, key: string): boolean;\n\n/**\n * Invert an object by assigning its values as keys and its keys as values.\n * @param obj - The original object to invert\n * @returns The inverted object with keys and values swapped\n */\nexport declare function invertObject<T extends Record<string | number | symbol, string | number | symbol>>(\n  obj: T\n): { [Key in keyof T as T[Key]]: Key };\n\n/**\n * Return whether or not a target version (v1) is more advanced than some other reference version (v0).\n * Supports either numeric or string version comparison with version parts separated by periods.\n * @param v1 - The target version\n * @param v0 - The reference version\n * @returns Is v1 a more advanced version than v0?\n */\nexport declare function isNewerVersion(v1: number | string, v0: number | string): boolean;\n\n/**\n * A simple function to test whether or not an Object is empty\n * @param obj - The object to test\n * @returns Is the object empty?\n */\nexport declare function isObjectEmpty(obj: object): boolean;\n\n/**\n * Update a source object by replacing its keys and values with those from a target object.\n *\n * @param original - The initial object which should be updated with values from the target\n * @param other    - A new object whose values should replace those in the source\n *                   (default: `{}`)\n * @param options  - Additional options which configure the merge\n *                   (default: `{}`)\n * @param _d       - A privately used parameter to track recursion depth.\n *                   (default: `0`)\n * @returns The original source object including updated, inserted, or overwritten records.\n *\n * @example <caption>Control how new keys and values are added</caption>\n * ```typescript\n * mergeObject({k1: "v1"}, {k2: "v2"}, {insertKeys: false}); // {k1: "v1"}\n * mergeObject({k1: "v1"}, {k2: "v2"}, {insertKeys: true});  // {k1: "v1", k2: "v2"}\n * mergeObject({k1: {i1: "v1"}}, {k1: {i2: "v2"}}, {insertValues: false}); // {k1: {i1: "v1"}}\n * mergeObject({k1: {i1: "v1"}}, {k1: {i2: "v2"}}, {insertValues: true}); // {k1: {i1: "v1", i2: "v2"}}\n * ```\n *\n * @example <caption>Control how existing data is overwritten</caption>\n * ```typescript\n * mergeObject({k1: "v1"}, {k1: "v2"}, {overwrite: true}); // {k1: "v2"}\n * mergeObject({k1: "v1"}, {k1: "v2"}, {overwrite: false}); // {k1: "v1"}\n * ```\n *\n * @example <caption>Control whether merges are performed recursively</caption>\n * ```typescript\n * mergeObject({k1: {i1: "v1"}}, {k1: {i2: "v2"}}, {recursive: false}); // {k1: {i1: "v2"}}\n * mergeObject({k1: {i1: "v1"}}, {k1: {i2: "v2"}}, {recursive: true}); // {k1: {i1: "v1", i2: "v2"}}\n * ```\n *\n * @example <caption>Deleting an existing object key</caption>\n * ```typescript\n * mergeObject({k1: "v1", k2: "v2"}, {"-=k1": null});   // {k2: "v2"}\n * ```\n */\ntype OmitByValue<T, ValueType> = { [Key in keyof T as T[Key] extends ValueType ? never : Key]: T[Key] };\ntype RemoveNever<T> = OmitByValue<T, never>;\ntype PropWithMinus<K> = K extends string ? `-=${K}` : never;\ntype DeleteByObjectKeys<T, U> = RemoveNever<\n  {\n    [K in keyof T]: PropWithMinus<K> extends keyof U ? (U[PropWithMinus<K>] extends null ? never : T[K]) : T[K];\n  }\n>;\ntype RemoveDeletingObjectKeys<T> = RemoveNever<\n  {\n    [K in keyof T]: K extends string ? (Capitalize<K> extends K ? (T[K] extends null ? never : T[K]) : T[K]) : T[K];\n  }\n>;\n\ntype MergeObjectProperty<T, U, M extends MergeObjectOptions> = T extends Array<any>\n  ? U\n  : T extends Record<string, any>\n  ? U extends Record<string, any>\n    ? M extends { recursive: false }\n      ? U\n      : Result<T, U, Omit<M, \'insertKeys\'> & { insertKeys: M[\'insertValues\'] }>\n    : U\n  : U;\ntype UpdateKeys<T, U, M extends MergeObjectOptions> = M extends { overwrite: false }\n  ? T\n  : { [K in keyof T]: K extends keyof U ? MergeObjectProperty<T[K], U[K], M> : T[K] };\ntype InsertKeys<T, U> = T & Omit<U, keyof T>;\ntype UpdateInsert<T, U, M extends MergeObjectOptions> = M extends { insertKeys: false }\n  ? UpdateKeys<T, U, M>\n  : InsertKeys<UpdateKeys<T, U, M>, U>;\ntype Result<T, U, M extends MergeObjectOptions> = UpdateInsert<\n  DeleteByObjectKeys<T, U>,\n  RemoveDeletingObjectKeys<U>,\n  M\n>;\n\ntype WithWidenedArrayTypes<T> = T extends Array<any>\n  ? Array<any>\n  : T extends Record<string, any>\n  ? { [K in keyof T]: WithWidenedArrayTypes<T[K]> }\n  : T;\n\nexport declare function mergeObject<\n  T extends object,\n  U extends DeepPartial<WithWidenedArrayTypes<T>>,\n  M extends MergeObjectOptions & { enforceTypes: true }\n>(original: T, other?: U, options?: M, _d?: number): Result<T, U, M>;\nexport declare function mergeObject<\n  T extends object,\n  U extends DeepPartial<Record<keyof T, never>> & object,\n  M extends MergeObjectOptions & { enforceTypes: true }\n>(original: T, other?: U, options?: M, _d?: number): Result<T, U, M>;\nexport declare function mergeObject<\n  T extends object,\n  U extends object,\n  M extends MergeObjectOptions & { enforceTypes: true }\n>(original: T, other?: U, options?: M, _d?: number): never;\nexport declare function mergeObject<T extends object, U extends object, M extends MergeObjectOptions>(\n  original: T,\n  other?: U,\n  options?: M,\n  _d?: number\n): Result<T, U, M>;\n\ninterface MergeObjectOptions {\n  /**\n   * Control whether to insert new top-level objects into the resulting structure which do not previously exist in the original object.\n   * @defaultValue `true`\n   */\n  insertKeys?: boolean;\n\n  /**\n   * Control whether to insert new nested values into child objects in the resulting structure which did not previously exist in the original object.\n   * @defaultValue `true`\n   */\n  insertValues?: boolean;\n\n  /**\n   * Control whether to replace existing values in the source, or only merge values which do not already exist in the original object.\n   * @defaultValue `true`\n   */\n  overwrite?: boolean;\n\n  /**\n   * Control whether to merge inner-objects recursively (if true), or whether to simply replace inner objects with a provided new value.\n   * @defaultValue `true`\n   */\n  recursive?: boolean;\n\n  /**\n   * Control whether to apply updates to the original object in-place (if true), otherwise the original object is duplicated and the copy is merged.\n   * @defaultValue `true`\n   */\n  inplace?: boolean;\n\n  /**\n   * Control whether strict type checking requires that the value of a key in the other object must match the data type in the original data to be merged.\n   * @defaultValue `false`\n   */\n  enforceTypes?: boolean;\n}\n\n/**\n * A helper function for merging objects when the target key does not exist in the original\n */\ndeclare function _mergeInsert(\n  original: object,\n  k: string,\n  v: unknown,\n  { insertKeys, insertValues }: { insertKeys?: boolean; insertValues?: boolean },\n  _d: number\n): void;\n\n/**\n * A helper function for merging objects when the target key exists in the original\n */\ndeclare function _mergeUpdate(\n  original: object,\n  k: string,\n  v: unknown,\n  {\n    insertKeys,\n    insertValues,\n    enforceTypes,\n    overwrite,\n    recursive\n  }: { insertKeys?: boolean; insertValues?: boolean; enforceTypes?: boolean; overwrite?: boolean; recursive?: boolean },\n  _d: number\n): void;\n\n/**\n * Generate a random string ID of a given requested length.\n * @param length - The length of the random ID to generate\n *                 (default: `16`)\n * @returns Return a string containing random letters and numbers\n */\nexport declare function randomID(length?: number): string;\n\n/**\n * A helper function which searches through an object to assign a value using a string key\n * This string key supports the notation a.b.c which would target object[a][b][c]\n * @param object - The object to update\n * @param key    - The string key\n * @param value  - The value to be assigned\n * @returns Whether the value was changed from its previous value\n */\nexport declare function setProperty(object: object, key: string, value: any): boolean;\n\n/**\n * Express a timestamp as a relative string\n * TODO - figure out a way to localize this\n * @param timeStamp - A timestamp string or Date object to be formatted as a relative time\n * @returns A string expression for the relative time\n */\nexport declare function timeSince(timeStamp: Date | string): string;\n\n/**\n * Converts an RGB color value to HSV. Conversion formula adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 1] and returns h, s, and v in the set [0, 1].\n * @param r - The red color value\n * @param g - The green color value\n * @param b - The blue color value\n * @returns The HSV representation\n */\nexport declare function rgbToHsv(r: number, g: number, b: number): [h: number, s: number, v: number];\n\n/**\n * Converts an HSV color value to RGB. Conversion formula adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and returns r, g, and b in the set [0, 1].\n * @param h - The hue\n * @param s - The saturation\n * @param v - The value\n * @returns The RGB representation\n */\nexport declare function hsvToRgb(h: number, s: number, v: number): [r: number, g: number, b: number];\n\n/**\n * Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.\n * @param rgb - Array of numbers where all values are normalized floats from 0.0 to 1.0.\n * @returns The numeric color as hexadecimal\n */\nexport declare function rgbToHex(rgb: [r: number, g: number, b: number]): number;\n\n/**\n * Convert a hex color code to an RGB array\n * @param hex - A hex color number\n * @returns An array of [r,g,b] colors normalized on the range of [0,1]\n */\nexport declare function hexToRGB(hex: number): [r: number, g: number, b: number];\n\n/**\n * Convert a hex color code to an RGBA color string which can be used for CSS styling\n * @param hex   - A hex color number\n * @param alpha - An optional level of transparency\n *                (default: `1.0`)\n * @returns An rgba style string\n */\nexport declare function hexToRGBAString(hex: number, alpha?: number): `rgba(${number}, ${number}, ${number})`;\n\n/**\n * Convert a string color to a hex integer\n * @param color - The string color\n * @returns The hexadecimal color code\n */\nexport declare function colorStringToHex(color: string): number | null;\n']},16405:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\utils\\module.mjs.d.ts","export * from './helpers.mjs';\nexport { default as Collection } from './collection.mjs';\nexport { default as Semaphore } from './semaphore.mjs';\n"]},11614:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\utils\\primitives.mjs.d.ts","declare interface Math {\n  /**\n   * Bound a number between some minimum and maximum value, inclusively\n   * @param num - The current value\n   * @param min - The minimum allowed value\n   * @param max - The maximum allowed value\n   * @returns The clamped number\n   */\n  clamped(num: number, min: number, max: number): number;\n\n  /**\n   * Transform an angle in degrees to be bounded within the domain [0, 360]\n   * @param degrees - An angle in degrees\n   * @returns The same angle on the range [0, 360]\n   */\n  normalizeDegrees(degrees: number): number;\n\n  /**\n   * Transform an angle in radians to be bounded within the domain [-PI, PI]\n   * @param radians - An angle in degrees\n   * @returns The same angle on the range [-PI, PI]\n   */\n  normalizeRadians(radians: number): number;\n\n  /**\n   * Round a floating point number to a certain number of decimal places\n   * @param number - A floating point number\n   * @param places - An integer number of decimal places\n   */\n  roundDecimals(number: number, places: number): number;\n\n  /**\n   * Transform an angle in radians to a number in degrees\n   * @param angle - An angle in radians\n   * @returns An angle in degrees\n   */\n  toDegrees(angle: number): number;\n\n  /**\n   * Transform an angle in degrees to an angle in radians\n   * @param angle - An angle in degrees\n   * @returns An angle in radians\n   */\n  toRadians(angle: number): number;\n}\n\ndeclare interface Set<T> {\n  /**\n   * Test whether this set is equal to some other set.\n   * Sets are equal if they share the same members, independent of order\n   * @param other - Some other set to compare against\n   * @returns Are the sets equal?\n   */\n  equals(other: Set<T>): boolean;\n\n  /**\n   * Test whether this set is a subset of some other set.\n   * A set is a subset if all its members are also present in the other set.\n   * @param other - Some other set to compare against\n   * @returns Are the sets equal?\n   */\n  isSubset(other: Set<T>): boolean;\n}\n\ndeclare interface String {\n  capitalize<S extends string>(this: S): Capitalize<S>;\n\n  titleCase<S extends string>(this: S): Titlecase<S>;\n\n  /**\n   * Strip any <script> tags which were included within a provided string\n   */\n  stripScripts(): string;\n\n  /**\n   * Transform any string into a url-viable slug string\n   * @param replacement - The replacement character to separate terms\n   *                      (default: `'-'`)\n   * @param strict      - Replace all non-alphanumeric characters, or allow them?\n   *                      (default: `false`)\n   * @returns The cleaned slug string\n   */\n  slugify({ replacement, strict }?: { replacement?: string; strict?: boolean }): string;\n}\n\ndeclare interface Number {\n  ordinalString(): string;\n\n  paddedString(digits: number): string;\n\n  signedString(): string;\n\n  /**\n   * Round a number to the nearest number which is a multiple of a given interval\n   * @param interval - The interval to round the number to the nearest multiple of\n   *                   (default: `1`)\n   * @returns The rounded number\n   *\n   * @example\n   * ```typescript\n   * let n = 17.18;\n   * n.toNearest(5); // 15\n   * n.toNearest(10); // 20\n   * n.toNearest(0.25); // 17.25\n   * ```\n   */\n  toNearest(interval?: number): number;\n\n  between(a: number, b: number, inclusive?: boolean): boolean;\n}\n\ndeclare interface NumberConstructor {\n  /**\n   * A faster numeric between check which avoids type coercion to the Number object\n   * Since this avoids coercion, if non-numbers are passed in unpredictable results will occur. Use with caution.\n   * @param inclusive - (default: `true`)\n   */\n  between(num: number, a: number, b: number, inclusive?: boolean): boolean;\n\n  /**\n   * Test whether a value is numeric\n   * This is the highest performing algorithm currently available\n   * https://jsperf.com/isnan-vs-typeof/5\n   * @param n - A value to test\n   * @returns Is it a number?\n   */\n  isNumeric(n: unknown): n is number;\n}\n\ndeclare interface ArrayConstructor {\n  fromRange(n: number): number[];\n}\n\ndeclare interface Array<T> {\n  deepFlatten(): Array<Array.Flattened<T>>;\n\n  /**\n   * Test equality of the values of this array against the values of some other Array\n   */\n  equals(other: T[]): boolean;\n\n  /**\n   * Partition an original array into two children array based on a logical test\n   * Elements which test as false go into the first result while elements testing as true appear in the second\n   * @param rule - The rule to partition by\n   * @returns An Array of length two whose elements are the partitioned pieces of the original\n   */\n  partition(rule: (val: T) => boolean): [T[], T[]];\n\n  /**\n   * Join an Array using a string separator, first filtering out any parts which return a false-y value\n   * @param sep - The separator string\n   * @returns The joined string, filtered of any false values\n   */\n  filterJoin(sep: string): string;\n\n  /**\n   * Find an element within the Array and remove it from the array\n   * @param find - A function to use as input to findIndex\n   * @param replace - A replacement for the spliced element\n   * @returns The replacement element, the removed element, or null if no element was found.\n   */\n  findSplice(find: (value: T, index: number, obj: T[]) => boolean, replace?: T): T | null;\n}\n\ndeclare namespace Array {\n  type Flattened<T> = T extends Array<infer U> ? Flattened<U> : T;\n}\n\ndeclare interface Date {\n  /**\n   * Test whether a Date instance is valid.\n   * A valid date returns a number for its timestamp, and NaN otherwise.\n   * NaN is never equal to itself.\n   */\n  isValid(): boolean;\n\n  /**\n   * Return a standard YYYY-MM-DD string for the Date instance.\n   * @returns The date in YYYY-MM-DD format\n   */\n  toDateInputString(): string;\n\n  /**\n   * Return a standard H:M:S.Z string for the Date instance.\n   * @returns The time in H:M:S format\n   */\n  toTimeInputString(): string;\n}\n\ndeclare interface RegExpConstructor {\n  escape(string: string): string;\n}\n"]},17067:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\utils\\semaphore.mjs.d.ts","/**\n * A simple Semaphore implementation which provides a limited queue for ensuring proper concurrency.\n *\n * @example\n * ```typescript\n * // Some async function that takes time to execute\n * function fn(x: string): Promise<string> {\n *   return new Promise(resolve => {\n *     setTimeout(() => {\n *       console.log(x);\n *       resolve(x);\n *     }, 1000));\n *   }\n * };\n *\n * // Create a Semaphore and add many concurrent tasks\n * const semaphore = new Semaphore(1);\n * for ( let i of Array.fromRange(100) ) {\n *   semaphore.add(fn, i);\n * }\n * ```\n */\ndeclare class Semaphore {\n  /**\n   * @param max - The maximum number of tasks which are allowed concurrently.\n   *              (default: 1)\n   */\n  constructor(max?: number);\n\n  /**\n   * The maximum number of tasks which can be simultaneously attempted.\n   */\n  max: number;\n\n  /**\n   * A queue of pending function signatures\n   * @defaultValue `[]`\n   * @remarks The first element of an element of `_queue` is always a function and the rest of the elements are\n   * parameters to be passed to that function.\n   */\n  _queue: Array<Array<unknown>>;\n\n  /**\n   * The number of tasks which are currently underway\n   * @defaultValue `0`\n   */\n  protected _active: number;\n\n  /**\n   * The number of pending tasks remaining in the queue\n   */\n  get remaining(): number;\n\n  /**\n   * The number of actively executing tasks\n   */\n  get active(): number;\n\n  /**\n   * Add a new tasks to the managed queue\n   * @param fn   - A callable function\n   * @param args - Function arguments\n   */\n  add<F extends (...args: any[]) => any>(fn: F, ...args: Parameters<F>): void;\n\n  /**\n   * Abandon any tasks which have not yet concluded\n   */\n  clear(): void;\n\n  /**\n   * Attempt to perform a task from the queue.\n   * If all workers are busy, do nothing.\n   * If successful, try again.\n   * @returns Was a function called?\n   */\n  protected _try(): Promise<boolean>;\n}\n\nexport default Semaphore;\n"]},72045:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\application.d.ts","/**\n * @defaultValue `0`\n */\ndeclare let _appId: number;\n\n/**\n * @defaultValue `100`\n */\ndeclare let _maxZ: number;\n\ndeclare const MIN_WINDOW_WIDTH: 200;\ndeclare const MIN_WINDOW_HEIGHT: 50;\n\n/**\n * The standard application window that is rendered for a large variety of UI elements in Foundry VTT.\n * @typeParam Options - the type of the options object\n */\ndeclare abstract class Application<Options extends Application.Options = Application.Options> {\n  /**\n   * @param options - Configuration options which control how the application is rendered.\n   *                  Application subclasses may add additional supported options, but the\n   *                  following configurations are supported for all Applications. The values\n   *                  passed to the constructor are combined with the defaultOptions defined\n   *                  at the class level.\n   */\n  constructor(options?: Partial<Options>);\n\n  /**\n   * The options provided to this application upon initialization\n   */\n  options: Options;\n\n  /**\n   * The application ID is a unique incrementing integer which is used to identify every application window\n   * drawn by the VTT\n   */\n  appId: number;\n\n  /**\n   * An internal reference to the HTML element this application renders\n   * @defaultValue `null`\n   */\n  protected _element: JQuery | null;\n\n  /**\n   * Track the current position and dimensions of the Application UI\n   */\n  position: Application.Position;\n\n  /**\n   * DragDrop workflow handlers which are active for this Application\n   */\n  protected _dragDrop: DragDrop[];\n\n  /**\n   * Tab navigation handlers which are active for this Application\n   */\n  protected _tabs: Tabs[];\n\n  /**\n   * SearchFilter handlers which are active for this Application\n   */\n  protected _searchFilters: SearchFilter[];\n\n  /**\n   * Track whether the Application is currently minimized\n   * @defaultValue `false`\n   */\n  protected _minimized: boolean;\n\n  /**\n   * Track the render state of the Application\n   * @defaultValue {@link Application.RENDER_STATES.NONE}\n   * @see {@link Application.RENDER_STATES}\n   */\n  protected _state: Application.RenderState;\n\n  /**\n   * The prior render state of this Application.\n   * This allows for rendering logic to understand if the application is being rendered for the first time.\n   * @defaultValue {@link Application.RENDER_STATES.NONE}\n   * @see {@link Application.RENDER_STATES}\n   */\n  protected _priorState: Application.RenderState;\n\n  /**\n   * Track the most recent scroll positions for any vertically scrolling containers\n   * @defaultValue `null`\n   */\n  protected _scrollPositions: Partial<Record<string, number>> | null;\n\n  /**\n   * The sequence of rendering states that track the Application life-cycle.\n   * @see {@link Application.RenderState}\n   */\n  static RENDER_STATES: Readonly<{\n    CLOSING: -2;\n    CLOSED: -1;\n    NONE: 0;\n    RENDERING: 1;\n    RENDERED: 2;\n    ERROR: 3;\n  }>;\n\n  /**\n   * Create drag-and-drop workflow handlers for this Application\n   * @returns An array of DragDrop handlers\n   */\n  protected _createDragDropHandlers(): DragDrop[];\n\n  /**\n   * Create tabbed navigation handlers for this Application\n   * @returns An array of Tabs handlers\n   */\n  protected _createTabHandlers(): Tabs[];\n\n  /**\n   * Create search filter handlers for this Application\n   * @returns An array of SearchFilter handlers\n   */\n  protected _createSearchFilters(): SearchFilter[];\n\n  /**\n   * Assign the default options configuration which is used by this Application class. The options and values defined\n   * in this object are merged with any provided option values which are passed to the constructor upon initialization.\n   * Application subclasses may include additional options which are specific to their usage.\n   */\n  static get defaultOptions(): Application.Options;\n\n  /**\n   * Return the CSS application ID which uniquely references this UI element\n   */\n  get id(): string;\n\n  /**\n   * Return the active application element, if it currently exists in the DOM\n   */\n  get element(): JQuery;\n\n  /**\n   * The path to the HTML template file which should be used to render the inner content of the app\n   */\n  get template(): string;\n\n  /**\n   * Control the rendering style of the application. If popOut is true, the application is rendered in its own\n   * wrapper window, otherwise only the inner app content is rendered\n   */\n  get popOut(): boolean;\n\n  /**\n   * Return a flag for whether the Application instance is currently rendered\n   */\n  get rendered(): boolean;\n\n  /**\n   * An Application window should define its own title definition logic which may be dynamic depending on its data\n   */\n  get title(): string;\n\n  /**\n   * An application should define the data object used to render its template.\n   * This function may either return an Object directly, or a Promise which resolves to an Object\n   * If undefined, the default implementation will return an empty object allowing only for rendering of static HTML\n   * @param options - (unused, default: `{}`)\n   */\n  getData(options?: Application.RenderOptions): object | Promise<object>;\n\n  /**\n   * Render the Application by evaluating it's HTML template against the object of data provided by the getData method\n   * If the Application is rendered as a pop-out window, wrap the contained HTML in an outer frame with window controls\n   *\n   * @param force   - Add the rendered application to the DOM if it is not already present. If false, the\n   *                  Application will only be re-rendered if it is already present.\n   *                  (default: `false`)\n   * @param options - Additional rendering options which are applied to customize the way that the Application\n   *                  is rendered in the DOM.\n   *                  (default: `{}`)\n   * @returns The rendered Application instance\n   * @remarks Some subclasses return other results.\n   */\n  render(force?: boolean, options?: Application.RenderOptions): unknown;\n\n  /**\n   * An asynchronous inner function which handles the rendering of the Application\n   * @param force   - Render and display the application even if it is not currently displayed.\n   *                  (default: `false`)\n   * @param options - New Application options which update the current values of the Application#options object\n   *                  (default: `{}`)\n   * @returns A Promise that resolves to the Application once rendering is complete\n   */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * Return the inheritance chain for this Application class up to (and including) it's base Application class.\n   */\n  protected static _getInheritanceChain(): typeof Application[];\n\n  /**\n   * Persist the scroll positions of containers within the app before re-rendering the content\n   * @param html - The HTML object being traversed\n   */\n  protected _saveScrollPositions(html: JQuery): void;\n\n  /**\n   * Restore the scroll positions of containers within the app after re-rendering the content\n   * @param html - The HTML object being traversed\n   */\n  protected _restoreScrollPositions(html: JQuery): void;\n\n  /**\n   * Render the outer application wrapper\n   * @returns A promise resolving to the constructed jQuery object\n   */\n  protected _renderOuter(): Promise<HTMLElement> | Promise<JQuery<JQuery.Node>>;\n\n  /**\n   * Render the inner application content\n   * @param data - The data used to render the inner template\n   * @returns A promise resolving to the constructed jQuery object\n   * @remarks Some subclasses do not return a promise but the jQuery object directly.\n   */\n  protected _renderInner(data: object): Promise<JQuery> | JQuery;\n\n  /**\n   * Customize how inner HTML is replaced when the application is refreshed\n   * @param element - The original HTML processed as a jQuery object\n   * @param html    - New updated HTML as a jQuery object\n   */\n  protected _replaceHTML(element: JQuery, html: JQuery): void;\n\n  /**\n   * Customize how a new HTML Application is added and first appears in the DOC\n   * @param html - The HTML element which is ready to be added to the DOM\n   */\n  protected _injectHTML(html: JQuery): void;\n\n  /**\n   * Specify the set of config buttons which should appear in the Application header.\n   * Buttons should be returned as an Array of objects.\n   * The header buttons which are added to the application can be modified by the getApplicationHeaderButtons hook.\n   */\n  protected _getHeaderButtons(): Application.HeaderButton[];\n\n  /**\n   * Activate required listeners which must be enabled on every Application.\n   * These are internal interactions which should not be overridden by downstream subclasses.\n   */\n  protected _activateCoreListeners(html: JQuery): void;\n\n  /**\n   * After rendering, activate event listeners which provide interactivity for the Application.\n   * This is where user-defined Application subclasses should attach their event-handling logic.\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle changes to the active tab in a configured Tabs controller\n   * @param event  - A left click event\n   *                 (unused)\n   * @param tabs   - The Tabs controller\n   *                 (unused)\n   * @param active - The new active tab name\n   *                 (unused)\n   */\n  protected _onChangeTab(event: MouseEvent | null, tabs: Tabs, active: string): void;\n\n  /**\n   * Handle changes to search filtering controllers which are bound to the Application\n   * @param event - The key-up event from keyboard input\n   *                (unused)\n   * @param query - The regular expression to test against\n   *                (unused)\n   * @param rgx   - The regular expression to test against\n   *                (unused)\n   * @param html  - The HTML element which should be filtered\n   *                (unused)\n   */\n  protected _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n  /**\n   * Define whether a user is able to begin a dragstart workflow for a given drag selector\n   * @param selector - The candidate HTML selector for dragging\n   *                   (unused)\n   * @returns Can the current user drag this selector?\n   */\n  protected _canDragStart(selector: string): boolean;\n\n  /**\n   * Define whether a user is able to conclude a drag-and-drop workflow for a given drop selector\n   * @param selector - The candidate HTML selector for the drop target\n   *                   (unused)\n   * @returns Can the current user drop on this selector?\n   */\n  protected _canDragDrop(selector: string): boolean;\n\n  /**\n   * Callback actions which occur at the beginning of a drag start workflow.\n   * @param event - The originating DragEvent\n   *                (unused)\n   */\n  protected _onDragStart(event: DragEvent): void;\n\n  /**\n   * Callback actions which occur when a dragged element is over a drop target.\n   * @param event - originating DragEvent\n   *                (unused)\n   */\n  protected _onDragOver(event: DragEvent): void;\n\n  /**\n   * Callback actions which occur when a dragged element is dropped on a target.\n   * @param event - The originating DragEvent\n   *                (unused)\n   * @remarks\n   * The implementation in {@link Application} actually returns `void` but it is\n   * typed as `unknown` to allow deriving methods to return whatever they want.\n   * The returned value is not meant to be used.\n   */\n  protected _onDrop(event: DragEvent): unknown;\n\n  /**\n   * Bring the application to the top of the rendering stack\n   */\n  bringToTop(): void;\n\n  /**\n   * Close the application and un-register references to it within UI mappings\n   * This function returns a Promise which resolves once the window closing animation concludes\n   * @param options - (default: `{}`)\n   * @returns A Promise which resolves once the application is closed\n   */\n  close(options?: Application.CloseOptions): Promise<void>;\n\n  /**\n   * Minimize the pop-out window, collapsing it to a small tab\n   * Take no action for applications which are not of the pop-out variety or apps which are already minimized\n   * @returns A Promise which resolves once the minimization action has completed\n   */\n  minimize(): Promise<void>;\n\n  /**\n   * Maximize the pop-out window, expanding it to its original size\n   * Take no action for applications which are not of the pop-out variety or are already maximized\n   * @returns A Promise which resolves once the maximization action has completed\n   */\n  maximize(): Promise<void>;\n\n  /**\n   * Set the application position and store it's new location.\n   * @param left   - The left offset position in pixels\n   * @param top    - The top offset position in pixels\n   * @param width  - The application width in pixels\n   * @param height - The application height in pixels\n   * @param scale  - The application scale as a numeric factor where 1.0 is default\n   * @returns The updated position object for the application containing the new values\n   */\n  setPosition({\n    left,\n    top,\n    width,\n    height,\n    scale\n  }?: Partial<Application.Position>): (Application.Position & { height: number }) | undefined;\n\n  /**\n   * Handle application minimization behavior - collapsing content and reducing the size of the header\n   */\n  protected _onToggleMinimize(ev: Event): void;\n\n  /**\n   * Additional actions to take when the application window is resized\n   * @param event - (unused)\n   */\n  protected _onResize(event: Event): void;\n}\n\ndeclare namespace Application {\n  interface CloseOptions {\n    force?: boolean;\n  }\n\n  interface HeaderButton {\n    label: string;\n    class: string;\n    icon: string;\n    onclick: ((ev: JQuery.ClickEvent) => void) | null;\n  }\n\n  interface Options {\n    /**\n     * A named \"base application\" which generates an additional hook\n     * @defaultValue `null`\n     */\n    baseApplication: string | null;\n\n    /**\n     * The default pixel width for the rendered HTML\n     * @defaultValue `null`\n     */\n    width: number | null;\n\n    /**\n     * The default pixel height for the rendered HTML\n     * @defaultValue `null`\n     */\n    height: number | 'auto' | null;\n\n    /**\n     * The default offset-top position for the rendered HTML\n     * @defaultValue `null`\n     */\n    top: number | null;\n\n    /**\n     * The default offset-left position for the rendered HTML\n     * @defaultValue `null`\n     */\n    left: number | null;\n\n    /**\n     * A transformation scale for the rendered HTML\n     */\n    scale?: number | null;\n\n    /**\n     * Whether to display the application as a pop-out container\n     * @defaultValue `true`\n     */\n    popOut: boolean;\n\n    /**\n     * Whether the rendered application can be minimized (popOut only)\n     * @defaultValue `true`\n     */\n    minimizable: boolean;\n\n    /**\n     * Whether the rendered application can be drag-resized (popOut only)\n     * @defaultValue `false`\n     */\n    resizable: boolean;\n\n    /**\n     * The default CSS id to assign to the rendered HTML\n     * @defaultValue `''`\n     */\n    id: string;\n\n    /**\n     * An array of CSS string classes to apply to the rendered HTML\n     * @defaultValue `[]`\n     */\n    classes: string[];\n\n    /**\n     * A default window title string (popOut only)\n     * @defaultValue `''`\n     */\n    title: string;\n\n    /**\n     * The default HTML template path to render for this Application\n     * @defaultValue `null`\n     */\n    template: string | null;\n\n    /**\n     * A list of unique CSS selectors which target containers that should\n     * have their vertical scroll positions preserved during a re-render.\n     * @defaultValue `[]`\n     */\n    scrollY: string[];\n\n    /**\n     * An array of tabbed container configurations which should be enabled\n     * for the application.\n     * @defaultValue `[]`\n     */\n    tabs: Omit<Tabs.Options, 'callback'>[];\n\n    /**\n     * @defaultValue `[]`\n     */\n    dragDrop: Omit<DragDrop.Options, 'permissions' | 'callbacks'>[];\n\n    /**\n     * @defaultValue `[]`\n     */\n    filters: Omit<SearchFilter.Options, 'callback'>[];\n  }\n\n  interface Position {\n    width: number | null;\n    height: number | null | 'auto';\n    left: number | null;\n    top: number | null;\n    scale: number | null | undefined;\n  }\n\n  interface RenderOptions {\n    /**\n     * The left positioning attribute\n     */\n    left?: number;\n\n    /**\n     * The top positioning attribute\n     */\n    top?: number;\n\n    /**\n     * The rendered width\n     */\n    width?: number;\n\n    /**\n     * The rendered height\n     */\n    height?: number;\n\n    /**\n     * The rendered transformation scale\n     */\n    scale?: number;\n\n    /**\n     * Apply focus to the application, maximizing it and bringing it to the top\n     * of the vertical stack.\n     * @defaultValue `false`\n     */\n    focus?: boolean;\n\n    /**\n     * A context-providing string which suggests what event triggered the render\n     */\n    renderContext?: string;\n\n    /**\n     * The data change which motivated the render request\n     */\n    renderData?: object;\n  }\n\n  /**\n   * @see {@link Application.RENDER_STATES}\n   */\n  type RenderState = ValueOf<typeof Application['RENDER_STATES']>;\n}\n"]},42613:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\basePlaceableHUD.d.ts","/**\n * An abstract base class for displaying a heads-up-display interface bound to a Placeable Object on the canvas\n * @typeParam O - the type of the PlaceableObject\n * @typeParam P - the type of the options object\n */\ndeclare abstract class BasePlaceableHUD<\n  O extends PlaceableObject<any>,\n  P extends Application.Options = Application.Options\n> extends Application<P> {\n  /**\n   * Reference a PlaceableObject this HUD is currently bound to\n   * @defaultValue `null`\n   */\n  object: O | null;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.defaultOptions, {\n   *   classes: [\"placeable-hud\"],\n   *   popOut: false\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /**\n   * Convenience access for the canvas layer which this HUD modifies\n   */\n  get layer(): O['layer'];\n\n  /**\n   * Bind the HUD to a new PlaceableObject and display it\n   * @param object - A PlaceableObject instance to which the HUD should be bound\n   */\n  bind(object: O): void;\n\n  /**\n   * Clear the HUD by fading out it's active HTML and recording the new display state\n   */\n  clear(): void;\n\n  /** @override */\n  _render(...args: Parameters<Application['_render']>): Promise<void>;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(this.object.data, {\n   *   id: this.id,\n   *   classes: this.options.classes.join(' '),\n   *   appId: this.appId,\n   *   isGM: game.user.isGM,\n   *   icons: CONFIG.controlIcons\n   * });\n   * ```\n   */\n  getData(options?: Application.RenderOptions): foundry.utils.Duplicated<O['data']> & {\n    id: Application['id'];\n    classes: string;\n    appId: Application['appId'];\n    isGM: boolean;\n    icons: typeof CONFIG['controlIcons'];\n  };\n\n  /**\n   * @override\n   * @remarks Returns `void`\n   */\n  setPosition({ left, top, width, height, scale }?: Partial<Application.Position>): any;\n\n  /** @override */\n  activateListeners(html: JQuery<HTMLElement>): void;\n\n  /**\n   * Toggle the visible state of all controlled objects in the Layer\n   * @param event - The originating click event\n   */\n  protected _onToggleVisibility(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Toggle locked state of all controlled objects in the Layer\n   * @param event - The originating click event\n   */\n  protected _onToggleLocked(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle sorting the z-order of the object\n   */\n  protected _onSort(up: boolean, event: JQuery.ClickEvent): Promise<void>;\n}\n"]},79280:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\basePlaceableHUDs\\drawingHUD.d.ts",'/**\n * An implementation of the PlaceableHUD base class which renders a heads-up-display interface for Drawing objects.\n */\ndeclare class DrawingHUD extends BasePlaceableHUD<Drawing> {\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.defaultOptions, {\n   *   id: "drawing-hud",\n   *   template: "templates/hud/drawing-hud.html"\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application[\'defaultOptions\'];\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.getData(), {\n   *   lockedClass: data.locked ? "active" : "",\n   *   visibilityClass: data.hidden ? "active" : "",\n   * })\n   * ```\n   */\n  getData(): ReturnType<BasePlaceableHUD<Drawing>[\'getData\']> & {\n    lockedClass: string;\n    visibilityClass: string;\n  };\n\n  /** @override */\n  setPosition(): void;\n}\n']},98758:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\basePlaceableHUDs\\index.d.ts","import './drawingHUD';\nimport './tileHUD';\nimport './tokenHUD';\n"]},68934:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\basePlaceableHUDs\\tileHUD.d.ts","/**\n * An implementation of the PlaceableHUD base class which renders a heads-up-display interface for Tile objects.\n */\ndeclare class TileHUD extends BasePlaceableHUD<Tile> {\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.defaultOptions, {\n   *   id: \"tile-hud\",\n   *   template: \"templates/hud/drawing-hud.html\"\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /** @override */\n  getData(): ReturnType<BasePlaceableHUD<Tile>['getData']> & {\n    lockedClass: string;\n    visibilityClass: string;\n  };\n\n  /** @override */\n  setPosition(): void;\n}\n"]},24916:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\basePlaceableHUDs\\tokenHUD.d.ts","/**\n * An implementation of the PlaceableHUD base class which renders a heads-up-display interface for Token objects.\n * This interface provides controls for visibility, attribute bars, elevation, status effects, and more.\n */\ndeclare class TokenHUD extends BasePlaceableHUD<Token> {\n  /**\n   * Track whether the status effects control palette is currently expanded or hidden\n   * @defaultValue `false`\n   */\n  protected _statusEffects: boolean;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.defaultOptions, {\n   *   id: \"token-hud\",\n   *   template: \"templates/hud/token-hud.html\"\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /** @override */\n  bind(object: Token): void;\n\n  /**\n   * Refresh the currently active state of all status effect icons in the Token HUD selector.\n   */\n  refreshStatusIcons(): void;\n\n  /** @override */\n  setPosition(_position?: Partial<Application.Position>): void;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.getData(), {\n   *   canConfigure: game.user.can(\"TOKEN_CONFIGURE\"),\n   *   canToggleCombat: ui.combat !== null,\n   *   displayBar1: bar1 && (bar1.type !== \"none\"),\n   *   bar1Data: bar1,\n   *   displayBar2: bar2 && (bar2.type !== \"none\"),\n   *   bar2Data: bar2,\n   *   visibilityClass: data.hidden ? \"active\" : \"\",\n   *   effectsClass: this._statusEffects ? \"active\" : \"\",\n   *   combatClass: this.object.inCombat ? \"active\" : \"\",\n   *   targetClass: this.object.targeted.has(game.user) ? \"active\" : \"\",\n   *   statusEffects: this._getStatusEffectChoices(data)\n   * });\n   * ```\n   */\n  getData(options?: Application.RenderOptions): ReturnType<BasePlaceableHUD<Token>['getData']> & {\n    canConfigure: boolean;\n    canToggleCombat: boolean;\n    displayBar1: boolean;\n    bar1Data: ReturnType<Token['getBarAttribute']>;\n    displayBar2: boolean;\n    bar2Data: ReturnType<Token['getBarAttribute']>;\n    visibilityClass: 'active' | '';\n    effectsClass: 'active' | '';\n    combatClass: 'active' | '';\n    targetClass: 'active' | '';\n    statusEffects: ReturnType<TokenHUD['_getStatusEffectChoices']>;\n  };\n\n  /**\n   * Get an array of icon paths which represent valid status effect choices\n   */\n  protected _getStatusEffectChoices(): Partial<\n    Record<\n      string,\n      {\n        id: string;\n        isActive: boolean;\n        isOverlay: boolean;\n        src: string;\n        title: string;\n      }\n    >\n  >;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle initial click to focus an attribute update field\n   */\n  protected _onAttributeClick(event: JQuery.ClickEvent): void;\n\n  /**\n   * Force field handling on an Enter keypress even if the value of the field did not change.\n   * This is important to suppose use cases with negative number values.\n   * @param event - The originating keydown event\n   */\n  protected _onAttributeKeydown(event: JQuery.KeyDownEvent): void;\n\n  /**\n   * Handle attribute bar update\n   */\n  protected _onAttributeUpdate(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Toggle Token combat state\n   */\n  protected _onToggleCombat(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle Token configuration button click\n   */\n  protected _onTokenConfig(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle left-click events to toggle the displayed state of the status effect selection palette\n   */\n  protected _onClickStatusEffects(event: JQuery.ClickEvent): void;\n\n  /**\n   * Assign css selectors for the active state of the status effects selection palette\n   */\n  protected _toggleStatusEffects(active: boolean): void;\n\n  /**\n   * Handle toggling a token status effect icon\n   * @param overlay - (default: `false`)\n   */\n  protected _onToggleEffect(\n    event: JQuery.ClickEvent | JQuery.ContextMenuEvent,\n    { overlay }?: { overlay?: boolean }\n  ): Promise<boolean>;\n\n  /**\n   * Handle toggling the target state for this Token\n   */\n  protected _onToggleTarget(event: JQuery.ClickEvent): void;\n}\n"]},79290:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\cameraViews.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The Camera UI View that displays all the camera feeds as individual video elements.\n * @typeParam P - the type of the options object\n */\ndeclare class CameraViews<P extends Application.Options = Application.Options> extends Application<P> {\n  /**\n   * @param webrtc - The WebRTC Implementation to display\n   *                 (unused)\n   */\n  constructor(webrtc?: any, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"camera-views\",\n   *   template: \"templates/hud/camera-views.html\",\n   *   popOut: false\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /**\n   * A reference to the master AV orchestrator instance\n   */\n  get webrtc(): Game['webrtc'];\n\n  /**\n   * Obtain a reference to the div.camera-view which is used to portray a given Foundry User.\n   * @param userId - The ID of the User entity\n   */\n  getUserCameraView(userId: string): HTMLElement | null;\n\n  /**\n   * Obtain a reference to the video.user-camera which displays the video channel for a requested Foundry User.\n   * If the user is not broadcasting video this will return null.\n   * @param userId - The ID of the User entity\n   */\n  getUserVideoElement(userId: string): HTMLVideoElement | null;\n\n  /**\n   * Sets whether a user is currently speaking or not\n   *\n   * @param userId   - The ID of the user\n   * @param speaking - Whether the user is speaking\n   */\n  setUserIsSpeaking(userId: string, speaking: boolean): void;\n\n  /**\n   * Extend the render logic to first check whether a render is necessary based on the context\n   * If a specific context was provided, make sure an update to the navigation is necessary before rendering\n   */\n  render(force?: boolean, context?: Application.RenderOptions): Application['render'];\n\n  /** @override */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): CameraViews.Data;\n\n  maxZ: number;\n\n  /**\n   * Prepare rendering data for a single user\n   */\n  protected _getDataForUser(userId: string, settings: AVSettings.UserSettings): CameraViews.Data.User | null;\n\n  /**\n   * A custom sorting function that orders/arranges the user display frames\n   */\n  protected static _sortUsers(a: CameraViews.Data.User, b: CameraViews.Data.User): number;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * On hover in a camera container, show/hide the controls.\n   * @param event - The original mouseover or mouseout hover event\n   */\n  protected _onCameraViewHover(event: JQuery.MouseEnterEvent | JQuery.MouseLeaveEvent): void;\n\n  /**\n   * On clicking on a toggle, disable/enable the audio or video stream.\n   * @param event - The originating click event\n   */\n  protected _onClickControl(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Change volume control for a stream\n   * @param event - The originating change event from interaction with the range input\n   */\n  protected _onVolumeChange(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Dynamically refresh the state of a single camera view\n   * @param view - The view container div\n   */\n  protected _refreshView(view: HTMLElement): void;\n\n  /**\n   * Render changes needed to the PlayerList ui.\n   * Show/Hide players depending on option.\n   */\n  protected _setPlayerListVisibility(): void;\n\n  /**\n   * Get the icon class that should be used for various action buttons with different toggled states.\n   * The returned icon should represent the visual status of the NEXT state (not the CURRENT state).\n   *\n   * @param action - The named av-control button action\n   * @param state  - The CURRENT action state.\n   * @returns The icon that represents the NEXT action state.\n   */\n  protected _getToggleIcon(action: string, state?: boolean): null;\n\n  /**\n   * Get the text title that should be used for various action buttons with different toggled states.\n   * The returned title should represent the tooltip of the NEXT state (not the CURRENT state).\n   *\n   * @param action - The named av-control button action\n   * @param state - The CURRENT action state.\n   * @returns The icon that represents the NEXT action state.\n   */\n  protected _getToggleTooltip(action: string, state: boolean): string;\n\n  /**\n   * Show or hide UI control elements\n   * This replaces the use of jquery.show/hide as it simply adds a class which has display:none\n   * which allows us to have elements with display:flex which can be hidden then shown without\n   * breaking their display style.\n   * This will show/hide the toggle buttons, volume controls and overlay sidebars\n   * @param container - The container for which to show/hide control elements\n   * @param show      - Whether to show or hide the controls\n   * @param selector  - Override selector to specify which controls to show or hide\n   *                    (default: `'.control-bar'`)\n   */\n  protected _toggleControlVisibility(container: HTMLElement, show: boolean, selector?: string): void;\n}\n\ndeclare namespace CameraViews {\n  interface Data {\n    self: Game['user'];\n    users: CameraViews.Data.User[];\n    dockClass: string;\n    muteAll: boolean;\n  }\n\n  namespace Data {\n    interface User {\n      user: globalThis.User;\n      id: globalThis.User['id'];\n      local: globalThis.User['isSelf'];\n      name: globalThis.User['name'];\n      color: globalThis.User['data']['color'];\n      colorAlpha: ReturnType<typeof foundry.utils.hexToRGBAString>;\n      charname: string;\n      avatar: globalThis.User['avatar'];\n      settings: AVSettings.UserSettings;\n      volume: ReturnType<typeof AudioHelper['volumeToInput']>;\n      cameraViewClass: ReturnType<Array<string>['filterJoin']>;\n    }\n  }\n}\n"]},39205:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\chatPopout.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * @typeParam P - the type of the options object\n */\ndeclare class ChatPopout<P extends Application.Options = Application.Options> extends Application<P> {\n  constructor(message: ChatPopout['message'], options?: Partial<P>);\n\n  /**\n   * The displayed Chat Message entity\n   */\n  message: ChatMessage;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   width: 300,\n   *   height: \"auto\",\n   *   classes: [\"chat-popout\"]\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /** @override */\n  get id(): string;\n\n  /** @override */\n  get title(): string;\n\n  /**\n   * @param data    - (unused)\n   * @param options - (unused)\n   * @override\n   */\n  protected _renderInner(data?: any, options?: any): ReturnType<this['message']['render']>;\n}\n"]},64735:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\compendium.d.ts","/**\n * The Compendium class provides an interface for interacting with compendium packs which are\n * collections of similar Entities which are stored outside of the world database but able to\n * be easily imported into an active session.\n *\n * When the game session is initialized, each available compendium pack is constructed and\n * added to the `game.packs`.\n *\n * Each Compendium is distinctly referenced using its canonical \"collection\" name which is a\n * unique string that contains the package name which provides the compendium as well as the\n * name of the pack within that package. For example, in the D&D5e system, the compendium pack\n * which provides the spells available within the SRD has the collection name \"dnd5e.spells\".\n *\n * @example\n * ```javascript\n * // Let's learn the collection names of all the compendium packs available within a game\n * game.packs.map(p => p.collection);\n *\n * // Suppose we are working with a particular pack named \"dnd5e.spells\"\n * const pack = game.packs.find(p => p.collection === \"dnd5e.spells\");\n *\n * // We can load the index of the pack which contains all entity IDs, names, and image icons\n * pack.getIndex().then(index => console.log(index));\n *\n * // We can find a specific entry in the compendium by its name\n * let entry = pack.index.find(e => e.name === \"Acid Splash\");\n *\n * // Given the entity ID of \"Acid Splash\" we can load the full Entity from the compendium\n * pack.getEntity(entry.id).then(spell => console.log(spell));\n * ```\n * @example\n * ```javascript\n * // We often may want to programmatically create new Compendium content\n * // Let's start by creating a custom spell as an Item instance\n * let itemData = {name: \"Custom Death Ray\", type: \"Spell\"};\n * let item = new Item(itemData);\n *\n * // Once we have an entity for our new Compendium entry we can import it, if the pack is unlocked\n * pack.importEntity(item);\n *\n * // When the entity is imported into the compendium it will be assigned a new ID, so let's find it\n * pack.getIndex().then(index => {\n *   let entry = index.find(e => e.name === itemData.name));\n *   console.log(entry);\n * });\n *\n * // If we decide to remove an entry from the compendium we can do that by the entry ID\n * pack.removeEntry(entry.id);\n * ```\n * @typeParam P - the type of the options object\n */\ndeclare class Compendium<P extends Application.Options = Application.Options> extends Application<P> {\n  /**\n   * @param metadata - The compendium metadata, an object provided by game.data\n   * @param options  - Application rendering options\n   */\n  constructor(metadata: Compendium['metadata'], options?: Partial<P>);\n\n  /**\n   * The compendium metadata which defines the compendium content and location\n   */\n  metadata: Compendium.Metadata;\n\n  /**\n   * Track whether the compendium pack is locked for editing\n   */\n  locked: boolean;\n\n  /**\n   * Track whether the compendium pack is private\n   * @defaultValue `false`\n   */\n  private: boolean;\n\n  /**\n   * The most recently retrieved index of the Compendium content\n   * This index is not guaranteed to be current - call getIndex() to reload the index\n   */\n  index: Compendium.IndexEntry[];\n\n  /** @override */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /** @override */\n  getTitle(): string;\n\n  /**\n   * The canonical Compendium name - comprised of the originating package and the pack name\n   * @returns The canonical collection name\n   */\n  get collection(): string;\n\n  /**\n   * The Entity type which is allowed to be stored in this collection\n   */\n  get entity(): string;\n\n  /**\n   * A reference to the Entity class object contained within this Compendium pack\n   */\n  get cls(): ConstructorOf<Entity>;\n\n  /** @override */\n  getData(options: Application.RenderOptions): Promise<any>; // TODO\n\n  /** @override */\n  close(): Promise<void>;\n\n  /**\n   * Create a new Compendium pack using provided\n   * @param metadata - The compendium metadata used to create the new pack\n   * @param options  - Additional options which modify the Compendium creation request\n   */\n  static create(metadata: Compendium.Metadata, options?: Record<string, any>): Promise<Compendium>;\n\n  /**\n   * Assign configuration metadata settings to the compendium pack\n   * @param settings - The object of compendium settings to define\n   * @returns A Promise which resolves once the setting is updated\n   */\n  configure(settings?: Partial<Compendium.Settings>): Promise<Compendium.Settings>;\n\n  /**\n   * Delete a world Compendium pack\n   * This is only allowed for world-level packs by a GM user\n   */\n  delete(): Promise<this>;\n\n  /**\n   * Duplicate a compendium pack to the current World\n   */\n  duplicate({ label }?: { label?: string }): Promise<Compendium>;\n\n  /**\n   * Get the Compendium index\n   * Contains names, images and IDs of all data in the compendium\n   *\n   * @returns A Promise containing an index of all compendium entries\n   */\n  getIndex(): Promise<Compendium.IndexEntry[]>;\n\n  /**\n   * Get the complete set of content for this compendium, loading all entries in full\n   * Returns a Promise that resolves to an Array of entries\n   */\n  getContent(): Promise<Entity[]>;\n\n  /**\n   * Get a single Compendium entry as an Object\n   * @param entryId - The compendium entry ID to retrieve\n   *\n   * @returns A Promise containing the return entry data, or null\n   */\n  getEntry(entryId: string): Promise<any | null>; // TODO\n\n  /**\n   * Get a single Compendium entry as an Entity instance\n   * @param entryId - The compendium entry ID to load and instantiate\n   * @returns A Promise containing the returned Entity, if it exists, otherwise null\n   */\n  getEntity(entryId: string): Promise<Entity | null>;\n\n  /**\n   * Fully import the contents of a Compendium pack into a World folder.\n   * @param folderId   - An existing Folder _id to use.\n   *                     (default: `null`)\n   * @param folderName - A new Folder name to create.\n   *                     (default: `''`)\n   */\n  importAll({\n    folderId,\n    folderName\n  }: {\n    folderId?: string | null;\n    folderName?: string;\n  }): Promise<Entity | Entity[] | null>;\n\n  /**\n   * Cast entry data to an Entity class\n   */\n  protected _toEntity(entryData?: any): Entity; // TODO\n\n  /**\n   * Import a new Entity into a Compendium pack\n   * @param entity - The Entity instance you wish to import\n   * @returns A Promise which resolves to the created Entity once the operation is complete\n   */\n  importEntity(entity: Entity): Promise<Entity>;\n\n  /**\n   * Create a new Entity within this Compendium Pack using provided data\n   * @param data - Data with which to create the entry\n   * @returns A Promise which resolves to the created Entity once the operation is complete\n   */\n  createEntity(\n    data: Record<string, any> | Record<string, any>[],\n    options?: Record<string, any>\n  ): Promise<Entity | Entity[]>;\n\n  /**\n   * Update a single Compendium entry programmatically by providing new data with which to update\n   * @param data    - The incremental update with which to update the Entity. Must contain the _id\n   * @param options - Additional options which modify the update request\n   * @returns A Promise which resolves with the updated Entity once the operation is complete\n   */\n  updateEntity(data: any | any[], options?: Record<string, any> & { entity: Entity }): Promise<any[]>; // TODO\n\n  /**\n   * Delete a single Compendium entry by its provided _id\n   * @param id - The entry ID to delete\n   * @returns A Promise which resolves to the deleted entry ID once the operation is complete\n   */\n  deleteEntity(id: string | string[]): Promise<string[]>;\n\n  /**\n   * Request that a Compendium pack be migrated to the latest System data template\n   */\n  migrate(options: Record<string, unknown>): Promise<Compendium>;\n\n  /**\n   * Validate that the current user is able to modify content of this Compendium pack\n   * @param requireGM       - (default: `true`)\n   * @param requireUnlocked - (default: `true`)\n   */\n  protected _assertUserCanModify({\n    requireGM,\n    requireUnlocked\n  }?: {\n    requireGM?: boolean;\n    requireUnlocked?: boolean;\n  }): boolean;\n\n  /**\n   * Register event listeners for Compendium directories\n   */\n  activateListeners(html: JQuery): void;\n\n  /** @override */\n  protected _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n  /**\n   * Handle opening a single compendium entry by invoking the configured entity class and its sheet\n   * @param entryId - The compendium ID of the entry to display\n   */\n  protected _onEntry(entryId: string): Promise<void>;\n\n  /** @override */\n  protected _canDragStart(selector: string | null): boolean;\n\n  /** @override */\n  protected _canDragDrop(selector: string | null): boolean;\n\n  /** @override */\n  protected _onDragStart(event: DragEvent): void;\n\n  /**\n   * Handle data being dropped into a Compendium pack\n   */\n  protected _onDrop(event: DragEvent): Promise<false | Entity>;\n\n  /**\n   * Render the ContextMenu which applies to each compendium entry\n   */\n  _contextMenu(html: JQuery): void;\n\n  static CONFIG_SETTING: 'compendiumConfiguration';\n}\n\ndeclare namespace Compendium {\n  interface IndexEntry {\n    _id: string;\n    name: string;\n    img?: string;\n  }\n\n  interface Metadata {\n    name: string;\n    label: string;\n    system?: string | string[];\n    module?: string;\n    path: string;\n    entity: 'Actor' | 'Item' | 'JournalEntry' | 'Macro' | 'Playlist' | 'RollTable' | 'Scene';\n    package: string;\n    absPath: string;\n  }\n\n  interface Data {\n    collection: string;\n    cssClass: string;\n    index: Array<IndexEntry & { img: string }>;\n  }\n\n  interface Settings {\n    private: boolean;\n    locked: boolean;\n  }\n}\n"]},45923:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\controlsReference.d.ts",'/**\n * Keyboard Controls Reference Sheet\n */\ndeclare class ControlsReference extends Application {\n  /**\n   * @defaultValue\n   * ```typescript\n   * const options = super.defaultOptions;\n   * options.title = game.i18n.localize("CONTROLS.Title");\n   * options.id = "controls-reference";\n   * options.template = "templates/sidebar/apps/controls-reference.html";\n   * options.width = 600;\n   * ```\n   */\n  static get defaultOptions(): typeof Application[\'defaultOptions\'];\n}\n']},715:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\dialog.d.ts",'/**\n * Create a modal dialog window displaying a title, a message, and a set of buttons which trigger callback functions.\n *\n * @example <caption>Constructing a custom dialog instance</caption>\n * ```typescript\n * let d = new Dialog({\n *  title: "Test Dialog",\n *  content: "<p>You must choose either Option 1, or Option 2</p>",\n *  buttons: {\n *   one: {\n *    icon: \'<i class="fas fa-check"></i>\',\n *    label: "Option One",\n *    callback: () => console.log("Chose One")\n *   },\n *   two: {\n *    icon: \'<i class="fas fa-times"></i>\',\n *    label: "Option Two",\n *    callback: () => console.log("Chose Two")\n *   }\n *  },\n *  default: "two",\n *  render: html => console.log("Register interactivity in the rendered dialog"),\n *  close: html => console.log("This always is logged no matter which option is chosen")\n * });\n * d.render(true);\n * ```\n * @typeParam Options - the type of the options object\n */\ndeclare class Dialog<Options extends Dialog.Options = Dialog.Options> extends Application<Options> {\n  /**\n   * @param data    - An object of dialog data which configures how the modal window is rendered\n   * @param options - Dialog rendering options, see {@link Application}\n   */\n  constructor(data: Dialog.Data, options?: Partial<Options>);\n\n  data: Dialog.Data;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * foundry.utils.mergeObject(super.defaultOptions, {\n   *   template: "templates/hud/dialog.html",\n   *   classes: ["dialog"],\n   *   width: 400,\n   *   jQuery: true\n   * })\n   * ```\n   */\n  static get defaultOptions(): Dialog.Options;\n\n  /**\n   * @override\n   */\n  static get title(): string;\n\n  /**\n   * @override\n   */\n  getData(options?: Application.RenderOptions): { content: string; buttons: Record<string, Dialog.Button> };\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle a left-mouse click on one of the dialog choice buttons\n   * @param event - The left-mouse click event\n   */\n  protected _onClickButton(event: MouseEvent): void;\n\n  /**\n   * Handle a keydown event while the dialog is active\n   * @param event - The keydown event\n   */\n  protected _onKeyDown(event: KeyboardEvent & { key: \'Escape\' }): Promise<void>;\n  protected _onKeyDown(event: KeyboardEvent): void;\n\n  /**\n   * Submit the Dialog by selecting one of its buttons\n   * @param button - The configuration of the chosen button\n   */\n  protected submit(button: Dialog.Button): void;\n\n  /**\n   * @override\n   */\n  close(options?: Application.CloseOptions): Promise<void>;\n\n  /**\n   * A helper factory method to create simple confirmation dialog windows which consist of simple yes/no prompts.\n   * If you require more flexibility, a custom Dialog instance is preferred.\n   *\n   * @param title       - The confirmation window title\n   * @param content     - The confirmation message\n   * @param yes         - Callback function upon yes\n   * @param no          - Callback function upon no\n   * @param render      - A function to call when the dialog is rendered\n   * @param defaultYes  - Make "yes" the default choice?\n   *                      (default: `true`)\n   * @param rejectClose - Reject the Promise if the Dialog is closed without making a choice.\n   *                      (default: `false`)\n   * @param options     - Additional rendering options passed to the Dialog\n   *                      (default: `{}`)\n   *\n   * @returns A promise which resolves once the user makes a choice or closes the window\n   *\n   * @example\n   * ```typescript\n   * let d = Dialog.confirm({\n   *  title: "A Yes or No Question",\n   *  content: "<p>Choose wisely.</p>",\n   *  yes: () => console.log("You chose ... wisely"),\n   *  no: () => console.log("You chose ... poorly"),\n   *  defaultYes: false\n   * });\n   * ```\n   */\n  static confirm<Yes = true, No = false, RejectClose extends boolean = false>({\n    title,\n    content,\n    yes,\n    no,\n    render,\n    defaultYes,\n    rejectClose,\n    options\n  }?: {\n    title: string;\n    content: string;\n    yes?: (html: JQuery) => Yes;\n    no?: (html: JQuery) => No;\n    render?: (html: JQuery) => void;\n    defaultYes?: boolean;\n    rejectClose?: RejectClose;\n    options?: Partial<Dialog.Options> & { jQuery?: true };\n  }): Promise<RejectClose extends true ? Yes | No : Yes | No | null>;\n  static confirm<Yes = true, No = false, RejectClose extends boolean = false>({\n    title,\n    content,\n    yes,\n    no,\n    render,\n    defaultYes,\n    rejectClose,\n    options\n  }?: {\n    title: string;\n    content: string;\n    yes?: (html: HTMLElement) => Yes;\n    no?: (html: HTMLElement) => No;\n    render?: (html: HTMLElement) => void;\n    defaultYes?: boolean;\n    rejectClose?: RejectClose;\n    options: Partial<Dialog.Options> & { jQuery: false };\n  }): Promise<RejectClose extends true ? Yes | No : Yes | No | null>;\n  static confirm<Yes = true, No = false, RejectClose extends boolean = false>({\n    title,\n    content,\n    yes,\n    no,\n    render,\n    defaultYes,\n    rejectClose,\n    options\n  }?: {\n    title: string;\n    content: string;\n    yes?: (html: JQuery | HTMLElement) => Yes;\n    no?: (html: JQuery | HTMLElement) => No;\n    render?: (html: JQuery | HTMLElement) => void;\n    defaultYes?: boolean;\n    rejectClose?: RejectClose;\n    options: Partial<Dialog.Options>;\n  }): Promise<RejectClose extends true ? Yes | No : Yes | No | null>;\n\n  /**\n   * A helper factory method to display a basic "prompt" style Dialog with a single button\n   * @param title    - The confirmation window title\n   * @param content  - The confirmation message\n   * @param label    - The confirmation button text\n   * @param callback - A callback function to fire when the button is clicked\n   * @param render   - A function that fires after the dialog is rendered\n   * @param options  - Additional rendering options\n   * @returns A promise which resolves when clicked, or rejects if closed\n   */\n  static prompt<T>({\n    title,\n    content,\n    label,\n    callback,\n    render,\n    options\n  }?: {\n    title: string;\n    content: string;\n    label?: string;\n    callback: (html: JQuery) => T;\n    render?: (html: JQuery) => void;\n    options?: Partial<Dialog.Options> & { jQuery?: true };\n  }): Promise<T>;\n  static prompt<T>({\n    title,\n    content,\n    label,\n    callback,\n    render,\n    options\n  }?: {\n    title: string;\n    content: string;\n    label?: string;\n    callback: (html: HTMLElement) => T;\n    render?: (html: HTMLElement) => void;\n    options: Partial<Dialog.Options> & { jQuery: false };\n  }): Promise<T>;\n  static prompt<T>({\n    title,\n    content,\n    label,\n    callback,\n    render,\n    options\n  }?: {\n    title: string;\n    content: string;\n    label?: string;\n    callback: (html: JQuery | HTMLElement) => T;\n    render?: (html: JQuery | HTMLElement) => void;\n    options: Partial<Dialog.Options>;\n  }): Promise<T>;\n}\n\ndeclare namespace Dialog {\n  interface Button<T = unknown> {\n    /**\n     * A Font Awesome icon for the button\n     */\n    icon?: string;\n\n    /**\n     * The label for the button\n     */\n    label?: string;\n\n    /**\n     * A callback function that fires when the button is clicked\n     */\n    callback?: (html: JQuery | HTMLElement) => T;\n  }\n\n  interface Data {\n    /**\n     * The window title\n     */\n    title: string;\n\n    /**\n     * HTML content\n     */\n    content: string;\n\n    /**\n     * A callback function invoked when the dialog is rendered\n     */\n    render?: (element: JQuery | HTMLElement) => void;\n\n    /**\n     * Common callback operations to perform when the dialog is closed\n     */\n    close?: (element: JQuery | HTMLElement) => void;\n\n    /**\n     * The buttons which are displayed as action choices for the dialog\n     */\n    buttons: Record<string, Button>;\n\n    /**\n     * The name of the default button which should be triggered on Enter\n     */\n    default: string;\n  }\n\n  interface Options extends Application.Options {\n    /**\n     * @defaultValue `400`\n     */\n    width: number;\n\n    /**\n     * @defaultValue `[\'dialog\']`\n     */\n    classes: string[];\n\n    /**\n     * @defaultValue `\'templates/hud/dialog.html\'`\n     */\n    template: string;\n\n    /**\n     * Whether to provide jQuery objects to callback functions (if true) or plain\n     * HTMLElement instances (if false). This is currently true by default but in the\n     * future will become false by default.\n     * @defaultValue `true`\n     */\n    jQuery: boolean;\n  }\n}\n']},8410:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\filePicker.d.ts","/**\n * The FilePicker application renders contents of the server-side public directory\n * This app allows for navigating and uploading files to the public path\n * @typeParam P - the type of the options object\n */\ndeclare class FilePicker<P extends FilePicker.Options = FilePicker.Options> extends Application<P> {\n  /**\n   * The full requested path given by the user\n   */\n  request: string | null;\n\n  /**\n   * The file sources which are available for browsing\n   */\n  sources: Partial<FilePicker.Sources>;\n\n  /**\n   * Track the active source tab which is being browsed\n   * @defaultValue `'data'`\n   */\n  activeSource: string;\n\n  /**\n   * The latest set of results browsed from the server\n   * @remarks This is never set.\n   */\n  results: {};\n\n  /**\n   * The general file type which controls the set of extensions which will be accepted\n   */\n  type: string;\n\n  /**\n   * The target HTML element this file picker is bound to\n   */\n  field: HTMLElement | null;\n\n  /**\n   * A button which controls the display of the picker UI\n   */\n  button: HTMLElement | null;\n\n  /**\n   * The display mode of the FilePicker UI\n   */\n  displayMode: FilePicker.DisplayMode;\n\n  /**\n   * The current set of file extensions which are being filtered upon\n   */\n  extensions: string[];\n\n  protected _loaded: boolean;\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): FilePicker.Options;\n\n  /**\n   * Given a current file path, determine the directory it belongs to\n   * @param target - The currently requested target path\n   * @returns An array of the inferred source and target directory path\n   */\n  protected _inferCurrentDirectory(target: string): [string, string];\n\n  /**\n   * Get the valid file extensions for a given named file picker type\n   */\n  protected _getExtensions(type: string): string[] | undefined;\n\n  /**\n   * Test a URL to see if it matches a well known s3 key pattern\n   * @param url - An input URL to test\n   * @returns A regular expression match\n   */\n  static matchS3URL(url: string): RegExpMatchArray | null;\n\n  /**\n   * Parse a s3 key to learn the bucket and the key prefix used for the request\n   * @param key - A fully qualified key name or prefix path\n   */\n  protected static parseS3URL(key: string): { bucket: string; keyPrefix: string };\n\n  /**\n   * @override\n   */\n  get title(): string;\n\n  /**\n   * Return the source object for the currently active source\n   */\n  get source(): FilePicker.Source;\n\n  /**\n   * Return the target directory for the currently active source\n   */\n  get target(): string;\n\n  /**\n   * Return a flag for whether the current user is able to upload file content\n   */\n  get canUpload(): boolean;\n\n  /**\n   * Return the upload URL to which the FilePicker should post uploaded files\n   */\n  static get uploadURL(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): Promise<FilePicker.Data>;\n\n  /**\n   * Browse to a specific location for this FilePicker instance\n   * @param target - The target within the currently active source location.\n   * @param options - Browsing options\n   */\n  browse(target?: string, options?: Partial<FilePicker.BrowsingOptions>): Promise<FilePicker.Result>;\n\n  /**\n   * Browse files for a certain directory location\n   * @param source  - The source location in which to browse. See FilePicker#sources for details\n   * @param target  - The target within the source location\n   * @param options - Optional arguments\n   *\n   * @returns A Promise which resolves to the directories and files contained in the location\n   */\n  static browse(\n    source: string,\n    target: string,\n    options?: Partial<FilePicker.BrowsingOptions>\n  ): Promise<FilePicker.Result & { dirs?: string[] }>;\n\n  /**\n   * Configure metadata settings regarding a certain file system path\n   * @param source  - The source location in which to browse. See FilePicker#sources for details\n   * @param target  - The target within the source location\n   * @param options - Optional arguments which modify the request\n   */\n  static configurePath(source: string, target: string, options?: Record<string, unknown>): Promise<unknown>;\n\n  /**\n   * Create a subdirectory within a given source. The requested subdirectory path must not already exist.\n   * @param source  - The source location in which to browse. See FilePicker#sources for details\n   * @param target  - The target within the source location\n   * @param options - Optional arguments which modify the request\n   */\n  static createDirectory(source: string, target: string, options?: Record<string, unknown>): Promise<unknown>;\n\n  /**\n   * General dispatcher method to submit file management commands to the server\n   */\n  protected static _manageFiles(data: FilePicker.ManageData, options?: Record<string, unknown>): Promise<unknown>;\n\n  /**\n   * Dispatch a POST request to the server containing a directory path and a file to upload\n   * @param source  - The data source to which the file should be uploaded\n   * @param path    - The destination path\n   * @param file    - The File object to upload\n   * @param options - Additional file upload options passed as form data\n   * @returns The response object\n   */\n  static upload(\n    source: string,\n    path: string,\n    file: File,\n    options?: Record<string, any>\n  ): Promise<(Response & { path: string; message?: string }) | false | void>;\n\n  /**\n   * Additional actions performed when the file-picker UI is rendered\n   */\n  render(force?: boolean, options?: Application.RenderOptions): this | void | Promise<FilePicker.Result>;\n\n  /**\n   * Activate listeners to handle user interactivity for the FilePicker UI\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle a click event to change the display mode of the File Picker\n   * @param event - The triggering click event\n   */\n  protected _onChangeDisplayMode(event: JQuery.ClickEvent): void;\n\n  /**\n   * @param event - (unused)\n   * @param event - (unused)\n   * @override\n   */\n  protected _onChangeTab(event: MouseEvent | null, tabs: Tabs, active: this['activeSource']): void;\n\n  /**\n   * @param selector - (unused)\n   * @override\n   */\n  protected _canDragStart(selector: string | null): boolean;\n\n  /**\n   * @param selector - (unused)\n   * @override\n   */\n  protected _canDragDrop(selector: string | null): this['canUpload'];\n\n  /**\n   * @override\n   */\n  protected _onDragStart(event: DragEvent): void;\n\n  /**\n   * @override\n   */\n  protected _onDrop(event: DragEvent): Promise<FilePicker.Result | void>;\n\n  /**\n   * Handle user submission of the address bar to request an explicit target\n   * @param event - The originating keydown event\n   */\n  protected _onRequestTarget(event: KeyboardEvent): void;\n\n  /**\n   * Handle requests from the IntersectionObserver to lazily load an image file\n   */\n  protected _onLazyLoadImages(...args: any): void;\n\n  /**\n   * Handle file or folder selection within the file picker\n   * @param event - The originating click event\n   */\n  protected _onPick(event: JQuery.ClickEvent): Promise<FilePicker.Result> | undefined;\n\n  /**\n   * Handle backwards navigation of the fol6der structure\n   */\n  protected _onClickDirectoryControl(\n    event: JQuery.ClickEvent\n  ):\n    | ReturnType<this['browse']>\n    | Promise<ReturnType<this['browse']> | void | null>\n    | ReturnType<typeof FilePicker['configurePath']>;\n\n  /**\n   * Present the user with a dialog to create a subdirectory within their currently browsed file storate location.\n   */\n  protected _createDirectoryDialog(source: FilePicker.Source): Promise<ReturnType<this['browse']> | void | null>;\n\n  /**\n   * Handle changes to the bucket selector\n   */\n  protected _onChangeBucket(event: JQuery.ChangeEvent): ReturnType<this['browse']>;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n  /**\n   * Handle file picker form submission\n   */\n  protected _onSubmit(ev: Event): void;\n\n  /**\n   * Handle file upload\n   */\n  protected _onUpload(ev: Event): Promise<void>;\n\n  /**\n   * Bind the file picker to a new target field.\n   * Assumes the user will provide a <button> HTMLElement which has the data-target and data-type attributes\n   * The data-target attribute should provide the name of the input field which should receive the selected file\n   * The data-type attribute is a string in [\"image\", \"audio\"] which sets the file extensions which will be accepted\n   *\n   * @param button  - The button element\n   * @param options - (unused)\n   */\n  static fromButton(button: HTMLButtonElement, options?: any): FilePicker;\n\n  /**\n   * Record the last-browsed directory path so that re-opening a different FilePicker instance uses the same target\n   * @defaultValue `''`\n   */\n  static LAST_BROWSED_DIRECTORY: string;\n\n  /**\n   * Record the last-configured tile size which can automatically be applied to new FilePicker instances\n   * @defaultValue `null`\n   */\n  static LAST_TILE_SIZE: number | null;\n\n  /**\n   * Record the last-configured display mode so that re-opening a different FilePicker instance uses the same mode.\n   * @defaultValue `FilePicker.DisplayModes.List`\n   */\n  static LAST_DISPLAY_MODE: string;\n\n  /**\n   * Enumerate the allowed FilePicker display modes\n   */\n  static DISPLAY_MODES: ['list', 'thumbs', 'tiles', 'images'];\n\n  /**\n   * Cache the names of S3 buckets which can be used\n   * @defaultValue `null`\n   */\n  static S3_BUCKETS: string[] | null;\n}\n\ndeclare namespace FilePicker {\n  interface BrowsingOptions {\n    /**\n     * A bucket within which to search if using the S3 source\n     */\n    bucket: string;\n\n    /**\n     * An Array of file extensions to filter on\n     */\n    extensions: string[];\n\n    /**\n     * The requested dir represents a wildcard path\n     */\n    wildcard: string;\n  }\n\n  interface Data {\n    bucket: string | null;\n    canGoBack: boolean;\n    canUpload: boolean;\n    canSelect: boolean;\n    cssClass: string;\n    dirs: Dir[];\n    displayMode: string;\n    extensions: string[];\n    files: File[];\n    isS3: boolean;\n    noResults: boolean;\n    request: string;\n    source: Source;\n    sources: Sources;\n    target: string;\n    tileSize: number | null;\n    user: Game['user'];\n  }\n\n  interface Dir {\n    name: string;\n    path: string;\n    private: boolean;\n  }\n\n  type DisplayMode = ValueOf<typeof FilePicker['DISPLAY_MODES']>;\n\n  interface File {\n    name: string;\n    url: string;\n    img: string;\n  }\n\n  interface ManageData {\n    action: 'browseFiles' | 'configurePath' | 'createDirectory' | 'manageFiles';\n    source: string;\n    target: string;\n  }\n\n  interface Options extends Application.Options {\n    current?: FilePicker['request'];\n\n    activeSource?: FilePicker['activeSource'];\n\n    type?: FilePicker['type'];\n\n    field?: FilePicker['field'];\n\n    button?: FilePicker['button'];\n\n    callback?: (path: string) => void;\n\n    /**\n     * @defaultValue `'templates/apps/filepicker.html'`\n     */\n    template: string;\n\n    /**\n     * @defaultValue `['filepicker']`\n     */\n    classes: string[];\n\n    /**\n     * @defaultValue `520`\n     */\n    width: number;\n\n    tabs: Array<\n      Tabs.Options & {\n        /**\n         * @defaultValue `'.tabs'`\n         */\n        navSelector: string;\n      }\n    >;\n\n    dragDrop: Array<\n      DragDrop.Options & {\n        /**\n         * @defaultValue `'.file'`\n         */\n        dragSelector: string;\n\n        /**\n         * @defaultValue `'.filepicker-body'`\n         */\n        dropSelector: string;\n      }\n    >;\n\n    /**\n     * @defaultValue `false`\n     */\n    tileSize: boolean;\n\n    filters: Array<\n      SearchFilter.Options & {\n        /**\n         * @defaultValue `'input[name=\"filter\"]'`\n         */\n        inputSelector: string;\n\n        /**\n         * @defaultValue `'.filepicker-body'`\n         */\n        contentSelector: string;\n      }\n    >;\n  }\n\n  interface Result {\n    bucket?: string;\n    target: string;\n  }\n\n  interface Source {\n    target: string;\n    label: string;\n    icon: string;\n  }\n\n  interface Sources {\n    data: Source;\n    public: Source;\n    s3: Source & {\n      buckets: string[];\n      bucket: string;\n    };\n  }\n}\n"]},49134:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplication.d.ts","/**\n * An abstract pattern for defining an Application responsible for updating some object using an HTML form\n *\n * A few critical assumptions:\n * 1) This application is used to only edit one object at a time\n * 2) The template used contains one (and only one) HTML form as it's outer-most element\n * 3) This abstract layer has no knowledge of what is being updated, so the implementation must define _updateObject\n *\n * @typeParam Options        - the type of the options object\n * @typeParam Data           - The data structure used to render the handlebars template.\n * @typeParam ConcreteObject - the type of the object or {@link foundry.abstract.Document} which is modified by this form\n */\ndeclare abstract class FormApplication<\n  Options extends FormApplication.Options = FormApplication.Options,\n  Data extends object = FormApplication.Data<{}, Options>,\n  ConcreteObject = Data extends FormApplication.Data<infer T, Options> ? T : {}\n> extends Application<Options> {\n  /**\n   * @param object  - Some object or entity which is the target to be updated.\n   * @param options - Additional options which modify the rendering of the sheet.\n   *                  (default: `{}`)\n   * @remarks Foundry allows passing no value to the constructor at all.\n   */\n  constructor(object: ConcreteObject, options?: Partial<Options>);\n\n  /**\n   * The object target which we are using this form to modify\n   */\n  object: ConcreteObject;\n\n  /**\n   * A convenience reference to the form HTLMElement\n   * @defaultValue `null`\n   */\n  form: HTMLElement | null;\n\n  /**\n   * Keep track of any FilePicker instances which are associated with this form\n   * The values of this Array are inner-objects with references to the FilePicker instances and other metadata\n   * @defaultValue `[]`\n   */\n  filepickers: FilePicker[];\n\n  /**\n   * Keep track of any mce editors which may be active as part of this form\n   * The values of this Array are inner-objects with references to the MCE editor and other metadata\n   * @defaultValue `{}`\n   */\n  editors: Partial<Record<string, FormApplication.FormApplicationEditor>>;\n\n  /**\n   * Assign the default options which are supported by the entity edit sheet.\n   * @returns The default options for this FormApplication class\n   * @override\n   * @see {@link Application.defaultOptions}\n   * @defaultValue\n   * ```typescript\n   * foundry.utils.mergeObject(super.defaultOptions, {\n   *   classes: ['form'],\n   *   closeOnSubmit: true,\n   *   submitOnChange: false,\n   *   submitOnClose: false,\n   *   editable: true\n   * });\n   * ```\n   */\n  static get defaultOptions(): FormApplication.Options;\n\n  /**\n   * Is the Form Application currently editable?\n   */\n  get isEditable(): boolean;\n\n  /**\n   * @param options - (default: `{}`)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): Data | Promise<Data>;\n\n  /**\n   * @override\n   */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * @override\n   */\n  protected _renderInner(data: Data): Promise<JQuery>;\n\n  /**\n   * @override\n   */\n  protected _activateCoreListeners(html: JQuery): void;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * If the form is not editable, disable its input fields\n   * @param form - The form HTML\n   */\n  protected _disableFields(form: HTMLElement): void;\n\n  /**\n   * Handle standard form submission steps\n   * @param event         - The submit event which triggered this handler\n   * @param updateData    - Additional specific data keys/values which override or extend the contents of\n   *                        the parsed form. This can be used to update other flags or data fields at the\n   *                        same time as processing a form submission to avoid multiple database operations.\n   *                        (default: `null`)\n   * @param preventClose  - Override the standard behavior of whether to close the form on submit\n   *                        (default: `false`)\n   * @param preventRender - Prevent the application from re-rendering as a result of form submission\n   *                        (default: `false`)\n   * @returns A promise which resolves to the validated update data\n   */\n  protected _onSubmit(\n    event: Event,\n    { updateData, preventClose, preventRender }?: FormApplication.OnSubmitOptions\n  ): Promise<Partial<Record<string, unknown>>>;\n\n  /**\n   * Get an object of update data used to update the form's target object\n   * @param updateData - Additional data that should be merged with the form data\n   *                     (default: `{}`)\n   * @returns The prepared update data\n   */\n  // TODO: Maybe we can calculate how the flattened `updateData` looks like, then it would be Partial<Record<string, unknown>> & Flattened<T>\n  protected _getSubmitData(updateData?: object | null): Partial<Record<string, unknown>>;\n\n  /**\n   * Handle changes to an input element, submitting the form if options.submitOnChange is true.\n   * Do not preventDefault in this handler as other interactions on the form may also be occurring.\n   * @param event - The initial change event\n   */\n  protected _onChangeInput(event: JQuery.ChangeEvent): void | Promise<Partial<Record<string, unknown>>>;\n\n  /**\n   * Handle the change of a color picker input which enters it's chosen value into a related input field\n   */\n  protected _onChangeColorPicker(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Handle changes to a range type input by propagating those changes to the sibling range-value element\n   * @param event - The initial change event\n   */\n  protected _onChangeRange(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Additional handling which should trigger when a FilePicker contained within this FormApplication is submitted.\n   * @param selection  - The target path which was selected\n   * @param filePicker - The FilePicker instance which was submitted\n   */\n  protected _onSelectFile(selection: string, filePicker: FilePicker): void;\n\n  /**\n   * This method is called upon form submission after form data is validated\n   * @param event    - The initial triggering submission event\n   *                   (unused)\n   * @param formData - The object of validated form data with which to update the object\n   *                   (unused)\n   * @returns A Promise which resolves once the update operation has completed\n   */\n  protected abstract _updateObject(event: Event, formData?: object): Promise<unknown>;\n\n  /**\n   * Activate a named TinyMCE text editor\n   * @param name           - The named data field which the editor modifies.\n   * @param options        - TinyMCE initialization options passed to TextEditor.create\n   *                         (default: `{}`)\n   * @param initialContent - Initial text content for the editor area.\n   *                         (default: `''`)\n   */\n  activateEditor(name: string, options?: TextEditor.Options, initialContent?: string): void;\n\n  /**\n   * Handle saving the content of a specific editor by name\n   * @param name   - The named editor to save\n   * @param remove - Remove the editor after saving its content\n   *                 (default: `true`)\n   */\n  saveEditor(name: string, { remove }?: { remove?: boolean }): Promise<void>;\n\n  /**\n   * Activate a TinyMCE editor instance present within the form\n   */\n  protected _activateEditor(div: HTMLElement): void;\n\n  /**\n   * Activate a FilePicker instance present within the form\n   * @param event - The mouse click event on a file picker activation button\n   */\n  protected _activateFilePicker(event: PointerEvent): void;\n\n  /**\n   * Determine the configuration options used to initialize a FilePicker instance within this FormApplication.\n   * Subclasses can extend this method to customize the behavior of pickers within their form.\n   * @param event - The initiating mouse click event which opens the picker\n   * @returns Options passed to the FilePicker constructor\n   */\n  protected _getFilePickerOptions(event: PointerEvent): FilePickerOptions;\n\n  /**\n   * @param options - (default: `{}`)\n   * @override\n   */\n  close(options?: FormApplication.CloseOptions): Promise<void>;\n\n  /**\n   * Submit the contents of a Form Application, processing its content as defined by the Application\n   * @param options - Options passed to the _onSubmit event handler\n   *                  (default: `{}`)\n   * @returns Return a self-reference for convenient method chaining\n   */\n  submit(options?: FormApplication.OnSubmitOptions): Promise<this> | void;\n}\n\ndeclare interface ApplicationOptions {\n  /**\n   * Whether to automatically close the application when it's contained\n   * form is submitted.\n   * @defaultValue `true`\n   */\n  closeOnSubmit: boolean;\n\n  /**\n   * Whether to automatically submit the contained HTML form when an input\n   * or select element is changed.\n   * @defaultValue `false`\n   */\n  submitOnChange: boolean;\n\n  /**\n   * Whether to automatically submit the contained HTML form when the\n   * application window is manually closed.\n   * @defaultValue `false`\n   */\n  submitOnClose: boolean;\n\n  /**\n   * Whether the application form is editable - if true, it's fields will\n   * be unlocked and the form can be submitted. If false, all form fields\n   * will be disabled and the form cannot be submitted.\n   * @defaultValue `true`\n   */\n  editable: boolean;\n}\n\ndeclare namespace FormApplication {\n  interface CloseOptions extends Application.CloseOptions {\n    submit?: boolean;\n  }\n\n  /**\n   * @typeParam ConcreteObject - the type of the object\n   * @typeParam Options        - the type of the options object\n   */\n  interface Data<ConcreteObject, Options extends FormApplication.Options = FormApplication.Options> {\n    object: ConcreteObject;\n    options: Options;\n    title: string;\n  }\n\n  interface FormApplicationEditor {\n    target: string;\n    button: HTMLElement;\n    hasButton: boolean;\n    mce: tinyMCE.Editor | null;\n    active: boolean;\n    changed: boolean;\n    options: TextEditor.Options;\n    initial: string;\n  }\n\n  interface OnSubmitOptions {\n    /**\n     * Additional specific data keys/values which override or extend the contents of\n     * the parsed form. This can be used to update other flags or data fields at the\n     * same time as processing a form submission to avoid multiple database operations.\n     * @defaultValue `null`\n     */\n    updateData?: object;\n\n    /**\n     * Override the standard behavior of whether to close the form on submit\n     * @defaultValue `false`\n     */\n    preventClose?: boolean;\n\n    /**\n     * Prevent the application from re-rendering as a result of form submission\n     * @defaultValue `false`\n     */\n    preventRender?: boolean;\n  }\n\n  interface Options extends Application.Options, ApplicationOptions {\n    /**\n     * @defaultValue `['form']`\n     */\n    classes: string[];\n  }\n}\n\ninterface FilePickerOptions {\n  field: HTMLElement | null;\n  type: string;\n  current: string;\n  button: HTMLElement;\n  callback: FormApplication['_onSelectFile'];\n}\n"]},32211:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\ambientSoundConfig.d.ts","/**\n * Ambient Sound Config Sheet\n * @typeParam P - the type of the options object\n */\ndeclare class AmbientSoundConfig<\n  P extends AmbientSoundConfig.Options = AmbientSoundConfig.Options\n> extends FormApplication<AmbientSoundConfig.Options, AmbientSoundConfig.Data, AmbientSound> {\n  /**\n   * @param sound   - The sound object being configured\n   * @param options - Additional application rendering options\n   */\n  constructor(sound: AmbientSound, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"sound-config\",\n   *   classes: [\"sheet\", \"sound-sheet\"],\n   *   title: \"SOUND.ConfigTitle\",\n   *   template: \"templates/scene/sound-config.html\",\n   *   width: 480\n   * });\n   * ```\n   */\n  static get defaultOptions(): AmbientSoundConfig.Options;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): AmbientSoundConfig.Data;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: AmbientSoundConfig.FormData): Promise<AmbientSound>;\n\n  /** @override */\n  close(options?: Application.CloseOptions): Promise<void>;\n}\n\ndeclare namespace AmbientSoundConfig {\n  interface Data {\n    object: foundry.utils.Duplicated<AmbientSoundConfig['object']['data']>;\n    options: AmbientSoundConfig['options'];\n    submitText: string;\n  }\n\n  interface FormData {\n    easing: AmbientSound.Data['easing'];\n    path: AmbientSound.Data['path'];\n    radius: AmbientSound.Data['radius'] | null;\n    type: AmbientSound.Data['type'];\n    volume: AmbientSound.Data['volume'];\n    x: AmbientSound.Data['x'] | null;\n    y: AmbientSound.Data['y'] | null;\n  }\n\n  interface Options extends FormApplication.Options {\n    /**\n     * Configure a preview version of a sound which is not yet saved\n     */\n    preview?: boolean;\n  }\n}\n"]},62774:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\avConfig.d.ts","/**\n * Audio/Video Conferencing Configuration Sheet\n */\ndeclare class AVConfig extends FormApplication<AVConfig.Options, AVConfig.Data, AVMaster> {\n  /** @override */\n  static get defaultOptions(): AVConfig.Options;\n\n  /** @override */\n  getData(options: Application.RenderOptions): Promise<AVConfig.Data>;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Set a section's input to enabled or disabled\n   * @param selector - Selector for the section to enable or disable\n   * @param enabled  - Whether to enable or disable this section\n   *                   (default: true)\n   */\n  protected _setConfigSectionEnabled(selector: string, enabled?: boolean): void;\n\n  /**\n   * Determine whether a given video or audio source, or audio sink has become\n   * unavailable since the last time it was set.\n   * @param sources - The available devices\n   * @param source  - The selected device\n   */\n  protected _isSourceUnavailable(sources: Record<string, string>, source: string): boolean;\n\n  /**\n   * Callback when the server type changes\n   * Will enable or disable the server section based on whether the user selected a custom server or not\n   * @param event - The event that triggered the server type change\n   */\n  protected _onServerTypeChanged(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Callback when the turn server type changes\n   * Will enable or disable the turn section based on whether the user selected a custom turn or not\n   * @param event - The event that triggered the turn server type change\n   */\n  protected _onTurnTypeChanged(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Handle the assignment of a push-to-talk/push-to-mute key\n   */\n  protected _onPTTKeyDown(event: JQuery.KeyDownEvent): void;\n\n  /**\n   * Handle the assignment of a push-to-talk/push-to-mute mouse key\n   */\n  protected _onPTTMouseDown(event: JQuery.MouseDownEvent): void;\n\n  /** @override */\n  protected _updateObject(event: Event, formData?: object): Promise<void>;\n}\n\ndeclare namespace AVConfig {\n  interface Options extends FormApplication.Options {\n    /**\n     * @defaultValue `game.i18n.localize('WEBRTC.Title')`\n     */\n    title: string;\n\n    /**\n     * @defaultValue `'av-config'`\n     */\n    id: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/apps/av-config.html'`\n     */\n    template: string;\n\n    /**\n     * @defaultValue `true`\n     */\n    popOut: boolean;\n\n    /**\n     * @defaultValue `480`\n     */\n    width: number;\n\n    /**\n     * @defaultValue `'auto'`\n     */\n    height: number | 'auto';\n\n    /**\n     * @defaultValue `[{navSelector: '.tabs', contentSelector: 'form', initial: 'general'}]`\n     */\n    tabs: (Tabs.Options & { contentSelector: string; initial: string })[];\n  }\n\n  interface Data {\n    user: Game['user'];\n    modes: {\n      [Key in ValueOf<typeof AVSettings.AV_MODES>]: string;\n    };\n    voiceModes: {\n      [Key in ValueOf<typeof AVSettings.VOICE_MODES>]: string;\n    };\n    serverTypes: {\n      FVTT: string;\n      custom: string;\n    };\n    turnTypes: {\n      FVTT: string;\n      custom: string;\n    };\n    settings: AVSettings;\n    canSelectMode: boolean;\n    noSSL: boolean;\n    videoSources: Record<string, string>;\n    audioSources: Record<string, string>;\n    audioSinks: Record<string, string> | false;\n    videoSrcUnavailable: boolean;\n    audioSrcUnavailable: boolean;\n    audioSinkUnavailable: boolean;\n    audioDisabled: boolean;\n    videoDisabled: boolean;\n  }\n}\n"]},10712:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\combatTrackerConfig.d.ts",'// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * Configure the Combat tracker to display additional information as appropriate\n */\ndeclare class CombatTrackerConfig extends FormApplication<FormApplication.Options, CombatTrackerConfig.Data> {\n  /**\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: "combat-config",\n   *   title: game.i18n.localize("COMBAT.Settings"),\n   *   classes: ["sheet", "combat-sheet"],\n   *   template: "templates/sheets/combat-config.html",\n   *   width: 420\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication[\'defaultOptions\'];\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): Promise<CombatTrackerConfig.Data>;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event?: Event, formData?: Combat.ConfigValue): Promise<Combat.ConfigValue>;\n\n  /**\n   * Get an Array of attribute choices which could be tracked for Actors in the Combat Tracker\n   */\n  getAttributeChoices(): ReturnType<typeof TokenConfig[\'getTrackedAttributeChoices\']>;\n}\n\ndeclare namespace CombatTrackerConfig {\n  interface Data {\n    settings: Combat.ConfigValue;\n    attributeChoices: ReturnType<CombatTrackerConfig[\'getAttributeChoices\']>;\n  }\n}\n']},19776:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\combatantConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * Configure or create a single Combatant within a Combat entity.\n */\ndeclare class CombatantConfig extends FormApplication {\n  /**\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"combatant-config\",\n   *   title: game.i18n.localize(\"COMBAT.CombatantConfig\"),\n   *   classes: [\"sheet\", \"combat-sheet\"],\n   *   template: \"templates/sheets/combatant-config.html\",\n   *   width: 420\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @override\n   */\n  get title(): string;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: CombatantConfig.FormData): Promise<Combat.Combatant>;\n}\n\ndeclare namespace CombatantConfig {\n  type FormData = Required<Pick<Combat.Combatant, 'defeated' | 'hidden' | 'img' | 'initiative' | 'name'>>;\n}\n"]},44897:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheet.d.ts","import { ToObjectFalseType } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * Extend the FormApplication pattern to incorporate specific logic for viewing or editing Document instances.\n   * See the FormApplication documentation for more complete description of this interface.\n   * @param object  - A Document instance which should be managed by this form.\n   * @param options - Optional configuration parameters for how the form behaves.\n   *                  (default: `{}`)\n   *\n   * @typeParam Options          - the type of the options object\n   * @typeParam Data             - The data structure used to render the handlebars template.\n   * @typeParam ConcreteDocument - the type of the Document which should be managed by this form sheet\n   */\n  abstract class DocumentSheet<\n    Options extends DocumentSheet.Options = DocumentSheet.Options,\n    Data extends object = DocumentSheet.Data,\n    ConcreteDocument extends foundry.abstract.Document<any, any> = Data extends DocumentSheet.Data<infer T>\n      ? T\n      : foundry.abstract.Document<any, any>\n  > extends FormApplication<Options, Data, ConcreteDocument> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   classes: ['sheet'],\n     *   template: `templates/sheets/${this.name.toLowerCase()}.html`,\n     *   viewPermission: CONST.ENTITY_PERMISSIONS.LIMITED\n     * });\n     * ```\n     */\n    static get defaultOptions(): DocumentSheet.Options;\n\n    /**\n     * A semantic convenience reference to the Document instance which is the target object for this form.\n     */\n    get document(): ConcreteDocument;\n\n    /**\n     * @override\n     */\n    get id(): string;\n\n    /**\n     * @override\n     */\n    get isEditable(): boolean;\n\n    /**\n     * @override\n     */\n    get title(): string;\n\n    /**\n     * @override\n     */\n    close(options?: FormApplication.CloseOptions): Promise<void>;\n\n    /**\n     * @override\n     */\n    getData(options?: Application.RenderOptions): Data | Promise<Data>;\n\n    /**\n     * @override\n     */\n    render(force?: boolean, options?: Application.RenderOptions): this;\n\n    /**\n     * @override\n     */\n    protected _getHeaderButtons(): Application.HeaderButton[];\n\n    /**\n     * @param event - (unused)\n     * @override\n     */\n    protected _updateObject(event: Event, formData: object): Promise<ConcreteDocument | undefined>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    get entity(): ConcreteDocument;\n  }\n\n  namespace DocumentSheet {\n    /**\n     * @typeParam ConcreteDocument - the type of the {@link foundry.abstract.Document} which should be managed by this form sheet\n     * @typeParam Options          - the type of the options object\n     */\n    interface Data<\n      ConcreteDocument extends foundry.abstract.Document<any, any> = foundry.abstract.Document<any, any>,\n      Options extends DocumentSheet.Options = DocumentSheet.Options\n    > {\n      cssClass: string;\n      editable: boolean;\n      document: ConcreteDocument;\n      data: ToObjectFalseType<ConcreteDocument>;\n      limited: boolean;\n      options: Options;\n      owner: boolean;\n      title: string;\n      readonly entity: this['data'];\n    }\n\n    interface Options extends FormApplication.Options {\n      /**\n       * @defaultValue `['sheet']`\n       */\n      classes: string[];\n\n      /**\n       * @defaultValue\n       * ```javascript\n       * `templates/sheets/${this.name.toLowerCase()}.html`\n       * ```\n       */\n      template: string;\n\n      /**\n       * @defaultValue {@link ENTITY_PERMISSIONS.LIMITED}\n       */\n      viewPermission: foundry.CONST.EntityPermission;\n    }\n  }\n}\n"]},54252:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\activeEffectConfig.d.ts",'import { ConfiguredDocumentClass } from \'../../../../../types/helperTypes\';\n\ndeclare global {\n  /**\n   * The Application responsible for configuring a single ActiveEffect document within a parent Actor or Item.\n   *\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class ActiveEffectConfig<\n    Options extends DocumentSheet.Options = ActiveEffectConfig.Options,\n    Data extends object = ActiveEffectConfig.Data\n  > extends DocumentSheet<Options, Data, InstanceType<ConfiguredDocumentClass<typeof ActiveEffect>>> {\n    /**\n     * @override\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   classes: ["sheet", "active-effect-sheet"],\n     *   template: "templates/sheets/active-effect-config.html",\n     *   width: 560,\n     *   height: "auto",\n     *   tabs: [{navSelector: ".tabs", contentSelector: "form", initial: "details"}]\n     * });\n     * ```\n     */\n    static get defaultOptions(): ActiveEffectConfig.Options;\n\n    /** @override */\n    get title(): string;\n\n    /**\n     * @override\n     *\n     * @remarks The implementation doesn\'t return a `Promise` but the return type includes it to allow extending\n     * classes to do that.\n     */\n    getData(options?: Application.RenderOptions): Data | Promise<Data>;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Provide centralized handling of mouse clicks on control buttons.\n     * Delegate responsibility out to action-specific handlers depending on the button action.\n     * @param event - The originating click event\n     */\n    protected _onEffectControl(event: JQuery.ClickEvent): this | void;\n\n    /**\n     * Handle adding a new change to the changes array.\n     */\n    protected _addEffectChange(): Promise<this>;\n\n    /**\n     * @override\n     * @param updateData - (default: `{}`)\n     */\n    _getSubmitData(updateData?: FormApplication.OnSubmitOptions[\'updateData\']): object;\n    // TODO: Can we type this better?\n  }\n\n  namespace ActiveEffectConfig {\n    interface Data {\n      effect: ActiveEffectConfig[\'object\'][\'data\'];\n      data: ActiveEffectConfig[\'object\'][\'data\'];\n      isActorEffect: boolean;\n      isItemEffect: boolean;\n      submitText: string;\n      modes: Record<keyof typeof foundry.CONST.ACTIVE_EFFECT_MODES, string>;\n    }\n\n    type Options = DocumentSheet.Options;\n  }\n}\n']},19714:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\actorSheet.d.ts","import { ConfiguredDocumentClass, ConfiguredSheetClass, ToObjectFalseType } from '../../../../../types/helperTypes';\nimport { DropData as ClientDocumentMixinDropData } from '../../../clientDocumentMixin';\n\ndeclare global {\n  /**\n   * The Application responsible for displaying and editing a single Actor document.\n   * This Application is responsible for rendering an actor's attributes and allowing the actor to be edited.\n   * @param actor   - The Actor instance being displayed within the sheet.\n   * @param options - Additional application configuration options.\n   *\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class ActorSheet<\n    Options extends ActorSheet.Options = ActorSheet.Options,\n    Data extends object = ActorSheet.Data<Options>\n  > extends DocumentSheet<Options, Data, InstanceType<ConfiguredDocumentClass<typeof Actor>>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   height: 720,\n     *   width: 800,\n     *   template: 'templates/sheets/actor-sheet.html',\n     *   closeOnSubmit: false,\n     *   submitOnClose: true,\n     *   submitOnChange: true,\n     *   resizable: true,\n     *   baseApplication: 'ActorSheet',\n     *   dragDrop: [{ dragSelector: '.item-list .item', dropSelector: null }],\n     *   token: null,\n     * });\n     * ```\n     */\n    static get defaultOptions(): ActorSheet.Options;\n\n    /** @override */\n    get id(): string;\n\n    /** @override */\n    get title(): string;\n\n    /**\n     * A convenience reference to the Actor entity\n     */\n    get actor(): this['object'];\n\n    /**\n     * If this Actor Sheet represents a synthetic Token actor, reference the active Token\n     */\n    get token(): Required<this['object']['token']> | Required<this['options']['token']> | null;\n\n    /** @override */\n    close(options?: FormApplication.CloseOptions): Promise<void>;\n\n    /**\n     * @override\n     */\n    getData(options?: Application.RenderOptions): Data | Promise<Data>;\n\n    /** @override */\n    protected _getHeaderButtons(): Application.HeaderButton[];\n\n    /** @override */\n    protected _getSubmitData(updateData?: object | null): Partial<Record<string, unknown>>;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Handle requests to configure the Token for the Actor\n     */\n    protected _onConfigureToken(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle requests to configure the default sheet used by this Actor\n     */\n    protected _onConfigureSheet(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle changing the actor profile image by opening a FilePicker\n     */\n    protected _onEditImage(event: JQuery.ClickEvent): ReturnType<FilePicker['browse']>;\n\n    /** @override */\n    protected _canDragStart(selector: string): boolean;\n\n    /** @override */\n    protected _canDragDrop(selector: string): boolean;\n\n    /** @override */\n    protected _onDragStart(event: DragEvent): void;\n\n    /** @override */\n    protected _onDrop(event: DragEvent): Promise<boolean | undefined> | unknown;\n\n    /**\n     * Handle the dropping of ActiveEffect data onto an Actor Sheet\n     * @param event - The concluding DragEvent which contains drop data\n     * @param data  - The data transfer extracted from the event\n     * @returns A data object which describes the result of the drop\n     * @remarks This is intentionally typed to return `Promise<unknown>` to\n     * allow overriding methods to return whatever they want. The return type is\n     * not meant to be used aside from being awaited.\n     */\n    protected _onDropActiveEffect(event: DragEvent, data: ActorSheet.DropData.ActiveEffect): Promise<unknown>;\n\n    /**\n     * Handle dropping of an item reference or item data onto an Actor Sheet\n     * @param event - The concluding DragEvent which contains drop data\n     * @param data  - The data transfer extracted from the event\n     * @returns A data object which describes the result of the drop\n     * @remarks This is intentionally typed to return `Promise<unknown>` to\n     * allow overriding methods to return whatever they want. The return type is\n     * not meant to be used aside from being awaited.\n     */\n    protected _onDropActor(event: DragEvent, data: ActorSheet.DropData.Actor): Promise<unknown>;\n\n    /**\n     * Handle dropping of an item reference or item data onto an Actor Sheet\n     * @param event - The concluding DragEvent which contains drop data\n     * @param data  - The data transfer extracted from the event\n     * @remarks This is intentionally typed to return `Promise<unknown>` to\n     * allow overriding methods to return whatever they want. The return type is\n     * not meant to be used aside from being awaited.\n     */\n    protected _onDropItem(event: DragEvent, data: ActorSheet.DropData.Item): Promise<unknown>;\n\n    /**\n     * Handle dropping of a Folder on an Actor Sheet.\n     * Currently supports dropping a Folder of Items to create all items as owned items.\n     * @param event - The concluding DragEvent which contains drop data\n     * @param data  - The data transfer extracted from the event\n     * @remarks This is intentionally typed to return `Promise<unknown>` to\n     * allow overriding methods to return whatever they want. The return type is\n     * not meant to be used aside from being awaited.\n     */\n    protected _onDropFolder(event: DragEvent, data: ActorSheet.DropData.Folder): Promise<unknown>;\n\n    /**\n     * Handle the final creation of dropped Item data on the Actor.\n     * This method is factored out to allow downstream classes the opportunity to override item creation behavior.\n     * @param itemData - The item data requested for creation\n     */\n    protected _onDropItemCreate(\n      itemData: foundry.data.ItemData['_source'][] | foundry.data.ItemData['_source']\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Item>>[]>;\n\n    /**\n     * Handle a drop event for an existing embedded Item to sort that Item relative to its siblings\n     */\n    protected _onSortItem(\n      event: DragEvent,\n      itemData: foundry.data.ItemData['_source']\n    ): undefined | Promise<InstanceType<ConfiguredDocumentClass<typeof Item>>[]>;\n  }\n\n  namespace ActorSheet {\n    /**\n     * @typeParam Options - the type of the options object\n     */\n    interface Data<Options extends ActorSheet.Options = ActorSheet.Options>\n      extends DocumentSheet.Data<InstanceType<ConfiguredDocumentClass<typeof Actor>>, Options> {\n      actor: this['document'];\n      items: ToObjectFalseType<foundry.data.ActorData>['items'];\n      effects: ToObjectFalseType<foundry.data.ActorData>['effects'];\n    }\n\n    type DropData =\n      | DropData.ActiveEffect\n      | DropData.Actor\n      | DropData.Item\n      | DropData.Folder\n      | (Partial<Record<string, unknown>> & { type: string });\n\n    namespace DropData {\n      interface ActiveEffect {\n        type: 'ActiveEffect';\n        tokenId?: string;\n        actorId?: string;\n        data: foundry.data.ActiveEffectData['_source'];\n      }\n\n      interface Actor {\n        type: 'Actor';\n      }\n\n      type Item = ClientDocumentMixinDropData<InstanceType<ConfiguredDocumentClass<typeof Item>>> & {\n        type: 'Item';\n      };\n\n      interface Folder {\n        type: 'Folder';\n        documentName: foundry.CONST.FolderEntityTypes;\n        id: string;\n      }\n    }\n\n    interface Options extends DocumentSheet.Options {\n      token?: InstanceType<ConfiguredSheetClass<typeof foundry.documents.BaseToken>> | null;\n    }\n  }\n}\n"]},46275:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\index.d.ts","import './activeEffectConfig';\nimport './actorSheet';\nimport './itemSheet';\nimport './journalSheet';\nimport './macroConfig';\nimport './permissionControl';\nimport './playlistConfig';\nimport './rollTableConfig';\nimport './sceneConfig';\nimport './userConfig';\n"]},75798:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\itemSheet.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The Application responsible for displaying and editing a single Item document.\n   *\n   * @param item    - The Item instance being displayed within the sheet.\n   * @param options - Additional application configuration options.\n   *\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class ItemSheet<\n    Options extends ItemSheet.Options = ItemSheet.Options,\n    Data extends object = ItemSheet.Data<Options>\n  > extends DocumentSheet<Options, Data, InstanceType<ConfiguredDocumentClass<typeof Item>>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   template: \"templates/sheets/item-sheet.html\",\n     *   width: 500,\n     *   closeOnSubmit: false,\n     *   submitOnClose: true,\n     *   submitOnChange: true,\n     *   resizable: true,\n     *   baseApplication: \"ItemSheet\",\n     *   id: \"item\"\n     * ```\n     */\n    static get defaultOptions(): ItemSheet.Options;\n\n    /** @override */\n    get id(): string;\n\n    /** @override */\n    get title(): string;\n\n    /**\n     * A convenience reference to the Item entity\n     */\n    get item(): InstanceType<ConfiguredDocumentClass<typeof Item>>;\n\n    /**\n     * The Actor instance which owns this item. This may be null if the item is\n     * unowned.\n     */\n    get actor(): this['item']['actor'];\n\n    /**\n     * @param options - (unused)\n     * @override\n     *\n     * @remarks The implementation in {@link ItemSheet} doesn't return a\n     * `Promise` but the return type includes it to allow extending classes to\n     * do that.\n     */\n    getData(options?: Application.RenderOptions): Data | Promise<Data>;\n\n    /** @override */\n    protected _getHeaderButtons(): Application.HeaderButton[];\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Handle requests to configure the default sheet used by this Item\n     */\n    protected _onConfigureSheet(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle changing the item image\n     */\n    protected _onEditImage(event: JQuery.ClickEvent): ReturnType<FilePicker['browse']>;\n  }\n\n  namespace ItemSheet {\n    /**\n     * @typeParam Options - the type of the options object\n     */\n    interface Data<Options extends ItemSheet.Options = ItemSheet.Options>\n      extends DocumentSheet.Data<InstanceType<ConfiguredDocumentClass<typeof Item>>, Options> {\n      item: this['document'];\n    }\n\n    type Options = DocumentSheet.Options;\n  }\n}\n"]},15785:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\journalSheet.d.ts","// TODO: Update this class once the `DocumentSheet` class has been updated to use `foundry.abstract.Document`s!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The JournalEntry Configuration Sheet\n * @typeParam P - the type of the options object\n * @typeParam D - The data structure used to render the handlebars template.\n * @typeParam O - the type of the Entity which should be managed by this form sheet\n */\ndeclare class JournalSheet<\n  P extends JournalSheet.Options = JournalSheet.Options,\n  D extends object = DocumentSheet.Data<JournalEntry>,\n  O extends JournalEntry = D extends DocumentSheet.Data<infer T> ? T : JournalEntry\n> extends DocumentSheet<P, D, O> {\n  /**\n   * @param entity  - The JournalEntry instance which is being edited\n   * @param options - JournalSheet options\n   */\n  constructor(entity: O, options?: Partial<P>);\n\n  protected _sheetMode: JournalSheet.SheetMode | null;\n\n  /** @override */\n  static get defaultOptions(): JournalSheet.Options;\n\n  /** @override */\n  get id(): string;\n\n  /** @override */\n  get template(): string;\n\n  /** @override */\n  get title(): string;\n\n  /** @override */\n  getData(options?: Application.RenderOptions): Promise<D> | D;\n\n  /**\n   * Guess the default view mode for the sheet based on the player's permissions to the Entry\n   */\n  protected _inferDefaultMode(): JournalSheet.SheetMode | null;\n\n  /** @override */\n  protected _render(force?: boolean, options?: JournalSheet.RenderOptions): Promise<void>;\n\n  /** @override */\n  protected _getHeaderButtons(): Application.HeaderButton[];\n\n  /** @override */\n  protected _updateObject(event: Event, formData: object): Promise<O>;\n\n  /**\n   * Handle requests to switch the rendered mode of the Journal Entry sheet\n   * Save the form before triggering the show request, in case content has changed\n   */\n  protected _onSwapMode(event: Event, mode: JournalSheet.SheetMode): Promise<void>;\n\n  /**\n   * Handle requests to show the referenced Journal Entry to other Users\n   * Save the form before triggering the show request, in case content has changed\n   */\n  protected _onShowPlayers(event: Event): Promise<void>;\n}\n\ndeclare namespace JournalSheet {\n  interface RenderOptions extends Application.RenderOptions {\n    sheetMode?: SheetMode | null;\n  }\n\n  interface Options extends DocumentSheet.Options {\n    /**\n     * @defaultValue `['sheet', 'journal-sheet']`\n     */\n    classes: string[];\n    /**\n     * @defaultValue `720`\n     */\n    width: number;\n    /**\n     * @defaultValue `800`\n     */\n    height: number;\n    /**\n     * @defaultValue `true`\n     */\n    resizable: boolean;\n    /**\n     * @defaultValue `false`\n     */\n    closeOnSubmit: boolean;\n    /**\n     * @defaultValue `true`\n     */\n    submitOnClose: boolean;\n    /**\n     * @defaultValue {@link ENTITY_PERMISSIONS.NONE}\n     */\n    viewPermission: foundry.CONST.EntityPermission;\n    sheetMode?: SheetMode | null;\n  }\n\n  interface Data<O extends JournalEntry = JournalEntry> extends DocumentSheet.Data<O> {\n    image: string;\n    folders: Folder[];\n  }\n\n  type SheetMode = 'text' | 'image';\n}\n"]},26235:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\macroConfig.d.ts","/**\n * A Macro configuration sheet\n *\n * @see {@link Macro} The Macro Entity which is being configured\n */\n// TODO: Remove this when `DocumentSheet` has been updated to use `foundry.abstract.Document`s instead of entities!!!\n// eslint-disable-next-line\n// @ts-ignore\ndeclare class MacroConfig extends DocumentSheet<DocumentSheet.Options, MacroConfig.Data, Macro> {\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   classes: [\"sheet\", \"macro-sheet\"],\n   *   template: \"templates/sheets/macro-config.html\",\n   *   width: 560,\n   *   height: 480,\n   *   resizable: true\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof DocumentSheet['defaultOptions'];\n\n  /**\n   * @override\n   */\n  get id(): string;\n\n  /**\n   * @override\n   */\n  getData(): MacroConfig.Data;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle changing the actor profile image by opening a FilePicker\n   */\n  protected _onEditImage(event: JQuery.ClickEvent): ReturnType<FilePicker['browse']>;\n\n  /**\n   * Save and execute the macro using the button on the configuration sheet\n   * @param event - The originating click event\n   */\n  protected _onExecute(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * @override\n   */\n  protected _updateObject(event: Event, formData: MacroConfig.FormData): Promise<Macro>;\n}\n\ndeclare namespace MacroConfig {\n  interface Data extends DocumentSheet.Data {\n    macroTypes: foundry.utils.Duplicated<Game['system']['entityTypes']['Macro']>;\n    macroScopes: typeof foundry.CONST['MACRO_SCOPES'];\n  }\n\n  type FormData = {\n    command: string;\n    img: string;\n    name: string;\n    type: ValueOf<typeof CONST.MACRO_TYPES>;\n  };\n}\n"]},44419:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\permissionControl.d.ts","/**\n * A generic application for configuring permissions for various Entity types\n * @typeParam P - the type of the options object\n * @typeParam E - the type of the entity\n */\ndeclare class PermissionControl<\n  P extends DocumentSheet.Options = DocumentSheet.Options,\n  E extends foundry.abstract.Document<any, any> = foundry.abstract.Document<any, any>\n> extends DocumentSheet<P, PermissionControl.Data<E>, E> {\n  /**\n   * @param entity  - The Entity instance for which permissions are being configured.\n   * @param options - Application options.\n   */\n  constructor(entity: E, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"permission\",\n   *   template: \"templates/apps/permission.html\",\n   *   width: 400\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof DocumentSheet['defaultOptions'];\n\n  /** @override */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): PermissionControl.Data<E>;\n\n  /** @override */\n  protected _updateObject(event: Event, formData: PermissionControl.FormData): Promise<E>;\n}\n\ndeclare namespace PermissionControl {\n  interface Data<E extends foundry.abstract.Document<any, any>> extends DocumentSheet.Data {\n    entity: E;\n    currentDefault: number | '-1';\n    instructions: string;\n    defaultLevels: E extends Folder ? Data.FolderDefaultLevels : Data.EntityDefaultLevels;\n    playerLevels: E extends Folder ? Data.FolderPlayerLevels : Data.EntityPlayerLevels;\n    isFolder: E extends Folder ? true : false;\n    users: { user: User; level: number | '-1' }[];\n  }\n\n  namespace Data {\n    type EntityDefaultLevels = Omit<EntityPlayerLevels, '-1'>;\n\n    type EntityPlayerLevels = Record<foundry.CONST.EntityPermission, string> & { '-1': string };\n\n    type FolderDefaultLevels = Omit<FolderPlayerLevels, '-2'>;\n\n    type FolderPlayerLevels = Record<foundry.CONST.EntityPermission, string> & { '-2': string; '-1': string };\n  }\n\n  interface FormData {\n    [userId: string]: FormData.InputPermissionLevel;\n    default: FormData.InputPermissionLevel;\n  }\n\n  namespace FormData {\n    // TODO: find a way to get this dynamically from ENTITY_PERMISSIONS\n    type InputPermissionLevel = '-1' | '0' | '1' | '2' | '3';\n  }\n}\n"]},74359:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\playlistConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * Playlist Configuration Sheet\n */\ndeclare class PlaylistConfig extends DocumentSheet<DocumentSheet.Options, PlaylistConfig.Data, Playlist> {\n  /**\n   * @defaultValue\n   * ```typescript\n   * const options = super.defaultOptions;\n   * options.id = \"playlist-config\";\n   * options.template = \"templates/playlist/edit-playlist.html\";\n   * options.width = 360;\n   * ```\n   */\n  static get defaultOptions(): typeof DocumentSheet['defaultOptions'];\n\n  /**\n   * @override\n   */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): PlaylistConfig.Data;\n}\n\ndeclare namespace PlaylistConfig {\n  interface Data extends foundry.utils.Duplicated<PlaylistConfig['object']['data']> {\n    modes: Record<string, ValueOf<typeof foundry.CONST['PLAYLIST_MODES']>>;\n  }\n}\n"]},14434:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\rollTableConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The RollTable configuration sheet\n * @typeParam P - the type of the options object\n */\ndeclare class RollTableConfig<P extends DocumentSheet.Options = DocumentSheet.Options> extends DocumentSheet<\n  P,\n  RollTableConfig.Data,\n  RollTable\n> {\n  /**\n   * @param table   - The rollable table entity being configured\n   * @param options - Additional application rendering options\n   */\n  constructor(table: RollTable, options?: Partial<P>);\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   classes: [\"sheet\", \"roll-table-config\"],\n   *   template: \"templates/sheets/roll-table-config.html\",\n   *   width: 720,\n   *   height: \"auto\",\n   *   closeOnSubmit: false,\n   *   viewPermission: ENTITY_PERMISSIONS.OBSERVER,\n   *   scrollY: [\"ol.table-results\"],\n   *   dragDrop: [{dragSelector: null, dropSelector: null}]\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof DocumentSheet['defaultOptions'];\n\n  /**\n   * @override\n   */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): RollTableConfig.Data;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle creating a TableResult in the RollTable entity\n   * @param event      - The originating mouse event\n   * @param resultData - An optional object of result data to use\n   */\n  protected _onCreateResult(event: JQuery.ClickEvent | DragEvent, resultData?: object): Promise<RollTable.Result>;\n\n  /**\n   * Submit the entire form when a table result type is changed, in case there are other active changes\n   */\n  protected _onChangeResultType(event: JQuery.ClickEvent): ReturnType<RollTableConfig['_onSubmit']>;\n\n  /**\n   * Handle deleting a TableResult from the RollTable entity\n   */\n  protected _onDeleteResult(event: JQuery.ClickEvent): Promise<RollTable.Result>;\n\n  /**\n   * @override\n   */\n  protected _onDrop(event: DragEvent): ReturnType<RollTableConfig['_onCreateResult']>;\n\n  /**\n   * Handle changing the actor profile image by opening a FilePicker\n   */\n  protected _onEditImage(event: JQuery.ClickEvent): ReturnType<FilePicker['browse']>;\n\n  /**\n   * Handle a button click to re-normalize dice result ranges across all RollTable results\n   */\n  protected _onNormalizeResults(event: JQuery.ClickEvent): Promise<RollTable>;\n\n  /**\n   * Handle toggling the drawn status of the result in the table\n   */\n  protected _onLockResult(event: JQuery.ClickEvent): Promise<RollTable.Result>;\n\n  /**\n   * Reset the Table to it's original composition with all options unlocked\n   */\n  protected _onResetTable(event: JQuery.ClickEvent): Promise<RollTable.Result>;\n\n  /**\n   * Handle drawing a result from the RollTable\n   */\n  protected _onRollTable(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Configure the update object workflow for the Roll Table configuration sheet\n   * Additional logic is needed here to reconstruct the results array from the editable fields on the sheet\n   * @param event    - The form submission event\n   * @param formData - The validated FormData translated into an Object for submission\n   */\n  protected _updateObject(event: Event, formData: RollTableConfig.FormData): Promise<RollTable>;\n\n  /**\n   * Display a roulette style animation when a Roll Table result is drawn from the sheet\n   * @param results - An Array of drawn table results to highlight\n   */\n  protected _animateRoll(results: RollTable.Result[]): Promise<void>;\n\n  /**\n   * Animate a \"roulette\" through the table until arriving at the final loop and a drawn result\n   */\n  protected _animateRoulette(\n    ol: HTMLOListElement,\n    drawnIds: string[],\n    nLoops: number,\n    animTime: number,\n    animOffset: number\n  ): Promise<void>;\n\n  /**\n   * Display a flashing animation on the selected result to emphasize the draw\n   * @param item - The HTML <li> item of the winning result\n   */\n  protected _flashResult(item: HTMLElement): Promise<void>;\n}\n\ndeclare namespace RollTableConfig {\n  interface Data extends DocumentSheet.Data<RollTable> {\n    results: RollTable.Result;\n    resultTypes: {\n      [Key in keyof typeof foundry.CONST['TABLE_RESULT_TYPES'] as typeof foundry.CONST['TABLE_RESULT_TYPES'][Key]]: Key;\n    };\n    entityTypes: typeof foundry.CONST['COMPENDIUM_ENTITY_TYPES'];\n    compendiumPacks: string[];\n  }\n\n  interface FormData\n    extends Pick<RollTable.Data, 'description' | 'displayRoll' | 'formula' | 'img' | 'name' | 'replacement'> {\n    [index: number]: FormDataResult;\n  }\n\n  interface FormDataResult\n    extends Pick<RollTable.Result, '_id' | 'drawn' | 'img' | 'resultId' | 'text' | 'type' | 'weight'> {\n    rangeH: RollTable.Result['range'][1];\n    rangeL: RollTable.Result['range'][0];\n  }\n}\n"]},88671:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\sceneConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A Scene configuration sheet\n * @see {@link Scene} The Scene Entity which is being configured\n */\ndeclare class SceneConfig extends DocumentSheet<DocumentSheet.Options, SceneConfig.Data, Scene> {\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   classes: [\"sheet\", \"scene-sheet\"],\n   *   template: \"templates/scene/config.html\",\n   *   width: 680,\n   *   height: \"auto\"\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof DocumentSheet['defaultOptions'];\n\n  /**\n   * @override\n   */\n  get id(): string;\n\n  /**\n   * @override\n   */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): SceneConfig.Data;\n\n  /**\n   * Get an enumeration of the available grid types which can be applied to this Scene\n   */\n  protected static _getGridTypes(): Record<foundry.CONST.GridType, string>;\n\n  /**\n   * Get the available weather effect types which can be applied to this Scene\n   */\n  protected _getWeatherTypes(): Record<string, string>;\n\n  /**\n   * Get the alphabetized entities which can be chosen as a configuration for the scene\n   */\n  protected _getEntities(collection: EntityCollection): { _id: string; name: string }[];\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Capture the current Scene position and zoom level as the initial view in the Scene config\n   * @param event - The originating click event\n   */\n  protected _onCapturePosition(event: JQuery.ClickEvent): void;\n\n  /**\n   * @override\n   */\n  protected _onChangeRange(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Handle click events to open the grid configuration application\n   * @param event - The originating click event\n   */\n  protected _onGridConfig(event: JQuery.ClickEvent): SceneConfig['minimize'];\n\n  /**\n   * @override\n   */\n  protected _updateObject(event: Event, formData: SceneConfig.FormData): Promise<Scene>;\n}\n\ndeclare namespace SceneConfig {\n  interface Data extends DocumentSheet.Data {\n    gridTypes: ReturnType<typeof SceneConfig['_getGridTypes']>;\n    weatherTypes: ReturnType<SceneConfig['_getWeatherTypes']>;\n    playlists: ReturnType<SceneConfig['_getEntities']>;\n    journals: ReturnType<SceneConfig['_getEntities']>;\n    hasGlobalThreshold: boolean;\n    document: DocumentSheet.Data['document'] & {\n      /**\n       * @defaultValue `0`\n       */\n      globalLightThreshold: number;\n    };\n  }\n\n  type FormData = {\n    backgroundColor: Scene.Data['backgroundColor'];\n    darkness: Scene.Data['darkness'];\n    fogExploration: Scene.Data['fogExploration'];\n    globalLight: Scene.Data['globalLight'];\n    globalLightThreshold: Scene.Data['globalLightThreshold'];\n    grid: GridConfig.FormData['grid'];\n    gridAlpha: Scene.Data['gridAlpha'];\n    gridColor: Scene.Data['gridColor'];\n    gridDistance: Scene.Data['gridDistance'] | null;\n    gridType: foundry.CONST.GridType;\n    gridUnits: Scene.Data['gridUnits'];\n    hasGlobalThreshold: boolean;\n    height: Scene.Data['height'] | null;\n    img: Scene.Data['img'];\n    'initial.scale': number | null;\n    'initial.x': number | null;\n    'initial.y': number | null;\n    journal: Scene.Data['journal'];\n    name: string;\n    navName: Scene.Data['navName'];\n    navigation: Scene.Data['navigation'];\n    padding: Scene.Data['padding'];\n    'permission.default': Scene.Data['permission'];\n    playlist: Scene.Data['playlist'];\n    shiftX: GridConfig.FormData['shiftX'];\n    shiftY: GridConfig.FormData['shiftY'];\n    tokenVision: Scene.Data['tokenVision'];\n    weather: Scene.Data['weather'];\n    width: Scene.Data['width'] | null;\n  };\n}\n"]},28026:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\userConfig.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The Application responsible for configuring a single User document.\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class UserConfig<\n    Options extends DocumentSheet.Options = UserConfig.Options,\n    Data extends object = UserConfig.Data<Options>\n  > extends DocumentSheet<Options, Data, InstanceType<ConfiguredDocumentClass<typeof User>>> {\n    /**\n     * @override\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   classes: [\"sheet\", \"user-config\"],\n     *   template: \"templates/user/user-config.html\",\n     *   width: 400,\n     *   height: \"auto\"\n     * })\n     * ```\n     */\n    static get defaultOptions(): UserConfig.Options;\n\n    /** @override */\n    get title(): string;\n\n    /** @override */\n    getData(options?: Application.RenderOptions): Data;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Handle changing the user avatar image by opening a FilePicker\n     */\n    protected _onEditAvatar(event: JQuery.ClickEvent): ReturnType<FilePicker['browse']>;\n\n    /**\n     * @remarks This method not overridden in foundry but added to provide types when overriding the UserConfig.\n     */\n    protected _updateObject(event: Event, formData: FormData): ReturnType<User['update']>;\n  }\n\n  namespace UserConfig {\n    interface Data<Options extends DocumentSheet.Options> {\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>;\n      actors: InstanceType<ConfiguredDocumentClass<typeof Actor>>[];\n      options: Options;\n    }\n\n    interface Options extends DocumentSheet.Options {\n      /**\n       * @defaultValue `[\"sheet\", \"user-config\"]`\n       */\n      classes: DocumentSheet.Options['classes'];\n\n      /**\n       * @defaultValue `\"templates/user/user-config.html\"`\n       */\n      template: DocumentSheet.Options['template'];\n\n      /**\n       * @defaultValue `400`\n       */\n      width: DocumentSheet.Options['width'];\n\n      /**\n       * @defaultValue `auto`\n       */\n      height: DocumentSheet.Options['height'];\n    }\n  }\n}\n\ntype FormData = Pick<foundry.data.UserData, 'avatar' | 'character' | 'color'>;\n"]},30632:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\drawingConfig.d.ts","/**\n * Configuration sheet for the Drawing object\n * @typeParam P - the type of the options object\n */\ndeclare class DrawingConfig<P extends DrawingConfig.Options = DrawingConfig.Options> extends FormApplication<\n  P,\n  DrawingConfig.Data,\n  Drawing\n> {\n  /**\n   * @param drawing - The Drawing object being configured\n   * @param options - Additional application rendering options\n   */\n  constructor(drawing: Drawing, options?: Partial<P>);\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"drawing-config\",\n   *   classes: [\"sheet\"],\n   *   template: \"templates/scene/drawing-config.html\",\n   *   width: 480,\n   *   height: 360,\n   *   configureDefault: false,\n   *   tabs: [{navSelector: \".tabs\", contentSelector: \"form\", initial: \"position\"}]\n   * });\n   * ```\n   */\n  static get defaultOptions(): DrawingConfig.Options;\n\n  /** @override */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): DrawingConfig.Data;\n\n  /**\n   * Get the names and labels of fill type choices which can be applied\n   */\n  protected static _getFillTypes(): DrawingConfig.FillTypes;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject<F extends DrawingConfig.FormData>(\n    event: Event,\n    formData: F\n  ): Promise<this['options']['configureDefault'] extends true ? F : Drawing>;\n\n  /** @override */\n  close(options?: FormApplication.CloseOptions): Promise<void>;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Reset the user Drawing configuration settings to their default values\n   */\n  protected _onResetDefaults(event: JQuery.ClickEvent): void;\n}\n\ndeclare namespace DrawingConfig {\n  interface Data {\n    author: string;\n    isDefault: Options['configureDefault'];\n    fillTypes: ReturnType<typeof DrawingConfig['_getFillTypes']>;\n    fontFamilies: Record<typeof CONFIG['fontFamilies'][number], typeof CONFIG['fontFamilies'][number]>;\n    object: DrawingConfig['object']['data'];\n    options: DrawingConfig['options'];\n    submitText: string;\n  }\n\n  type FillTypes = {\n    [Key in keyof typeof foundry.CONST['DRAWING_FILL_TYPES'] as typeof foundry.CONST['DRAWING_FILL_TYPES'][Key]]: `DRAWING.FillType${Titlecase<Key>}`;\n  };\n\n  interface FormData {\n    bezierFactor: foundry.data.DrawingData['_source']['bezierFactor'];\n    fillAlpha: foundry.data.DrawingData['_source']['fillAlpha'];\n    fillColor: foundry.data.DrawingData['_source']['fillColor'];\n    fillType: foundry.data.DrawingData['_source']['fillType'];\n    fontFamily: foundry.data.DrawingData['_source']['fontFamily'];\n    fontSize: foundry.data.DrawingData['_source']['fontSize'] | null;\n    height: foundry.data.DrawingData['_source']['height'] | null;\n    rotation: foundry.data.DrawingData['_source']['rotation'] | null;\n    strokeAlpha: foundry.data.DrawingData['_source']['strokeAlpha'];\n    strokeColor: foundry.data.DrawingData['_source']['strokeColor'];\n    strokeWidth: foundry.data.DrawingData['_source']['strokeWidth'] | null;\n    text: string;\n    textAlpha: foundry.data.DrawingData['_source']['textAlpha'];\n    textColor: foundry.data.DrawingData['_source']['textColor'];\n    texture: string;\n    width: foundry.data.DrawingData['_source']['width'] | null;\n    x: foundry.data.DrawingData['_source']['x'] | null;\n    y: foundry.data.DrawingData['_source']['y'] | null;\n    z: foundry.data.DrawingData['_source']['z'] | null;\n  }\n\n  interface Options extends FormApplication.Options {\n    configureDefault: boolean;\n\n    /**\n     * Configure a preview version of the Drawing which is not yet saved\n     */\n    preview?: boolean;\n  }\n}\n"]},69603:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\entitySheetConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * Entity Sheet Configuration Application\n * @typeParam P - the type of the options object\n * @typeParam E - the type of the Entity, this sheet is used to configure\n */\ndeclare class EntitySheetConfig<\n  P extends FormApplication.Options = FormApplication.Options,\n  E extends Entity = Entity\n> extends FormApplication<P, EntitySheetConfig.Data, E> {\n  /**\n   * @param entity  - The Entity object for which the sheet is being configured\n   * @param options - Additional Application options\n   */\n  constructor(entity: E, options?: Partial<P>);\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * const options = super.defaultOptions;\n   * options.id = \"sheet-config\";\n   * options.template = \"templates/sheets/sheet-config.html\";\n   * options.width = 400;\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * Add the Entity name into the window title\n   */\n  get title(): string;\n\n  /**\n   * Construct and return the data object used to render the HTML template for this form application.\n   * @param options - (unused)\n   */\n  getData(options?: Application.RenderOptions): EntitySheetConfig.Data<E>;\n\n  /**\n   * This method is called upon form submission after form data is validated\n   * @param event    - The initial triggering submission event\n   * @param formData - The object of validated form data with which to update the object\n   */\n  protected _updateObject(event: Event, formData: EntitySheetConfig.FormData): Promise<void>;\n\n  /**\n   * Initialize the configured Sheet preferences for Entities which support dynamic Sheet assignment\n   * Create the configuration structure for supported entities\n   * Process any pending sheet registrations\n   * Update the default values from settings data\n   */\n  static initializeSheets(): void;\n\n  /**\n   * Register a sheet class as a candidate which can be used to display entities of a given type\n   * @param entityClass - The Entity for which to register a new Sheet option\n   * @param scope       - Provide a unique namespace scope for this sheet\n   * @param sheetClass  - A defined Application class used to render the sheet\n   * @param label       - A human readable label for the sheet name, which will be localized\n   * @param types       - An array of entity types for which this sheet should be used\n   *                      (default: `[]`)\n   * @param makeDefault - Whether to make this sheet the default for provided types\n   *                      (default: `false`)\n   */\n  static registerSheet(\n    entityClass: ConstructorOf<Entity>,\n    scope: string,\n    sheetClass: ConstructorOf<FormApplication>,\n    { label, types, makeDefault }?: { label?: string; types?: string[]; makeDefault?: boolean }\n  ): void;\n\n  protected static _registerSheet({\n    entityClass,\n    id,\n    label,\n    sheetClass,\n    types,\n    makeDefault\n  }: Exclude<EntitySheetConfig.Config, 'action'>): void;\n\n  /**\n   * Unregister a sheet class, removing it from the list of available Applications to use for an Entity type\n   * @param entityClass - The Entity for which to register a new Sheet option\n   * @param scope       - Provide a unique namespace scope for this sheet\n   * @param sheetClass  - A defined Application class used to render the sheet\n   * @param types       - An Array of types for which this sheet should be removed\n   */\n  static unregisterSheet(\n    entityClass: ConstructorOf<Entity>,\n    scope: string,\n    sheetClass: ConstructorOf<FormApplication>,\n    { types }?: { types?: string[] }\n  ): void;\n\n  protected static _unregisterSheet({\n    entityClass,\n    id,\n    types\n  }: Pick<EntitySheetConfig.Config, 'entityClass' | 'id' | 'types'>): void;\n\n  /**\n   * @typeParam T - the string array, passed as the types parameter\n   */\n  protected static _getEntityTypes<T extends string[]>(entityClass: any, types: T): T;\n  protected static _getEntityTypes(entityClass: ConstructorOf<Entity>): string[];\n\n  /**\n   * Update the currently default Sheets using a new core world setting\n   */\n  protected static _updateDefaultSheets(setting?: Record<'Actor' | 'Item', Record<string, string>>): void;\n\n  protected _pending: EntitySheetConfig.Config[];\n}\n\ndeclare namespace EntitySheetConfig {\n  interface Config {\n    action: 'register' | 'unregister';\n    entityClass: ConstructorOf<Entity>;\n    id: string;\n    label: string;\n    sheetClass: ConstructorOf<FormApplication>;\n    types: string[];\n    makeDefault: boolean;\n  }\n\n  /**\n   * @typeParam P - the type of the options object\n   * @typeParam E - the type of the entity\n   */\n  interface Data<E extends Entity = Entity, P extends FormApplication.Options = FormApplication.Options> {\n    entityName: EntitySheetConfig<P, E>['object']['entity'];\n    isGM: User['isGM'];\n    object: foundry.utils.Duplicated<EntitySheetConfig<P, E>['object']['data']>;\n    options: EntitySheetConfig<P, E>['options'];\n    sheetClass: ReturnType<E['getFlag']> | '';\n    sheetClasses: Record<SheetClass['id'], SheetClass['label']>;\n    defaultClass: SheetClass['id'] | null;\n    blankLabel: ReturnType<Localization['localize']>;\n  }\n\n  type FormData = Pick<Data, 'defaultClass' | 'sheetClass'>;\n\n  interface SheetClass {\n    id: string | number;\n    cls?: ConstructorOf<FormApplication>;\n    label: string;\n    default: boolean;\n  }\n\n  type SheetClasses = Record<string, Record<string, SheetClass>>;\n}\n"]},87162:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\folderConfig.d.ts","// TODO: Remove this when updating this to 0.8.x!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * Edit a folder, configuring its name and appearance\n */\ndeclare class FolderConfig extends FormApplication<FormApplication.Options, FolderConfig.Data, Folder> {\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   classes: [\"sheet\", \"folder-edit\"],\n   *   template: \"templates/sidebar/folder-edit.html\",\n   *   width: 360\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @override\n   */\n  get id(): string;\n\n  /**\n   * @override\n   */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): Promise<FolderConfig.Data>;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: FolderConfig.FormData): ReturnType<Folder['update']>;\n}\n\ndeclare namespace FolderConfig {\n  interface Data {\n    folder: Folder.Data;\n    sortingModes: {\n      a: 'FOLDER.SortAlphabetical';\n      m: 'FOLDER.SortManual';\n    };\n    submitText: string;\n  }\n\n  type FormData = Pick<Folder.Data, 'color' | 'name' | 'sorting' | 'type'> & { parent: string };\n}\n"]},26445:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\gridConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A tool for fine tuning the grid in a Scene\n * @typeParam P - the type of the options object\n */\ndeclare class GridConfig<P extends FormApplication.Options = FormApplication.Options> extends FormApplication<\n  P,\n  GridConfig.Data,\n  Scene\n> {\n  constructor(scene: Scene, sheet: GridConfig['sheet'], options?: Partial<P>);\n\n  /**\n   * Track the Scene Configuration sheet reference\n   */\n  sheet: SceneConfig;\n\n  /**\n   * The counter-factual dimensions being evaluated\n   * @defaultValue `{}`\n   */\n  protected _dimensions: Canvas.Dimensions | {};\n\n  /**\n   * A reference to the bound key handler function so it can be removed\n   * @defaultValue `null`\n   */\n  protected _keyHandler: ((event: KeyboardEvent) => void) | null;\n\n  /**\n   * A reference to the bound mousewheel handler function so it can be removed\n   * @defaultValue `null`\n   */\n  protected _wheelHandler: ((event: WheelEvent) => void) | null;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"grid-config\",\n   *   template: \"templates/scene/grid-config.html\",\n   *   title: game.i18n.localize(\"SCENES.GridConfigTool\"),\n   *   width: 480,\n   *   height: \"auto\",\n   *   closeOnSubmit: true,\n   *   submitOnChange: true\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @override\n   */\n  getData(options?: Application.RenderOptions): GridConfig.Data;\n\n  /**\n   * @override\n   */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * @override\n   */\n  close(options?: FormApplication.CloseOptions): ReturnType<FormApplication['close']>;\n\n  /**\n   * Handle resetting the form and re-drawing back to the original dimensions\n   * @param event - The original keydown event\n   */\n  protected _onKeyDown(event: KeyboardEvent): void;\n\n  /**\n   * Handle resetting the form and re-drawing back to the original dimensions\n   * @param event - The original wheel event\n   */\n  protected _onWheel(event: WheelEvent): void;\n\n  /**\n   * Handle resetting the form and re-drawing back to the original dimensions\n   * @param event - The original click event\n   */\n  protected _onReset(event: JQuery.ClickEvent): void;\n\n  /**\n   * Scale the background size relative to the grid size\n   * @param delta - The directional change in background size\n   */\n  protected _scaleBackgroundSize(delta: number): void;\n\n  /**\n   * Scale the grid size relative to the background image.\n   * When scaling the grid size in this way, constrain the allowed values between 50px and 300px.\n   * @param delta - The grid size in pixels\n   */\n  protected _scaleGridSize(delta: number): void;\n\n  /**\n   * Shift the background image relative to the grid layer\n   * @param deltaX - The number of pixels to shift in the x-direction\n   *                 (default: `0`)\n   * @param deltaY - The number of pixels to shift in the y-direction\n   *                 (default: `0`)\n   */\n  protected _shiftBackground({\n    deltaX,\n    deltaY\n  }?: {\n    deltaX?: number;\n    deltaY?: number;\n  }): ReturnType<GridConfig['_refresh']>;\n\n  /**\n   * Temporarily refresh the display of the BackgroundLayer and GridLayer for the new pending dimensions\n   * @param background - Refresh the background display?\n   *                     (default: `false`)\n   * @param grid       - Refresh the grid display?\n   *                     (default: `false`)\n   */\n  protected _refresh({ background, grid }?: { background?: boolean; grid?: boolean }): void;\n\n  /**\n   * @override\n   */\n  protected _onChangeInput(event: JQuery.ChangeEvent): void;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: GridConfig.FormData): ReturnType<Scene['update']>;\n}\n\ndeclare namespace GridConfig {\n  interface Data {\n    gridTypes: ReturnType<typeof SceneConfig['_getGridTypes']>;\n    scale: number;\n    scene: Scene.Data;\n  }\n\n  type FormData = Pick<Scene.Data, 'gridType'> & {\n    grid: Scene.Data['grid'] | null;\n    scale: number | null;\n    shiftX: Scene.Data['shiftX'] | null;\n    shiftY: Scene.Data['shiftY'] | null;\n  };\n}\n"]},25437:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\imagePopout.d.ts","/**\n * An Image Popout Application which features a single image in a lightbox style frame.\n * This popout can also be used as a form, allowing the user to edit an image which is being used.\n * Furthermore, this application allows for sharing the display of an image with other connected players.\n *\n * @example\n * ```typescript\n * // Construct the Application instance\n * const ip = new ImagePopout(\"path/to/image.jpg\", {\n *   title: \"My Featured Image\",\n *   shareable: true,\n *   entity: game.actors.getName(\"My Hero\")\n * });\n *\n * // Display the image popout\n * ip.render(true);\n *\n * // Share the image with other connected players\n * ip.share();\n * ```\n */\ndeclare class ImagePopout extends FormApplication<ImagePopout.Options, ImagePopout.Data, string> {\n  protected _related: Entity | object | null;\n\n  /** @override */\n  static get defaultOptions(): ImagePopout.Options;\n\n  /** @override */\n  get title(): string;\n\n  /** @override */\n  getData(options?: Application.RenderOptions): Promise<ImagePopout.Data>;\n\n  /**\n   * Test whether the title of the image popout should be visible to the user\n   */\n  isTitleVisible(): boolean;\n\n  /**\n   * Provide a reference to the Entity referenced by this popout, if one exists\n   */\n  getRelatedObject(): Promise<Entity | object | null>;\n\n  /** @override */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /** @override */\n  protected _getHeaderButtons(): Application.HeaderButton[];\n\n  /**\n   * Determine the correct position and dimensions for the displayed image\n   */\n  protected static getPosition(img: string): Application.Position;\n\n  /**\n   * Determine the Image dimensions given a certain path\n   */\n  static getImageSize(path: string): Promise<[width: number, height: number]>;\n\n  /**\n   * Share the displayed image with other connected Users\n   */\n  shareImage(): void;\n\n  /**\n   * Handle a received request to display an image.\n   */\n  protected static _handleShareImage({\n    image,\n    title,\n    uuid\n  }: {\n    image: string;\n    title: string;\n    uuid: string;\n  }): ImagePopout;\n\n  /**\n   * @override\n   * @remarks Not implemented for ImagePopout\n   */\n  protected _updateObject(event: Event, formData?: object): never;\n}\n\ndeclare namespace ImagePopout {\n  interface Options extends FormApplication.Options {\n    /**\n     * @defaultValue `'templates/apps/image-popout.html'`\n     */\n    template: string;\n    /**\n     * @defaultValue `['image-popout', 'dark']`\n     */\n    classes: string[];\n    /**\n     * @defaultValue `false`\n     */\n    editable: boolean;\n    /**\n     * @defaultValue `true`\n     */\n    resizable: boolean;\n    /**\n     * @defaultValue `false`\n     */\n    shareable: boolean;\n    /**\n     * @defaultValue `null`\n     */\n    uuid: string | null;\n  }\n\n  interface Data<T extends string = string> extends FormApplication.Data<T> {\n    image: string;\n    showTitle: boolean;\n  }\n}\n"]},72543:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\index.d.ts","import './ambientSoundConfig';\nimport './avConfig';\nimport './combatTrackerConfig';\nimport './combatantConfig';\nimport './documentSheet';\nimport './documentSheets';\nimport './drawingConfig';\nimport './entitySheetConfig';\nimport './folderConfig';\nimport './gridConfig';\nimport './imagePopout';\nimport './lightConfig';\nimport './measuredTemplateConfig';\nimport './moduleManagement';\nimport './noteConfig';\nimport './permissionConfig';\nimport './playlistSoundConfig';\nimport './settingsConfig';\nimport './tileConfig';\nimport './tokenConfig';\nimport './wallConfig';\nimport './worldConfig';\n"]},91829:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\lightConfig.d.ts","/**\n * Light Source Configuration Sheet\n * @typeParam P - the type of the options object\n */\ndeclare class LightConfig<P extends FormApplication.Options = FormApplication.Options> extends FormApplication<\n  P,\n  LightConfig.Data,\n  AmbientLight\n> {\n  /**\n   * @param light   - The AmbientLight object for which settings are being configured\n   * @param options - LightConfig ui options (see Application)\n   */\n  constructor(light: AmbientLight, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   classes: [\"sheet\", \"light-sheet\"],\n   *   title: \"LIGHT.ConfigTitle\",\n   *   template: \"templates/scene/light-config.html\",\n   *   width: 480\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): LightConfig.Data;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /** @override */\n  close(options?: Application.CloseOptions): Promise<void>;\n\n  /**\n   * Preview the change caused by a change on the form by refreshing the display of the light source\n   */\n  protected _onPreviewChange(event: JQuery.ChangeEvent): void;\n\n  /** @override */\n  protected _getSubmitData(\n    updateData?: LightConfig.FormData\n  ): ReturnType<FormApplication['_getSubmitData']> & { tintAlpha: number };\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: LightConfig.FormData): Promise<AmbientLight>;\n\n  /**\n   * Reset the state of the previewed light source object to its original data\n   * @param refresh - (default: `true`)\n   */\n  protected _resetObject(refresh?: boolean): void;\n}\n\ndeclare namespace LightConfig {\n  interface Data {\n    object: foundry.utils.Duplicated<LightConfig['object']['data']>;\n    options: LightConfig['options'];\n    submitText: string;\n    lightTypes: LightTypes;\n    lightAnimations: LightAnimations;\n    colorIntensity: number;\n  }\n\n  interface FormData {\n    angle: AmbientLight.Data['angle'] | null;\n    bright: AmbientLight.Data['bright'] | null;\n    darknessThreshold: AmbientLight.Data['darknessThreshold'];\n    dim: AmbientLight.Data['dim'] | null;\n    'lightAnimation.intensity': AmbientLight.Data['lightAnimation']['intensity'];\n    'lightAnimation.speed': AmbientLight.Data['lightAnimation']['speed'];\n    'lightAnimation.type': AmbientLight.Data['lightAnimation']['type'];\n    rotation: AmbientLight.Data['rotation'];\n    t: AmbientLight.Data['t'];\n    tintAlpha: AmbientLight.Data['tintAlpha'];\n    tintColor: string;\n    x: AmbientLight.Data['x'] | null;\n    y: AmbientLight.Data['y'] | null;\n  }\n\n  type LightAnimations = {\n    [Key in keyof typeof CONFIG['Canvas']['lightAnimations']]: string;\n  } & { '': 'None' };\n\n  type LightTypes = {\n    [Key in keyof typeof foundry.CONST['SOURCE_TYPES'] as typeof foundry.CONST['SOURCE_TYPES'][Key]]: `LIGHT.Type${Titlecase<Key>}`;\n  };\n}\n"]},39944:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\measuredTemplateConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A configuration Form Application for modifying the properties of a MeasuredTemplate object.\n * @see {@link MeasuredTemplate}\n */\ndeclare class MeasuredTemplateConfig extends FormApplication<\n  FormApplication.Options,\n  MeasuredTemplateConfig.Data,\n  MeasuredTemplate\n> {\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"template-config\",\n   *   classes: [\"sheet\", \"template-sheet\"],\n   *   title: \"Measurement Template Configuration\",\n   *   template: \"templates/scene/template-config.html\",\n   *   width: 400\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @override\n   */\n  getData(): MeasuredTemplateConfig.Data;\n\n  /**\n   * @override\n   */\n  protected _updateObject(event: Event, formData: MeasuredTemplateConfig.FormData): Promise<MeasuredTemplate | null>;\n}\n\ndeclare namespace MeasuredTemplateConfig {\n  interface Data {\n    object: foundry.utils.Duplicated<MeasuredTemplateConfig['object']['data']>;\n    options: MeasuredTemplateConfig['options'];\n    templateTypes: typeof CONFIG['MeasuredTemplate']['types'];\n    gridUnits: Scene['data']['gridUnits'];\n    submitText: string;\n  }\n\n  type FormData = {\n    angle: MeasuredTemplate.Data['angle'];\n    borderColor: MeasuredTemplate.Data['borderColor'];\n    direction: MeasuredTemplate.Data['direction'] | null;\n    distance: MeasuredTemplate.Data['distance'] | null;\n    fillColor: MeasuredTemplate.Data['fillColor'];\n    t: MeasuredTemplate.Data['t'];\n    texture: MeasuredTemplate.Data['texture'];\n    width: MeasuredTemplate.Data['width'];\n    x: MeasuredTemplate.Data['x'] | null;\n    y: MeasuredTemplate.Data['y'] | null;\n  };\n}\n"]},52995:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\moduleManagement.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The Module Management Application.\n * This application provides a view of which modules are available to be used and allows for configuration of the\n * set of modules which are active within the World.\n */\ndeclare class ModuleManagement extends FormApplication<FormApplication.Options, ModuleManagement.Data, any> {\n  /**\n   * @defaultValue `'all'`\n   */\n  protected _filter: ModuleManagement.FilterName;\n\n  /**\n   * @defaultValue `false`\n   */\n  protected _expanded: boolean;\n\n  /**\n   * @defaultValue `{}`\n   */\n  protected _checked: Partial<Record<string, boolean>>;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   title: game.i18n.localize(\"MODMANAGE.Title\"),\n   *   id: \"module-management\",\n   *   template: \"templates/sidebar/apps/module-management.html\",\n   *   popOut: true,\n   *   width: 680,\n   *   height: \"auto\",\n   *   scrollY: [\".package-list\"],\n   *   closeOnSubmit: false,\n   *   filters: [{inputSelector: 'input[name=\"search\"]', contentSelector: \".package-list\"}]\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /** @override */\n  get isEditable(): boolean;\n\n  /** @override */\n  getData(options?: Application.RenderOptions): ModuleManagement.Data;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  // TODO: type return value when the class' config setting is typed\n  protected _updateObject(event: Event, formData: ModuleManagement.FormData): Promise<unknown>;\n\n  /**\n   * Handle changes to a module checkbox to prompt for whether or not to enable dependencies\n   */\n  protected _onChangeCheckbox(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Handle a button-click to deactivate all modules\n   */\n  protected _onDeactivateAll(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle expanding or collapsing the display of descriptive elements\n   */\n  protected _onExpandCollapse(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle a button-click to deactivate all modules\n   */\n  protected _onFilterList(event: JQuery.ClickEvent): void;\n\n  /** @override */\n  protected _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n  static readonly CONFIG_SETTING: 'moduleConfiguration';\n}\n\ndeclare namespace ModuleManagement {\n  interface Data {\n    editable: ModuleManagement['isEditable'];\n    filters: [Data.Filter<'all'>, Data.Filter<'active'>, Data.Filter<'inactive'>];\n    modules: Data.Module[];\n    query: undefined; // TODO: this seems to reference an undefined value (`this._query`)\n    expanded: ModuleManagement['_expanded'];\n  }\n\n  namespace Data {\n    interface Filter<F extends FilterName> {\n      id: F;\n      label: string;\n      css: ' active' | '';\n      count: number;\n    }\n\n    interface Module extends foundry.utils.Duplicated<Game.Module> {\n      active: boolean;\n      css: ' active' | '';\n      hasPacks: boolean;\n      hasScripts: boolean;\n      hasStyles: boolean;\n      systemOnly: boolean;\n      systemTag: Game['system']['id'];\n      incompatible: any; // TODO\n      unavailable: any; // TODO\n      dependencies: string[] | null;\n    }\n  }\n\n  type FilterName = 'all' | 'active' | 'inactive';\n\n  interface FormData {\n    search: string;\n  }\n}\n"]},75926:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\noteConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * Placeable Note configuration sheet\n * @typeParam P - the type of the options object\n */\ndeclare class NoteConfig<P extends FormApplication.Options = FormApplication.Options> extends FormApplication<\n  P,\n  NoteConfig.Data,\n  Note\n> {\n  /**\n   * @param note    - The Note object for which settings are being configured\n   * @param options - Additional Application options\n   */\n  constructor(note: Note, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"note-config\",\n   *   title: game.i18n.localize(\"NOTE.ConfigTitle\"),\n   *   template: \"templates/scene/note-config.html\",\n   *   width: 400\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): NoteConfig.Data;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: NoteConfig.FormData): Promise<Note>;\n\n  /**\n   * @override\n   */\n  close(options?: Application.CloseOptions): Promise<void>;\n}\n\ndeclare namespace NoteConfig {\n  interface Data {\n    entryIcons: typeof CONFIG.JournalEntry['noteIcons'];\n    entryId: JournalEntry['_id'] | undefined;\n    entryName: JournalEntry['name'] | undefined;\n    entries: Journal['entities'];\n    fontFamilies: Partial<Record<string, string>>;\n    object: foundry.utils.Duplicated<NoteConfig['object']['data']>;\n    options: NoteConfig['options'];\n    textAnchors: Record<foundry.CONST.TextAnchorPoint, string>;\n  }\n\n  interface FormData {\n    entryId: Note.Data['entryId'];\n    fontFamily: Note.Data['fontFamily'];\n    fontSize: Note.Data['fontSize'] | null;\n    icon: Note.Data['icon'];\n    iconSize: Note.Data['iconSize'] | null;\n    iconTint: Note.Data['iconTint'];\n    text: Note.Data['text'];\n    textAnchor: Note.Data['textAnchor'];\n    textColor: Note.Data['textColor'];\n    x: Note.Data['x'] | null;\n    y: Note.Data['y'] | null;\n  }\n}\n"]},31132:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\permissionConfig.d.ts","/**\n * An application for configuring the permissions which are available to each User role.\n */\ndeclare class PermissionConfig extends FormApplication<FormApplication.Options, PermissionConfig.Data> {\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   title: game.i18n.localize(\"PERMISSION.Title\"),\n   *   id: \"permissions-config\",\n   *   template: \"templates/sidebar/apps/permission-config.html\",\n   *   width: 660,\n   *   height: \"auto\",\n   *   scrollY: [\".permissions-list\"],\n   *   closeOnSubmit: true\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): PermissionConfig.Data;\n\n  /**\n   * Prepare the permissions object used to render the configuration template\n   */\n  protected _getPermissions(current: typeof CONFIG['User']['permissions']): PermissionConfig.Permission[];\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle button click to reset default settings\n   * @param event - The initial button click event\n   */\n  protected _onResetDefaults(event: JQuery.ClickEvent): void;\n\n  /** @override */\n  protected _onSubmit(\n    event: Event,\n    options?: FormApplication.OnSubmitOptions\n  ): ReturnType<FormApplication['_onSubmit']>;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: PermissionConfig.FormData): Promise<void>;\n}\n\ndeclare namespace PermissionConfig {\n  interface Data {\n    roles: { [Key in Exclude<keyof typeof foundry.CONST['USER_ROLES'], 'NONE'>]: `USER.Role${Titlecase<Key>}` };\n    permissions: ReturnType<PermissionConfig['_getPermissions']>;\n  }\n\n  type FormData = Record<string, boolean>;\n\n  interface Permission extends foundry.CONST.UserCapability {\n    id: string;\n    roles: Permission.Role[];\n  }\n\n  namespace Permission {\n    interface Role {\n      name: string;\n      value: boolean;\n      disabled: boolean;\n    }\n  }\n}\n"]},96183:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\playlistSoundConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * Playlist Sound Configuration Sheet\n * @typeParam P - the type of the options object\n */\ndeclare class PlaylistSoundConfig<P extends FormApplication.Options = FormApplication.Options> extends FormApplication<\n  P,\n  PlaylistSoundConfig.Data,\n  Playlist.Sound\n> {\n  /**\n   * @param playlist - The Playlist entity within which the Sound is configured\n   * @param sound    - An Object for the Playlist Sound data\n   * @param options  - Additional application rendering options\n   */\n  constructor(playlist: PlaylistSoundConfig['playlist'], sound: Playlist.Sound, options: Partial<P>);\n\n  playlist: Playlist;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"track-config\",\n   *   template: \"templates/playlist/edit-track.html\",\n   *   width: 360\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @override\n   */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): PlaylistSoundConfig.Data;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: PlaylistSoundConfig.FormData): Promise<Playlist>;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Auto-populate the track name using the provided filename, if a name is not already set\n   */\n  protected _onSourceChange(event: JQuery.ChangeEvent): void;\n}\n\ndeclare namespace PlaylistSoundConfig {\n  interface Data extends foundry.utils.Duplicated<PlaylistSoundConfig['object']> {\n    lvolume: number;\n  }\n\n  type FormData = Pick<Data, 'lvolume'> & Pick<Playlist.Sound, 'name' | 'path' | 'repeat' | 'streaming'>;\n}\n"]},58714:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\settingsConfig.d.ts","/**\n * A game settings configuration application\n * This form renders the settings defined via the game.settings.register API which have config = true\n */\ndeclare class SettingsConfig extends FormApplication<FormApplication.Options, SettingsConfig.Data> {\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   title: game.i18n.localize(\"SETTINGS.Title\"),\n   *   id: \"client-settings\",\n   *   template: \"templates/sidebar/apps/settings-config.html\",\n   *   width: 600,\n   *   height: \"auto\",\n   *   tabs: [\n   *     {navSelector: \".tabs\", contentSelector: \".content\", initial: \"core\"}\n   *   ]\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): SettingsConfig.Data;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle activating the button to configure User Role permissions\n   * @param event - The initial button click event\n   */\n  protected _onClickSubmenu(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle button click to reset default settings\n   * @param event - The initial button click event\n   */\n  protected _onResetDefaults(event: JQuery.ClickEvent): void;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: SettingsConfig.FormData): Promise<void>;\n}\n\ndeclare namespace SettingsConfig {\n  interface Data {\n    user: User;\n    canConfigure: boolean;\n    systemTitle: Game['system']['data']['title'];\n    data: Data.Data;\n  }\n\n  namespace Data {\n    interface Data {\n      core: {\n        version: Game['data']['version'];\n        menus: ClientSettings.CompleteMenuSetting[];\n        settings: Setting[];\n        none: boolean;\n      };\n      system: {\n        title: Game['system']['data']['title'];\n        menus: ClientSettings.CompleteMenuSetting[];\n        settings: Setting[];\n        none: boolean;\n      };\n      modules: Record<string, { title: string; menus: ClientSettings.CompleteMenuSetting[]; settings: Setting[] }>;\n    }\n\n    interface Setting extends foundry.utils.Duplicated<ClientSettings.CompleteSetting> {\n      name: string;\n      hint: string;\n      value: ReturnType<ClientSettings['get']>;\n      type: string;\n      isCheckbox: boolean;\n      isSelect: boolean;\n      isRange: boolean;\n    }\n  }\n\n  interface FormData {\n    'core.animateRollTable': boolean;\n    'core.chatBubbles': boolean;\n    'core.chatBubblesPan': boolean;\n    'core.coneTemplateType': 'round' | 'flat';\n    'core.language': string;\n    'core.leftClickRelease': boolean;\n    'core.lightAnimation': boolean;\n    'core.maxFPS': number;\n    'core.mipmap': boolean;\n    'core.softShadows': boolean;\n    'core.tokenDragPreview': boolean;\n    'core.visionAnimation': boolean;\n    [key: string]: unknown;\n  }\n}\n"]},62799:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\tileConfig.d.ts","/**\n * Tile Config Sheet\n * @typeParam P - the type of the options object\n */\ndeclare class TileConfig<P extends TileConfig.Options = TileConfig.Options> extends FormApplication<\n  P,\n  TileConfig.Data,\n  Tile\n> {\n  /**\n   * @param tile    - The Tile object being configured\n   * @param options - Additional application rendering options\n   */\n  constructor(tile: Tile, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"tile-config\",\n   *   classes: [\"sheet\", \"tile-sheet\"],\n   *   title: \"Tile Configuration\",\n   *   template: \"templates/scene/tile-config.html\",\n   *   width: 400,\n   *   submitOnChange: true\n   * });\n   * ```\n   */\n  static get defaultOptions(): TileConfig.Options;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): TileConfig.Data;\n\n  /** @override */\n  protected _onChangeInput(event: JQuery.ChangeEvent): void;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: TileConfig.FormData): Promise<Tile>;\n\n  /** @override */\n  close(options: Application.CloseOptions): Promise<void>;\n}\n\ndeclare namespace TileConfig {\n  interface Data {\n    object: foundry.utils.Duplicated<TileConfig['object']['data']>;\n    options: TileConfig['options'];\n    submitText: 'Create' | 'Update';\n  }\n\n  interface FormData {\n    height: Tile.Data['height'] | null;\n    img: Tile.Data['img'];\n    rotation: Tile.Data['rotation'] | null;\n    width: Tile.Data['width'] | null;\n    x: Tile.Data['x'] | null;\n    y: Tile.Data['y'] | null;\n  }\n\n  interface Options extends FormApplication.Options {\n    /**\n     * Configure a preview version of a tile which is not yet saved\n     */\n    preview?: boolean;\n  }\n}\n"]},1743:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\tokenConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A Token Configuration Application\n * @typeParam P - the type of the options object\n */\ndeclare class TokenConfig<P extends TokenConfig.Options = TokenConfig.Options> extends FormApplication<\n  P,\n  TokenConfig.Data,\n  Token\n> {\n  /**\n   * @param token   - The Token object for which settings are being configured\n   * @param options - TokenConfig ui options (see Application)\n   */\n  constructor(token: Token, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   classes: [\"sheet\", \"token-sheet\"],\n   *   template: \"templates/scene/token-config.html\",\n   *   width: 480,\n   *   height: \"auto\",\n   *   tabs: [{navSelector: \".tabs\", contentSelector: \"form\", initial: \"character\"}]\n   * });\n   * ```\n   */\n  static get defaultOptions(): TokenConfig.Options;\n\n  /** @override */\n  get id(): string;\n\n  /**\n   * Convenience access for the Token object\n   */\n  get token(): this['object'];\n\n  /**\n   * Convenience access for the Token's linked Actor, if any\n   */\n  get actor(): this['token']['actor'];\n\n  /** @override */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): Promise<TokenConfig.Data>;\n\n  /** @override */\n  render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * Inspect the Actor data model and identify the set of attributes which could be used for a Token Bar\n   */\n  static getTrackedAttributeChoices(attributes: TokenConfig.Attributes): Partial<Record<string, string[]>>;\n\n  /**\n   * Test whether an individual data object is a valid attribute - containing both a \"value\" and \"max\" field\n   * @param data  - The data object to search\n   * @param _path - The attribute path being recursed\n   *                (default: `[]`)\n   * @returns An object containing both bar and value attribute paths\n   */\n  protected static getTrackedAttributes(data: object, _path: string[]): TokenConfig.Attributes;\n\n  /**\n   * Get an Object of image paths and filenames to display in the Token sheet\n   */\n  protected _getAlternateTokenImages(): Promise<Partial<Record<string, string>>>;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /** @override */\n  protected _getSubmitData(\n    updateData?: TokenConfig.FormData\n  ): ReturnType<FormApplication['_getSubmitData']> & { lightAlpha: number };\n\n  /** @override */\n  protected _updateObject(event: Event, formData: TokenConfig.FormData): Promise<void>;\n\n  /**\n   * Update certain fields of a linked actor token when token configuration is changed\n   * @param tokenData - The new token data\n   */\n  protected _updateActorData(tokenData: TokenConfig.FormData): ReturnType<Actor['update']> | void;\n\n  /**\n   * Handle Token assignment requests to update the default prototype Token\n   * @param event - The left-click event on the assign token button\n   */\n  protected _onAssignToken(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle changing the attribute bar in the drop-down selector to update the default current and max value\n   */\n  protected _onBarChange(ev: JQuery.ChangeEvent): Promise<void>;\n}\n\ndeclare namespace TokenConfig {\n  interface Attributes {\n    bar: string[][];\n    value: string[][];\n  }\n\n  interface Data {\n    cssClasses: 'prototype' | '';\n    isPrototype: Options['configureDefault'];\n    hasAlternates: boolean;\n    alternateImages: TokenConfig['_getAlternateTokenImages'] | [];\n    object: foundry.utils.Duplicated<TokenConfig['token']['data']>;\n    options: TokenConfig['options'];\n    gridUnits: Scene['data']['gridUnits'] | Game['system']['gridUnits'];\n    barAttributes: ReturnType<typeof TokenConfig['getTrackedAttributeChoices']>;\n    bar1: ReturnType<TokenConfig['object']['getBarAttribute']>;\n    bar2: ReturnType<TokenConfig['object']['getBarAttribute']>;\n    displayModes: Record<foundry.CONST.TokenDisplayMode, string>;\n    actors: Array<Pick<Actor, '_id' | 'name'>>;\n    dispositions: Record<foundry.CONST.TokenDisposition, string>;\n    lightAnimations: { [Key in keyof typeof CONFIG['Canvas']['lightAnimations']]: string } & { '': 'None' };\n    lightAlpha: number;\n    isGM: User['isGM'];\n  }\n\n  interface FormData {\n    actorId: Token.Data['actorId'];\n    actorLink: Token.Data['actorLink'];\n    alternateImages?: string;\n    'bar1.attribute': Token.Data['bar1']['attribute'];\n    'bar2.attribute': Token.Data['bar2']['attribute'];\n    brightLight: Token.Data['brightLight'] | null;\n    brightSight: Token.Data['brightSight'] | null;\n    dimLight: Token.Data['dimLight'] | null;\n    dimSight: Token.Data['dimSight'] | null;\n    displayBars: Token.Data['displayBars'];\n    displayName: Token.Data['displayName'];\n    disposition: Token.Data['disposition'];\n    elevation: Token.Data['elevation'] | null;\n    height: Token.Data['height'] | null;\n    img: Token.Data['img'];\n    lightAlpha: Token.Data['lightAlpha'];\n    lightAngle: Token.Data['lightAngle'] | null;\n    'lightAnimation.intensity': Token.Data['lightAnimation']['intensity'];\n    'lightAnimation.speed': Token.Data['lightAnimation']['speed'];\n    'lightAnimation.type': Token.Data['lightAnimation']['type'];\n    lightColor: Token.Data['lightColor'];\n    lockRotation: Token.Data['lockRotation'];\n    mirrorX: Token.Data['mirrorX'];\n    mirrorY: Token.Data['mirrorY'];\n    name: Token.Data['name'];\n    rotation: Token.Data['rotation'] | null;\n    scale: Token.Data['scale'];\n    sightAngle: Token.Data['sightAngle'] | null;\n    tint: Token.Data['tint'];\n    vision: Token.Data['vision'];\n    width: Token.Data['width'] | null;\n    x: Token.Data['x'] | null;\n    y: Token.Data['y'] | null;\n  }\n\n  interface Options extends FormApplication.Options {\n    /**\n     * Configure the default actor token on submit\n     */\n    configureDefault?: boolean;\n  }\n}\n"]},6411:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\wallConfig.d.ts","/**\n * Wall Configuration Sheet\n */\ndeclare class WallConfig<P extends WallConfig.Options = WallConfig.Options> extends FormApplication<\n  P,\n  WallConfig.Data,\n  Wall\n> {\n  /**\n   * @param object  - The Wall object for which settings are being configured\n   * @param options - Additional options which configure the rendering of the configuration sheet.\n   */\n  constructor(object: Wall, options?: Partial<P>);\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * const options = super.defaultOptions;\n   * options.id = \"wall-config\";\n   * options.title = \"Wall Configuration\";\n   * options.template = \"templates/scene/wall-config.html\";\n   * options.width = 400;\n   * options.editTargets = [];\n   * ```\n   */\n  static get defaultOptions(): WallConfig.Options;\n\n  /**\n   * Provide a dynamically rendered title for the Wall Configuration sheet\n   */\n  get title(): string;\n\n  /**\n   * Construct and return the data object used to render the HTML template for this form application.\n   */\n  getData(): WallConfig.Data;\n\n  /**\n   * This method is called upon form submission after form data is validated\n   * @param event    - The initial triggering submission event\n   * @param formData - The object of validated form data with which to update the object\n   */\n  protected _updateObject(event: Event, formData: WallConfig.FormData): Promise<Wall>;\n}\n\ndeclare namespace WallConfig {\n  interface Data {\n    object: foundry.utils.Duplicated<WallConfig['object']['data']>;\n    options: WallConfig['options'];\n    moveTypes: {\n      [Key in keyof typeof foundry.CONST['WALL_MOVEMENT_TYPES'] as typeof foundry.CONST['WALL_MOVEMENT_TYPES'][Key]]: Titlecase<Key>;\n    };\n    senseTypes: {\n      [Key in keyof typeof foundry.CONST['WALL_SENSE_TYPES'] as typeof foundry.CONST['WALL_SENSE_TYPES'][Key]]: Titlecase<Key>;\n    };\n    dirTypes: {\n      [Key in keyof typeof foundry.CONST['WALL_DIRECTIONS'] as typeof foundry.CONST['WALL_DIRECTIONS'][Key]]: Titlecase<Key>;\n    };\n    doorTypes: {\n      [Key in keyof typeof foundry.CONST['WALL_DOOR_TYPES'] as typeof foundry.CONST['WALL_DOOR_TYPES'][Key]]: Titlecase<Key>;\n    };\n    doorStates: {\n      [Key in keyof typeof foundry.CONST['WALL_DOOR_STATES'] as typeof foundry.CONST['WALL_DOOR_STATES'][Key]]: Titlecase<Key>;\n    };\n    isDoor: boolean;\n  }\n\n  interface FormData {\n    dir: foundry.CONST.WallDirection;\n    door: Wall.Data['door'];\n    ds?: Wall.Data['ds'];\n    move: Wall.Data['move'];\n    sense: Wall.Data['sense'];\n  }\n\n  interface Options extends FormApplication.Options {\n    /**\n     * @defaultValue `[]`\n     */\n    editTargets: string[];\n  }\n}\n"]},32263:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\worldConfig.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The World Management setup application\n */\ndeclare class WorldConfig extends FormApplication<WorldConfig.Options, WorldConfig.Data, Game.World> {\n  /**\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"world-config\",\n   *   template: \"templates/setup/world-config.html\",\n   *   width: 600,\n   *   height: \"auto\",\n   *   create: false\n   * });\n   * ```\n   */\n  static get defaultOptions(): WorldConfig.Options;\n\n  /** @override */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): WorldConfig.Data;\n\n  /**\n   * @remarks This method returns `Promise<void>`.\n   * @override\n   */\n  protected _onSubmit(event: Event): Promise<any>;\n\n  /**\n   * @remarks This method does not exist on WorldConfig and only exists to make the typescript compile!\n   */\n  protected _updateObject(...args: unknown[]): Promise<unknown>;\n}\n\ndeclare namespace WorldConfig {\n  interface Data {\n    world: WorldConfig['object'];\n    systems: Game.System[];\n    isCreate: WorldConfig['options']['create'];\n    submitText: string;\n    nextDate: string;\n    nextTime: string;\n  }\n\n  interface Options extends FormApplication.Options {\n    /**\n     * @defaultValue `false`\n     */\n    create: boolean;\n  }\n}\n"]},48766:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\frameViewer.d.ts","/**\n * A simple window application which shows the built documentation pages within an iframe\n */\ndeclare class FrameViewer extends Application {\n  url: string;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.defaultOptions, {\n   *   height: window.innerHeight * 0.9,\n   *   width: Math.min(window.innerWidth * 0.9, 1200),\n   *   top: (window.innerHeight - height) / 2,\n   *   left: (window.innerWidth - width) / 2,\n   *   id: \"documentation\",\n   *   template: \"templates/apps/documentation.html\",\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /** @override */\n  getData(options?: Application.RenderOptions): Promise<{ src: string }>;\n\n  /** @override */\n  close(options?: Application.CloseOptions): ReturnType<Application['close']>;\n}\n"]},21019:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\headsUpDisplay.d.ts","/**\n * Render the HUD container\n */\ndeclare class HeadsUpDisplay extends Application {\n  /**\n   * Token HUD\n   */\n  token: TokenHUD;\n\n  /**\n   * Tile HUD\n   */\n  tile: TileHUD;\n\n  /**\n   * Drawing HUD\n   */\n  drawing: DrawingHUD;\n\n  /**\n   * Chat Bubbles\n   */\n  bubbles: ChatBubbles;\n\n  /**\n   * Define default options which configure the HUD\n   * @defaultValue\n   * ```\n   * mergeObject(super.defaultOptions, {\n   *   id: \"hud\",\n   *   template: \"templates/hud/hud.html\",\n   *   popOut: false,\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  getData(): {} | { width: number; height: number };\n\n  _render(...args: Parameters<Application['_render']>): Promise<void>;\n\n  align(): void;\n}\n"]},85107:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\hotbar.d.ts",'/**\n * The global action bar displayed at the bottom of the game view.\n * The Hotbar is a UI element at the bottom of the screen which contains Macros as interactive buttons.\n * The Hotbar supports 5 pages of global macros which can be dragged and dropped to organize as you wish.\n *\n * Left clicking a Macro button triggers its effect.\n * Right clicking the button displays a context menu of Macro options.\n * The number keys 1 through 0 activate numbered hotbar slots.\n * Pressing the delete key while hovering over a Macro will remove it from the bar.\n *\n * @see {@link Macros}\n * @see {@link Macro}\n */\n\ndeclare class Hotbar extends Application {\n  /**\n   * The currently viewed macro page\n   * @defaultValue `1`\n   */\n  page: number;\n\n  /**\n   * The currently displayed set of macros\n   * @defaultValue `[]`\n   */\n  macros: Macro[];\n\n  /**\n   * Track collapsed state\n   * @defaultValue `false`\n   */\n  protected _collapsed: boolean;\n\n  /**\n   * Track which hotbar slot is the current hover target, if any\n   * @defaultValue `null`\n   */\n  protected _hover: number | null;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: "hotbar",\n   *   template: "templates/hud/hotbar.html",\n   *   popOut: false,\n   *   dragDrop: [{ dragSelector: ".macro-icon", dropSelector: "#macro-list" }]\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application[\'defaultOptions\'];\n\n  /** @override */\n  getData(options?: Application.RenderOptions): Hotbar.Data | Promise<Hotbar.Data>;\n\n  /**\n   * Get the Array of Macro (or null) values that should be displayed on a numbered page of the bar\n   * @param page -\n   */\n  protected _getMacrosByPage(page: number): Macro[];\n\n  /**\n   * Collapse the Hotbar, minimizing its display.\n   * @returns A promise which resolves once the collapse animation completes\n   */\n  collapse(): Promise<boolean>;\n\n  /**\n   * Expand the Hotbar, displaying it normally.\n   * @returns A promise which resolves once the expand animation completes\n   */\n  expand(): Promise<boolean> | boolean;\n\n  /**\n   * Change to a specific numbered page from 1 to 5\n   * @param page - The page number to change to.\n   *               (default: `1` )\n   */\n  changePage(page?: number): void;\n\n  /**\n   * Change the page of the hotbar by cycling up (positive) or down (negative)\n   * @param direction - The direction to cycle\n   */\n  cyclePage(direction: number): void;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Create a Context Menu attached to each Macro button\n   * @param html -\n   */\n  protected _contextMenu(html: JQuery): void;\n\n  /**\n   * Handle left-click events to\n   * @param event -\n   */\n  protected _onClickMacro(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle hover events on a macro button to track which slot is the hover target\n   * @param event - The originating mouseover or mouseleave event\n   */\n  protected _onHoverMacro(event: JQuery.MouseEnterEvent | JQuery.MouseLeaveEvent): void;\n\n  /**\n   * Handle pagination controls\n   * @param event - The originating click event\n   */\n  protected _onClickPageControl(event: JQuery.ClickEvent): void;\n\n  /** @override */\n  protected _canDragStart(selector: string | null): boolean;\n\n  /** @override */\n  protected _canDragDrop(selector: string | null): boolean;\n\n  /** @override */\n  protected _onDrop(event: DragEvent): void;\n\n  /**\n   * Get the Macro entity being dropped in the Hotbar. If the data comes from a non-World source, create the Macro\n   * @param data - The data transfer attached to the DragEvent\n   * @returns A Promise which returns the dropped Macro, or null\n   */\n  protected _getDropMacro(data: Hotbar.DropData): Promise<Macro | null>;\n\n  /**\n   * Handle click events to toggle display of the macro bar\n   * @param event -\n   */\n  protected _onToggleBar(event: JQuery.ClickEvent): void;\n}\n\ndeclare namespace Hotbar {\n  interface Data {\n    page: number;\n    macros: Macro[];\n    barClass: \'collapsed\' | \'\';\n  }\n\n  interface DropData {\n    type?: string;\n    data?: DeepPartial<foundry.data.MacroData>; // TODO: Might be incorrect, revisit this!!\n    id?: string;\n    pack?: string;\n    slot?: number;\n  }\n}\n']},29796:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\index.d.ts","import './basePlaceableHUD';\nimport './basePlaceableHUDs';\nimport './cameraViews';\nimport './chatPopout';\nimport './compendium';\nimport './controlsReference';\nimport './dialog';\nimport './filePicker';\nimport './formApplication';\nimport './formApplications';\nimport './frameViewer';\nimport './headsUpDisplay';\nimport './hotbar';\nimport './invitationLinks';\nimport './mainMenu';\nimport './notifications';\nimport './pause';\nimport './playerList';\nimport './sceneControls';\nimport './sceneNavigation';\nimport './sidebar';\nimport './sidebarTab';\nimport './sidebarTabs';\n"]},4525:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\invitationLinks.d.ts","/**\n * Game Invitation Links Reference\n */\n\ndeclare class InvitationLinks extends Application {\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   ...super.defaultOptions,\n   *   id: 'invitation-links',\n   *   template: 'templates/sidebar/apps/invitation-links.html',\n   *   title: game.i18n.localize(\"INVITATIONS.Title\"),\n   *   width: 400,\n   * }\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /** @override */\n  getData(): { local?: string; remote?: string };\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n}\n"]},13436:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\mainMenu.d.ts","/**\n * A simple main menu application\n */\ndeclare class MainMenu extends Application {\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * {\n   *   ...super.defaultOptions,\n   *   id: 'menu',\n   *   template: 'templates/hud/menu.html',\n   *   popOut: false\n   * }\n   * ```\n   * */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /**\n   * The structure of menu items\n   * @defaultValue\n   * ```typescript\n   * {\n   *   reload: {\n   *     label: 'MENU.Reload',\n   *     icon: '<i class=\"fas fa-redo\"></i>',\n   *     enabled: true,\n   *     onClick: () => window.location.reload()\n   *   },\n   *   logout: {\n   *     label: 'MENU.Logout',\n   *     icon: '<i class=\"fas fa-user\"></i>',\n   *     enabled: true,\n   *     onClick: () => game.logOut()\n   *   },\n   *   players: {\n   *     label: 'MENU.Players',\n   *     icon: '<i class=\"fas fa-users\"></i>',\n   *     enabled: game.user.isGM,\n   *     onClick: () => (window.location.href = './players')\n   *   },\n   *   world: {\n   *     label: 'MENU.Setup',\n   *     icon: '<i class=\"fas fa-globe\"></i>',\n   *     enabled: game.user.isGM,\n   *     onClick: () => game.shutDown()\n   *   }\n   * }\n   * ```\n   */\n  get items(): MainMenu.MenuStructure;\n\n  /** @override */\n  getData(): { items: MainMenu.MenuStructure };\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Toggle display of the menu (or render it in the first place)\n   */\n  toggle(): void;\n}\n\ndeclare namespace MainMenu {\n  interface MenuItem {\n    label: string;\n    icon: string;\n    enabled: boolean;\n    onClick: () => void;\n  }\n\n  type MenuStructure = { [name: string]: MenuItem };\n}\n"]},69590:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\notifications.d.ts",'/**\n * A common framework for displaying notifications to the client.\n * Submitted notifications are added to a queue, and up to 3 notifications are displayed at once.\n * Each notification is displayed for 5 seconds at which point further notifications are pulled from the queue.\n *\n * @example\n * ```typescript\n * ui.notifications.info("This is an info message");\n * ui.notifications.warn("This is a warning message");\n * ui.notifications.error("This is an error message");\n * ui.notifications.info("This is a 4th message which will not be shown until the first info message is done");\n * ```\n */\ndeclare class Notifications extends Application {\n  /** Notifications which are currently displayed */\n  active: JQuery[];\n\n  /** Submitted notifications which are queued for display */\n  queue: Notifications.Notification[];\n\n  /** @override */\n  static get defaultOptions(): typeof Application[\'defaultOptions\'];\n\n  /**\n   * Initialize the Notifications system by displaying any system-generated messages which were passed from the server.\n   */\n  initialize(): void;\n\n  /** @override */\n  protected _renderInner(data: object): JQuery;\n\n  /** @override */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * Push a new notification into the queue\n   * @param message   - The content of the notification message\n   * @param type      - The type of notification, currently "info", "warning", and "error" are supported\n   *                    (default: `\'info\'`)\n   * @param permanent - Whether the notification should be permanently displayed unless otherwise dismissed\n   *                    (default: `false`)\n   */\n  notify(message: string, type?: \'info\' | \'warning\' | \'error\', { permanent }?: { permanent?: boolean }): void;\n\n  /**\n   * Display a notification with the "info" type\n   * @param message - The content of the notification message\n   * @param options - Notification options passed to the notify function\n   */\n  info(message: string, options?: { permanent?: boolean }): void;\n\n  /**\n   * Display a notification with the "warning" type\n   * @param message - The content of the notification message\n   * @param options - Notification options passed to the notify function\n   */\n  warn(message: string, options?: { permanent?: boolean }): void;\n\n  /**\n   * Display a notification with the "error" type\n   * @param message - The content of the notification message\n   * @param options - Notification options passed to the notify function\n   */\n  error(message: string, options?: { permanent?: boolean }): void;\n\n  /**\n   * Retrieve a pending notification from the queue and display it\n   */\n  protected fetch(): void;\n}\n\ndeclare namespace Notifications {\n  interface Notification {\n    message: string;\n    type: \'info\' | \'warning\' | \'error\';\n    timestamp: number;\n    permanent: boolean;\n  }\n}\n']},37513:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\pause.d.ts","/**\n * Pause notification in the HUD\n */\ndeclare class Pause<D extends Pause.Data = Pause.Data> extends Application {\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /**\n   * Prepare the default data which is required to render the Pause UI\n   */\n  getData(): D | Promise<D>;\n}\n\ndeclare namespace Pause {\n  interface Data {\n    paused: boolean;\n  }\n}\n"]},4802:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\playerList.d.ts","/**\n * The active Player List application\n */\ndeclare class PlayerList extends Application {\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   ...super.defaultOptions,\n   *   id: 'players',\n   *   template: 'templates/user/players.html',\n   *   popOut: false\n   * }\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /** @override */\n  render(force?: boolean, options?: Application.RenderOptions): this;\n\n  /** @override */\n  getData(options?: Application.RenderOptions): PlayerList.Data | Promise<PlayerList.Data>;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Return the default context options available for the Players application\n   */\n  private _getUserContextOptions(): ContextMenu.Item[];\n\n  /**\n   * Toggle display of the Players hud setting for whether or not to display offline players\n   */\n  private _onToggleOfflinePlayers(event: JQuery.ClickEvent): void;\n}\n\ndeclare namespace PlayerList {\n  /**\n   * Data object returned from the PlayerList getData function\n   */\n  interface Data {\n    /** List of users connected to Foundry */\n    users: User[];\n    /** If to show offline users */\n    showOffline: boolean;\n    /** If to hide the player list */\n    hide: boolean;\n  }\n}\n"]},86579:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sceneControls.d.ts",'declare interface SceneControl {\n  activeTool: string;\n  icon: string;\n  layer: string;\n  name: string;\n  title: string;\n  tools: SceneControlTool[];\n  visible: boolean;\n}\n\ndeclare interface SceneControlTool {\n  active?: boolean;\n  button?: boolean;\n  icon: string;\n  name: string;\n  onClick?: () => void;\n  title: string;\n  toggle?: boolean;\n  visible?: boolean;\n}\n\n/**\n * Scene controls navigation menu\n */\ndeclare class SceneControls extends Application {\n  /**\n   * The name of the active Scene Control toolset\n   * @defaultValue `"token"`\n   */\n  activeControl: string;\n\n  /**\n   * The Array of Scene Control buttons which are currently rendered\n   */\n  controls: SceneControl[];\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.defaultOptions, {\n   *   width: 100,\n   *   id: "controls",\n   *   template: "templates/hud/controls.html",\n   *   popOut: false,\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof Application[\'defaultOptions\'];\n\n  /**\n   * Return the active control set\n   */\n  get control(): SceneControl | null;\n\n  /**\n   * Return the name of the active tool within the active control set\n   */\n  get activeTool(): string | null;\n\n  /**\n   * Return the actively controlled tool\n   */\n  get tool(): SceneControlTool | null;\n\n  /**\n   * A convenience reference for whether the currently active tool is a Ruler\n   */\n  get isRuler(): boolean;\n\n  /**\n   * Initialize the Scene Controls by obtaining the set of control buttons and rendering the HTML\n   * @param control - An optional control set to set as active\n   * @param layer   - An optional layer name to target as the active control\n   * @param tool    - A specific named tool to set as active for the palette\n   */\n  initialize({ control, layer, tool }?: { control?: string; layer?: string; tool?: string }): void;\n\n  /** @override */\n  getData(options?: Application.RenderOptions): {\n    active: boolean;\n    cssClass: \'\' | \'disabled\';\n    controls: SceneControl[];\n  };\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle click events on a Control set\n   * @param event - A click event on a tool control\n   */\n  protected _onClickLayer(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle click events on Tool controls\n   * @param event - A click event on a tool control\n   */\n  protected _onClickTool(event: JQuery.ClickEvent): void;\n\n  /**\n   * Get the set of Control sets and tools that are rendered as the Scene Controls.\n   * These controls may be extended using the "getSceneControlButtons" Hook.\n   */\n  protected _getControlButtons(): SceneControl[];\n}\n']},18038:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sceneNavigation.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * Top menu scene navigation\n */\ndeclare class SceneNavigation extends Application {\n  /**\n   * Assign the default options which are supported by the SceneNavigation UI\n   * @defaultValue\n   * ```typescript\n   * {\n   *   ...super.defaultOptions,\n   *   id: 'navigation',\n   *   template: 'templates/hud/navigation.html',\n   *   popOut: false,\n   *   dragDrop: [{dragSelector: \".scene\"}]\n   * }\n   * ```\n   */\n  static get defaultOptions(): typeof Application['defaultOptions'];\n\n  /**\n   * Return an Array of Scenes which are displayed in the Navigation bar\n   */\n  get scenes(): Scene[];\n\n  /** @override */\n  render(force?: boolean, options?: Application.RenderOptions): this | undefined;\n\n  /** @override */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /** @override */\n  getData(options?: Application.RenderOptions): SceneNavigation.Data | Promise<SceneNavigation.Data>;\n\n  /**\n   * Expand the SceneNavigation menu, sliding it down if it is currently collapsed\n   */\n  expand(): Promise<boolean>;\n\n  /**\n   * Collapse the SceneNavigation menu, sliding it up if it is currently expanded\n   */\n  collapse(): Promise<boolean>;\n\n  /**\n   * Activate Scene Navigation event listeners\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Get the set of ContextMenu options which should be applied for Scenes in the menu\n   */\n  private _getContextMenuOptions(): ContextMenu.Item[];\n\n  /**\n   * Handle left-click events on the scenes in the navigation menu\n   */\n  private _onClickScene(event: JQuery.ClickEvent): void;\n\n  /** @override */\n  protected _onDragStart(event: DragEvent): void;\n\n  /** @override */\n  protected _onDrop(event: DragEvent): Promise<boolean | undefined | void>;\n\n  /** @override */\n  private _onToggleNav(event: JQuery.ClickEvent): void;\n\n  /**\n   * Updated the loading progress bar\n   * @param context - The message to display in the progress back\n   * @param pct     - The percentage the progress bar has completed\n   */\n  static _onLoadProgress(context: string, pct: number): void;\n}\n\ndeclare namespace SceneNavigation {\n  interface Data {\n    collapsed: boolean;\n    scenes: (foundry.utils.Duplicated<Scene['data']> & {\n      users: { letter: string; color: User['data']['color'] };\n      visible: boolean;\n      css: [string | null];\n    })[];\n  }\n}\n"]},36808:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebar.d.ts","/**\n * Render the Sidebar container, and after rendering insert Sidebar tabs\n * @typeParam P - the type of the options object\n */\ndeclare class Sidebar<P extends Sidebar.Options = Sidebar.Options> extends Application<P> {\n  /**\n   * Sidebar application instances\n   * @defaultValue `[]`\n   */\n  apps: Application[];\n\n  /**\n   * Track whether the sidebar container is currently collapsed\n   * @defaultValue `false`\n   */\n  protected _collapsed: boolean;\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): Sidebar.Options;\n\n  /**\n   * Return the name of the active Sidebar tab\n   */\n  get activeTab(): string;\n\n  /**\n   * Return an Array of pop-out sidebar tab Application instances\n   */\n  get popouts(): Application[];\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): Sidebar.Data;\n\n  /**\n   * @override\n   */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * Activate a Sidebar tab by it's name\n   * @param tabName - The tab name corresponding to it's \"data-tab\" attribute\n   */\n  activateTab(tabName: string): void;\n\n  /**\n   * Expand the Sidebar container from a collapsed state.\n   * Take no action if the sidebar is already expanded.\n   */\n  expand(): void;\n\n  /**\n   * Collapse the sidebar to a minimized state.\n   * Take no action if the sidebar is already collapsed.\n   */\n  collapse(): void;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * @param event - (unused)\n   * @param tabs - (unused)\n   * @override\n   */\n  protected _onChangeTab(event: MouseEvent | null, tabs: Tabs, active: string): void;\n\n  /**\n   * Handle right-click events on tab controls to trigger pop-out containers for each tab\n   * @param event - The originating contextmenu event\n   */\n  protected _onRightClickTab(event: MouseEvent): void;\n\n  /**\n   * Handle toggling of the Sidebar container's collapsed or expanded state\n   */\n  protected _onToggleCollapse(event: MouseEvent): void;\n}\n\ndeclare namespace Sidebar {\n  interface Data {\n    coreUpdate: string | false;\n    user: User;\n  }\n\n  interface Options extends Application.Options {\n    /**\n     * @defaultValue `'sidebar'`\n     */\n    id: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/sidebar.html'`\n     */\n    template: string;\n\n    /**\n     * @defaultValue `false`\n     */\n    popOut: boolean;\n\n    /**\n     * @defaultValue `300`\n     */\n    width: number;\n\n    tabs: Array<\n      Tabs.Options & {\n        /**\n         * @defaultValue `'.tabs'`\n         */\n        navSelector: string;\n\n        /**\n         * @defaultValue `'#sidebar'`\n         */\n        contentSelector: string;\n\n        /**\n         * @defaultValue `'chat'`\n         */\n        initial: string;\n      }\n    >;\n  }\n}\n"]},81075:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTab.d.ts","/**\n * An abstract pattern followed by the different tabs of the sidebar\n */\ndeclare abstract class SidebarTab<P extends SidebarTab.Options = SidebarTab.Options> extends Application<P> {\n  /**\n   * The base name of this sidebar tab\n   */\n  tabName: string;\n\n  /**\n   * A reference to the pop-out variant of this SidebarTab, if one exists\n   */\n  protected _popout: SidebarTab | null;\n\n  /**\n   * Denote whether or not this is the original version of the sidebar tab, or a pop-out variant\n   */\n  protected _original: SidebarTab | null;\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): SidebarTab.Options;\n\n  /**\n   * @override\n   */\n  protected _renderInner(data: object): Promise<JQuery>;\n\n  /**\n   * @override\n   */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * Activate this SidebarTab, switching focus to it\n   */\n  activate(): void;\n\n  /**\n   * @override\n   */\n  close(options?: Application.CloseOptions): Promise<void>;\n\n  /**\n   * Create a second instance of this SidebarTab class which represents a singleton popped-out container\n   * @returns The popped out sidebar tab instance\n   */\n  createPopout(): SidebarTab;\n\n  /**\n   * Render the SidebarTab as a pop-out container\n   */\n  renderPopout(): void;\n\n  /**\n   * Handle lazy loading for sidebar images to only load them once they become observed\n   */\n  protected _onLazyLoadImage(entries: IntersectionObserverEntry[], observer: IntersectionObserver): void;\n}\n\ndeclare namespace SidebarTab {\n  interface Options extends Application.Options {\n    /**\n     * @defaultValue `false`\n     */\n    popOut: boolean;\n\n    /**\n     * @defaultValue `300`\n     */\n    width: number;\n\n    /**\n     * @defaultValue `'SidebarTab'`\n     */\n    baseApplication: string;\n  }\n}\n"]},2501:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\chatLog.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The Chat Log application displayed in the Sidebar\n * @see {@link Sidebar}\n */\ndeclare class ChatLog extends SidebarTab<ChatLog.Options> {\n  /**\n   * Track whether the user currently has pending text in the chat box\n   */\n  protected _pendingText: string;\n\n  /**\n   * Track the history of the past 5 sent messages which can be accessed using the arrow keys\n   * @defaultValue `[]`\n   */\n  protected _sentMessages: string[];\n\n  /**\n   * Track which remembered message is being currently displayed to cycle properly\n   * @defaultValue `-1`\n   */\n  protected _sentMessageIndex: number;\n\n  /**\n   * Track the time when the last message was sent to avoid flooding notifications\n   * @defaultValue `0`\n   */\n  protected _lastMessageTime: number;\n\n  /**\n   * Track the id of the last message displayed in the log\n   * @defaultValue `null`\n   */\n  protected _lastId: string | null;\n\n  /**\n   * Track the last received message which included the user as a whisper recipient.\n   * @defaultValue `null`\n   */\n  protected _lastWhisper: ChatMessage | null;\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): ChatLog.Options;\n\n  /**\n   * A reference to the Messages collection that the chat log displays\n   */\n  get collection(): Messages;\n\n  /**\n   * @override\n   */\n  getData(options?: Application.RenderOptions): ChatLog.Data;\n\n  /**\n   * @override\n   */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * Render a batch of additional messages, prepending them to the top of the log\n   * @param size - The batch size to include\n   */\n  protected _renderBatch(size: number): Promise<void>;\n\n  /**\n   * @param original - (unused)\n   * @override\n   * @throws This always throws.\n   */\n  renderPopout(original?: any): never;\n\n  /**\n   * Delete all message HTML from the log\n   */\n  deleteAll(): void;\n\n  /**\n   * Delete a single message from the chat log\n   * @param messageId - The ChatMessage entity to remove from the log\n   * @param deleteAll - Is this part of a flush operation to delete all messages?\n   *                    (default: `false`)\n   */\n  deleteMessage(messageId: string, { deleteAll }?: { deleteAll?: boolean }): void;\n\n  /**\n   * Trigger a notification that alerts the user visually and audibly that a new chat log message has been posted\n   */\n  notify(message: ChatMessage): void;\n\n  /**\n   * Parse a chat string to identify the chat command (if any) which was used\n   * @param message - The message to match\n   * @returns The identified command and regex match\n   * @remarks The returned RegExpMatchArray or string Array has the entire match as its first value, then the match for\n   *          the slash command (or an empty string) and as last element the flavor or message text. The whisper match\n   *          is an exception: Its third value is the target user name (optionally in brackets) and the fourth value is\n   *          the message text.\n   */\n  static parse<S extends string>(message: S): [ChatLog.Command, RegExpMatchArray] | ['none', [S, '', S]];\n\n  /**\n   * Post a single chat message to the log\n   * @param message - A ChatMessage entity instance to post to the log\n   * @param notify  - Trigger a notification which shows the log as having a new unread message\n   *                  (default: `false`)\n   * @returns A Promise which resolves once the message is posted\n   */\n  postOne(message: ChatMessage, notify?: boolean): Promise<void>;\n\n  /**\n   * Scroll the chat log to the bottom\n   */\n  protected scrollBottom(): void;\n\n  /**\n   * Update the content of a previously posted message after its data has been replaced\n   * @param message - The ChatMessage instance to update\n   * @param notify  - Trigger a notification which shows the log as having a new unread message\n   *                  (default: `false`)\n   */\n  updateMessage(message: ChatMessage, notify?: boolean): void;\n\n  updateTimestamps(): void;\n\n  /**\n   * Activate event listeners triggered within the ChatLog application\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Prepare the data object of chat message data depending on the type of message being posted\n   * @param message - The original string of the message content\n   * @returns A Promise resolving to the prepared chat data object\n   */\n  protected processMessage(message: string): Promise<ChatMessage | null | void>;\n\n  /**\n   * Process messages which are posted using a dice-roll command\n   * @param command       - The chat command type\n   * @param match         - The matched RegExp expressions\n   * @param chatData      - The initial chat data\n   * @param createOptions - Options used to create the message\n   *                        (unused)\n   */\n  protected _processDiceCommand(\n    command: string,\n    match: RegExpMatchArray,\n    chatData: ChatMessage.Data,\n    createOptions?: Entity.CreateOptions\n  ): void;\n\n  /**\n   * Process messages which are posted using a chat whisper command\n   * @param command       - The chat command type\n   * @param match         - The matched RegExp expressions\n   * @param chatData      - The initial chat data\n   * @param createOptions - Options used to create the message\n   * @throws If the user does not have the permission to whisper to other players\n   */\n  protected _processWhisperCommand(\n    command: string,\n    match: RegExpMatchArray,\n    chatData: ChatMessage.Data,\n    createOptions?: Entity.CreateOptions\n  ): void;\n\n  /**\n   * Process messages which are posted using a chat whisper command\n   * @param command       - The chat command type\n   * @param match         - The matched RegExp expressions\n   * @param chatData      - The initial chat data\n   * @param createOptions - Options used to create the message\n   */\n  protected _processChatCommand(\n    command: string,\n    match: RegExpMatchArray,\n    chatData: ChatMessage.Data,\n    createOptions: Entity.CreateOptions\n  ): void;\n\n  /**\n   * Add a sent message to an array of remembered messages to be re-sent if the user pages up with the up arrow key\n   * @param message - The message text being remembered\n   */\n  protected _remember(message: string): void;\n\n  /**\n   * Recall a previously sent message by incrementing up (1) or down (-1) through the sent messages array\n   * @param direction - The direction to recall, positive for older, negative for more recent\n   * @returns The recalled message, or an empty string\n   */\n  protected _recall(direction: number): string;\n\n  /**\n   * Compendium sidebar Context Menu creation\n   */\n  protected _contextMenu(html: JQuery): void;\n\n  /**\n   * Get the sidebar directory entry context options\n   * @returns The sidebar entry context options\n   */\n  protected _getEntryContextOptions(): ContextMenu.Item[];\n\n  /**\n   * Handle keydown events in the chat entry textarea\n   */\n  protected _onChatKeyDown(event: JQuery.KeyDownEvent): void;\n\n  /**\n   * Handle setting the preferred roll mode\n   */\n  protected _onChangeRollMode(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Handle single message deletion workflow\n   */\n  protected _onDeleteMessage(event: JQuery.ClickEvent): Promise<ChatMessage | null>;\n\n  /**\n   * Handle clicking of dice tooltip buttons\n   */\n  protected _onDiceRollClick(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle click events to export the chat log\n   */\n  protected _onExportLog(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle click events to flush the chat log\n   */\n  protected _onFlushLog(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle scroll events within the chat log container\n   * @param event - The initial scroll event\n   */\n  protected _onScrollLog(event: JQuery.ScrollEvent): void;\n}\n\ndeclare namespace ChatLog {\n  type Command =\n    | 'roll'\n    | 'gmroll'\n    | 'blindroll'\n    | 'selfroll'\n    | 'ic'\n    | 'ooc'\n    | 'emote'\n    | 'whisper'\n    | 'reply'\n    | 'gm'\n    | 'players'\n    | 'invalid';\n\n  interface Data {\n    user: User;\n\n    rollMode: keyof typeof CONFIG['Dice']['rollModes'];\n\n    rollModes: typeof CONFIG['Dice']['rollModes'];\n\n    isStream: boolean;\n  }\n\n  interface Options extends SidebarTab.Options {\n    /**\n     * @defaultValue `'chat'`\n     */\n    id: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/chat-log.html'`\n     */\n    template: string;\n\n    title: string;\n\n    scrollContainer: null;\n\n    /**\n     * @defaultValue `false`\n     */\n    stream: boolean;\n  }\n}\n"]},34461:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\combatTracker.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The combat and turn order tracker tab\n */\ndeclare class CombatTracker extends SidebarTab<CombatTracker.Options> {\n  /**\n   * Record a reference to the currently highlighted Token\n   * @defaultValue `null`\n   */\n  protected _highlighted: Token | null;\n\n  /**\n   * Record the currently tracked Combat encounter\n   * @defaultValue `null`\n   */\n  combat: Combat | null;\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): CombatTracker.Options;\n\n  /**\n   * @override\n   */\n  createPopout(): CombatTracker;\n\n  /**\n   * Initialize the combat tracker to display a specific combat encounter.\n   * If no encounter is provided, the tracker will be initialized with the first encounter in the viewed scene.\n   * @param combat - The combat encounter to initialize\n   *                 (default: `null`)\n   * @param render - Whether to re-render the sidebar after initialization\n   *                 (default: `true`)\n   */\n  initialize({ combat, render }?: { combat?: Combat | null; render?: boolean }): void;\n\n  /**\n   * Scroll the combat log container to ensure the current Combatant turn is centered vertically\n   */\n  scrollToTurn(): void;\n\n  /**\n   * @override\n   */\n  getData(options?: Application.RenderOptions): Promise<CombatTracker.Data>;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle new Combat creation request\n   */\n  protected _onCombatCreate(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle a Combat deletion request\n   * @remarks This is never called\n   */\n  protected _onCombatDelete(event: Event): Promise<void>;\n\n  /**\n   * Handle a Combat cycle request\n   */\n  protected _onCombatCycle(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle click events on Combat control buttons\n   * @param event - The originating mousedown event\n   */\n  protected _onCombatControl(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle a Combatant control toggle\n   * @param event - The originating mousedown event\n   */\n  protected _onCombatantControl(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle toggling the defeated status effect on a combatant Token\n   * @param c - The combatant data being modified\n   */\n  protected _onToggleDefeatedStatus(c: Combat.Combatant): Promise<void>;\n\n  /**\n   * Handle mouse-down event on a combatant name in the tracker\n   * @param event - The originating mousedown event\n   * @returns A Promise that resolves once the pan is complete\n   */\n  protected _onCombatantMouseDown(event: JQuery.ClickEvent): Promise<void> | void;\n\n  /**\n   * Handle mouse-hover events on a combatant in the tracker\n   */\n  protected _onCombatantHover(event: JQuery.MouseEnterEvent): void;\n\n  /**\n   * Handle mouse-unhover events for a combatant in the tracker\n   */\n  protected _onCombatantHoverOut(event: JQuery.MouseLeaveEvent): void;\n\n  /**\n   * Default folder context actions\n   */\n  protected _contextMenu(html: JQuery): void;\n\n  /**\n   * Get the sidebar directory entry context options\n   * @returns The sidebar entry context options\n   */\n  protected _getEntryContextOptions(): ContextMenu.Item[];\n\n  /**\n   * Display a dialog which prompts the user to enter a new initiative value for a Combatant\n   */\n  protected _onConfigureCombatant(li: JQuery): void;\n}\n\ndeclare namespace CombatTracker {\n  type Data = {\n    user: User;\n    started: boolean;\n    settings: Combat.ConfigValue;\n  } & (\n    | {\n        combats: [];\n        currentIndex: -1;\n        combatCount: 0;\n        hasCombat: false;\n        combat: null;\n        turns: [];\n        previousId: null;\n        nextId: null;\n        control: false;\n      }\n    | {\n        combats: Combat[];\n        currentIndex: number;\n        combatCount: number;\n        hasCombat: true;\n        combat: Combat;\n        turns: Turn[];\n        previousId: string | null;\n        nextId: string | null;\n        round: number;\n        turn: number;\n        control: boolean;\n      }\n  );\n\n  interface Options extends SidebarTab.Options {\n    /**\n     * @defaultValue `'combat'`\n     */\n    id: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/combat-tracker.html'`\n     */\n    template: string;\n\n    /**\n     * @defaultValue `'Combat Tracker'`\n     */\n    title: string;\n\n    /**\n     * @defaultValue `['.directory-list']`\n     */\n    scrollY: string[];\n  }\n\n  type Turn = foundry.utils.Duplicated<Combat.Combatant> & {\n    effects: Set<unknown>;\n    active: boolean;\n    css: string;\n    hasRolled: boolean;\n    hasResource: boolean;\n  };\n}\n"]},43824:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\compendiumDirectory.d.ts","/**\n * A compendium of knowledge arcane and mystical!\n */\ndeclare class CompendiumDirectory extends SidebarTab<CompendiumDirectory.Options> {\n  /**\n   * @override\n   */\n  static get defaultOptions(): CompendiumDirectory.Options;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): CompendiumDirectory.Data;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Compendium sidebar Context Menu creation\n   */\n  protected _contextMenu(html: JQuery): void;\n\n  /**\n   * Get the sidebar directory entry context options\n   * @returns The sidebar entry context options\n   */\n  protected _getEntryContextOptions(): ContextMenu.Item[];\n\n  /**\n   * Handle a Compendium Pack creation request\n   */\n  protected _onCreateCompendium(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle a Compendium Pack deletion request\n   * @param pack - The pack object requested for deletion\n   */\n  protected _onDeleteCompendium(pack: Compendium): Promise<Compendium | void>;\n}\n\ndeclare namespace CompendiumDirectory {\n  interface Data {\n    user: User;\n    packs: Record<string, PackData>;\n  }\n\n  interface Options extends SidebarTab.Options {\n    /**\n     * @defaultValue `'compendium'`\n     */\n    id: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/compendium.html'`\n     */\n    template: string;\n\n    /**\n     * @defaultValue `'Compendium Packs'`\n     */\n    title: string;\n  }\n\n  interface PackData {\n    label: string;\n    packs: Compendium[];\n  }\n}\n"]},7062:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\index.d.ts","import './chatLog';\nimport './combatTracker';\nimport './compendiumDirectory';\nimport './settings';\nimport './sidebarDirectory';\nimport './sidebarDirectories';\n"]},8027:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\settings.d.ts","/**\n * A SidebarTab for providing help messages and settings configurations.\n * The Settings sidebar is the furthest-to-right using a triple-cogs icon.\n */\ndeclare class Settings extends SidebarTab<Settings.Options> {\n  /**\n   * @override\n   */\n  static get defaultOptions(): Settings.Options;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): Settings.Data;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Delegate different actions for different settings buttons\n   */\n  protected _onSettingsButton(event: JQuery.ClickEvent): void;\n}\n\ndeclare namespace Settings {\n  interface Data {\n    user: User;\n    system: Game['system'];\n    coreVersion: string;\n    canConfigure: boolean;\n    canSetup: boolean;\n    coreUpdate: string | false;\n    modules: number;\n  }\n\n  interface Options extends SidebarTab.Options {\n    /**\n     * @defaultValue `'settings'`\n     */\n    id: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/settings.html'`\n     */\n    template: string;\n\n    /**\n     * @defaultValue `'Setttings'`\n     */\n    title: string;\n  }\n}\n"]},17217:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectories\\actorDirectory.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A directory list of Actor entities in the Sidebar\n * @see {@link Actor}\n */\ndeclare class ActorDirectory extends SidebarDirectory {\n  /**\n   * @override\n   */\n  static get entity(): 'Actor';\n\n  /**\n   * @override\n   * @see {@link Game.actors}\n   */\n  static get collection(): Game['actors'];\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): ActorDirectory.Data;\n\n  /**\n   * @param selector - (unused)\n   * @override\n   */\n  protected _canDragStart(selector: string | null): boolean;\n\n  /**\n   * @override\n   */\n  protected _onDragStart(event: DragEvent): false | void;\n\n  /**\n   * @param selector - (unused)\n   * @override\n   */\n  protected _canDragDrop(selector: string | null): boolean;\n\n  /**\n   * @override\n   */\n  protected _onClickEntityName(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * @override\n   */\n  protected _getEntryContextOptions(): ContextMenu.Item[];\n}\n\ndeclare namespace ActorDirectory {\n  interface Data extends SidebarDirectory.Data {\n    /**\n     * @defaultValue `'templates/sidebar/folder-partial.html'`\n     */\n    folderPartial: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/actor-partial.html'`\n     */\n    entityPartial: string;\n  }\n}\n"]},38329:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectories\\index.d.ts","import './actorDirectory';\nimport './itemDirectory';\nimport './journalDirectory';\nimport './macroDirectory';\nimport './playlistDirectory';\nimport './rollTableDirectory';\nimport './sceneDirectory';\n"]},90088:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectories\\itemDirectory.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A directory of Item entities in the Sidebar\n */\ndeclare class ItemDirectory extends SidebarDirectory {\n  /**\n   * @override\n   */\n  static get entity(): 'Item';\n\n  /**\n   * @override\n   * @see {@link Game.items}\n   */\n  static get collection(): Game['items'];\n\n  /**\n   * @param selector - (unused)\n   * @override\n   */\n  protected _canDragStart(selector: string | null): boolean;\n\n  /**\n   * @param selector - (unused)\n   * @override\n   */\n  protected _canDragDrop(selector: string | null): boolean;\n\n  /**\n   * @override\n   */\n  protected _getEntryContextOptions(): ContextMenu.Item[];\n}\n"]},23005:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectories\\journalDirectory.d.ts","/**\n * A directory list of JournalEntry entities in the Sidebar\n */\n// TODO: Remove when this class is updated!!!\n// eslint-disable-next-line\n// @ts-ignore\ndeclare class JournalDirectory extends SidebarDirectory<JournalDirectory.Options> {\n  /**\n   * @override\n   */\n  static get defaultOptions(): JournalDirectory.Options;\n\n  /**\n   * @override\n   */\n  get title(): string;\n\n  /**\n   * @override\n   */\n  static get entity(): 'JournalEntry';\n\n  /**\n   * @override\n   * @see {@link Game.journal}\n   */\n  static get collection(): Game['journal'];\n\n  /**\n   * @override\n   */\n  protected _getEntryContextOptions(): ContextMenu.Item[];\n}\n\ndeclare namespace JournalDirectory {\n  interface Options extends SidebarDirectory.Options {\n    /**\n     * @defaultValue `'journal'`\n     */\n    id: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/journal-directory.html'`\n     */\n    template: string;\n  }\n}\n"]},87747:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectories\\macroDirectory.d.ts","/**\n * A directory list of Macro entities. Unlike other directories, this app is only rendered in pop-out mode.\n *\n * @see {@link Macros}        The EntityCollection of Macro Entities\n * @see {@link Macro}         The Macro Entity\n * @see {@link MacroConfig}   The Macro Configuration Sheet\n */\n// TODO: Remove when this class is updated!!!\n// eslint-disable-next-line\n// @ts-ignore\ndeclare class MacroDirectory extends SidebarDirectory<MacroDirectory.Options> {\n  static get defaultOptions(): MacroDirectory.Options;\n\n  /**\n   * @override\n   */\n  static get entity(): 'Macro';\n\n  /**\n   * @override\n   * @see {@link Game.macros}\n   */\n  static get collection(): Game['macros'];\n\n  /**\n   * @override\n   */\n  protected _render(force?: boolean, options?: Application.RenderOptions): Promise<void>;\n\n  /**\n   * @override\n   * @remarks This is never called.\n   */\n  protected _onCreate(event: Event): Promise<void>;\n\n  /**\n   * @param selector - (unused)\n   * @override\n   */\n  protected _canDragStart(selector: string | null): true;\n}\n\ndeclare namespace MacroDirectory {\n  interface Options extends SidebarDirectory.Options {\n    /**\n     * @defaultValue `'macros'`\n     */\n    id: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/macro-directory.html'`\n     */\n    template: string;\n\n    /**\n     * @defaultValue `true`\n     */\n    canDrag: boolean;\n\n    /**\n     * @defaultValue `680`\n     */\n    height: number;\n  }\n}\n"]},72148:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectories\\playlistDirectory.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A directory listing of audio playlists\n */\ndeclare class PlaylistDirectory extends SidebarDirectory<PlaylistDirectory.Options> {\n  /**\n   * Track the playlist IDs which are currently expanded in their display\n   */\n  protected _expanded: Set<string>;\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): PlaylistDirectory.Options;\n\n  /**\n   * @override\n   */\n  static get entity(): 'Playlist';\n\n  /**\n   * @override\n   * @see {@link Game.playlists}\n   */\n  static get collection(): Game['playlists'];\n\n  /**\n   * Return an Array of the Playlist entities which are currently playing\n   */\n  get playing(): Playlist[];\n\n  /**\n   * Prepare the data used to render the AudioList application\n   * @param options - (unused)\n   */\n  getData(options?: Application.RenderOptions): PlaylistDirectory.Data;\n\n  /**\n   * Given a constant playback mode, provide the FontAwesome icon used to display it\n   */\n  protected _getModeIcon(mode: foundry.CONST.PlaylistMode): string;\n\n  /**\n   * Given a constant playback mode, provide the string tooltip used to describe it\n   */\n  protected _getModeTooltip(mode: foundry.CONST.PlaylistMode): string;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle global volume change for the playlist sidebar\n   */\n  protected _onGlobalVolume(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Handle Playlist collapse toggle\n   */\n  protected _onPlaylistCollapse(event: JQuery.ClickEvent): void;\n\n  /**\n   * Helper method to render the expansion or collapse of playlists\n   * @param speed - (default: `250`)\n   */\n  protected _collapse(li: JQuery, collapse: boolean, speed: number): void;\n\n  /**\n   * Handle Playlist edit action\n   */\n  protected _onPlaylistEdit(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle Playlist deletion requests\n   * Confirm the deletion with a yes/no dialog prompt\n   */\n  protected _onPlaylistDelete(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle Playlist track addition request\n   */\n  protected _onPlaylistAddTrack(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle Playlist playback state changes\n   */\n  protected _onPlaylistPlay(event: JQuery.ClickEvent, playing: boolean): void;\n\n  /**\n   * Handle cycling the playback mode for a Playlist\n   * @param event - The initial click event\n   */\n  protected _onPlaylistToggleMode(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle editing a Sound within a PLaylist\n   * @param event - The initial click event\n   */\n  protected _onSoundEdit(event: JQuery.ClickEvent): void;\n\n  /**\n   * Modify the playback state of a Sound within a Playlist\n   * @param event - The initial click event\n   */\n  protected _onSoundPlay(event: JQuery.ClickEvent, playing: boolean): void;\n\n  /**\n   * Handle volume adjustments to sounds within a Playlist\n   * @param event - The initial change event\n   */\n  protected _onSoundVolume(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Handle changes to the sound playback mode\n   * @param event - The initial click event\n   */\n  protected _onSoundToggleMode(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle Playlist track deletion request\n   */\n  protected _onSoundDelete(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle right click context-menu options on a Playlist or a Sound\n   */\n  protected _contextMenu(html: JQuery): void;\n\n  /**\n   * Get context menu options for individual sound effects\n   * @returns The context options for each sound\n   */\n  protected _getSoundContextOptions(): ContextMenu.Item[];\n}\n\ndeclare namespace PlaylistDirectory {\n  interface Data {\n    user: User;\n    isGM: boolean;\n    entities: PlaylistEntity[];\n    playlistModifier: ReturnType<typeof AudioHelper['volumeToInput']>;\n    ambientModifier: ReturnType<typeof AudioHelper['volumeToInput']>;\n    interfaceModifier: ReturnType<typeof AudioHelper['volumeToInput']>;\n  }\n\n  interface PlaylistEntity extends foundry.utils.Duplicated<Playlist.Data> {\n    modeIcon: string;\n    modeTooltip: string;\n    disabled: boolean;\n    controlCSS: string;\n    expanded: boolean;\n    sounds: Sound[];\n  }\n\n  interface Sound extends foundry.utils.Duplicated<Playlist.Sound> {\n    lvolume: ReturnType<typeof AudioHelper['volumeToInput']>;\n    controlCSS: string;\n  }\n\n  interface Options extends SidebarDirectory.Options {\n    /**\n     * @defaultValue The `dragSelector` of the first entry is `'.playlist-name'`.\n     */\n    dragDrop: SidebarDirectory.Options['dragDrop'];\n\n    /**\n     * @defaultValue `['name', 'playing', 'mode']`\n     */\n    renderUpdateKeys: string[];\n  }\n}\n"]},23026:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectories\\rollTableDirectory.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A directory list of RollTable entities in the Sidebar\n */\ndeclare class RollTableDirectory extends SidebarDirectory<RollTableDirectory.Options> {\n  static get defaultOptions(): RollTableDirectory.Options;\n\n  /**\n   * Reference named Entity class which this directory lists\n   */\n  static get entity(): 'RollTable';\n\n  /**\n   * Reference the EntityCollection of Entity instances which this directory lists\n   * @see {@link Game.tables}\n   */\n  static get collection(): Game['tables'];\n}\n\ndeclare namespace RollTableDirectory {\n  interface Options extends SidebarDirectory.Options {\n    /**\n     * @defaultValue `'tables'`\n     */\n    id: string;\n\n    /**\n     * @defaultValue `'templates/sidebar/roll-table-directory.html'`\n     */\n    template: string;\n\n    /**\n     * @defaultValue `'Rollable Tables Directory'`\n     */\n    title: string;\n  }\n}\n"]},95849:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectories\\sceneDirectory.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A directory listing of active game scenes\n */\ndeclare class SceneDirectory extends SidebarDirectory {\n  /**\n   * @override\n   */\n  static get entity(): 'Scene';\n\n  /**\n   * @override\n   * @see {@link Game.scenes}\n   */\n  static get collection(): Game['scenes'];\n\n  /**\n   * @override\n   * @remarks This is never called.\n   */\n  protected _onCreate(event: Event): Promise<Scene>;\n\n  /**\n   * @override\n   */\n  protected _getEntryContextOptions(): ContextMenu.Item[];\n}\n"]},75884:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectory.d.ts","/**\n * A shared pattern for the sidebar directory which Actors, Items, and Scenes all use\n * @typeParam P - the type of the options object\n */\ndeclare abstract class SidebarDirectory<\n  P extends SidebarDirectory.Options = SidebarDirectory.Options\n> extends SidebarTab<P> {\n  /**\n   * References to the set of Entities which are displayed in the Sidebar\n   */\n  entities: Entity[];\n\n  /**\n   * Reference the set of Folders which exist in this Sidebar\n   * @defaultValue `null`\n   */\n  folders: Folder[];\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): SidebarDirectory.Options;\n\n  /**\n   * The named entity which this Sidebar Directory contains\n   * @remarks This method is abstract in SidebarTab.\n   */\n  static get entity(): string;\n\n  /**\n   * The Entity collection which this Sidebar Directory contains\n   * @remarks This method is abstract in SidebarTab.\n   */\n  static get collection(): WorldCollection<any, any> | undefined;\n\n  /**\n   * A reference to the Entity class which is displayed within this EntityCollection\n   */\n  static get cls(): ConstructorOf<Entity>;\n\n  /**\n   * Initialize the content of the directory by categorizing folders and entities into a hierarchical tree structure.\n   */\n  initialize(): void;\n\n  tree: SidebarDirectory.Tree;\n\n  /**\n   * Given an entity type and a list of entities, set up the folder tree for that entity\n   * @param folders  - The Array of Folder objects to organize\n   * @param entities - The Array of Entity objects to organize\n   * @returns A tree structure containing the folders and entities\n   */\n  static setupFolders(folders: Folder[], entities: Entity[]): SidebarDirectory.Tree;\n\n  /**\n   * Populate a single folder with child folders and content\n   * This method is called recursively when building the folder tree\n   * @param allowChildren - (default: `true`)\n   */\n  protected static _populate(\n    folder: Folder,\n    folders: Folder[],\n    entities: Entity[],\n    {\n      allowChildren\n    }: {\n      allowChildren: boolean;\n    }\n  ): [Folder[], Entity[]];\n\n  /**\n   * @override\n   */\n  render(force?: boolean, context?: Partial<SidebarDirectory.RenderContext>): this | void;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Application.RenderOptions): SidebarDirectory.Data | PlaylistDirectory.Data;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n  /**\n   * Collapse all subfolders in this directory\n   */\n  collapseAll(): void;\n\n  /**\n   * Activate event listeners triggered within the Actor Directory HTML\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle clicking on an Entity name in the Sidebar directory\n   * @param event - The originating click event\n   */\n  protected _onClickEntityName(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle new creation request\n   * @param event - The originating button click event\n   */\n  protected _onCreateEntity(event: JQuery.ClickEvent): Promise<Entity>;\n\n  /**\n   * Create a new Folder in this SidebarDirectory\n   * @param event - The originating button click event\n   */\n  protected _onCreateFolder(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle toggling the collapsed or expanded state of a folder within the directory tab\n   * @param event - The originating click event\n   */\n  protected _toggleFolder(event: JQuery.ClickEvent): void;\n\n  /**\n   * @override\n   */\n  protected _onDragStart(event: DragEvent): void;\n\n  protected _dragType: string;\n\n  /**\n   * Highlight folders as drop targets when a drag event enters or exits their area\n   * @param event - The DragEvent which is in progress\n   */\n  protected _onDragHighlight(event: JQuery.DragEnterEvent | JQuery.DragLeaveEvent): void;\n\n  /**\n   * @override\n   */\n  protected _onDrop(event: DragEvent): void;\n\n  /**\n   * Define the behavior of the sidebar tab when it received a dropped data object\n   * @param event - The original drop event\n   * @param data  - The data being dropped\n   */\n  protected _handleDropData(event: DragEvent, data: unknown): unknown;\n\n  /**\n   * Default folder context actions\n   */\n  protected _contextMenu(html: JQuery): void;\n\n  /**\n   * Get the set of ContextMenu options which should be used for Folders in a SidebarDirectory\n   * @returns The Array of context options passed to the ContextMenu instance\n   */\n  protected _getFolderContextOptions(): ContextMenu.Item[];\n\n  /**\n   * Get the set of ContextMenu options which should be used for Entities in a SidebarDirectory\n   * @returns The Array of context options passed to the ContextMenu instance\n   */\n  protected _getEntryContextOptions(): ContextMenu.Item[];\n}\n\ndeclare namespace SidebarDirectory {\n  interface Data {\n    user: User;\n\n    tree: SidebarDirectory['tree'];\n\n    canCreate: boolean;\n\n    sidebarIcon: string;\n  }\n\n  interface Options extends SidebarTab.Options {\n    /**\n     * @defaultValue\n     * ```typescript\n     * `${this.entity.toLowerCase()}s`\n     * ```\n     */\n    id: string;\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * `templates/sidebar/${this.entity.toLowerCase()}-directory.html`\n     * ```\n     */\n    template: string;\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * `${this.entity}s Directory`\n     * ```\n     */\n    title: string;\n\n    /**\n     * @defaultValue `['name', 'img', 'thumb', 'permission', 'sort', 'folder']`\n     */\n    renderUpdateKeys: string[];\n\n    /**\n     * @defaultValue `'auto'`\n     */\n    height: number | 'auto';\n\n    /**\n     * @defaultValue `['ol.directory-list']`\n     */\n    scrollY: string[];\n\n    dragDrop: Array<\n      DragDrop.Options & {\n        /**\n         * @defaultValue `'.directory-item'`\n         */\n        dragSelector: string;\n\n        /**\n         * @defaultValue `'.directory-list'`\n         */\n        dropSelector: string;\n      }\n    >;\n\n    filters: Array<\n      SearchFilter.Options & {\n        /**\n         * @defaultValue `'input[name=\"search\"]'`\n         */\n        inputSelector: string;\n\n        /**\n         * @defaultValue `'.directory-list'`\n         */\n        contentSelector: string;\n      }\n    >;\n  }\n\n  interface RenderContext extends Application.RenderOptions {\n    action: string;\n\n    data: string;\n\n    entityType: string;\n  }\n\n  interface Tree {\n    root: boolean;\n\n    content: Entity[];\n\n    children: Folder[];\n  }\n}\n"]},12761:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\audioHelper.d.ts","/**\n * A helper class to provide common functionality for working with HTML5 audio and Howler instances\n * A singleton instance of this class is available as `game.audio`\n *\n * Audio playback in Foundry VTT is managed by Howler.js (https://howlerjs.com/). Several methods and\n * attributes in this API return :class:`Howl` instances. See the Howler documentation for details\n * and example usage of the Howl API.\n */\ndeclare class AudioHelper {\n  constructor();\n\n  /**\n   * The set of Howl instances which have been created for different audio paths\n   * @defaultValue `{}`\n   */\n  sounds: Record<string, AudioHelper.Sound>;\n\n  /**\n   * A user gesture must be registered before audio can be played.\n   * This Array contains the Howl instances which are requested for playback prior to a gesture.\n   * Once a gesture is observed, we begin playing all elements of this Array.\n   * @defaultValue `[]`\n   */\n  pending: any[];\n\n  /**\n   * A flag for whether video playback is currently locked by awaiting a user gesture\n   * @defaultValue `false`\n   */\n  locked: boolean;\n\n  /**\n   * Audio Context singleton used for analysing audio levels of each stream\n   * Only created if necessary to listen to audio streams.\n   * @defaultValue `null`\n   */\n  protected _audioContext: AudioContext | null;\n\n  /**\n   * Map of all streams that we listen to for determining the decibel levels.\n   * Used for analyzing audio levels of each stream.\n   */\n  protected _analyserStreams: Record<string, AudioHelper.AnalyserStream>;\n\n  /**\n   * Interval ID as returned by setInterval for analysing the volume of streams\n   * When set to 0, means no timer is set.\n   * @defaultValue `0`\n   */\n  protected _analyserInterval: number;\n\n  /**\n   * Fast Fourrier Transform Array.\n   * Used for analysing the decibel level of streams. The array is allocated only once\n   * then filled by the analyser repeatedly. We only generate it when we need to listen to\n   * a stream's level, so we initialize it to null.\n   * @defaultValue `null`\n   */\n  protected _fftArray: Float32Array[] | null;\n\n  /**\n   * The Native interval for the AudioHelper to analyse audio levels from streams\n   * Any interval passed to startLevelReports() would need to be a multiple of this value.\n   * Defaults to 50ms.\n   * @defaultValue `50`\n   */\n  levelAnalyserNativeInterval: number;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Register client-level settings for global volume overrides\n   */\n  static registerSettings(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a Howl instance for a given audio source URL\n   * @param preload  - (default: `false`)\n   * @param autoplay - (default: `false`)\n   * @param html5    - (default: `false`)\n   * @param volume   - (default: `0.0`)\n   * @param loop     - (default: `false`)\n   */\n  create({\n    src,\n    preload,\n    autoplay,\n    html5,\n    volume,\n    loop\n  }?: {\n    src: string;\n    preload?: boolean;\n    autoplay?: boolean;\n    html5?: boolean;\n    volume?: number;\n    loop?: boolean;\n  }): any;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Test whether a source file has a supported audio extension type\n   * @param src - A requested audio source path\n   * @returns Does the filename end with a valid audio extension?\n   */\n  static hasAudioExtension(src: string): boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Play a single audio effect by it's source path and Howl ID\n   */\n  play(src: string, id: number): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Register an event listener to await the first mousemove gesture and begin\n   * playback once observed\n   */\n  awaitFirstGesture(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle the first observed user gesture\n   * @param event - The mouse-move event which enables playback\n   */\n  protected _onFirstGesture(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  preload(data: any): void;\n\n  /* -------------------------------------------- */\n  /*  Socket Listeners and Handlers               */\n  /* -------------------------------------------- */\n\n  /**\n   * Open socket listeners which transact ChatMessage data\n   */\n  protected static socketListeners(socket: any): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Play a one-off sound effect which is not part of a Playlist\n   *\n   * @param data     - An object configuring the audio data to play\n   * @param src      - The audio source file path, either a public URL or a local path relative to the public directory\n   *                   (default: `null`)\n   * @param volume   - The volume level at which to play the audio, between 0 and 1\n   *                   (default: `1.0`)\n   * @param autoplay - Begin playback of the audio effect immediately once it is loaded.\n   *                   (default: `true`)\n   * @param loop     - Loop the audio effect and continue playing it until it is manually stopped.\n   *                   (default: `false`)\n   * @param push     - Push the audio sound effect to other connected clients?\n   *                   (default: `false`)\n   *\n   * @returns A Howl instance which controls audio playback.\n   *\n   * @example\n   * ```typescript\n   * // Play the sound of a locked door for all players\n   * AudioHelper.play({src: \"sounds/lock.wav\", volume: 0.8, autoplay: true, loop: false}, true);\n   * ```\n   */\n  static play(\n    data: {\n      /**\n       * The audio source file path, either a public URL or a local path relative to the public directory\n       * @defaultValue `null`\n       */\n      src: string;\n\n      /**\n       * The volume level at which to play the audio, between 0 and 1\n       * @defaultValue `1.0`\n       */\n      volume: number;\n\n      /**\n       * Begin playback of the audio effect immediately once it is loaded.\n       * @defaultValue `true`\n       */\n      autoplay: boolean;\n\n      /**\n       * Push the audio sound effect to other connected clients?\n       * @defaultValue `false`\n       */\n      loop: boolean;\n    },\n    push: boolean\n  ): any;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a Howl object and load it to be ready for later playback\n   * @param data - The audio data to preload\n   */\n  static preload(data: object): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Returns the volume value based on a range input volume control's position.\n   * This is using an exponential approximation of the logarithmic nature of audio level perception\n   * @param value - Value between [0, 1] of the range input\n   * @param order - the exponent of the curve\n   *                (default: `1.5`)\n   */\n  static inputToVolume(control: number | string, order?: number): number;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Counterpart to inputToVolume()\n   * Returns the input range value based on a volume\n   * @param volume - Value between [0, 1] of the volume level\n   * @param order - the exponent of the curve\n   *                (default: `1.5`)\n   */\n  static volumeToInput(volume: number, order?: number): number;\n\n  /* -------------------------------------------- */\n  /*  Audio Stream Analysis                       */\n  /* -------------------------------------------- */\n\n  /**\n   * Returns a singleton AudioContext if one can be created.\n   * An audio context may not be available due to limited resources or browser compatibility\n   * in which case null will be returned\n   *\n   * @returns A singleton AudioContext or null if one is not available\n   */\n  getAudioContext(): AudioContext | null;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Registers a stream for periodic reports of audio levels.\n   * Once added, the callback will be called with the maximum decibel level of\n   * the audio tracks in that stream since the last time the event was fired.\n   * The interval needs to be a multiple of `AudioHelper.levelAnalyserNativeInterval` which defaults at 50ms\n   *\n   * @param id        - An id to assign to this report. Can be used to stop reports\n   * @param stream    - The MediaStream instance to report activity on.\n   * @param callback  - The callback function to call with the decibel level.\n   * @param interval  - The interval at which to produce reports.\n   *                    (default: `50`)\n   * @param smoothing - The smoothingTimeConstant to set on the audio analyser.\n   *                    Refer to AudioAnalyser API docs.\n   *                    (default: `0.1`)\n   * @returns Returns whether or not listening to the stream was successful\n   */\n  startLevelReports(\n    id: string,\n    stream: MediaStream,\n    callback: (maxDecibel: number, fftArray: Float32Array) => void,\n    interval?: number,\n    smoothing?: number\n  ): boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Stop sending audio level reports\n   * This stops listening to a stream and stops sending reports.\n   * If we aren't listening to any more streams, cancel the global analyser timer.\n   * @param id - The id of the reports that passed to startLevelReports.\n   */\n  stopLevelReports(id: string): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Ensures the global analyser timer is started\n   *\n   * We create only one timer that runs every 50ms and only create it if needed, this is meant to optimize things\n   * and avoid having multiple timers running if we want to analyse multiple streams at the same time.\n   * I don't know if it actually helps much with performance but it's expected that limiting the number of timers\n   * running at the same time is good practice and with JS itself, there's a potential for a timer congestion\n   * phenomenon if too many are created.\n   */\n  protected _ensureAnalyserTimer(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Cancel the global analyser timer\n   * If the timer is running and has become unnecessary, stops it.\n   */\n  protected _cancelAnalyserTimer(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Capture audio level for all speakers and emit a webrtcVolumes custom event with all the volume levels\n   * detected since the last emit.\n   * The event's detail is in the form of `{userId: decibelLevel}`\n   */\n  protected _emitVolumes(): void;\n}\n\ndeclare namespace AudioHelper {\n  interface AnalyserStream {\n    stream: MediaStream;\n    analyser: AnalyserNode;\n    interval: number;\n    callback: (maxDecibel: number) => void;\n\n    /**\n     * Used as a counter of 50ms increments in case the interval is more than 50\n     * @defaultValue `0`\n     */\n    _lastEmit: number;\n  }\n\n  interface Sound {\n    howl: any;\n    loaded: boolean;\n    ids: [];\n  }\n}\n"]},41396:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\avClient.d.ts","/**\n * An implementation interface for an Audio/Video client which is extended to provide broadcasting functionality.\n */\ndeclare abstract class AVClient {\n  /**\n   * @param master   - The master orchestration instance\n   * @param settings - The audio/video settings being used\n   */\n  constructor(master: AVMaster, settings: AVSettings);\n\n  master: AVMaster;\n\n  settings: AVSettings;\n\n  /**\n   * One-time initialization actions that should be performed for this client implementation.\n   * This will be called only once when the Game object is first set-up.\n   */\n  abstract initialize(): Promise<void>;\n\n  /**\n   * Connect to any servers or services needed in order to provide audio/video functionality.\n   * Any parameters needed in order to establish the connection should be drawn from the settings object.\n   * This function should return a boolean for whether the connection attempt was successful.\n   * @returns Was the connection attempt successful?\n   */\n  abstract connect(): Promise<boolean>;\n\n  /**\n   * Disconnect from any servers or services which are used to provide audio/video functionality.\n   * This function should return a boolean for whether a valid disconnection occurred.\n   * @returns Did a disconnection occur?\n   */\n  abstract disconnect(): Promise<boolean>;\n\n  /**\n   * Provide an Object of available audio sources which can be used by this implementation.\n   * Each object key should be a device id and the key should be a human-readable label.\n   */\n  abstract getAudioSinks(): Promise<Record<string, string>>;\n\n  /**\n   * Provide an Object of available audio sources which can be used by this implementation.\n   * Each object key should be a device id and the key should be a human-readable label.\n   */\n  abstract getAudioSources(): Promise<Record<string, string>>;\n\n  /**\n   * Provide an Object of available video sources which can be used by this implementation.\n   * Each object key should be a device id and the key should be a human-readable label.\n   */\n  abstract getVideoSources(): Promise<Record<string, string>>;\n\n  /**\n   * Return an array of Foundry User IDs which are currently connected to A/V.\n   * The current user should also be included as a connected user in addition to all peers.\n   * @returns The connected User IDs\n   */\n  abstract getConnectedUsers(): string[];\n\n  /**\n   * Provide a MediaStream instance for a given user ID\n   * @param userId - The User id\n   * @returns The MediaStream for the user, or null if the user does not have one\n   */\n  abstract getMediaStreamForUser(userId: string): MediaStream | null;\n\n  /**\n   * Is outbound audio enabled for the current user?\n   */\n  abstract isAudioEnabled(): boolean;\n\n  /**\n   * Is outbound video enabled for the current user?\n   */\n  abstract isVideoEnabled(): boolean;\n\n  /**\n   * Set whether the outbound audio feed for the current game user is enabled.\n   * This method should be used when the user marks themselves as muted or if the gamemaster globally mutes them.\n   * @param enable - Whether the outbound audio track should be enabled (true) or disabled (false)\n   */\n  abstract toggleAudio(enable: boolean): void;\n\n  /**\n   * Set whether the outbound audio feed for the current game user is actively broadcasting.\n   * This can only be true if audio is enabled, but may be false if using push-to-talk or voice activation modes.\n   * @param broadcast - Whether outbound audio should be sent to connected peers or not?\n   */\n  abstract toggleBroadcast(broadcast: boolean): void;\n\n  /**\n   * Set whether the outbound video feed for the current game user is enabled.\n   * This method should be used when the user marks themselves as hidden or if the gamemaster globally hides them.\n   * @param enable - Whether the outbound audio track should be enabled (true) or disabled (false)\n   */\n  abstract toggleVideo(enable: boolean): void;\n\n  /**\n   * Set the Video Track for a given User ID to a provided VideoElement\n   * @param userId       - The User ID to set to the element\n   * @param videoElement - The HTMLVideoElement to which the video should be set\n   */\n  abstract setUserVideo(userId: string, videoElement: HTMLVideoElement): Promise<void>;\n\n  /**\n   * Handle changes to A/V configuration settings.\n   * @param changed - The settings which have changed\n   */\n  onSettingsChanged(changed: DeepPartial<AVSettings.Settings>): void;\n}\n"]},56153:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\avClients\\easyRTCClient.d.ts","/**\n * An AVClient implementation that uses WebRTC and the EasyRTC library.\n */\ndeclare class EasyRTCClient extends AVClient {\n  /**\n   * @param master   - The master orchestration instance\n   * @param settings - The audio/video settings being used\n   */\n  constructor(master: AVMaster, settings: AVSettings);\n\n  /**\n   * Store the name of the joined EasyRTC room\n   * @defaultValue `null`\n   */\n  protected _room: string | null;\n\n  /**\n   * A mapping of easyRtcId peer ids to Foundry User ids\n   * @defaultValue `{}`\n   */\n  protected _usernameCache: Record<string, string>;\n\n  /**\n   * An array of easyRtcId peers that rejected our call. Avoid continually trying to call the same peer.\n   * @defaultValue `[]`\n   */\n  protected _callRejections: string[];\n\n  /** @override */\n  initialize(): Promise<void>;\n\n  /** @override */\n  connect(): Promise<true>;\n\n  /** @override */\n  disconnect(): Promise<true>;\n\n  /**\n   * Connect to the WebRTC server and configure ICE/TURN servers\n   * @returns Was the server connected?\n   */\n  protected _connectServer({\n    type,\n    room,\n    url,\n    username,\n    password\n  }: {\n    type?: 'FVTT' | 'custom';\n    room?: string;\n    url: string;\n    username: string;\n    password: string;\n  }): Promise<boolean>;\n\n  /**\n   * Setup the custom TURN relay to be used in subsequent calls if there is one configured\n   * If configured, setup custom TURN configuration for future calls. Turn credentials are mandatory in WebRTC.\n   */\n  protected _setupCustomTURN(): void;\n\n  /**\n   * Initialize a local media stream\n   * Capture the local audio and video and returns the stream associated with them.\n   *\n   * If `temporary` is false (default), then this will initialize the master stream, not the actual\n   * streams being sent to individual users. However, if a master stream was already created, it\n   * will automatically get closed and every individual streams derived from it that are being sent\n   * to connected users will be removed from the calls.\n   * Each established or subsequent calls will receive a copy of the created stream (A/V depending on user permissions)\n   *\n   * If `temporary` is true then this only applies to a temporary stream and does not affect\n   * the master stream or any streams in existing calls.\n   * Note that this assumes only one temporary stream can be created at a time.\n   *\n   * @param audioSrc  - ID of the audio source to capture from or null to disable Audio\n   *                    (default: `undefined`)\n   * @param videoSrc  - ID of the video source to capture from or null to disable Video\n   *                    (default: `undefined`)\n   * @param temporary - Whether to create a temporary stream or the master stream\n   *                    (default: `false`)\n   * @returns Returns the local stream or `null` if none could be created\n   */\n  protected _initializeLocal({\n    audioSrc,\n    videoSrc,\n    temporary\n  }?: {\n    audioSrc?: string | null;\n    videoSrc?: string | null;\n    temporary?: boolean;\n  }): Promise<MediaStream>;\n\n  /**\n   * Create an open a local stream when initially connecting to the server.\n   * This local stream becomes the \"master\" stream which tracks your own device inputs.\n   * The master stream is cloned to provide a stream to every connected peer.\n   */\n  protected _openLocalStream(\n    audioSrc: string | undefined | null,\n    videoSrc: string | undefined | null,\n    temporary?: boolean\n  ): Promise<MediaStream | null>;\n\n  /**\n   * Close the local stream\n   */\n  protected _closeLocalStream(temporary?: boolean): void;\n\n  /**\n   * Define media constraints to control the resolution and devices used.\n   * We need to set our own constraints so we can specify a min/max range of resolutions.\n   */\n  protected _getStreamMediaConstraints(\n    videoSrc: string | undefined | null,\n    audioSrc: string | undefined | null\n  ): EasyRTCClient.StreamMediaConstraints;\n\n  /**\n   * Call a peer and establish a connection with them\n   * @param easyRtcId - The peer ID to call\n   * @returns Returns false if no call was made or true if the call is successful.\n   * @throws raises an Exception in case of failure to establish the call.\n   */\n  protected _performCall(easyRtcId: string): Promise<boolean>;\n\n  /**\n   * Create a MediaStream to be sent to a specific peer.\n   * This stream should control whether outbound video and audio is transmitted.\n   * Create the stream as a clone of the current master stream for configuration on a peer-to-peer basis.\n   */\n  protected _createStreamForPeer(peer: string): MediaStream | null;\n\n  /** @override */\n  getAudioSinks(): Promise<Record<string, string>>;\n\n  /** @override */\n  getAudioSources(): Promise<Record<string, string>>;\n\n  /** @override */\n  getVideoSources(): Promise<Record<string, string>>;\n\n  /**\n   * Transform the device info array from easyrtc into an object with `{id: label}` keys\n   * @param list - The list of devices\n   */\n  protected _deviceInfoToObject(list: EasyRTCClient.DeviceSource[]): Record<string, string>;\n\n  /**\n   * Obtain the EasyRTC user ID of a user based on their Foundry VTT user ID\n   * @param userId - The ID of the user\n   * @returns The EasyRtcId of the peer\n   */\n  protected _userIdToEasyRtcId(userId: string): string | null;\n\n  /** @override */\n  getConnectedUsers(): string[];\n\n  /**\n   * Get MediaStream instances for every connected peer in the room.\n   * @returns - An array of stream information for each peer\n   */\n  getConnectedStreams(): EasyRTCClient.StreamInfo;\n\n  /** @override */\n  getMediaStreamForUser(userId: string): MediaStream;\n\n  /** @override */\n  isAudioEnabled(): boolean;\n\n  /** @override */\n  isVideoEnabled(): boolean;\n\n  /**\n   * Handle a request to enable or disable the outbound audio feed for the current game user.\n   * @param enable - Whether the outbound audio track should be enabled (true) or disabled (false)\n   */\n  toggleAudio(enable: boolean): void;\n\n  /**\n   * Set whether the outbound audio feed for the current game user is actively broadcasting.\n   * This can only be true if audio is enabled, but may be false if using push-to-talk or voice activation modes.\n   * @param broadcast - Whether outbound audio should be sent to connected peers or not?\n   */\n  toggleBroadcast(broadcast: boolean): void;\n\n  /**\n   * Handle a request to enable or disable the outbound video feed for the current game user.\n   * @param enable - Whether the outbound video track should be enabled (true) or disabled (false)\n   */\n  toggleVideo(enable: boolean): void;\n\n  /** @override */\n  setUserVideo(userId: string, videoElement: HTMLVideoElement): Promise<void>;\n\n  /**\n   * Enable or disable the audio tracks in a stream\n   *\n   * Disabling a track represents what a typical user would consider muting it.\n   * We use the term 'enable' here instead of 'mute' to match the MediaStreamTrack\n   * field name and to avoid confusion with the 'muted' read-only field of the MediaStreamTrack\n   * as well as the video element's `muted` field which only stops playing the audio.\n   * Muting by definition stops rendering any of the data, while a disabled track in this case\n   * is still rendering its data, but is simply generating disabled content (silence and black frames)\n   * See https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled\n   *\n   * @param stream - The stream to modify\n   * @param enable - (optional) Whether to enable or disable the tracks\n   *                 (default: `true`)\n   */\n  enableStreamAudio(stream: MediaStream, enable?: boolean): void;\n\n  /**\n   * Enable or disable the video tracks in a stream\n   *\n   * Disabling a track represents what a typical user would consider muting it. We use the term 'enable' here instead\n   * of 'mute' to match the MediaStreamTrack field name and to avoid confusion with the 'muted' read-only field of the\n   * MediaStreamTrack as well as the video element's `muted` field which only stops playing the audio.\n   *\n   * Muting by definition stops rendering any of the data, while a disabled track in this case is still rendering its\n   * data, but is simply generating disabled content (silence and black frames).\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled\n   *\n   * @param stream - The stream to modify\n   * @param enable - (optional) Whether to enable or disable the tracks\n   *                 (default: `true`)\n   */\n  enableStreamVideo(stream: MediaStream, enable?: boolean): void;\n\n  /**\n   * Enables or disables media tracks\n   * See https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled\n   * @param tracks - The tracks to enable/disable\n   * @param enable - Whether to enable or disable the tracks\n   */\n  protected _enableMediaTracks(tracks: MediaStreamTrack[], enable: boolean): void;\n\n  /**\n   * Callback used to check if an incoming call should be accepted or not\n   * @param easyRtcId - The peer ID of the caller\n   * @param acceptor  - Function to call with whether or not to accept the call and the media streams to use\n   */\n  protected _answerIncomingCall(\n    easyRtcId: string,\n    acceptor: (accept: boolean, streamNames: string[] | null) => unknown\n  ): void;\n\n  /**\n   * Called when the connection to the signaling server is lost (unintentionally).\n   * This handles the case of when connectivity is interrupted non-deliberately.\n   */\n  protected _onConnectionLost(): void;\n\n  /**\n   * Called when an error occurs\n   */\n  protected _onError({ errorCode, errorText }: { errorCode: string; errorText: string }): void;\n\n  /**\n   * Called whenever there is a change in the list of occupants in a room.\n   * It can also be called if a peer's state changes, such as when a call is established or ended.\n   * For each other peer in the room, record their user ID and establish a call with them.\n   * Record the username associated with each peer.\n   *\n   * Important: We need to make sure that only user initiates a call, instead of both trying to call each other.\n   * Resolve this by having the alphabetically greater ID call the other peer.\n   *\n   * @param roomName    - The room name where occupants have changed\n   * @param otherPeople - An array of other peers in the room\n   * @param myInfo      - My own connection info\n   */\n  protected _onRoomOccupantsChange(\n    roomName: string,\n    otherPeople: Record<string, any>,\n    myInfo: { easyrtcid: string; [key: string]: any }\n  ): Promise<void>;\n\n  /**\n   * Called when the connection with a peer has been established\n   */\n  protected onPeerOpen(easyRtcId: string): void;\n\n  /**\n   * Called when the connection with a peer has been lost and the ICE machine was unable to re-establish it.\n   * In case of irrecoverable connection loss with the peer, hanging up the call will cause a roomOccupantListener\n   * signal to be sent and we will automatically try to reconnect to the user.\n   * First make sure that they are still in the room so we don't try to hangup with an easyRtcId that is invalid.\n   */\n  protected _onPeerClosed(easyRtcId: string): void;\n\n  /**\n   * Called when a remote stream is added to an existing call\n   */\n  protected _onPeerConnect(easyRtcId: string, stream: MediaStream): void;\n\n  /**\n   * Called when a remote stream is removed from an existing call\n   */\n  protected _onPeerDisconnect(easyRtcId: string, stream: MediaStream, streamName: string): void;\n\n  /**\n   * @deprecated Use `getMediaStreamForUser` instead\n   */\n  getStreamForUser(userId: string): MediaStream;\n}\n\ndeclare namespace EasyRTCClient {\n  interface StreamMediaConstraints {\n    video:\n      | {\n          /**\n           * @defaultValue `4/3`\n           */\n          aspectRatio: number;\n\n          width: {\n            /**\n             * @defaultValue `32=`\n             */\n            ideal: number;\n\n            /**\n             * @defaultValue `640`\n             */\n            max: number;\n\n            /**\n             * @defaultValue `160`\n             */\n            min: number;\n          };\n\n          height: {\n            /**\n             * @defaultValue `240`\n             */\n            ideal: number;\n\n            /**\n             * @defaultValue `480`\n             */\n            max: number;\n\n            /**\n             * @defaultValue `120`\n             */\n            min: number;\n          };\n\n          frameRate: {\n            /**\n             * @defaultValue `15`\n             */\n            ideal: number;\n\n            /**\n             * @defaultValue `30`\n             */\n            max: number;\n          };\n\n          deviceId: string | undefined | null;\n        }\n      | false;\n    audio:\n      | {\n          deviceId: string | undefined | null;\n        }\n      | false;\n  }\n\n  interface DeviceSource {\n    deviceId: string;\n    groupId: string;\n    label: string;\n    kind: 'audio' | 'video';\n  }\n\n  interface StreamInfo {\n    id: string;\n    connection: RTCPeerConnection;\n    local: MediaStream | null;\n    remote: MediaStream | null;\n  }\n}\n"]},99176:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\avMaster.d.ts","/**\n * The master Audio/Video controller instance.\n * This is available as the singleton game.webrtc\n */\ndeclare class AVMaster {\n  constructor();\n\n  settings: AVSettings;\n\n  config: AVConfig;\n\n  /**\n   * The Audio/Video client class\n   */\n  client: AVClient;\n\n  /**\n   * A flag to track whether the current user is actively broadcasting their microphone.\n   * @defaultValue `false`\n   */\n  broadcasting: boolean;\n\n  /**\n   * Flag to determine if we are connected to the signalling server or not.\n   * This is required for synchronization between connection and reconnection attempts.\n   * @defaultValue `false`\n   */\n  protected _connected: boolean;\n\n  /**\n   * A flag to track whether the A/V system is currently in the process of reconnecting.\n   * This occurs if the connection is lost or interrupted.\n   * @defaultValue `false`\n   */\n  protected _reconnecting: boolean;\n\n  /**\n   * @defaultValue `{}`\n   */\n  protected _speakingData: AVMaster.SpeakingData;\n  /**\n   * @defaultValue `{}`\n   */\n  protected _pttHandlers: AVMaster.PTTHandlers;\n  /**\n   * @defaultValue `0`\n   */\n  protected _pttMuteTimeout: number;\n\n  get mode(): AVSettings.VoiceMode;\n\n  /**\n   * Connect to the Audio/Video client.\n   * @returns Was the connection attempt successful?\n   */\n  connect(): Promise<boolean>;\n\n  /**\n   * Disconnect from the Audio/Video client.\n   * @returns Whether an existing connection was terminated?\n   */\n  disconnect(): Promise<boolean>;\n\n  /**\n   * Callback actions to take when the user becomes disconnected from the server.\n   */\n  reestablish(): Promise<void>;\n\n  /**\n   * Initialize the local broadcast state.\n   */\n  protected _initialize(): void;\n\n  /**\n   * A user can broadcast audio if the AV mode is compatible and if they are allowed to broadcast.\n   */\n  canUserBroadcastAudio(userId: string): boolean;\n\n  /**\n   * A user can share audio if they are allowed to broadcast and if they have not muted themselves or been blocked.\n   */\n  canUserShareAudio(userId: string): boolean;\n\n  /**\n   * A user can broadcast video if the AV mode is compatible and if they are allowed to broadcast.\n   */\n  canUserBroadcastVideo(userId: string): boolean;\n\n  /**\n   * A user can share video if they are allowed to broadcast and if they have not hidden themselves or been blocked.\n   */\n  canUserShareVideo(userId: string): boolean;\n\n  /**\n   * Trigger a change in the audio broadcasting state when using a push-to-talk workflow.\n   * @param intent - The user's intent to broadcast. Whether an actual broadcast occurs will depend\n   *                 on whether or not the user has muted their audio feed.\n   */\n  broadcast(intent: boolean): void;\n\n  /**\n   * Set up audio level listeners to handle voice activation detection workflow.\n   * @param mode - The currently selected voice broadcasting mode\n   */\n  protected _initializeUserVoiceDetection(mode: AVSettings.VoiceMode): void;\n\n  /**\n   * Activate voice detection tracking for a userId on a provided MediaStream.\n   * Currently only a MediaStream is supported because MediaStreamTrack processing is not yet supported cross-browser.\n   * @param userId - The Foundry User ID whose voice is being processed\n   * @param stream - The MediaStream which corresponds to that User\n   * @param ms     - A number of milliseconds which represents the voice activation volume interval\n   *                 (default: `CONFIG.WebRTC.detectPeerVolumeInterval`)\n   */\n  activateVoiceDetection(userId: string, stream: MediaStream, ms?: number): void;\n\n  /**\n   * Actions which the orchestration layer should take when a peer user disconnects from the audio/video service.\n   * @param userId - The id of the disconnecting User\n   */\n  deactivateVoiceDetection(userId: string): void;\n\n  /**\n   * Periodic notification of user audio level\n   *\n   * This function uses the audio level (in dB) of each stream it's listening to to determine if a user\n   * is speaking or not and notifies the UI of such changes.\n   *\n   * The User is considered speaking if they are above the decibel threshold in any of the history values.\n   * This marks them as speaking as soon as they have a high enough volume, and marks them as not speaking only after\n   * they drop below the threshold in all histories (last 4 volumes = for 200 ms).\n   *\n   * There can be more optimal ways to do this and which uses whether the user was already considered speaking before\n   * or not, in order to eliminate short bursts of audio (coughing for example).\n   *\n   * @param userId  - The user ID of the user whose audio levels are being reported\n   * @param dbLevel - The audio level in decibels of the user within the last 50ms\n   */\n  protected _onAudioLevel(userId: string, dbLevel: number): void;\n\n  /**\n   * Set up interactivity and handling of push-to-talk broadcasting workflow.\n   */\n  _initializePushToTalk(): void;\n\n  /**\n   * Resets the speaking history of a user\n   * If the user was considered speaking, then mark them as not speaking\n   * @param userId - The ID of the user\n   */\n  _resetSpeakingHistory(userId: string): void;\n\n  /**\n   * Handle activation of a push-to-talk key or button.\n   * @param event - The original keydown event\n   */\n  _onPTTStart(event: KeyboardEvent | MouseEvent): void;\n\n  /**\n   * Handle deactivation of a push-to-talk key or button.\n   * @param event - The original keyup event\n   */\n  _onPTTEnd(event: KeyboardEvent | MouseEvent): void;\n\n  render(): void;\n\n  /**\n   * Render the audio/video streams to the CameraViews UI.\n   * Assign each connected user to the correct video frame element.\n   */\n  onRender(): void;\n\n  /**\n   * Respond to changes which occur to AV Settings.\n   * Changes are handled in descending order of impact.\n   * @param changed - The object of changed AV settings\n   */\n  onSettingsChanged(changed: DeepPartial<AVSettings.Settings>): void;\n\n  debug(message: string): void;\n}\n\ndeclare namespace AVMaster {\n  type SpeakingData = Partial<Record<string, { speaking: boolean; volumeHistories: number[] }>>;\n  type PTTHandler = (event: KeyboardEvent | MouseEvent) => void;\n  type PTTHandlers =\n    | {}\n    | { mousedown: PTTHandler; mouseup: PTTHandler }\n    | {\n        keydown: PTTHandler;\n        keyup: PTTHandler;\n      };\n}\n"]},26848:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\avSettings.d.ts","declare class AVSettings {\n  constructor();\n\n  protected _set<T>(key: string, value: T): void;\n\n  protected _change(): void;\n\n  client: AVSettings.ClientSettings;\n\n  world: AVSettings.WorldSettings;\n\n  protected _original: AVSettings.Settings;\n\n  initialize(): void;\n\n  changed(): void;\n\n  get<S extends 'client' | 'world'>(scope: S, setting: string): unknown; // TODO: Improve once we have proper typing for dot notation\n\n  getUser(userId: string): AVSettings.UserSettings | null;\n\n  set<S extends 'client' | 'world'>(scope: S, setting: string, value: unknown): void; // TODO: Improve once we have proper typing for dot notation\n\n  /**\n   * Return a mapping of AV settings for each game User.\n   */\n  get users(): Record<string, AVSettings.UserSettings>;\n\n  /**\n   * Prepare a standardized object of user settings data for a single User\n   */\n  protected _getUserSettings(user: User): AVSettings.UserSettings;\n\n  protected _onSettingsChanged(): void;\n\n  /**\n   * WebRTC Mode, Disabled, Audio only, Video only, Audio & Video\n   */\n  static AV_MODES: {\n    DISABLED: 0;\n    AUDIO: 1;\n    VIDEO: 2;\n    AUDIO_VIDEO: 3;\n  };\n\n  static VOICE_MODES: {\n    ALWAYS: 'always';\n    ACTIVITY: 'activity';\n    PTT: 'ptt';\n  };\n\n  static DEFAULT_CLIENT_SETTINGS: {\n    /**\n     * @defaultValue `'default'`\n     */\n    videoSrc: string;\n\n    /**\n     * @defaultValue `'default'`\n     */\n    audioSrc: string;\n\n    /**\n     * @defaultValue `'default'`\n     */\n    audioSink: string;\n\n    /**\n     * @defaultValue\n     */\n    dockSize: 'large' | 'medium' | 'small';\n\n    /**\n     * @defaultValue `'bottom'`\n     */\n    dockPosition: string;\n\n    /**\n     * @defaultValue `false`\n     */\n    hidePlayerList: boolean;\n\n    /**\n     * @defaultValue `false`\n     */\n    muteAll: boolean;\n\n    voice: {\n      /**\n       * @defaultValue `'AVSettings.VOICE_MODES.PTT'`\n       */\n      mode: typeof AVSettings.VOICE_MODES[keyof typeof AVSettings.VOICE_MODES];\n\n      /**\n       * @defaultValue `192` (Tilde)\n       */\n      pttKey: number;\n\n      /* eslint-disable */\n      /**\n       * @defaultValue ``\"`\"``\n       */\n      /* eslint-enable */\n      pttName: string;\n\n      /**\n       * @defaultValue `false`\n       */\n      pttMouse: boolean;\n\n      /**\n       * @defaultValue `100`\n       */\n      pttDelay: number;\n\n      /**\n       * @defaultValue `-45`\n       */\n      activityThreshold: number;\n    };\n\n    /**\n     * @defaultValue `{}`\n     */\n    users: Partial<Record<string, AVSettings.StoredUserSettings>>;\n  };\n\n  static DEFAULT_WORLD_SETTINGS: {\n    /**\n     * @defaultValue `AVSettings.AV_MODES.DISABLED`\n     */\n    mode: AVSettings.VoiceMode;\n\n    server: {\n      /**\n       * @defaultValue `'FVTT'`\n       */\n      type: string;\n\n      /**\n       * @defaultValue `''`\n       */\n      url: string;\n\n      /**\n       * @defaultValue `''`\n       */\n      room: string;\n\n      /**\n       * @defaultValue `''`\n       */\n      username: string;\n\n      /**\n       * @defaultValue `''`\n       */\n      password: string;\n    };\n\n    turn: {\n      /**\n       * @defaultValue `'server'`\n       */\n      type: string;\n\n      /**\n       * @defaultValue `''`\n       */\n      url: string;\n\n      /**\n       * @defaultValue `''`\n       */\n      username: string;\n\n      /**\n       * @defaultValue `''`\n       */\n      password: string;\n    };\n  };\n\n  static DEFAULT_USER_SETTINGS: {\n    /**\n     * @defaultValue `false`\n     */\n    popout: boolean;\n\n    /**\n     * @defaultValue `100`\n     */\n    x: number;\n\n    /**\n     * @defaultValue `100`\n     */\n    y: number;\n\n    /**\n     * @defaultValue `0`\n     */\n    z: number;\n\n    /**\n     * @defaultValue `320`\n     */\n    width: number;\n\n    /**\n     * @defaultValue `1.0`\n     */\n    volume: number;\n\n    /**\n     * @defaultValue `false`\n     */\n    muted: boolean;\n\n    /**\n     * @defaultValue `false`\n     */\n    hidden: boolean;\n\n    /**\n     * @defaultValue `false`\n     */\n    blocked: boolean;\n  };\n}\n\ndeclare namespace AVSettings {\n  type ClientSettings = typeof AVSettings.DEFAULT_CLIENT_SETTINGS;\n  type WorldSettings = typeof AVSettings.DEFAULT_WORLD_SETTINGS;\n  type StoredUserSettings = typeof AVSettings.DEFAULT_USER_SETTINGS;\n  type UserSettings = StoredUserSettings & { canBroadCastAudio: boolean; canBroadcastVideo: boolean };\n  type Settings = { client: ClientSettings; world: WorldSettings };\n  type VoiceMode = typeof AVSettings.VOICE_MODES[keyof typeof AVSettings.VOICE_MODES];\n}\n"]},31058:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\cameraPopoutAppWrapper.d.ts","/**\n * Abstraction of the Application interface to be used with the Draggable class as a substitute for the app\n * This class will represent one popout feed window and handle its positioning and draggability\n */\ndeclare class CameraPopoutAppWrapper {\n  /**\n   * @param view- The CameraViews application that this popout belongs to\n   * @param userId- ID of the user this popout belongs to\n   * @param element- The div element of this specific popout window\n   */\n  constructor(view: CameraViews, userId: string, element: JQuery);\n\n  /**\n   * The CameraViews application that this popout belongs to\n   */\n  view: CameraViews;\n\n  /**\n   * The div element of this specific popout window\n   */\n  element: JQuery;\n\n  /**\n   * ID of the user this popout belongs to\n   */\n  userId: string;\n\n  /**\n   * Get the current position of this popout window\n   */\n  get position(): Application.Position;\n\n  /** @override */\n  setPosition({ left, top, width, height, scale }?: Partial<Application.Position>): void;\n\n  private _onResize(event: Event): void;\n\n  /** @override */\n  bringToTop(): void;\n}\n"]},48636:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\canvas.d.ts","/**\n * The virtual tabletop environment is implemented using a WebGL powered HTML 5 canvas using the powerful PIXI.js\n * library. The canvas is comprised of an ordered sequence of layers which define rendering groups and collections of\n * objects that are drawn on the canvas itself.\n *\n * @see {@link CanvasLayer} An abstract class for all Canvas layers.\n * @see {@link PlaceablesLayer} An abstract class for Canvas Layers which contain Placeable Objects.\n * @see {@link PlaceableObject} An abstract class for objects which are placed into the Scene and drawn on the canvas.\n *\n * @example <caption>Example Canvas commands</caption>\n * ```typescript\n * canvas.ready; // Is the canvas ready for use?\n * canvas.scene; // The currently viewed Scene entity.\n * canvas.dimensions; // The dimensions of the current Scene.\n * canvas.draw(); // Completely re-draw the game canvas (this is usually unnecessary).\n * canvas.pan(x, y, zoom); // Pan the canvas to new coordinates and scale.\n * canvas.recenter(); // Re-center the canvas on the currently controlled Token.\n * ```\n */\ndeclare class Canvas {\n  constructor();\n\n  protected _dragDrop: DragDrop;\n\n  app: PIXI.Application;\n\n  stage: PIXI.Container;\n\n  hud: HeadsUpDisplay;\n\n  background: BackgroundLayer | undefined;\n\n  foreground: ForegroundLayer | undefined;\n\n  drawings: DrawingsLayer | undefined;\n\n  grid: GridLayer | undefined;\n\n  walls: WallsLayer | undefined;\n\n  templates: TemplateLayer | undefined;\n\n  notes: NotesLayer | undefined;\n\n  tokens: TokenLayer | undefined;\n\n  lighting: LightingLayer | undefined;\n\n  sounds: SoundsLayer | undefined;\n\n  sight: SightLayer | undefined;\n\n  effects: EffectsLayer | undefined;\n\n  controls: ControlsLayer | undefined;\n\n  /**\n   * @defaultValue `null`\n   */\n  id: string | null;\n\n  /**\n   * @defaultValue `null`\n   */\n  scene: Scene | null;\n\n  /**\n   * @defaultValue `null`\n   */\n  dimensions: Canvas.Dimensions | null;\n\n  /**\n   * Track the timestamp of the last stage zoom operation\n   * @defaultValue `0`\n   */\n  protected _zoomTime: number;\n\n  /**\n   * Track the last automatic pan time to throttle\n   * @defaultValue `0`\n   */\n  protected _panTime: number;\n\n  /**\n   * An object of data which is temporarily cached to be reloaded after the canvas is drawn\n   * @defaultValue `{ layer: 'TokenLayer' }`\n   */\n  protected _reload: { layer: string };\n\n  /**\n   * The singleton interaction manager instance which handles mouse workflows on the Canvas\n   * @defaultValue `null`\n   */\n  mouseInteractionManager: MouseInteractionManager<this['stage']> | null;\n\n  /**\n   * A flag for whether the game Canvas is ready to be used. False if the canvas is not yet drawn, true otherwise.\n   * @defaultValue `false`\n   */\n  ready: boolean;\n\n  /**\n   * An Array of pending canvas operations which should trigger on the next re-paint\n   */\n  pendingOperations: Array<[(args: any[]) => void, any, any[]]>;\n\n  /**\n   * A Set of unique pending operation names to ensure operations are only performed once\n   */\n  protected _pendingOperationNames: Set<string>;\n\n  /**\n   * Create the layers of the game Canvas.\n   * @param stage - The primary canvas stage\n   */\n  protected _createLayers(stage: PIXI.Container): void;\n\n  /**\n   * A mapping of named CanvasLayers.\n   * This mapping is defined in the order that layers must be drawn.\n   */\n  static get layers(): {\n    background: any; // TODO: ConstructorOf<BackgroundLayer>\n    tiles: any; // TODO: ConstructorOf<TilesLayer>\n    drawings: any; // TODO: ConstructorOf<DrawingsLayer>\n    grid: ConstructorOf<GridLayer>;\n    walls: any; // TODO: ConstructorOf<WallsLayer>\n    templates: any; // TODO: ConstructorOf<TemplateLayer>\n    notes: any; // TODO: ConstructorOf<NotesLayer>\n    tokens: ConstructorOf<TokenLayer>;\n    lighting: ConstructorOf<LightingLayer>;\n    sounds: any; // TODO: ConstructorOf<SoundsLayer>\n    sight: ConstructorOf<SightLayer>;\n    effects: any; // TODO: ConstructorOf<EffectsLayer>\n    controls: any; // TODO: ConstructorOf<ControlsLayer>\n  } & Partial<Record<string, ConstructorOf<CanvasLayer>>>;\n\n  /**\n   * An Array of all CanvasLayer instances which are active on the Canvas board\n   */\n  get layers(): CanvasLayer[];\n\n  /**\n   * Return a reference to the active Canvas Layer\n   */\n  get activeLayer(): CanvasLayer | null;\n\n  /**\n   * When re-drawing the canvas, first tear down or discontinue some existing processes\n   */\n  tearDown(): Promise<void>;\n\n  /**\n   * Draw the game canvas.\n   * @returns A Promise which resolves once the Canvas is fully drawn\n   */\n  draw(scene?: Scene): Promise<this>;\n\n  /**\n   * Get the canvas active dimensions based on the size of the scene's map.\n   * We expand the image size by a factor of 1.5 and round to the nearest 2x grid size.\n   * The rounding accomplishes that the padding buffer around the map always contains whole grid spaces.\n   * @param data - The scene dimensions data being established\n   */\n  static getDimensions(data: Canvas.DimensionsData): Canvas.Dimensions;\n\n  /**\n   * Once the canvas is drawn, initialize control, visibility, and audio states\n   */\n  protected _initialize(): Promise<void>;\n\n  /**\n   * Initialize all lighting, vision, and sound sources for the Scene.\n   */\n  initializeSources(): void;\n\n  /**\n   * Initialize the starting view of the canvas stage\n   * If we are re-drawing a scene which was previously rendered, restore the prior view position\n   * Otherwise set the view to the top-left corner of the scene at standard scale\n   */\n  protected _initializeCanvasPosition(): void;\n\n  /**\n   * Initialize a CanvasLayer in the activation state\n   */\n  protected _initializeCanvasLayer(): void;\n\n  /**\n   * Initialize a token or set of tokens which should be controlled.\n   * Restore controlled and targeted tokens from before the re-draw.\n   */\n  protected _initializeTokenControl(): void;\n\n  /**\n   * Get a reference to the a specific CanvasLayer by it's name\n   * @param layerName - The name of the canvas layer to get\n   */\n  getLayer(layerName: string): CanvasLayer | null;\n\n  /**\n   * Given an embedded object name, get the canvas layer for that object\n   */\n  protected getLayerByEmbeddedName<T extends string>(\n    embeddedName: T\n  ): T extends keyof Canvas.EmbeddedEntityNameToLayerMap ? Canvas.EmbeddedEntityNameToLayerMap[T] : null;\n\n  /**\n   * Pan the canvas to a certain \\{x,y\\} coordinate and a certain zoom level\n   * @param x     - The x-coordinate of the pan destination\n   * @param y     - The y-coordinate of the pan destination\n   * @param scale - The zoom level (max of CONFIG.Canvas.maxZoom) of the action\n   */\n  pan({ x, y, scale }?: Canvas.ViewPan): void;\n\n  /**\n   * Animate panning the canvas to a certain destination coordinate and zoom scale\n   * Customize the animation speed with additional options\n   * Returns a Promise which is resolved once the animation has completed\n   *\n   * @param x        - The destination x-coordinate\n   * @param y        - The destination y-coordinate\n   * @param scale    - The destination zoom scale\n   * @param duration - The total duration of the animation in milliseconds; used if speed is not set\n   * @param speed    - The speed of animation in pixels per second; overrides duration if set\n   * @returns A Promise which resolves once the animation has been completed\n   */\n  animatePan({ x, y, scale, duration, speed }?: Canvas.AnimatedViewPan): Promise<void>;\n\n  /**\n   * Get the constrained zoom scale parameter which is allowed by the maxZoom parameter\n   * @param x     - The requested x-coordinate\n   * @param y     - The requested y-coordinate\n   * @param scale - The requested scale\n   * @returns The allowed scale\n   */\n  protected _constrainView({ x, y, scale }: Canvas.ViewPan): Canvas.View;\n\n  /**\n   * Update the blur strength depending on the scale of the canvas stage\n   */\n  protected _updateBlur(scale: number): void;\n\n  /**\n   * Recenter the canvas\n   * Otherwise, pan the stage to put the top-left corner of the map in the top-left corner of the window\n   */\n  recenter(coordinates?: Canvas.ViewPan | null): void;\n\n  /**\n   * Attach event listeners to the game canvas to handle click and interaction events\n   */\n  protected _addListeners(): void;\n\n  /**\n   * Handle left mouse-click events occurring on the Canvas stage or its active Layer.\n   * @see {@link MouseInteractionManager#_handleClickLeft}\n   */\n  protected _onClickLeft(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle double left-click events occurring on the Canvas stage.\n   * @see {@link MouseInteractionManager#_handleClickLeft2}\n   */\n  protected _onClickLeft2(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle the beginning of a left-mouse drag workflow on the Canvas stage or its active Layer.\n   * @see {@link MouseInteractionManager#_handleDragStart}\n   */\n  protected _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle mouse movement events occurring on the Canvas stage or it's active layer\n   * @see {@link MouseInteractionManager#_handleDragMove}\n   */\n  protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle the conclusion of a left-mouse drag workflow when the mouse button is released.\n   * @see {@link MouseInteractionManager#_handleDragDrop}\n   */\n  protected _onDragLeftDrop(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle the cancellation of a left-mouse drag workflow\n   * @see {@link MouseInteractionManager#_handleDragCancel}\n   */\n  protected _onDragLeftCancel(event: PointerEvent): void;\n\n  /**\n   * Handle right mouse-click events occurring on the Canvas stage or it's active layer\n   * @see {@link MouseInteractionManager#_handleClickRight}\n   */\n  protected _onClickRight(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle right-mouse drag events occuring on the Canvas stage or an active Layer\n   * @see {@link MouseInteractionManager#_handleDragMove}\n   */\n  protected _onDragRightMove(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle the conclusion of a right-mouse drag workflow the Canvas stage.\n   * @see {@link MouseInteractionManager#_handleDragDrop}\n   * @param event - (unused)\n   */\n  protected _onDragRightDrop(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Determine selection coordinate rectangle during a mouse-drag workflow\n   */\n  protected _onDragSelect(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Pan the canvas view when the cursor position gets close to the edge of the frame\n   * @param event - The originating mouse movement event\n   */\n  protected _onDragCanvasPan(event: MouseEvent): Promise<void> | void;\n\n  /**\n   * Handle window resizing with the dimensions of the window viewport change\n   * @param event - The Window resize event\n   *                (default: `null`)\n   */\n  protected _onResize(event?: UIEvent | null): void;\n\n  /**\n   * Handle mousewheel events which adjust the scale of the canvas\n   * @param event - The mousewheel event that zooms the canvas\n   */\n  protected _onMouseWheel(event: WheelEvent): void;\n\n  /**\n   * Event handler for the drop portion of a drag-and-drop event.\n   */\n  protected _onDrop(event: DragEvent): boolean;\n\n  /**\n   * Add a pending canvas operation that should fire once the socket handling workflow concludes.\n   * This registers operations by a unique string name into a queue - avoiding repeating the same work multiple times.\n   * This is especially helpful for multi-object updates to avoid costly and redundant refresh operations.\n   * @param name  - A unique name for the pending operation, conventionally Class.method\n   * @param fn    - The unbound function to execute later\n   * @param scope - The scope to which the method should be bound when called\n   * @param args  - Arbitrary arguments to pass to the method when called\n   */\n  addPendingOperation<S = any, A = any[]>(name: string, fn: (this: S, args: A) => void, scope: S, args: A): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Fire all pending functions that are registered in the pending operations queue and empty it.\n   */\n  triggerPendingOperations(): void;\n}\n\ndeclare namespace Canvas {\n  interface Dimensions {\n    sceneWidth: number;\n    sceneHeight: number;\n    size: number;\n    distance: number;\n    shiftX: number;\n    shiftY: number;\n    ratio: number;\n    paddingX: number;\n    width: number;\n    paddingY: number;\n    height: number;\n    rect: PIXI.Rectangle;\n    sceneRect: PIXI.Rectangle;\n  }\n\n  interface DimensionsData {\n    width?: number | null;\n    height?: number | null;\n    grid: number;\n    gridDistance: number;\n    padding: number;\n    shiftX: number;\n    shiftY: number;\n  }\n\n  interface DropPosition {\n    x: number;\n    y: number;\n  }\n\n  interface ViewPan {\n    x?: number | null;\n    y?: number | null;\n    scale?: number | null;\n  }\n\n  interface AnimatedViewPan extends ViewPan {\n    duration?: number | null;\n    speed?: number | null;\n  }\n\n  interface View {\n    x: number;\n    y: number;\n    scale: number;\n  }\n\n  interface EmbeddedEntityNameToLayerMap {\n    AmbientLight: Canvas['lighting'];\n    AmbientSound: Canvas['sounds'];\n    Drawing: Canvas['drawings'];\n    Note: Canvas['notes'];\n    MeasuredTemplate: Canvas['templates'];\n    Tile: Canvas['background'];\n    Token: Canvas['tokens'];\n    Wall: Canvas['walls'];\n  }\n}\n"]},18876:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\canvasAnimation.d.ts",'/**\n * A helper class providing utility methods for PIXI Canvas animation\n */\ndeclare class CanvasAnimation {\n  static get ticker(): PIXI.Ticker;\n\n  /**\n   * Apply a linear animation from the current value of some attribute to a new value\n   * Resolve a Promise once the animation has concluded and the attributes have reached their new target\n   * @param attributes - An array of attributes to animate. Structure of the Array is shown in the example\n   * @param context    - An animation context to use which defines scope\n   * @param name       - Provide a unique animation name which may be referenced later (default: `null`)\n   * @param duration   - The duration in milliseconds over which the animation should occur (default: `1000`)\n   * @param ontick     - A function which defines additional behaviors to apply every animation frame\n   * @returns A Promise which resolves once the linear animation has concluded\n   *\n   * @example\n   * ```typescript\n   * let animation = [\n   *   {\n   *     parent: token,\n   *     attribute: x,\n   *     to: 1000\n   *   },\n   *   {\n   *     parent: token,\n   *     attribute: y,\n   *     to: 2000\n   *   }\n   * ];\n   * CanvasAnimation.animateLinear(attributes, {duration:500, ontick: console.log("ticking")});\n   * ```\n   */\n  static animateLinear(\n    attributes: CanvasAnimation.Attribute[],\n    {\n      context,\n      name,\n      duration,\n      ontick\n    }: {\n      context: PIXI.Container;\n      name?: string | null;\n      duration?: number;\n      ontick: (dt: number, attributes: CanvasAnimation.Attribute[]) => void;\n    }\n  ): Promise<void>;\n\n  /**\n   * If an animation using a certain name already exists, terminate it\n   * @param name - The animation name to terminate\n   */\n  static terminateAnimation(name: string): void;\n\n  /**\n   * Asynchronously animate a transition function and resolve a Promise once the animation has completed\n   * @param fn      - A suitable transition function. See PIXI.Ticker for details\n   * @param context - The Canvas container providing scope for the transition\n   * @param name    - Provide a unique animation name which may be referenced later\n   * @param args    - Variable argument passed to the transition function each frame\n   * @returns A Promise which resolves once the animation has completed\n   */\n  protected static _animatePromise(\n    fn: (dt: number, resolve: () => void, reject: (reason?: any) => void, ...args: any[]) => void,\n    context: PIXI.Container,\n    name: string,\n    ...args: any[]\n  ): Promise<void>;\n\n  /**\n   * Generic ticker function to implement the animation.\n   * This animation wrapper executes once per frame for the duration of the animation event.\n   * Once the animated attributes have converged to their targets, it resolves the original Promise.\n   * The user-provided ontick function runs each frame update to apply additional behaviors.\n   */\n  protected static _animateFrame(\n    deltaTime: number,\n    resolve: () => void,\n    reject: (reason?: any) => void,\n    attributes: CanvasAnimation.Attribute[],\n    duration: number,\n    ontick: (dt: number, attributes: CanvasAnimation.Attribute[]) => void\n  ): void;\n\n  /**\n   * Track an object of active animations by name, context, and function\n   * This allows a currently playing animation to be referenced and terminated\n   */\n  static animations: Record<string, [(dt: number) => unknown, PIXI.Container]>;\n}\n\ndeclare namespace CanvasAnimation {\n  interface Attribute {\n    parent: any;\n    attribute: string;\n    to: number;\n  }\n}\n']},86643:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\canvasDocumentMixin.d.ts","import { ConstructorDataType } from '../../types/helperTypes';\nimport { ContextType, DocumentModificationOptions } from '../common/abstract/document.mjs';\nimport { ClientDocumentMixin } from './clientDocumentMixin';\n\ndeclare global {\n  // TODO: Replace ConstructorOf<…> with DocumentConstructor once the problem with circular reference has been solved\n  /**\n   * A specialized sub-class of the ClientDocumentMixin which is used for document types that are intended to be represented upon the game Canvas.\n   */\n  const CanvasDocumentMixin: <T extends ConstructorOf<foundry.abstract.Document<any, any>>>(\n    Base: T\n  ) => CanvasDocumentConstructor<T>;\n}\n\ntype CanvasDocumentConstructor<T extends ConstructorOf<foundry.abstract.Document<any, any>>> = Pick<T, keyof T> &\n  Pick<typeof CanvasDocumentMixin, keyof typeof CanvasDocumentMixin> &\n  Pick<typeof ClientDocumentMixin, keyof typeof ClientDocumentMixin> & {\n    new (...args: ConstructorParameters<T>): InstanceType<T> & CanvasDocumentMixin<InstanceType<T>>;\n  };\n\ndeclare class CanvasDocumentMixin<T extends foundry.abstract.Document<any, any>> extends ClientDocumentMixin<T> {\n  constructor(data?: ConstructorDataType<T['data']>, context?: ContextType<T>);\n\n  /**\n   * A reference to the PlaceableObject instance which represents this Embedded Document.\n   * @defaultValue `null`\n   */\n  protected _object: PlaceableObject | null; // TODO: Replace with InstanceType<ObjectClass<T>> | null once the circular reference problem has been solved\n\n  /**\n   * A lazily constructed PlaceableObject instance which can represent this Document on the game canvas.\n   */\n  get object(): PlaceableObject | null; // TODO: Replace with InstanceType<ObjectClass<T>> | null once the circular reference problem has been solved\n\n  /**\n   * A reference to the CanvasLayer which contains Document objects of this type.\n   */\n  get layer(): PlaceablesLayer<any>; // TODO: Replace with InstanceType<LayerClass<T>> | null once the circular reference problem has been solved\n\n  /**\n   * An indicator for whether this document is currently rendered on the game canvas.\n   */\n  get rendered(): boolean;\n\n  /**\n   * @see abstract.Document#_onCreate\n   */\n  protected _onCreate(data: T['data']['_source'], options: DocumentModificationOptions, userId: string): void;\n\n  /**\n   * @see abstract.Document#_onUpdate\n   */\n  protected _onUpdate(\n    data: DeepPartial<T['data']['_source']>,\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * @see abstract.Document#_onDelete\n   */\n  protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n}\n"]},58391:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\chatBubbles.d.ts","/**\n * The Chat Bubble Class\n * This application displays a temporary message sent from a particular Token in the active Scene.\n * The message is displayed on the HUD layer just above the Token.\n */\ndeclare class ChatBubbles {\n  constructor();\n\n  /**\n   * @defaultValue `'templates/hud/chat-bubble.html'`\n   */\n  template: string;\n\n  /**\n   * Track active Chat Bubbles\n   * @defaultValue `{}`\n   * @remarks This is never used\n   */\n  bubbles: object;\n\n  /**\n   * Track which Token was most recently panned to highlight\n   * Use this to avoid repeat panning\n   * @defaultValue `null`\n   */\n  protected _panned: Token | null;\n\n  /**\n   * A reference to the chat bubbles HTML container in which rendered bubbles should live\n   */\n  get container(): JQuery;\n\n  /**\n   * Speak a message as a particular Token, displaying it as a chat bubble\n   * @param token   - The speaking Token\n   * @param message - The spoken message text\n   * @param emote   - Whether to style the speech bubble as an emote\n   * @returns A Promise which resolves once the chat bubble has been created\n   */\n  say(token: Token, message: string, { emote }?: { emote?: boolean }): Promise<void>;\n\n  /**\n   * Clear any existing chat bubble for a certain Token\n   */\n  protected _clearBubble(token: Token): Promise<void>;\n\n  /**\n   * Render the HTML template for the chat bubble\n   * @param data - Template data\n   * @returns The rendered HTML\n   */\n  protected _renderHTML(data: { token: Token; message: string; emote: boolean }): Promise<string>;\n\n  /**\n   * Before displaying the chat message, determine it's constrained and unconstrained dimensions\n   * @param message - The message content\n   * @returns The rendered message dimensions\n   */\n  protected _getMessageDimensions(message: string): ChatBubbles.Dimensions;\n\n  /**\n   * Assign styling parameters to the chat bubble, toggling either a left or right display (randomly)\n   */\n  protected _setPosition(token: Token, html: JQuery, dimensions: ChatBubbles.Dimensions): void;\n\n  /**\n   * Determine the length of time for which to display a chat bubble.\n   * Research suggests that average reading speed is 200 words per minute.\n   * Since these are short-form messages, we multiply reading speed by 1.5.\n   * Clamp the result between 1 second (minimum) and 20 seconds (maximum)\n   *\n   * @param html - The HTML message\n   * @returns The number of milliseconds for which to display the message\n   */\n  protected _getDuration(html: JQuery): number;\n}\n\ndeclare namespace ChatBubbles {\n  interface Dimensions {\n    width: number;\n    height: number;\n    unconstrained: number;\n  }\n}\n"]},47416:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocumentMixin.d.ts","import { ContextType, DocumentModificationOptions } from '../common/abstract/document.mjs';\n\nimport { ConfiguredDocumentClass, ConstructorDataType, DocumentConstructor } from '../../types/helperTypes';\n\ndeclare global {\n  // TODO: Replace ConstructorOf<…> with DocumentConstructor once the problem with circular reference has been solved\n  /**\n   * A mixin which extends each Document definition with specialized client-side behaviors.\n   * This mixin defines the client-side interface for database operations and common document behaviors.\n   */\n  const ClientDocumentMixin: <T extends ConstructorOf<foundry.abstract.Document<any, any>>>(\n    Base: T\n  ) => ClientDocumentConstructor<T>;\n}\n\ntype ClientDocumentConstructor<T extends ConstructorOf<foundry.abstract.Document<any, any>>> = Pick<T, keyof T> &\n  Pick<typeof ClientDocumentMixin, keyof typeof ClientDocumentMixin> & {\n    new (...args: ConstructorParameters<T>): InstanceType<T> & ClientDocumentMixin<InstanceType<T>>;\n  };\n\nexport declare class ClientDocumentMixin<T extends foundry.abstract.Document<any, any>> {\n  constructor(data?: ConstructorDataType<T['data']>, context?: ContextType<T>);\n\n  /**\n   * A collection of Application instances which should be re-rendered whenever this document is updated.\n   * The keys of this object are the application ids and the values are Application instances. Each\n   * Application in this object will have its render method called by {@link Document#render}.\n   * @see {@link Document#render}\n   */\n  apps: Record<string, Application>;\n\n  /**\n   * A cached reference to the FormApplication instance used to configure this Document.\n   * @defaultValue `null`\n   */\n  protected _sheet: FormApplication | null; // TODO: Replace with InstanceType<ConfiguredSheetClass<T>> once the circular reference problem has been solved\n\n  /**\n   * @see abstract.Document#_initialize\n   */\n  protected _initialize(): void;\n\n  /**\n   * Return a reference to the parent Collection instance which contains this Document.\n   */\n  get collection(): Collection<this>;\n\n  /**\n   * A reference to the Compendium Collection which contains this Document, if any, otherwise undefined.\n   */\n  get compendium(): any; // TODO: CompendiumCollection<this>\n\n  /**\n   * Return a reference to the Folder to which this Document belongs, if any.\n   *\n   * @example <caption>A Document may belong to a Folder</caption>\n   * ```typescript\n   * let folder = game.folders.entities[0];\n   * let actor = await Actor.create({name: \"New Actor\", folder: folder.id});\n   * console.log(actor.data.folder); // folder.id;\n   * console.log(actor.folder); // folder;\n   * ```\n   */\n  get folder(): Folder | null;\n\n  /**\n   * A boolean indicator for whether or not the current game User has ownership rights for this Document.\n   * Different Document types may have more specialized rules for what constitutes ownership.\n   */\n  get isOwner(): boolean;\n\n  /**\n   * Test whether this Document is owned by any non-Gamemaster User.\n   */\n  get hasPlayerOwner(): boolean;\n\n  /**\n   * A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater).\n   */\n  get limited(): boolean;\n\n  /**\n   * Return a string which creates a dynamic link to this Document instance.\n   */\n  get link(): string;\n\n  /**\n   * Return the permission level that the current game User has over this Document.\n   * See the CONST.ENTITY_PERMISSIONS object for an enumeration of these levels.\n   *\n   * @example\n   * ```typescript\n   * game.user.id; // \"dkasjkkj23kjf\"\n   * actor.data.permission; // {default: 1, \"dkasjkkj23kjf\": 2};\n   * actor.permission; // 2\n   * ```\n   */\n  get permission(): ValueOf<typeof CONST.ENTITY_PERMISSIONS>;\n\n  /**\n   * Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available.\n   */\n  get sheet(): FormApplication | null; // TODO: Replace mit InstanceType<ConfiguredSheetClass<T>> once the circular reference problem has been solved\n\n  /**\n   * A Universally Unique Identifier (uuid) for this Document instance.\n   */\n  get uuid(): string;\n\n  /**\n   * A boolean indicator for whether or not the current game User has at least limited visibility for this Document.\n   * Different Document types may have more specialized rules for what determines visibility.\n   */\n  get visible(): boolean;\n\n  /**\n   * Obtain the FormApplication class constructor which should be used to configure this Document.\n   */\n  protected _getSheetClass(): ConstructorOf<FormApplication> | null; // TODO: Replace with ConfiguredSheetClass<T> once the circular reference problem has been solved\n\n  /**\n   * Prepare data for the Document.\n   * Begin by resetting the prepared data back to its source state.\n   * Next prepare any embedded Documents and compute any derived data elements.\n   */\n  prepareData(): void;\n\n  /**\n   * Prepare data related to this Document itself, before any embedded Documents or derived data is computed.\n   */\n  prepareBaseData(): void;\n\n  /**\n   * Prepare all embedded Document instances which exist within this primary Document.\n   */\n  prepareEmbeddedEntities(): void;\n\n  /**\n   * Apply transformations or derivations to the values of the source data object.\n   * Compute data fields whose values are not stored to the database.\n   */\n  prepareDerivedData(): void;\n\n  /**\n   * Render all of the Application instances which are connected to this document by calling their respective\n   * @see Application#render\n   * @param force   - Force rendering\n   *                  (default: `false`)\n   * @param context - Optional context\n   *                  (default: `{}`)\n   */\n  render(force?: boolean, context?: Application.RenderOptions): void;\n\n  /**\n   * Determine the sort order for this Document by positioning it relative a target sibling.\n   * See SortingHelper.performIntegerSort for more details\n   * @param options - Sorting options provided to SortingHelper.performIntegerSort\n   * @returns The Document after it has been re-sorted\n   */\n  sortRelative(options: SortOptions<this>): Promise<this>;\n\n  /**\n   * @see abstract.Document#_onCreate\n   */\n  protected _onCreate(data: T['data']['_source'], options: DocumentModificationOptions, userId: string): void;\n\n  /**\n   * @see abstract.Document#_onUpdate\n   */\n  protected _onUpdate(\n    data: DeepPartial<T['data']['_source']>,\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * @see abstract.Document#_onDelete\n   */\n  protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n  /**\n   * Preliminary actions taken before a set of embedded Documents in this parent Document are created.\n   * @param embeddedName - The name of the embedded Document type\n   * @param result       - An Array of created data objects\n   * @param options      - Options which modified the creation operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _preCreateEmbeddedDocuments(\n    embeddedName: string,\n    result: Record<string, unknown>[],\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * Follow-up actions taken after a set of embedded Documents in this parent Document are created.\n   * @param embeddedName - The name of the embedded Document type\n   * @param documents    - An Array of created Documents\n   * @param result       - An Array of created data objects\n   * @param options      - Options which modified the creation operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _onCreateEmbeddedDocuments(\n    embeddedName: string,\n    documents: foundry.abstract.Document<any, any>[],\n    result: Record<string, unknown>[],\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.\n   * @param embeddedName - The name of the embedded Document type\n   * @param result       - An Array of incremental data objects\n   * @param options      - Options which modified the update operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _preUpdateEmbeddedDocuments(\n    embeddedName: string,\n    result: Array<Record<string, unknown>>[],\n    options: DocumentModificationOptions,\n    userId: string\n  ): void;\n\n  /**\n   * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.\n   * @param embeddedName - The name of the embedded Document type\n   * @param documents    - An Array of updated Documents\n   * @param result       - An Array of incremental data objects\n   * @param options      - Options which modified the update operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _onUpdateEmbeddedDocuments(\n    embeddedName: string,\n    documents: foundry.abstract.Document<any, any>[],\n    result: Record<string, unknown>[],\n    options: DocumentModificationContext,\n    userId: string\n  ): void;\n\n  /**\n   * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.\n   * @param embeddedName - The name of the embedded Document type\n   * @param result       - An Array of document IDs being deleted\n   * @param options      - Options which modified the deletion operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _preDeleteEmbeddedDocuments(\n    embeddedName: string,\n    result: string[],\n    options: DocumentModificationContext,\n    userId: string\n  ): void;\n\n  /**\n   * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.\n   * @param embeddedName - The name of the embedded Document type\n   * @param documents    - An Array of deleted Documents\n   * @param result       - An Array of document IDs being deleted\n   * @param options      - Options which modified the deletion operation\n   * @param userId       - The ID of the User who triggered the operation\n   */\n  protected _onDeleteEmbeddedDocuments(\n    embeddedName: string,\n    documents: foundry.abstract.Document<any, any>[],\n    result: string[],\n    options: DocumentModificationContext,\n    userId: string\n  ): void;\n\n  /**\n   * Present a Dialog form to create a new Document of this type.\n   * Choose a name and a type from a select menu of types.\n   * @param data    - Initial data with which to populate the creation form\n   *                  (default: `{}`)\n   * @param options - Positioning and sizing options for the resulting dialog\n   *                  (default: `{}`)\n   * @returns A Promise which resolves to the created Document\n   */\n  static createDialog<T extends DocumentConstructor>(\n    this: T,\n    data?: DeepPartial<\n      | ConstructorDataType<InstanceType<T>['data']>\n      | (ConstructorDataType<InstanceType<T>['data']> & Record<string, unknown>)\n    >,\n    options?: Dialog.Options\n  ): Promise<InstanceType<ConfiguredDocumentClass<T>> | undefined>;\n\n  /**\n   * Present a Dialog form to confirm deletion of this Document.\n   * @param options - Positioning and sizing options for the resulting dialog\n   *                  (default: `{}`)\n   * @returns A Promise which resolves to the deleted Document\n   */\n  deleteDialog(options?: Dialog.Options): Promise<this | undefined>;\n\n  /**\n   * Export entity data to a JSON file which can be saved by the client and later imported into a different session.\n   */\n  exportToJSON(): void;\n\n  /**\n   * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.\n   * The dropped data could have:\n   * 1. A compendium pack and entry id\n   * 2. A World Entity _id\n   * 3. A data object explicitly provided\n   *\n   * @param data    - The data object extracted from a DataTransfer event\n   * @param options - Additional options which configure data retrieval\n   * @returns The Document data that should be handled by the drop handler\n   */\n  static fromDropData<T extends DocumentConstructor>(\n    this: T,\n    data: DropData<InstanceType<T>>,\n    options?: FromDropDataOptions\n  ): Promise<InstanceType<ConfiguredDocumentClass<T>> | undefined>;\n\n  /**\n   * Update this Document using a provided JSON string.\n   * @param json - JSON data string\n   * @returns The updated Document\n   */\n  importFromJSON(json: string): Promise<this>;\n\n  /**\n   * Render an import dialog for updating the data related to this Document through an exported JSON file\n   */\n  importFromJSONDialog(): Promise<void>;\n\n  /**\n   * Transform the Document data to be stored in a Compendium pack.\n   * Remove any features of the data which are world-specific.\n   * This function is asynchronous in case any complex operations are required prior to exporting.\n   * @param pack - A specific pack being exported to\n   * @returns A data object of cleaned data suitable for compendium import\n   */\n  toCompendium(pack?: CompendiumCollection<CompendiumCollection.Metadata>): Omit<\n    ReturnType<T['toObject']>,\n    '_id' | 'folder' | 'permission'\n  > & {\n    permission?: T extends { toObject(): infer U } ? U : never; // TODO: Whether or not this property exists depends on `pack`, improve when `pack` is typed\n  };\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  get _id(): T['id'];\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  static get config(): any;\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  get entity(): T['documentName'];\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  get owner(): this['isOwner'];\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  hasPerm(\n    user: foundry.documents.BaseUser,\n    permission: keyof typeof foundry.CONST.ENTITY_PERMISSIONS | foundry.CONST.EntityPermission,\n    exact?: boolean\n  ): ReturnType<T['testUserPermission']>;\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  static update<T extends DocumentConstructor>(\n    this: T,\n    updates?:\n      | Array<\n          DeepPartial<\n            | ConstructorDataType<InstanceType<T>['data']>\n            | (ConstructorDataType<InstanceType<T>['data']> & Record<string, unknown>)\n          > & { _id: string }\n        >\n      | (DeepPartial<\n          | ConstructorDataType<InstanceType<T>['data']>\n          | (ConstructorDataType<InstanceType<T>['data']> & Record<string, unknown>)\n        > & { _id: string }),\n    options?: DocumentModificationContext & foundry.utils.MergeObjectOptions\n  ): Promise<InstanceType<ConfiguredDocumentClass<T>>[]>;\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  static delete<T extends DocumentConstructor>(\n    this: T,\n    ids?: string[],\n    options?: DocumentModificationContext\n  ): Promise<InstanceType<ConfiguredDocumentClass<T>>[]>;\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  getEmbeddedEntity(...args: Parameters<T['getEmbeddedDocument']>): ReturnType<T['getEmbeddedDocument']>;\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  createEmbeddedEntity(\n    documentName: string,\n    data?: Record<string, unknown> | Array<Record<string, unknown>>,\n    options?: DocumentModificationContext\n  ): ReturnType<T['createEmbeddedDocuments']>;\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  updateEmbeddedEntity(\n    documentName: string,\n    data?: Array<Record<string, unknown>> | Record<string, unknown>,\n    options?: DocumentModificationContext\n  ): ReturnType<T['updateEmbeddedDocuments']>;\n\n  /**\n   * @deprecated since 0.8.0\n   */\n  deleteEmbeddedEntity(\n    documentName: string,\n    ids: string[] | string,\n    options: DocumentModificationContext\n  ): ReturnType<T['deleteEmbeddedDocuments']>;\n}\n\ninterface SortOptions<T> {\n  /**\n   * @defaultValue `[]`\n   */\n  siblings?: T[];\n\n  /**\n   * @defaultValue `true`\n   */\n  sortBefore?: boolean;\n\n  /**\n   * @defaultValue `'sort'`\n   */\n  sortKey?: string;\n\n  /**\n   * @defaultValue `null`\n   */\n  target?: T | null;\n\n  /**\n   * @defaultValue `{}`\n   */\n  updateData?: any;\n}\n\nexport type DropData<T extends foundry.abstract.Document<any, any>> = DropData.Data<T> | DropData.Pack | DropData.Id;\n\ndeclare namespace DropData {\n  interface Data<T extends foundry.abstract.Document<any, any>> {\n    data: T['data']['_source'];\n  }\n\n  interface Pack {\n    pack: string;\n  }\n\n  interface Id {\n    id: string;\n  }\n}\n\ninterface FromDropDataOptions {\n  /**\n   * Import the provided document data into the World, if it is not already a World-level Document reference\n   * @defaultValue `false`\n   */\n  importWorld?: boolean;\n}\n\nexport {};\n"]},85934:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\activeEffect.d.ts","import { DocumentModificationOptions } from '../../common/abstract/document.mjs';\nimport { ConfiguredDocumentClass, ConstructorDataType } from '../../../types/helperTypes';\nimport { EffectChangeData } from '../../common/data/data.mjs/effectChangeData';\n\ndeclare global {\n  /**\n   * The client-side ActiveEffect document which extends the common BaseActiveEffect model.\n   * Each ActiveEffect belongs to the effects collection of its parent Document.\n   * Each ActiveEffect contains a ActiveEffectData object which provides its source data.\n   *\n   * @see {@link data.ActiveEffectData}               The ActiveEffect data schema\n   * @see {@link documents.Actor}                     The Actor document which contains ActiveEffect embedded documents\n   * @see {@link documents.Item}                      The Item document which contains ActiveEffect embedded documents\n   */\n  class ActiveEffect extends ClientDocumentMixin(foundry.documents.BaseActiveEffect) {\n    /**\n     * @param data   - Initial data provided to construct the ActiveEffect document\n     * @param parent - The parent document to which this ActiveEffect belongs\n     */\n    constructor(...args: ConstructorParameters<typeof foundry.documents.BaseActiveEffect>);\n\n    /**\n     * A cached reference to the source name to avoid recurring database lookups\n     * @defaultValue `null`\n     */\n    protected _sourceName: string | null;\n\n    /**\n     * A cached reference to the ActiveEffectConfig instance which configures this effect\n     */\n    protected _sheet: FormApplication | null; // TODO: Actually an ActiveEffectConfig according to foundry but this is a problem with ClientDocumentMixins _sheet, this should actually be inferred from the CONFIG\n\n    /**\n     * Summarize the active effect duration\n     */\n    get duration(): DurationSummary;\n\n    /**\n     * Format a round+turn combination as a decimal\n     * @param round  - The round number\n     * @param turn   - The turn number\n     * @param nTurns - The maximum number of turns in the encounter\n     * @returns The decimal representation\n     */\n    protected _getCombatTime(round: number, turn: number, nTurns: number): number;\n\n    /**\n     * Format a number of rounds and turns into a human-readable duration label\n     * @param rounds - The number of rounds\n     * @param turns  - The number of turns\n     * @returns The formatted label\n     */\n    protected _getDurationLabel(rounds: number, turns: number): string;\n\n    /**\n     * Describe whether the ActiveEffect has a temporary duration based on combat turns or rounds.\n     */\n    get isTemporary(): boolean;\n\n    /**\n     * A cached property for obtaining the source name\n     */\n    get sourceName(): string;\n\n    /**\n     * An instance of the ActiveEffectConfig sheet to use for this ActiveEffect instance.\n     * The reference to the sheet is cached so the same sheet instance is reused.\n     */\n    get sheet(): FormApplication; // TODO: Actually an ActiveEffectConfig according to foundry but this is a problem with ClientDocumentMixin's sheet, this should actually be inferred from the CONFIG\n\n    /**\n     * Apply this ActiveEffect to a provided Actor.\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    apply(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Apply an ActiveEffect that uses an ADD application mode.\n     * The way that effects are added depends on the data type of the current value.\n     *\n     * If the current value is null, the change value is assigned directly.\n     * If the current type is a string, the change value is concatenated.\n     * If the current type is a number, the change value is cast to numeric and added.\n     * If the current type is an array, the change value is appended to the existing array if it matches in type.\n     *\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    protected _applyAdd(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Apply an ActiveEffect that uses a MULTIPLY application mode.\n     * Changes which MULTIPLY must be numeric to allow for multiplication.\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    protected _applyMultiply(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Apply an ActiveEffect that uses an OVERRIDE application mode.\n     * Numeric data is overridden by numbers, while other data types are overridden by any value\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    protected _applyOverride(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Apply an ActiveEffect that uses an UPGRADE, or DOWNGRADE application mode.\n     * Changes which UPGRADE or DOWNGRADE must be numeric to allow for comparison.\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    protected _applyUpgrade(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Apply an ActiveEffect that uses a CUSTOM application mode.\n     * Changes which UPGRADE or DOWNGRADE must be numeric to allow for comparison.\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    protected _applyCustom(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Get the name of the source of the Active Effect\n     */\n    protected _getSourceName(): Promise<string>;\n\n    protected _preCreate(\n      data: ConstructorDataType<foundry.data.ActiveEffectData>,\n      options: DocumentModificationOptions,\n      user: foundry.documents.BaseUser\n    ): Promise<void>;\n  }\n}\n\ninterface DurationSummary {\n  type: 'seconds' | 'turns' | 'none';\n  duration: number | null;\n  remaining: number | null;\n  label: string;\n}\n\ntype ConfiguredActor = InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>;\n\nexport {};\n"]},77237:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\actor.d.ts","import { ConfiguredDocumentClass, ConstructorDataType, DocumentConstructor } from '../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../common/abstract/document.mjs';\nimport EmbeddedCollection from '../../common/abstract/embedded-collection.mjs';\n\ndeclare global {\n  /**\n   * The client-side Actor document which extends the common BaseActor model.\n   * Each Actor document contains ActorData which defines its data schema.\n   *\n   * @see {@link data.ActorData}              The Actor data schema\n   * @see {@link documents.Actors}            The world-level collection of Actor documents\n   * @see {@link applications.ActorSheet}     The Actor configuration application\n   *\n   * @example <caption>Create a new Actor</caption>\n   * ```typescript\n   * let actor = await Actor.create({\n   *   name: \"New Test Actor\",\n   *   type: \"character\",\n   *   img: \"artwork/character-profile.jpg\"\n   * });\n   * ```\n   *\n   * @example <caption>Retrieve an existing Actor</caption>\n   * ```typescript\n   * let actor = game.actors.get(actorId);\n   * ```\n   */\n  class Actor extends ClientDocumentMixin(foundry.documents.BaseActor) {\n    /**\n     * @override\n     * @param data    - Initial data provided to construct the Actor document\n     * @param context - The document context, see {@link foundry.abstract.Document}\n     */\n    constructor(\n      data: ConstructorParameters<typeof foundry.documents.BaseActor>[0],\n      context?: ConstructorParameters<typeof foundry.documents.BaseActor>[1]\n    );\n\n    /**\n     * An object that tracks which tracks the changes to the data model which were applied by active effects\n     * @defaultValue `{}`\n     */\n    overrides: Record<string, unknown>;\n\n    /**\n     * A cached array of image paths which can be used for this Actor's token.\n     * Null if the list has not yet been populated.\n     * @defaultValue `null`\n     */\n    protected _tokenImages: string[] | null;\n\n    /**\n     * Cache the last drawn wildcard token to avoid repeat draws\n     * @defaultValue `null`\n     */\n    protected _lastWildcard: string | null;\n\n    /**\n     * A convenient reference to the file path of the Actor's profile image\n     */\n    get img(): this['data']['img'];\n\n    /**\n     * Provide an object which organizes all embedded Item instances by their type\n     */\n    get itemTypes(): Record<\n      foundry.documents.BaseItem['data']['type'],\n      Array<InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseItem>>>\n    >;\n    /**\n     * Test whether an Actor entity is a synthetic representation of a Token (if true) or a full Entity (if false)\n     */\n    get isToken(): boolean;\n\n    /**\n     * An array of ActiveEffect instances which are present on the Actor which have a limited duration.\n     */\n    get temporaryEffects(): ReturnType<this['effects']['filter']>;\n\n    /**\n     * Return a reference to the TokenDocument which owns this Actor as a synthetic override\n     */\n    get token(): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>> | null;\n\n    /**\n     * A convenience reference to the item type (data.type) of this Actor\n     */\n    get type(): this['data']['type'];\n\n    /** @override */\n    get uuid(): string;\n\n    /**\n     * Apply any transformations to the Actor data which are caused by ActiveEffects.\n     */\n    applyActiveEffects(): void;\n\n    /**\n     * Retrieve an Array of active tokens which represent this Actor in the current canvas Scene.\n     * If the canvas is not currently active, or there are no linked actors, the returned Array will be empty.\n     * If the Actor is a synthetic token actor, only the exact Token which it represents will be returned.\n     *\n     * @param linked   - Limit results to Tokens which are linked to the Actor. Otherwise return all Tokens even those which are not linked. (default: `false`)\n     * @param document - Return the Document instance rather than the PlaceableObject (default: `false`)\n     * @returns An array of Token instances in the current Scene which reference this Actor.\n     */\n    getActiveTokens(\n      linked?: boolean,\n      document?: boolean\n    ): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>[];\n\n    /**\n     * Prepare a data object which defines the data schema used by dice roll commands against this Actor\n     */\n    getRollData(): this['data']['data'];\n\n    /** @override */\n    protected _getSheetClass(): ConstructorOf<FormApplication> | null;\n\n    /**\n     * Create a new TokenData object which can be used to create a Token representation of the Actor.\n     * @param data - Additional data, such as x, y, rotation, etc. for the created token data (default: `{}`)\n     * @returns The created TokenData instance\n     */\n    getTokenData(data?: object): Promise<foundry.data.TokenData>;\n\n    /**\n     * Get an Array of Token images which could represent this Actor\n     */\n    getTokenImages(): Promise<string[]>;\n\n    /**\n     * Handle how changes to a Token attribute bar are applied to the Actor.\n     * This allows for game systems to override this behavior and deploy special logic.\n     * @param attribute - The attribute path\n     * @param value     - The target attribute value\n     * @param isDelta   - Whether the number represents a relative change (true) or an absolute change (false) (default: `false`)\n     * @param isBar     - Whether the new value is part of an attribute bar, or just a direct value (default: `true`)\n     * @returns The updated Actor document\n     */\n    modifyTokenAttribute(attribute: string, value: number, isDelta: boolean, isBar: boolean): Promise<this | undefined>;\n\n    /** @override */\n    prepareEmbeddedEntities(): void;\n\n    /**\n     * Roll initiative for all Combatants in the currently active Combat encounter which are associated with this Actor.\n     * If viewing a full Actor entity, all Tokens which map to that actor will be targeted for initiative rolls.\n     * If viewing a synthetic Token actor, only that particular Token will be targeted for an initiative roll.\n     *\n     * @param options - Configuration for how initiative for this Actor is rolled.\n     * @returns A promise which resolves to the Combat entity once rolls are complete.\n     */\n    rollInitiative(options?: Actor.RollInitiativeOptions): Promise<void>;\n\n    /** @override */\n    getEmbeddedCollection(embeddedName: string): EmbeddedCollection<DocumentConstructor, foundry.data.ActorData>;\n\n    /** @override */\n    protected _preCreate(\n      data: ConstructorDataType<foundry.data.ActorData>,\n      options: DocumentModificationOptions,\n      user: foundry.documents.BaseUser\n    ): Promise<void>;\n\n    /** @override */\n    protected _onUpdate(\n      changed: DeepPartial<foundry.data.ActorData['_source']> & Record<string, unknown>,\n      options: DocumentModificationOptions,\n      user: string\n    ): void;\n\n    /** @override */\n    protected _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: foundry.abstract.Document<any, any>[],\n      result: Record<string, unknown>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override */\n    protected _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: foundry.abstract.Document<any, any>[],\n      result: Record<string, unknown>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override */\n    protected _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: foundry.abstract.Document<any, any>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    /**\n     * Refresh the display of active Tokens for this Actor if ActiveEffects were changed\n     */\n    protected _refreshTokens(): void;\n\n    /**\n     * You are referencing Actor#_data which has been deprecated in favor of Actor#data#_source. Support for this reference will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    get _data(): this['data']['_source'];\n\n    /**\n     * You are referencing Actor#getOwnedItem(itemId) which is deprecated in favor of Actor#items#get(itemId). Support will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    getOwnedItem(itemId: string): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseItem>> | undefined;\n\n    /**\n     * You are referencing Actor#createOwnedItem which is deprecated in favor of Item.create or Actor#createEmbeddedDocuments. Support will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    createOwnedItem(\n      itemData: Parameters<this['createEmbeddedDocuments']>[1][] | Parameters<this['createEmbeddedDocuments']>[1],\n      options: Parameters<this['createEmbeddedDocuments']>[2]\n    ): ReturnType<this['createEmbeddedDocuments']>;\n\n    /**\n     * You are referencing Actor#updateOwnedItem which is deprecated in favor of Item#update or Actor#updateEmbeddedDocuments. Support will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    updateOwnedItem(\n      itemData: Parameters<this['updateEmbeddedDocuments']>[1][] | Parameters<this['updateEmbeddedDocuments']>[1],\n      options: Parameters<this['updateEmbeddedDocuments']>[2]\n    ): ReturnType<this['updateEmbeddedDocuments']>;\n\n    /**\n     * You are referencing Actor#deleteOwnedItem which is deprecated in favor of Item#delete or Actor#deleteEmbeddedDocuments. Support will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    deleteOwnedItem(\n      itemId: Parameters<this['deleteEmbeddedDocuments']>[1][] | Parameters<this['deleteEmbeddedDocuments']>[1],\n      options: Parameters<this['deleteEmbeddedDocuments']>[2]\n    ): ReturnType<this['deleteEmbeddedDocuments']>;\n\n    /**\n     * You are referencing Actor.fromToken which is deprecated in favor of TokenDocument#getActor. Support will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    static fromToken(\n      token: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>\n    ): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>;\n\n    /**\n     * You are referencing Actor.createTokenActor which is deprecated in favor of TokenDocument#getActor. Support will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    static createTokenActor(\n      _baseActor: unknown,\n      token: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>\n    ): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>;\n  }\n  namespace Actor {\n    interface RollInitiativeOptions {\n      /**\n       * Create new Combatant entries for Tokens associated with this actor.\n       * @defaultValue `false`\n       */\n      createCombatants?: boolean;\n\n      /**\n       * Re-roll the initiative for this Actor if it has already been rolled.\n       * @defaultValue `false`\n       */\n      rerollInitiative?: boolean;\n\n      /**\n       * Additional options passed to the Combat#rollInitiative method.\n       * @defaultValue `{}`\n       * TODO: Solve once Combat is more fleshed out. @see Combat#rollInitiative\n       */\n      initiativeOptions?: object;\n    }\n  }\n}\n"]},78558:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\canvasDocuments\\ambientLightDocument.d.ts","// TODO\ndeclare global {\n  /**\n   * The client-side AmbientLight embedded document which extends the common BaseAmbientLight abstraction.\n   * Each AmbientLight document contains AmbientLightData which defines its data schema.\n   *\n   * @see {@link data.AmbientLightData}             The AmbientLight data schema\n   * @see {@link documents.Scene}                   The Scene document type which contains AmbientLight embedded documents\n   * @see {@link applications.LightConfig}          The AmbientLight configuration application\n   */\n  class AmbientLightDocument extends CanvasDocumentMixin(foundry.documents.BaseAmbientLight) {\n    /**\n     * Is this ambient light source global in nature?\n     */\n    get isGlobal(): boolean;\n  }\n}\n\nexport {};\n"]},96808:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\canvasDocuments\\drawingDocument.d.ts","import { ConfiguredDocumentClass } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The client-side Drawing document which extends the common BaseDrawing model.\n   * Each Drawing document contains DrawingData which defines its data schema.\n   *\n   * @see {@link data.DrawingData}              The Drawing data schema\n   * @see {@link documents.Scene}               The Scene document type which contains Drawing embedded documents\n   * @see {@link applications.DrawingConfig}    The Drawing configuration application\n   */\n  class DrawingDocument extends CanvasDocumentMixin(foundry.documents.BaseDrawing) {\n    /**\n     * A reference to the User who created the Drawing document.\n     * @remarks Will return undefined if the user has been deleted\n     */\n    get author(): InstanceType<ConfiguredDocumentClass<typeof User>> | undefined;\n  }\n}\n"]},64579:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\canvasDocuments\\measuredTemplateDocument.d.ts","import { ConfiguredDocumentClass } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The client-side MeasuredTemplate embedded document which extends the common BaseMeasuredTemplate abstraction.\n   * Each MeasuredTemplate document contains MeasuredTemplateData which defines its data schema.\n   *\n   * @see {@link data.MeasuredTemplateData}              The MeasuredTemplate data schema\n   * @see {@link documents.Scene}               The Scene document type which contains MeasuredTemplate embedded documents\n   * @see {@link applications.MeasuredTemplateConfig}    The MeasuredTemplate configuration application\n   */\n  class MeasuredTemplateDocument extends CanvasDocumentMixin(foundry.documents.BaseMeasuredTemplate) {\n    /**\n     * A reference to the User who created the MeasuredTemplate document.\n     * @remarks Will return undefined if the user has been deleted\n     */\n    get author(): InstanceType<ConfiguredDocumentClass<typeof User>> | undefined;\n  }\n}\n\nexport {};\n"]},79744:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\canvasDocuments\\tokenDocument.d.ts","import { ConfiguredDocumentClass } from '../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\nimport * as data from '../../../common/data/data.mjs';\n\ndeclare global {\n  /**\n   * The client-side Token document which extends the common BaseToken model.\n   * Each Token document contains TokenData which defines its data schema.\n   *\n   * @see {@link data.TokenData}                The Token data schema\n   * @see {@link documents.Scene}               The Scene document type which contains Token embedded documents\n   * @see {@link applications.TokenConfig}      The Token configuration application\n   */\n  class TokenDocument extends CanvasDocumentMixin(foundry.documents.BaseToken) {\n    /**\n     * @param data    - Initial data provided to construct the Token document\n     *                  (default: `{}`)\n     * @param context - The parent Scene document to which this Token belongs\n     */\n    constructor(\n      data?: ConstructorParameters<ConstructorOf<foundry.documents.BaseToken>>[0],\n      context?: ConstructorParameters<ConstructorOf<foundry.documents.BaseToken>>[1]\n    );\n\n    /**\n     * A cached reference to the Actor document that this Token modifies.\n     * This may be a \"synthetic\" unlinked Token Actor which does not exist in the World.\n     */\n    protected _actor: InstanceType<ConfiguredDocumentClass<typeof Actor>> | null;\n\n    /**\n     * A lazily evaluated reference to the Actor this Token modifies.\n     * If actorLink is true, then the entity is the primary Actor document.\n     * Otherwise the Actor entity is a synthetic (ephemeral) document constructed using the Token's actorData.\n     */\n    get actor(): InstanceType<ConfiguredDocumentClass<typeof Actor>> | null;\n\n    /**\n     * An indicator for whether or not the current User has full control over this Token document.\n     */\n    get isOwner(): boolean;\n\n    /**\n     * A convenient reference for whether this TokenDocument is linked to the Actor it represents, or is a synthetic copy\n     */\n    get isLinked(): boolean;\n\n    /**\n     * Return a reference to a Combatant that represents this Token, if one is present in the current encounter.\n     */\n    get combatant(): InstanceType<ConfiguredDocumentClass<typeof Combatant>> | null;\n\n    /**\n     * An indicator for whether or not this Token is currently involved in the active combat encounter.\n     */\n    get inCombat(): boolean;\n\n    /**\n     * @param data    - (default: `{}`, unused)\n     * @param options - (default: `{}`, unused)\n     * @override\n     */\n    clone(\n      data?: Parameters<foundry.documents.BaseToken['clone']>[0],\n      options?: Parameters<foundry.documents.BaseToken['clone']>[1]\n    ): this;\n\n    /**\n     * Create a synthetic Actor using a provided Token instance\n     * If the Token data is linked, return the true Actor entity\n     * If the Token data is not linked, create a synthetic Actor using the Token's actorData override\n     */\n    getActor(): InstanceType<ConfiguredDocumentClass<typeof Actor>> | null;\n\n    /**\n     * A helper method to retrieve the underlying data behind one of the Token's attribute bars\n     * @param barName     - The named bar to retrieve the attribute for\n     * @param alternative - An alternative attribute path to get instead of the default one\n     * @returns The attribute displayed on the Token bar, if any\n     */\n    getBarAttribute(\n      barName: string,\n      { alternative }?: { alternative?: string }\n    ): SingleAttributeBar | ObjectAttributeBar | null;\n\n    /**\n     * Redirect updates to a synthetic Token Actor to instead update the tokenData override object.\n     * Once an attribute in the Token has been overridden, it must always remain overridden.\n     *\n     * @param update  - The provided differential update data which should update the Token Actor\n     * @param options - Provided options which modify the update request\n     * @returns The updated un-linked Actor instance\n     */\n    modifyActorDocument(\n      update: Parameters<InstanceType<ConfiguredDocumentClass<typeof Actor>>['update']>[0],\n      options: Parameters<this['update']>[1]\n    ): Promise<[this['actor']]>;\n\n    /** @override */\n    getEmbeddedCollection(embeddedName: 'Item'): data.ActorData['items'];\n    getEmbeddedCollection(embeddedName: 'ActiveEffect'): data.ActorData['effects'];\n\n    /**\n     * Redirect creation of Documents within a synthetic Token Actor to instead update the tokenData override object.\n     * @param embeddedName - The named embedded Document type being modified\n     * @param data         - The provided initial data with which to create the embedded Documents\n     * @param options      - Provided options which modify the creation request\n     * @returns The created Embedded Document instances\n     */\n    createActorEmbeddedDocuments(\n      embeddedName: 'Item',\n      data: Array<ConstructorParameters<ConfiguredDocumentClass<typeof Item>>[0] | Record<string, unknown>>,\n      options: Parameters<this['update']>[1]\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Item>>[]>;\n    createActorEmbeddedDocuments(\n      embeddedName: 'ActiveEffect',\n      data: Array<ConstructorParameters<ConfiguredDocumentClass<typeof ActiveEffect>>[0] | Record<string, unknown>>,\n      options: Parameters<this['update']>[1]\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof ActiveEffect>>[]>;\n\n    /**\n     * Redirect updating of Documents within a synthetic Token Actor to instead update the tokenData override object.\n     * @param embeddedName - The named embedded Document type being modified\n     * @param updates      - The provided differential data with which to update the embedded Documents\n     * @param options      - Provided options which modify the update request\n     * @returns The updated Embedded Document instances\n     */\n    updateActorEmbeddedDocuments(\n      embeddedName: 'Item',\n      updates: Array<ConstructorParameters<ConfiguredDocumentClass<typeof Item>>[0] | Record<string, unknown>>,\n      options: Parameters<this['update']>[1]\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Item>>[]>;\n    updateActorEmbeddedDocuments(\n      embeddedName: 'ActiveEffect',\n      updates: Array<ConstructorParameters<ConfiguredDocumentClass<typeof ActiveEffect>>[0] | Record<string, unknown>>,\n      options: Parameters<this['update']>[1]\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof ActiveEffect>>[]>;\n\n    /**\n     * Redirect deletion of Documents within a synthetic Token Actor to instead update the tokenData override object.\n     * @param embeddedName - The named embedded Document type being modified\n     * @param ids          - The provided differential data with which to update the embedded Documents\n     * @param options      - Provided options which modify the update request\n     * @returns The updated Embedded Document instances\n     */\n    deleteActorEmbeddedDocuments(\n      embeddedName: 'Item',\n      ids: string[],\n      options: Parameters<this['update']>[1]\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Item>>[]>;\n    deleteActorEmbeddedDocuments(\n      embeddedName: 'ActiveEffect',\n      ids: string[],\n      options: Parameters<this['update']>[1]\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof ActiveEffect>>[]>;\n\n    /** @override */\n    protected _preUpdate(\n      data: Parameters<foundry.documents.BaseToken['_preUpdate']>[0],\n      options: DocumentModificationOptions,\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>\n    ): Promise<void>;\n\n    /**\n     * When the Actor data overrides change for an un-linked Token Actor, simulate the pre-update process.\n     */\n    protected _preUpdateTokenActor(\n      data: Parameters<foundry.documents.BaseActor['_preUpdate']>[0],\n      options: DocumentModificationOptions,\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>\n    ): Promise<void>;\n\n    /** @override */\n    protected _onUpdate(\n      data: Parameters<foundry.documents.BaseToken['_onUpdate']>[0],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /**\n     * When the base Actor for a TokenDocument changes, we may need to update its Actor instance\n     * @param update - (default: `{}`)\n     */\n    protected _onUpdateBaseActor(update?: Parameters<foundry.documents.BaseActor['_onUpdate']>[0]): void;\n\n    /**\n     * When the Actor data overrides change for an un-linked Token Actor, simulate the post-update process.\n     */\n    protected _onUpdateTokenActor(\n      data: Parameters<foundry.documents.BaseActor['_onUpdate']>[0],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /**\n     * Get an Array of attribute choices which could be tracked for Actors in the Combat Tracker\n     * @param _path - (default: `[]`)\n     */\n    static getTrackedAttributes(\n      data?: InstanceType<ConfiguredDocumentClass<typeof Actor>>['data']['data'],\n      _path?: string[]\n    ): TrackedAttributes;\n\n    /**\n     * Inspect the Actor data model and identify the set of attributes which could be used for a Token Bar\n     */\n    static getTrackedAttributeChoices(attributes?: TrackedAttributes): Partial<Record<string, string[]>>;\n  }\n}\n\ninterface SingleAttributeBar {\n  type: 'value';\n  attribute: string;\n  value: number;\n  editable: boolean;\n}\n\ninterface ObjectAttributeBar {\n  type: 'bar';\n  attribute: string;\n  value: number;\n  max: number;\n  editable: boolean;\n}\n\ninterface TrackedAttributes {\n  bar: string[][];\n  value: string[][];\n}\n\nexport {};\n"]},40457:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\chatMessage.d.ts","import { ConfiguredDocumentClass, ConstructorDataType } from '../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * The client-side ChatMessage document which extends the common BaseChatMessage abstraction.\n   * Each ChatMessage document contains ChatMessageData which defines its data schema.\n   *\n   * @see {@link data.ChatMessageData}              The ChatMessage data schema\n   * @see {@link documents.Messages}                The world-level collection of ChatMessage documents\n   *\n   * @param data - Initial data provided to construct the ChatMessage document\n   */\n  class ChatMessage extends ClientDocumentMixin(foundry.documents.BaseChatMessage) {\n    constructor(\n      data?: ConstructorParameters<ConstructorOf<foundry.documents.BaseChatMessage>>[0],\n      context?: ConstructorParameters<ConstructorOf<foundry.documents.BaseChatMessage>>[1]\n    );\n\n    /**\n     * If the chat message contains a Roll instance, cache it here\n     * @defaultValue `null`\n     */\n    protected _roll: Roll | null;\n\n    /**\n     * Return the recommended String alias for this message.\n     * The alias could be a Token name in the case of in-character messages or dice rolls.\n     * Alternatively it could be a User name in the case of OOC chat or whispers.\n     */\n    get alias(): string;\n\n    /**\n     * Is the current User the author of this message?\n     */\n    get isAuthor(): boolean;\n\n    /**\n     * Return whether the content of the message is visible to the current user.\n     * For certain dice rolls, for example, the message itself may be visible while the content of that message is not.\n     */\n    get isContentVisible(): boolean;\n\n    /**\n     * Test whether the chat message contains a dice roll\n     */\n    get isRoll(): boolean;\n\n    /**\n     * Return the Roll instance contained in this chat message, if one is present\n     */\n    get roll(): Roll | null;\n\n    /**\n     * Return whether the ChatMessage is visible to the current User.\n     * Messages may not be visible if they are private whispers.\n     */\n    get visible(): boolean;\n\n    /**\n     * The User who created the chat message.\n     */\n    get user(): User | undefined;\n\n    /** @override */\n    prepareData(): void;\n\n    /**\n     * Transform a provided object of ChatMessage data by applying a certain rollMode to the data object.\n     * @param chatData - The object of ChatMessage data prior to applying a rollMode preference\n     * @param rollMode - The rollMode preference to apply to this message data\n     * @returns The modified ChatMessage data with rollMode preferences applied\n     */\n    static applyRollMode(\n      chatData: foundry.data.ChatMessageData,\n      rollMode: foundry.CONST.DiceRollMode\n    ): foundry.data.ChatMessageData;\n\n    /**\n     * Update the data of a ChatMessage instance to apply a requested rollMode\n     * @param rollMode - The rollMode preference to apply to this message data\n     */\n    applyRollMode(rollMode: foundry.CONST.DiceRollMode): void;\n\n    /**\n     * Attempt to determine who is the speaking character (and token) for a certain Chat Message\n     * First assume that the currently controlled Token is the speaker\n     *\n     * @param scene - The Scene in which the speaker resides\n     * @param actor - The Actor whom is speaking\n     * @param token - The Token whom is speaking\n     * @param alias - The name of the speaker to display\n     *\n     * @returns The identified speaker data\n     */\n    static getSpeaker({\n      scene,\n      actor,\n      token,\n      alias\n    }?: {\n      scene?: InstanceType<ConfiguredDocumentClass<typeof Scene>>;\n      actor?: InstanceType<ConfiguredDocumentClass<typeof Actor>>;\n      token?: InstanceType<CONFIG['Token']['objectClass']>;\n      alias?: string;\n    }): foundry.data.ChatMessageData['speaker']['_source'];\n\n    /**\n     * A helper to prepare the speaker object based on a target TokenDocument\n     *\n     * @param token - The TokenDocument of the speaker\n     * @param alias - The name of the speaker to display\n     * @returns The identified speaker data\n     */\n    protected static _getSpeakerFromToken({\n      token,\n      alias\n    }: {\n      token: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>;\n      alias: string;\n    }): foundry.data.ChatMessageData['speaker']['_source'];\n    /**\n     * A helper to prepare the speaker object based on a target TokenDocument\n     *\n     * @param token - The TokenDocument of the speaker\n     * @param alias - The name of the speaker to display\n     * @returns The identified speaker data\n     * @deprecated Passing a Token is deprecated, a TokenDocument should be passed instead\n     */\n    protected static _getSpeakerFromToken({\n      token,\n      alias\n    }: {\n      token: InstanceType<CONFIG['Token']['objectClass']>;\n      alias: string;\n    }): foundry.data.ChatMessageData['speaker']['_source'];\n\n    /**\n     * A helper to prepare the speaker object based on a target Actor\n     *\n     * @param scene - The Scene is which the speaker resides\n     * @param actor - The Actor that is speaking\n     * @param alias - The name of the speaker to display\n     * @returns The identified speaker data\n     */\n    protected static _getSpeakerFromActor({\n      scene,\n      actor,\n      alias\n    }: {\n      scene?: InstanceType<ConfiguredDocumentClass<typeof Scene>>;\n      actor: InstanceType<ConfiguredDocumentClass<typeof Actor>>;\n      alias?: string;\n    }): foundry.data.ChatMessageData['speaker']['_source'];\n\n    /**\n     * A helper to prepare the speaker object based on a target User\n     *\n     * @param scene - The Scene in which the speaker resides\n     * @param user  - The User who is speaking\n     * @param alias - The name of the speaker to display\n     * @returns The identified speaker data\n     */\n    protected static _getSpeakerFromUser({\n      scene,\n      user,\n      alias\n    }: {\n      scene?: InstanceType<ConfiguredDocumentClass<typeof Scene>>;\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>;\n      alias?: string;\n    }): foundry.data.ChatMessageData['speaker']['_source'];\n\n    /**\n     * Obtain an Actor instance which represents the speaker of this message (if any)\n     * @param speaker - The speaker data object\n     */\n    static getSpeakerActor(speaker: foundry.data.ChatMessageData['speaker']['_source']): Actor | null;\n\n    /**\n     * Obtain a data object used to evaluate any dice rolls associated with this particular chat message\n     */\n    getRollData(): InstanceType<ConfiguredDocumentClass<typeof Actor>>['getRollData'] | {};\n\n    /**\n     * Given a string whisper target, return an Array of the user IDs which should be targeted for the whisper\n     *\n     * @param name - The target name of the whisper target\n     * @returns An array of User instances\n     */\n    static getWhisperRecipients(name: string): InstanceType<ConfiguredDocumentClass<typeof User>>[];\n\n    /**\n     * Render the HTML for the ChatMessage which should be added to the log\n     */\n    getHTML(): Promise<JQuery>;\n\n    /** @override */\n    _preCreate(\n      data: ConstructorDataType<foundry.data.ChatMessageData>,\n      options: DocumentModificationOptions,\n      user: foundry.documents.BaseUser\n    ): Promise<void>;\n\n    /** @override */\n    _onCreate(\n      data: foundry.data.ChatMessageData['_source'],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override */\n    _onUpdate(\n      data: DeepPartial<foundry.data.ChatMessageData['_source']> & Record<string, unknown>,\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override */\n    _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * Export the content of the chat message into a standardized log format\n     */\n    export(): string;\n  }\n}\n\nexport {};\n"]},56342:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\combat.d.ts","import { ConfiguredDocumentClass, ConstructorDataType, PropertiesToSource } from '../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../common/abstract/document.mjs';\nimport { CombatantDataProperties } from '../../common/data/data.mjs/combatantData';\n\ndeclare global {\n  /**\n   * The Combat model definition which defines common behavior of an Combat document between both client and server.\n   * Each Combat document contains CombatData which defines its data schema.\n   *\n   * @see {@link data.CombatData}               The Combat data schema\n   * @see {@link documents.Combats}             The world-level collection of Combat documents\n   * @see {@link embedded.Combatant}            The Combatant embedded document which exists within a Combat document\n   * @see {@link applications.CombatConfig}     The Combat configuration application\n   *\n   * @param data - Initial data provided to construct the Combat document\n   */\n  class Combat extends ClientDocumentMixin(foundry.documents.BaseCombat) {\n    constructor(\n      data?: ConstructorParameters<ConstructorOf<foundry.documents.BaseCombat>>[0],\n      context?: ConstructorParameters<ConstructorOf<foundry.documents.BaseCombat>>[1]\n    );\n\n    /** Track the sorted turn order of this combat encounter */\n    turns: InstanceType<ConfiguredDocumentClass<typeof Combatant>>[];\n\n    /** Record the current round, turn, and tokenId to understand changes in the encounter state */\n    protected current: RoundData;\n\n    /** Track the previous round, turn, and tokenId to understand changes in the encounter state */\n    protected previous: RoundData;\n\n    /**\n     * Track whether a sound notification is currently being played to avoid double-dipping\n     * @defaultValue `false`\n     */\n    protected _soundPlaying: boolean;\n\n    /** The configuration setting used to record Combat preferences */\n    static CONFIG_SETTING: 'combatTrackerConfig';\n\n    /** Get the Combatant who has the current turn. */\n    get combatant(): this['turns'][number];\n\n    /** The numeric round of the Combat encounter */\n    get round(): number;\n\n    /**\n     * A reference to the Scene document within which this Combat encounter occurs.\n     * If a specific Scene is not set in the Combat Data, the currently viewed scene is assumed instead.\n     */\n    get scene(): InstanceType<ConfiguredDocumentClass<typeof Scene>> | undefined;\n\n    /** Return the object of settings which modify the Combat Tracker behavior */\n    get settings(): typeof CombatEncounters['settings'];\n\n    /** Has this combat encounter been started? */\n    get started(): boolean;\n\n    /** The numeric turn of the combat round in the Combat encounter */\n    get turn(): number;\n\n    get visible(): true;\n\n    /**\n     * Set the current Combat encounter as active within the Scene.\n     * Deactivate all other Combat encounters within the viewed Scene and set this one as active\n     */\n    activate(): Promise<InstanceType<ConfiguredDocumentClass<typeof Combat>>[]>;\n\n    /** Display a dialog querying the GM whether they wish to end the combat encounter and empty the tracker */\n    endCombat(): Promise<InstanceType<ConfiguredDocumentClass<typeof Combat>> | undefined>;\n\n    /**\n     * Get a Combatant using its Token id\n     * @param tokenId - The id of the Token for which to acquire the combatant\n     */\n    getCombatantByToken(tokenId: string): ReturnType<this['combatants']['find']>;\n\n    /** Advance the combat to the next round */\n    nextRound(): Promise<this | undefined>;\n\n    /** Advance the combat to the next turn */\n    nextTurn(): Promise<this | undefined>;\n\n    /** @override */\n    prepareDerivedData(): void;\n\n    /** Rewind the combat to the previous round */\n    previousRound(): Promise<this | undefined>;\n\n    /** Rewind the combat to the previous turn */\n    previousTurn(): Promise<this | undefined>;\n\n    /** Reset all combatant initiative scores, setting the turn back to zero */\n    resetAll(): Promise<this | undefined>;\n\n    /**\n     * Roll initiative for one or multiple Combatants within the Combat entity\n     * @param ids - A Combatant id or Array of ids for which to roll\n     * @param options - Additional options which modify how initiative rolls are created or presented.\n     *                  default `{}`\n     * @returns  A promise which resolves to the updated Combat entity once updates are complete.\n     */\n    rollInitiative(ids: string | string[], options?: InitiativeOptions): Promise<this>;\n\n    /**\n     * Roll initiative for all combatants which have not already rolled\n     * @param options - Additional options forwarded to the Combat.rollInitiative method\n     *                  default `{}`\n     */\n    rollAll(options?: InitiativeOptions): this['rollInitiative'];\n\n    /**\n     * Roll initiative for all non-player actors who have not already rolled\n     * @param options - Additional options forwarded to the Combat.rollInitiative method\n     *                  default `{}`\n     */\n    rollNPC(options?: InitiativeOptions): this['rollInitiative'];\n\n    /**\n     * Assign initiative for a single Combatant within the Combat encounter.\n     * Update the Combat turn order to maintain the same combatant as the current turn.\n     * @param id - The combatant ID for which to set initiative\n     * @param value - A specific initiative value to set\n     */\n    setInitiative(id: string, value: number): Promise<void>;\n\n    /** Return the Array of combatants sorted into initiative order, breaking ties alphabetically by name. */\n    setupTurns(): this['turns'];\n\n    /** Begin the combat encounter, advancing to round 1 and turn 1 */\n    startCombat(): Promise<this | undefined>;\n\n    /**\n     * Define how the array of Combatants is sorted in the displayed list of the tracker.\n     * This method can be overridden by a system or module which needs to display combatants in an alternative order.\n     * By default sort by initiative, next falling back to name, lastly tie-breaking by combatant id.\n     */\n    protected _sortCombatants(\n      a: InstanceType<ConfiguredDocumentClass<typeof Combatant>>,\n      b: InstanceType<ConfiguredDocumentClass<typeof Combatant>>\n    ): number;\n\n    protected _onCreate(data: this['data']['_source'], options: DocumentModificationOptions, userId: string): void;\n\n    protected _onUpdate(\n      changed: DeepPartial<this['data']['_source']>,\n      options: DocumentModificationOptions,\n      userId: string\n    ): void; //TODO Returntype could also be CombatTracker.scrollToTurn\n\n    protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    protected _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: Combatant[],\n      result: DeepPartial<PropertiesToSource<CombatantDataProperties>>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: Combatant[],\n      result: DeepPartial<PropertiesToSource<CombatantDataProperties>>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    protected _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: Combatant[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    /** @deprecated since 0.8.0 */\n    getCombatant(id: string): this['combatants']['get'];\n\n    /** @deprecated since 0.8.0 */\n    createCombatant(\n      data:\n        | ConstructorDataType<foundry.data.CombatData>\n        | (ConstructorDataType<foundry.data.CombatData> & Record<string, unknown>),\n      options?: DocumentModificationContext\n    ): this['createEmbeddedDocuments'];\n\n    /** @deprecated since 0.8.0 */\n    updateCombatant(\n      data: DeepPartial<\n        | ConstructorDataType<foundry.data.CombatData>\n        | (ConstructorDataType<foundry.data.CombatData> & Record<string, unknown>)\n      >,\n      options?: DocumentModificationContext\n    ): NonNullable<ReturnType<this['combatants']['get']>>['update'];\n\n    /** @deprecated since 0.8.0 */\n    deleteCombatant(\n      id: string,\n      options?: DocumentModificationContext\n    ): NonNullable<ReturnType<this['combatants']['get']>>['delete'];\n  }\n}\n\ninterface InitiativeOptions {\n  /**\n   * A non-default initiative formula to roll. Otherwise the system default is used.\n   * @defaultValue `null`\n   */\n  formula?: string | null;\n  /**\n   * Update the Combat turn after adding new initiative scores to keep the turn on the same Combatant.\n   * @defaultValue `true`\n   */\n  updateTurn?: boolean;\n  /**\n   * Additional options with which to customize created Chat Messages\n   * @defaultValue `{}`\n   */\n  messageOptions?: object; //TODO Type properly once ChatMessage is typed\n}\n\ninterface RoundData {\n  round: number | null;\n  turn: number | null;\n  tokenId: string | null;\n  combatantid: string | null;\n}\n"]},94359:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\combatant.d.ts","import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { BaseUser } from '../../common/documents.mjs';\n\ndeclare global {\n  /**\n   * The client-side Combatant document which extends the common BaseCombatant model.\n   * Each Combatant belongs to the effects collection of its parent Document.\n   * Each Combatant contains a CombatantData object which provides its source data.\n   *\n   * @see {@link data.CombatantData}                  The Combatant data schema\n   * @see {@link documents.Combat}                    The Combat document which contains Combatant embedded documents\n   * @see {@link applications.CombatantConfig}        The Combatant configuration application\n   */\n  class Combatant extends ClientDocumentMixin(foundry.documents.BaseCombatant) {\n    /**\n     * @override\n     * @param data    - Initial data provided to construct the Combatant document\n     * @param context - The document context, see {@link foundry.abstract.Document}\n     */\n    constructor(\n      data: ConstructorParameters<typeof foundry.documents.BaseCombatant>[0],\n      context: ConstructorParameters<typeof foundry.documents.BaseCombatant>[1]\n    );\n\n    /**\n     * A cached reference to the Token which this Combatant represents, if any\n     * @defaultValue `undefined`\n     * */\n    protected _token: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>> | null | undefined;\n\n    /**\n     * A cached reference to the Actor which this Combatant represents, if any\n     * @defaultValue `undefined`\n     * */\n    protected _actor: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>> | null | undefined;\n\n    /** The current value of the special tracked resource which pertains to this Combatant */\n    resource: `${number}` | number | boolean | null;\n\n    /** Determine the image icon path that should be used to portray this Combatant in the combat tracker or elsewhere */\n    get img(): string;\n\n    /**  A convenience reference to the current initiative score of this Combatant */\n    get initiative(): number | null;\n\n    /** This is treated as a non-player combatant if it has no associated actor and no player users who can control it */\n    get isNPC(): boolean;\n\n    /** @override */\n    get isOwner(): boolean;\n\n    /** Is this Combatant entry currently visible in the Combat Tracker? */\n    get isVisible(): boolean;\n\n    /** Is this Combatant \"hidden\", either because they are explicitly marked as hidden or because their token is hidden */\n    get hidden(): boolean;\n\n    /** The displayed name for the Combatant is based off its own configured data, or the data of its represented Token. */\n    get name(): string;\n\n    /** A reference to the Actor document which this Combatant represents, if any */\n    get actor(): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>> | null;\n\n    /** A reference to the Token document which this Combatant represents, if any */\n    get token(): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>> | null;\n\n    /** An array of User documents who have ownership of this Document */\n    get players(): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseUser>>[];\n\n    /** @override */\n    testUserPermission(\n      user: BaseUser,\n      permission: keyof typeof foundry.CONST.ENTITY_PERMISSIONS | foundry.CONST.EntityPermission,\n      { exact }?: { exact?: boolean }\n    ): boolean;\n\n    /**\n     * Get a Roll object which represents the initiative roll for this Combatant.\n     * @param formula -  An explicit Roll formula to use for the combatant.\n     * @returns The Roll instance to use for the combatant.\n     */\n    getInitiativeRoll(formula?: string): Roll;\n\n    /**\n     * Roll initiative for this particular combatant.\n     * @param formula - A dice formula which overrides the default for this Combatant.\n     * @returns The Roll instance to use for the combatant.\n     */\n    rollInitiative(formula: string): Promise<this | undefined>;\n\n    /** @override */\n    prepareDerivedData(): void;\n\n    /**\n     * Update the value of the tracked resource for this Combatant.\n     */\n    updateResource(): this['resource'];\n\n    /**\n     * Acquire the default dice formula which should be used to roll initiative for this combatant.\n     * Modules or systems could choose to override or extend this to accommodate special situations.\n     * @returns  The initiative formula to use for this combatant.\n     */\n    protected _getInitiativeFormula(): string;\n  }\n}\nexport {};\n"]},50425:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\fogExploration.d.ts","//TODO: This is just a stub\ndeclare global {\n  /**\n   * The client-side FogExploration document which extends the common BaseFogExploration model.\n   * Each FogExploration document contains FogExplorationData which defines its data schema.\n   *\n   * @see {@link data.FogExplorationData}              The FogExploration data schema\n   */\n  class FogExploration extends ClientDocumentMixin(foundry.documents.BaseFogExploration) {}\n}\n\nexport {};\n"]},81041:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\folder.d.ts","import { DocumentModificationOptions } from '../../common/abstract/document.mjs';\nimport { ConfiguredDocumentClass, ConstructorDataType } from '../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The client-side Folder document which extends the common BaseFolder model.\n   * Each Folder document contains FolderData which defines its data schema.\n   *\n   * @see {@link data.FolderData}              The Folder data schema\n   * @see {@link documents.Folders}            The world-level collection of Folder documents\n   * @see {@link embedded.FolderSound}         The FolderSound embedded document within a parent Folder\n   * @see {@link applications.FolderConfig}    The Folder configuration application\n   *\n   * @param data - Initial data provided to construct the Folder document\n   */\n  class Folder extends ClientDocumentMixin(foundry.documents.BaseFolder) {\n    /**\n     * The depth of this folder in its sidebar tree\n     *\n     * @remarks For folders that have been populated by the {@link SidebarDirectory}, this is always be defined\n     */\n    depth?: number;\n\n    /**\n     * Return an array of the Document instances which are contained within this Folder.\n     */\n    get contents(): InstanceType<typeof CONFIG[this['data']['type']]['documentClass']>[];\n\n    /**\n     * Return whether the folder is displayed in the sidebar to the current user\n     */\n    get displayed(): boolean;\n\n    /**\n     * Return a reference to the Document type which is contained within this Folder.\n     */\n    get documentClass(): typeof CONFIG[this['data']['type']]['documentClass'];\n\n    /**\n     * Return a reference to the WorldCollection instance which provides Documents to this Folder.\n     */\n    get documentCollection(): Collection<InstanceType<typeof CONFIG[this['data']['type']]['documentClass']>>; // TODO: WorldCollection or ReturnType<Game['collections]['get]>\n\n    /**\n     * Return whether the folder is currently expanded within the sidebar interface.\n     */\n    get expanded(): boolean;\n\n    /**\n     * A reference to the parent Folder if one is set, otherwise null.\n     */\n    get parentFolder(): Folder | null;\n\n    /**\n     * Return the named Entity type for elements in this folder.\n     */\n    get type(): this['data']['type'];\n\n    /**\n     * Create a new Folder by rendering a dialog window to provide basic creation details\n     * @param data    - Initial data with which to populate the creation form\n     * @param options - Initial positioning and sizing options for the dialog form\n     *                  (default: `{}`)\n     * @returns An active FolderConfig instance for creating the new Folder entity\n     *\n     * @remarks\n     * This actually returns a FolderConfig but that is incorrectly overriding\n     * ClientDocumentMixin.createDialog, for which a Promise of the created\n     * Document is returned.\n     */\n    static createDialog(\n      data?: DeepPartial<\n        | ConstructorDataType<foundry.data.FolderData>\n        | (ConstructorDataType<foundry.data.FolderData> & Record<string, unknown>)\n      >,\n      options?: Dialog.Options\n    ): any;\n\n    /**\n     * Export all Documents contained in this Folder to a given Compendium pack.\n     * Optionally update existing Documents within the Pack by name, otherwise append all new entries.\n     * @param  pack         - A Compendium pack to which the entities will be exported\n     * @param  updateByName - Update existing entries in the Compendium pack, matching by name\n     *                        (default: `false`)\n     * @returns The updated Compendium Collection instance\n     */\n    exportToCompendium(pack: any, { updateByName }?: { updateByName?: boolean }): Promise<any>; // TODO: CompendiumCollection\n\n    /**\n     * Provide a dialog form that allows for exporting the contents of a Folder into an eligible Compendium pack.\n     * @param pack    - A pack ID to set as the default choice in the select input\n     * @param options - Additional options passed to the Dialog.prompt method\n     *                  (default: `{}`)\n     * @returns A Promise which resolves or rejects once the dialog has been submitted or closed\n     */\n    exportDialog(pack: string, options?: Dialog.Options): Promise<void>;\n\n    /**\n     * Get the Folder documents which are sub-folders of the current folder, either direct children or recursively.\n     * @param recursive - Identify child folders recursively, if false only direct children are returned\n     *                    (default: `false`)\n     * @returns An array of Folder documents which are subfolders of this one\n     */\n    getSubfolders(recursive?: boolean): InstanceType<ConfiguredDocumentClass<typeof Folder>>[];\n\n    protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    get entities(): this['contents'];\n  }\n}\n"]},33822:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\item.d.ts","import { ConfiguredDocumentClass, ConstructorDataType } from '../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The client-side Item document which extends the common BaseItem abstraction.\n   * Each Item document contains ItemData which defines its data schema.\n   *\n   * @see {@link data.ItemData}              The Item data schema\n   * @see {@link documents.Items}            The world-level collection of Item documents\n   * @see {@link applications.ItemSheet}     The Item configuration application\n   *\n   * @param data    - Initial data provided to construct the Item document\n   * @param context - The document context, see {@link foundry.abstract.Document}\n   */\n  class Item extends ClientDocumentMixin(foundry.documents.BaseItem) {\n    /**\n     * A convenience alias of Item#parent which is more semantically intuitive\n     */\n    get actor(): this['parent'];\n\n    /**\n     * A convenience reference to the image path (data.img) used to represent this Item\n     */\n    get img(): this['data']['img'];\n\n    /**\n     * A convenience alias of Item#isEmbedded which is preserves legacy support\n     */\n    get isOwned(): this['isEmbedded'];\n\n    /**\n     * Return an array of the Active Effect instances which originated from this Item.\n     * The returned instances are the ActiveEffect instances which exist on the Item itself.\n     */\n    get transferredEffects(): ReturnType<this['effects']['filter']>;\n\n    /**\n     * A convenience reference to the item type (data.type) of this Item\n     */\n    get type(): this['data']['type'];\n\n    /**\n     * Prepare a data object which defines the data schema used by dice roll commands against this Item\n     */\n    getRollData(): this['data']['data'];\n\n    /** @override */\n    protected _getSheetClass(): typeof ItemSheet | null;\n\n    /** @override */\n    protected static _onCreateDocuments(\n      items: Array<InstanceType<ConfiguredDocumentClass<typeof Item>>>,\n      context: DocumentModificationContext\n    ): Promise<unknown>;\n\n    /** @override */\n    protected static _onDeleteDocuments(\n      items: Array<InstanceType<ConfiguredDocumentClass<typeof Item>>>,\n      context: DocumentModificationContext\n    ): Promise<unknown>;\n\n    /**\n     * You are referencing Item#_data which has been deprecated in favor of Item#data#_source. Support for this reference will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    get _data(): this['data']['_source'];\n\n    /**\n     * @deprecated since 0.8.1\n     */\n    static createOwned(\n      itemData:\n        | ConstructorDataType<foundry.data.ItemData>\n        | (ConstructorDataType<foundry.data.ItemData> & Record<string, unknown>),\n      actor: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>\n    ): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseItem>>;\n  }\n}\n"]},28838:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\journalEntry.d.ts","import { DocumentDataType, DocumentModificationOptions } from '../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * The client-side JournalEntry document which extends the common BaseJournalEntry model.\n   * Each JournalEntry document contains JournalEntryData which defines its data schema.\n   *\n   * @see {@link data.JournalEntryData}              The JournalEntry data schema\n   * @see {@link documents.Journal}                  The world-level collection of JournalEntry documents\n   * @see {@link applications.JournalSheet}          The JournalEntry configuration application\n   *\n   * @param data - Initial data provided to construct the JournalEntry document\n   */\n  class JournalEntry extends ClientDocumentMixin(foundry.documents.BaseJournalEntry) {\n    /**\n     * A boolean indicator for whether or not the JournalEntry is visible to the current user in the directory sidebar\n     */\n    get visible(): boolean;\n\n    /**\n     * Return a reference to the Note instance for this Journal Entry in the current Scene, if any.\n     * If multiple notes are placed for this Journal Entry, only the first will be returned.\n     */\n    get sceneNote(): Note | null;\n\n    /**\n     * Show the JournalEntry to connected players.\n     * By default the entry will only be shown to players who have permission to observe it.\n     * If the parameter force is passed, the entry will be shown to all players regardless of normal permission.\n     *\n     * @param mode  - Which JournalEntry mode to display? Default is text.\n     *                (default: `'text'`)\n     * @param force - Display the entry to all players regardless of normal permissions\n     *                (default: `false`)\n     * @returns A Promise that resolves back to the shown entry once the request is processed\n     */\n    show(mode?: 'text' | 'image', force?: boolean): Promise<this>;\n\n    /**\n     * If the JournalEntry has a pinned note on the canvas, this method will animate to that note\n     * The note will also be highlighted as if hovered upon by the mouse\n     * @param options - Options which modify the pan operation\n     * @returns A Promise which resolves once the pan animation has concluded\n     */\n    panToNote(options?: PanToNoteOptions): Promise<void>;\n\n    /** @override */\n    protected _onUpdate(\n      data: DeepPartial<DocumentDataType<foundry.documents.BaseJournalEntry>>,\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override */\n    protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n  }\n}\n\ninterface PanToNoteOptions {\n  /**\n   * The speed of the pan animation in milliseconds\n   * @defaultValue `250`\n   */\n  duration?: number;\n\n  /**\n   * The resulting zoom level\n   * @defaultValue `1.5`\n   */\n  scale?: number;\n}\n\nexport {};\n"]},89695:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\macro.d.ts","declare global {\n  /**\n   * The client-side Macro document which extends the common BaseMacro model.\n   * Each Macro document contains MacroData which defines its data schema.\n   *\n   * @see {@link data.MacroData}              The Macro data schema\n   * @see {@link documents.Macros}            The world-level collection of Macro documents\n   * @see {@link applications.MacroConfig}    The Macro configuration application\n   *\n   * @param data - Initial data provided to construct the Macro document\n   */\n  class Macro extends ClientDocumentMixin(foundry.documents.BaseMacro) {\n    /**\n     * Is the current User the author of this macro?\n     */\n    get isAuthor(): boolean;\n\n    /**\n     * Execute the Macro command.\n     * @param scope - Provide some additional scope configuration for the Macro\n     */\n    execute(scope?: Scope): void;\n\n    /**\n     * Execute the command as a chat macro.\n     * Chat macros simulate the process of the command being entered into the Chat Log input textarea.\n     */\n    private _executeChat({ actor, token }?: Scope): void;\n\n    /**\n     * Execute the command as a script macro.\n     * Script Macros are wrapped in an async IIFE to allow the use of asynchronous commands and await statements.\n     */\n    private _executeScript({ actor, token }?: Scope): void;\n  }\n}\n\ninterface Scope {\n  /**\n   * An Actor who is the protagonist of the executed action\n   */\n  actor?: Actor;\n\n  /**\n   * A Token which is the protagonist of the executed action\n   */\n  token?: Token;\n}\n\nexport {};\n"]},92647:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\playlist.d.ts","// TODO\ndeclare global {\n  /**\n   * The client-side Playlist document which extends the common BasePlaylist abstraction.\n   * Each Playlist document contains PlaylistData which defines its data schema.\n   *\n   * @see {@link data.PlaylistData}               The Playlist data schema\n   * @see {@link documents.Playlists}             The world-level collection of Playlist documents\n   * @see {@link embedded.PlaylistSound}          The PlaylistSound embedded document within a parent Playlist\n   * @see {@link applications.PlaylistConfig}     The Playlist configuration application\n   *\n   * @param data - Initial data provided to construct the Playlist document\n   */\n  class Playlist extends ClientDocumentMixin(foundry.documents.BasePlaylist) {}\n}\n\nexport {};\n"]},78241:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\rollTable.d.ts","// TODO\ndeclare global {\n  /**\n   * The client-side RollTable document which extends the common BaseRollTable abstraction.\n   * Each RollTable document contains RollTableData which defines its data schema.\n   *\n   * @see {@link data.RollTableData}              The RollTable data schema\n   * @see {@link documents.RollTables}            The world-level collection of RollTable documents\n   * @see {@link applications.RollTableConfig}    The RollTable configuration application\n   *\n   * @param data - Initial data provided to construct the RollTable document\n   */\n  class RollTable extends ClientDocumentMixin(foundry.documents.BaseRollTable) {}\n}\n\nexport {};\n"]},28755:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\scene.d.ts","// TODO\ndeclare global {\n  /**\n   * The client-side Scene document which extends the common BaseScene abstraction.\n   * Each Scene document contains SceneData which defines its data schema.\n   *\n   * @see {@link data.SceneData}              The Scene data schema\n   * @see {@link documents.Scenes}            The world-level collection of Scene documents\n   * @see {@link applications.SceneConfig}    The Scene configuration application\n   *\n   * @param data - Initial data provided to construct the Scene document\n   */\n  class Scene extends ClientDocumentMixin(foundry.documents.BaseScene) {}\n}\n\nexport {};\n"]},77620:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\setting.d.ts","// TODO\ndeclare global {\n  /**\n   * The client-side Setting document which extends the common BaseSetting abstraction.\n   * Each Setting document contains SettingData which defines its data schema.\n   *\n   * @see {@link data.SettingData}              The Setting data schema\n   * @see {@link documents.WorldSettings}       The world-level collection of Setting documents\n   *\n   * @param data - Initial data provided to construct the Setting document\n   */\n  class Setting extends ClientDocumentMixin(foundry.documents.BaseSetting) {}\n}\n\nexport {};\n"]},49340:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\user.d.ts","import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { DocumentDataType, DocumentModificationOptions } from '../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * The client-side User document which extends the common BaseUser model.\n   * Each User document contains UserData which defines its data schema.\n   *\n   * @see {@link data.UserData}               The User data schema\n   * @see {@link documents.Users}             The world-level collection of User documents\n   * @see {@link applications.UserConfig}     The User configuration application\n   */\n  class User extends ClientDocumentMixin(foundry.documents.BaseUser) {\n    /**\n     * @param data - Initial data provided to construct the User document\n     *               (default: `{}`)\n     */\n    constructor(\n      data?: ConstructorParameters<ConstructorOf<foundry.documents.BaseUser>>[0],\n      context?: ConstructorParameters<ConstructorOf<foundry.documents.BaseUser>>[1]\n    );\n\n    /**\n     * Track whether the user is currently active in the game\n     * @defaultValue `false`\n     */\n    active: boolean;\n\n    /**\n     * Track references to the current set of Tokens which are targeted by the User\n     */\n    targets: UserTargets;\n\n    /**\n     * Track the ID of the Scene that is currently being viewed by the User\n     * @defaultValue `null`\n     */\n    viewedScene: string | null;\n\n    /**\n     * Return the User avatar icon or the controlled actor's image\n     */\n    get avatar(): string;\n\n    // TODO: Replace return type with ReturnType<Game['actors']['get']> once this is possible\n    /**\n     * Return the Actor instance of the user's impersonated character (or undefined)\n     */\n    get character(): InstanceType<ConfiguredDocumentClass<typeof Actor>> | undefined;\n\n    /**\n     * A convenience shortcut for the permissions object of the current User\n     */\n    get permissions(): foundry.data.UserData['permissions'];\n\n    /**\n     * A flag for whether the current User is a Trusted Player\n     */\n    get isTrusted(): boolean;\n\n    /**\n     * A flag for whether this User is the connected client\n     */\n    get isSelf(): boolean;\n\n    /**\n     * Assign a Macro to a numbered hotbar slot between 1 and 50\n     * @param macro    - The Macro entity to assign\n     * @param slot     - A specific numbered hotbar slot to fill\n     * @param fromSlot - An optional origin slot from which the Macro is being shifted\n     * @returns A Promise which resolves once the User update is complete\n     */\n    assignHotbarMacro(\n      macro: InstanceType<ConfiguredDocumentClass<typeof Macro>> | null,\n      slot: string | number,\n      { fromSlot }?: { fromSlot: number }\n    ): Promise<this>;\n\n    /**\n     * Assign a specific boolean permission to this user.\n     * Modifies the user permissions to grant or restrict access to a feature.\n     *\n     * @param permission - The permission name from USER_PERMISSIONS\n     * @param allowed    - Whether to allow or restrict the permission\n     */\n    assignPermission(permission: keyof typeof CONST.USER_PERMISSIONS, allowed: boolean): Promise<this>;\n\n    /**\n     * Submit User activity data to the server for broadcast to other players.\n     * This type of data is transient, persisting only for the duration of the session and not saved to any database.\n     *\n     * @param activityData - An object of User activity data to submit to the server for broadcast.\n     *                       (default: `{}`)\n     */\n    broadcastActivity(activityData?: User.ActivityData): void;\n\n    /**\n     * Get an Array of Macro Entities on this User's Hotbar by page\n     * @param page - The hotbar page number\n     *               (default: `1`)\n     */\n    getHotbarMacros(\n      page?: number\n    ): Array<{ slot: number; macro: InstanceType<ConfiguredDocumentClass<typeof Macro>> | null }>;\n\n    /**\n     * Update the set of Token targets for the user given an array of provided Token ids.\n     * @param targetIds - An array of Token ids which represents the new target set\n     *                    (default: `[]`)\n     */\n    updateTokenTargets(targetIds?: string[]): void;\n\n    /** @override  */\n    _onUpdate(\n      data: DeepPartial<DocumentDataType<foundry.documents.BaseUser>>,\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override  */\n    _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    isRole(role: Parameters<User['hasRole']>[0]): boolean;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    setPermission(permission: keyof typeof CONST.USER_PERMISSIONS, allowed: boolean): Promise<this>;\n  }\n\n  namespace User {\n    interface ActivityData {\n      /**\n       * The coordinates of the user's cursor\n       */\n      cursor?: boolean;\n\n      /**\n       * Is the user pulling focus to the cursor coordinates?\n       */\n      focus?: boolean;\n\n      /**\n       * Is the user emitting a ping at the cursor coordinates?\n       */\n      ping?: boolean;\n\n      /**\n       * Serialized Ruler coordinate data in JSON format\n       */\n      ruler?: string;\n\n      /**\n       * The id of the Scene currently being viewed by the User\n       */\n      sceneId?: string;\n\n      /**\n       * An array of Token ids which are targeted by the User\n       */\n      targets?: string[];\n    }\n  }\n}\n\nexport {};\n"]},83088:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientSettings.d.ts",'/**\n * A class responsible for managing defined game settings or settings menus.\n * Each setting is a string key/value pair belonging to a certain package and a certain store scope.\n *\n * When Foundry Virtual Tabletop is initialized, a singleton instance of this class is constructed within the global\n * Game object as as game.settings.\n *\n * @see {@link Game#settings}\n * @see {@link Settings}\n * @see {@link SettingsConfig}\n */\ndeclare class ClientSettings {\n  constructor(worldSettings?: Setting[\'data\'][\'_source\'][]);\n\n  /**\n   * A object of registered game settings for this scope\n   */\n  settings: Map<string, ClientSettings.CompleteSetting>;\n\n  /**\n   * Registered settings menus which trigger secondary applications\n   */\n  menus: Map<string, ClientSettings.CompleteMenuSetting>;\n\n  /**\n   * The storage interfaces used for persisting settings\n   * Each storage interface shares the same API as window.localStorage\n   * @remarks This is a lie, it doesn\'t actually have the same interface...\n   */\n  storage: Map<string, Storage | WorldSettings>;\n\n  /**\n   * The types of settings which should be constructed as a primitive type\n   */\n  protected static PRIMITIVE_TYPES: [typeof String, typeof Number, typeof Boolean, typeof Array];\n\n  /**\n   * Return a singleton instance of the Game Settings Configuration app\n   */\n  get sheet(): SettingsConfig;\n\n  /**\n   * Register a new game setting under this setting scope\n   *\n   * @param module - The namespace under which the setting is registered\n   * @param key    - The key name for the setting under the namespace module\n   * @param data   - Configuration for setting data\n   * @typeParam M  - The module name to register the setting for\n   * @typeParam K  - The key to register the setting for\n   * @typeParam T  - The type of the setting value\n   *\n   * @example\n   * ```typescript\n   * // Register a client setting\n   * game.settings.register("myModule", "myClientSetting", {\n   *   name: "Register a Module Setting with Choices",\n   *   hint: "A description of the registered setting and its behavior.",\n   *   scope: "client",     // This specifies a client-stored setting\n   *   config: true,        // This specifies that the setting appears in the configuration view\n   *   type: String,\n   *   choices: {           // If choices are defined, the resulting setting will be a select menu\n   *     "a": "Option A",\n   *     "b": "Option B"\n   *   },\n   *   default: "a",        // The default value for the setting\n   *   onChange: value => { // A callback function which triggers when the setting is changed\n   *     console.log(value)\n   *   }\n   * });\n   * ```\n   *\n   * @example\n   * ```typescript\n   * // Register a world setting\n   * game.settings.register("myModule", "myWorldSetting", {\n   *   name: "Register a Module Setting with a Range slider",\n   *   hint: "A description of the registered setting and its behavior.",\n   *   scope: "world",      // This specifies a world-level setting\n   *   config: true,        // This specifies that the setting appears in the configuration view\n   *   type: Number,\n   *   range: {             // If range is specified, the resulting setting will be a range slider\n   *     min: 0,\n   *     max: 100,\n   *     step: 10\n   *   }\n   *   default: 50,         // The default value for the setting\n   *   onChange: value => { // A callback function which triggers when the setting is changed\n   *     console.log(value)\n   *   }\n   * });\n   * ```\n   */\n  register<M extends string, K extends string, T>(\n    module: M,\n    key: K,\n    data: ClientSettings.Values[`${M}.${K}`] extends boolean | number | bigint | string | symbol | object\n      ? ClientSettings.PartialSetting<ClientSettings.Values[`${M}.${K}`]>\n      : ClientSettings.PartialSetting<T>\n  ): void;\n\n  /**\n   * Register a new sub-settings menu\n   *\n   * @param module - The namespace under which the menu is registered\n   * @param key    - The key name for the setting under the namespace module\n   * @param data   - Configuration for setting data\n   * @typeParam M  - The module name to register the menu setting for\n   * @typeParam K  - The key to register the menu setting for\n   *\n   * @example\n   * ```typescript\n   * // Define a settings submenu which handles advanced configuration needs\n   * game.settings.registerMenu("myModule", "mySettingsMenu", {\n   *   name: "My Settings Submenu",\n   *   label: "Settings Menu Label",      // The text label used in the button\n   *   hint: "A description of what will occur in the submenu dialog.",\n   *   icon: "fas fa-bars",               // A Font Awesome icon used in the submenu button\n   *   type: MySubmenuApplicationClass,   // A FormApplication subclass which should be created\n   *   restricted: true                   // Restrict this submenu to gamemaster only?\n   * });\n   * ```\n   */\n  registerMenu<M extends string, K extends string>(\n    module: M,\n    key: K,\n    data: ClientSettings.RegisteredMenuSettings[`${M}.${K}`]\n  ): void;\n\n  /**\n   * Get the value of a game setting for a certain module and setting key\n   *\n   * @param module - The module namespace under which the setting is registered\n   * @param key    - The setting key to retrieve\n   * @typeParam M  - The module name to register the get for\n   * @typeParam K  - The key to get the setting for\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the current setting value\n   * game.settings.get("myModule", "myClientSetting");\n   * ```\n   */\n  get<M extends string, K extends string>(module: M, key: K): ClientSettings.Values[`${M}.${K}`];\n\n  /**\n   * Set the value of a game setting for a certain module and setting key\n   *\n   * @param module - The module namespace under which the setting is registered\n   * @param key    - The setting key to retrieve\n   * @param value  - The data to assign to the setting key\n   * @typeParam M  - The module name to register the get for\n   * @typeParam K  - The key to get the setting for\n   * @typeParam V  - The value type to get the value for\n   *\n   * @example\n   * ```typescript\n   * // Update the current value of a setting\n   * game.settings.set("myModule", "myClientSetting", "b");\n   * ```\n   */\n  set<M extends string, K extends string, V extends ClientSettings.Values[`${M}.${K}`]>(\n    module: M,\n    key: K,\n    value: V\n  ): Promise<V>;\n}\n\ndeclare namespace ClientSettings {\n  interface CompleteSetting<T = unknown> extends PartialSetting<T> {\n    key: string;\n    module: string;\n  }\n\n  interface CompleteMenuSetting extends PartialMenuSetting {\n    key: string;\n    module: string;\n  }\n\n  interface PartialSetting<T = unknown> {\n    choices?: Record<string, string>;\n    config?: boolean;\n    default?: T;\n    hint?: string;\n    name?: string;\n    onChange?: (value: T) => void;\n    range?: {\n      max: number;\n      min: number;\n      step: number;\n    };\n    scope: string;\n    type?: T extends boolean\n      ? typeof Boolean\n      : T extends number\n      ? typeof Number\n      : T extends bigint\n      ? typeof BigInt\n      : T extends string\n      ? typeof String\n      : T extends symbol\n      ? typeof Symbol\n      : ConstructorOf<T>;\n  }\n\n  interface PartialMenuSetting {\n    hint?: string;\n    icon?: string;\n    label?: string;\n    name?: string;\n    restricted: boolean;\n    type: ConstructorOf<FormApplication<FormApplication.Options, object>>;\n  }\n\n  interface RegisteredMenuSettings {\n    [key: string]: PartialMenuSetting;\n  }\n\n  interface Values {\n    \'core.combatTrackerConfig\': { resource: string; skipDefeated: boolean };\n    \'core.compendiumConfiguration\': Partial<Record<string, CompendiumCollection.Configuration>>;\n    \'core.rollMode\': foundry.CONST.DiceRollMode;\n    \'core.animateRollTable\': boolean;\n    \'core.permissions\': Game.Permissions;\n    \'core.defaultDrawingConfig\': foundry.data.DrawingData[\'_source\'] | {};\n    [key: string]: unknown;\n  }\n}\n']},37412:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollection.d.ts","import { ConfiguredDocumentClass, DocumentConstructor } from '../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * An abstract subclass of the Collection container which defines a collection of Document instances.\n   */\n  abstract class DocumentCollection<T extends DocumentConstructor, Name extends string> extends foundry.utils\n    .Collection<InstanceType<ConfiguredDocumentClass<T>>> {\n    constructor();\n\n    /**\n     * An Array of application references which will be automatically updated when the collection content changes\n     * @defaultValue `[]`\n     */\n    apps: Application[];\n\n    /**\n     * The Collection class name\n     */\n    get name(): Name;\n\n    /**\n     * A reference to the Document class definition which is contained within this DocumentCollection.\n     */\n    get documentClass(): ConfiguredDocumentClass<T>;\n\n    /**\n     * A reference to the named Document class which is contained within this DocumentCollection.\n     * @remarks This accessor is abstract: A subclass of DocumentCollection must implement the documentName getter\n     */\n    get documentName(): ConfiguredDocumentClass<T>['metadata']['name'];\n\n    /**\n     * @remarks The parameter `id` is ignored, instead `document.id` is used as the key.\n     */\n    set(id: string, document: InstanceType<ConfiguredDocumentClass<T>>): this;\n\n    /**\n     * Render any Applications associated with this DocumentCollection.\n     */\n    render(force?: boolean, options?: Application.Options): void;\n\n    /**\n     * Update all objects in this DocumentCollection with a provided transformation.\n     * Conditionally filter to only apply to Entities which match a certain condition.\n     * @param transformation - An object of data or function to apply to all matched objects\n     * @param condition      - A function which tests whether to target each object\n     *                         (default: `null`)\n     * @param options        - Additional options passed to Entity.update\n     *                         (default: `{}`)\n     * @returns An array of updated data once the operation is complete\n     */\n    updateAll(\n      transformation:\n        | DeepPartial<InstanceType<ConfiguredDocumentClass<T>>['data']['_source']>\n        | ((\n            doc: InstanceType<ConfiguredDocumentClass<T>>\n          ) => DeepPartial<InstanceType<ConfiguredDocumentClass<T>>['data']['_source']>),\n      condition?: ((obj: InstanceType<ConfiguredDocumentClass<T>>) => boolean) | null,\n      options?: DocumentModificationContext\n    ): ReturnType<this['documentClass']['updateDocuments']>;\n\n    /**\n     * Preliminary actions taken before a set of Documents in this Collection are created.\n     * @param result  - An Array of created data objects\n     * @param options - Options which modified the creation operation\n     * @param userId  - The ID of the User who triggered the operation\n     */\n    _preCreateDocuments(\n      result: InstanceType<ConfiguredDocumentClass<T>>['data']['_source'][],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /**\n     * Follow-up actions taken after a set of Documents in this Collection are created.\n     * @param documents - An Array of created Documents\n     * @param result    - An Array of created data objects\n     * @param options   - Options which modified the creation operation\n     * @param userId    - The ID of the User who triggered the operation\n     */\n    _onCreateDocuments(\n      documents: InstanceType<ConfiguredDocumentClass<T>>[],\n      result: InstanceType<ConfiguredDocumentClass<T>>['data']['_source'][],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /**\n     * Preliminary actions taken before a set of Documents in this Collection are updated.\n     * @param result  - An Array of incremental data objects\n     * @param options - Options which modified the update operation\n     * @param userId  - The ID of the User who triggered the operation\n     */\n    _preUpdateDocuments(\n      result: DeepPartial<InstanceType<ConfiguredDocumentClass<T>>>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /**\n     * Follow-up actions taken after a set of Documents in this Collection are updated.\n     * @param documents - An Array of updated Documents\n     * @param result    - An Array of incremental data objects\n     * @param options   - Options which modified the update operation\n     * @param userId    - The ID of the User who triggered the operation\n     */\n    _onUpdateDocuments(\n      documents: InstanceType<ConfiguredDocumentClass<T>>[],\n      result: DeepPartial<InstanceType<ConfiguredDocumentClass<T>>>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /**\n     * Preliminary actions taken before a set of Documents in this Collection are deleted.\n     * @param result  - An Array of document IDs being deleted\n     * @param options - Options which modified the deletion operation\n     * @param userId  - The ID of the User who triggered the operation\n     */\n    _preDeleteDocuments(result: string[], options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * Follow-up actions taken after a set of Documents in this Collection are deleted.\n     * @param documents - An Array of deleted Documents\n     * @param result    - An Array of document IDs being deleted\n     * @param options   - Options which modified the deletion operation\n     * @param userId    - The ID of the User who triggered the operation\n     */\n    _onDeleteDocuments(\n      documents: InstanceType<ConfiguredDocumentClass<T>>[],\n      result: string[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n  }\n}\n"]},11774:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\compendiumCollection.d.ts","import { ConfiguredDocumentClassForName, ConstructorDataType } from '../../../../types/helperTypes';\nimport { IdQuery } from '../../../common/abstract/backend.mjs';\nimport { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * A collection of Document objects contained within a specific compendium pack.\n   * Each Compendium pack has its own associated instance of the CompendiumCollection class which contains its contents.\n   *\n   * @see {@link Game#packs}\n   */\n  class CompendiumCollection<T extends CompendiumCollection.Metadata> extends DocumentCollection<\n    DocumentClassForCompendiumMetadata<T>,\n    'CompendiumCollection'\n  > {\n    /** @param metadata - The compendium metadata, an object provided by game.data */\n    constructor(metadata: T);\n\n    /** The compendium metadata which defines the compendium content and location */\n    metadata: T;\n\n    /**  A subsidiary collection which contains the more minimal index of the pack */\n    index: IndexTypeForMetadata<T>;\n\n    /** A debounced function which will clear the contents of the Compendium pack if it is not accessed frequently. */\n    _flush: () => void;\n\n    /**\n     * The amount of time that Document instances within this CompendiumCollection are held in memory.\n     * Accessing the contents of the Compendium pack extends the duration of this lifetime.\n     * @defaultValue `300`\n     */\n    static CACHE_LIFETIME_SECONDS: number;\n\n    /**\n     * The named game setting which contains Compendium configurations.\n     */\n    static CONFIG_SETTING: 'compendiumConfiguration';\n\n    /** The canonical Compendium name - comprised of the originating package and the pack name */\n    get collection(): string;\n\n    /** Access the compendium configuration data for this pack */\n    get config(): CompendiumCollection.Configuration | {};\n\n    get documentName(): this['metadata']['entity'];\n\n    /** Track whether the Compendium Collection is locked for editing */\n    get locked(): boolean;\n\n    /** Track whether the Compendium Collection is private */\n    get private(): boolean;\n\n    /** A convenience reference to the label which should be used as the title for the Compendium pack. */\n    get title(): string;\n\n    get(key: string, { strict }: { strict: true }): DocumentInstanceForCompendiumMetadata<T>;\n    get(key: string, { strict }?: { strict?: false }): DocumentInstanceForCompendiumMetadata<T> | undefined;\n\n    set(id: string, document: DocumentInstanceForCompendiumMetadata<T>): this;\n\n    delete: (id: string) => boolean;\n\n    /** Load the Compendium index and cache it as the keys and values of the Collection. */\n    getIndex(): Promise<this['index']>;\n\n    /**\n     * Get a single Document from this Compendium by ID.\n     * The document may already be locally cached, otherwise it is retrieved from the server.\n     * @param id -  The requested Document id\n     * @returns The retrieved Document instance\n     */\n    getDocument(id: string): Promise<DocumentInstanceForCompendiumMetadata<T> | undefined | null>;\n\n    /**\n     * Load multiple documents from the Compendium pack using a provided query object.\n     * @param query - A database query used to retrieve documents from the underlying database\n     *                default: `{}`\n     * @returns The retrieved Document instances\n     */\n    getDocuments(query?: IdQuery): Promise<DocumentInstanceForCompendiumMetadata<T>[]>;\n\n    /**\n     * Import a Document into this Compendium Collection.\n     * @param document - The existing Document you wish to import\n     * @returns The imported Document instance\n     */\n    importDocument(\n      document: DocumentInstanceForCompendiumMetadata<T>\n    ): Promise<DocumentInstanceForCompendiumMetadata<T> | undefined>;\n\n    /**\n     * Fully import the contents of a Compendium pack into a World folder.\n     * @returns The imported Documents, now existing within the World\n     */\n    importAll({ folderId, folderName, options }: ImportAllOptions): Promise<DocumentInstanceForCompendiumMetadata<T>[]>;\n\n    /**\n     * Add a Document to the index, capturing it's relevant index attributes\n     * @param document -The document to index\n     */\n    indexDocument(document: DocumentInstanceForCompendiumMetadata<T>): void;\n\n    /**\n     * Create a new Compendium Collection using provided metadata.\n     * @param metadata - The compendium metadata used to create the new pack\n     * @param options - Additional options which modify the Compendium creation request\n     *                  default `{}`\n     */\n    static createCompendium<T extends CompendiumCollection.Metadata>(\n      metadata: T,\n      options?: Partial<DocumentModificationOptions>\n    ): Promise<CompendiumCollection<T>>;\n\n    /**\n     * Assign configuration metadata settings to the compendium pack\n     * @param settings - The object of compendium settings to define\n     *                   default: `{}`\n     * @returns A Promise which resolves once the setting is updated\n     */\n    configure(settings?: Partial<CompendiumCollection.Configuration>): Promise<CompendiumCollection.Configuration>;\n\n    /**\n     * Delete an existing world-level Compendium Collection.\n     * This action may only be performed for world-level packs by a Gamemaster User.\n     */\n    deleteCompendium(): Promise<this>;\n\n    /**\n     * Duplicate a compendium pack to the current World.\n     * @param label - A new Compendium label\n     */\n    duplicateCompendium({ label }?: { label?: string }): Promise<this>;\n\n    /**\n     * Validate that the current user is able to modify content of this Compendium pack\n     * @param requireUnlocked - `(default: true)`\n     */\n    protected _assertUserCanModify({ requireUnlocked }?: { requireUnlocked?: boolean }): true;\n\n    /**\n     * Request that a Compendium pack be migrated to the latest System data template\n     * TODO: find better type for options, used in socket dispatch\n     */\n    migrate(options?: object): Promise<this>;\n\n    _onCreateDocuments(\n      documents: DocumentInstanceForCompendiumMetadata<T>[],\n      result: DocumentInstanceForCompendiumMetadata<T>['data']['_source'][],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    _onUpdateDocuments(\n      documents: DocumentInstanceForCompendiumMetadata<T>[],\n      result: DeepPartial<DocumentInstanceForCompendiumMetadata<T>>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    _onDeleteDocuments(\n      documents: DocumentInstanceForCompendiumMetadata<T>[],\n      result: string[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /**\n     * Follow-up actions taken when Documents within this Compendium pack are modified\n     */\n    protected _onModifyContents(\n      documents: DocumentInstanceForCompendiumMetadata<T>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @deprecated since 0.8.0 */\n    get entity(): this['documentClass']['documentName'];\n\n    /** @deprecated since 0.8.0 */\n    getContent(): ReturnType<this['getDocuments']>;\n\n    /** @deprecated since 0.8.0 */\n    getEntry(id: string): Promise<DocumentInstanceForCompendiumMetadata<T>['data']>;\n\n    /** @deprecated since 0.8.0 */\n    getEntity(id: string): ReturnType<this['getDocument']>;\n\n    /** @deprecated since 0.8.0 */\n    importEntity(document: DocumentInstanceForCompendiumMetadata<T>): ReturnType<this['importDocument']>;\n\n    /** @deprecated since 0.8.0 */\n    createEntity(\n      data:\n        | ConstructorDataType<DocumentInstanceForCompendiumMetadata<T>['data']>\n        | (ConstructorDataType<DocumentInstanceForCompendiumMetadata<T>['data']> & Record<string, unknown>),\n      options?: Partial<DocumentModificationOptions>\n    ): ReturnType<this['documentClass']['create']>;\n\n    /** @deprecated since 0.8.0 */\n    updateEntity(\n      data: DeepPartial<\n        | ConstructorDataType<DocumentInstanceForCompendiumMetadata<T>['data']>\n        | (ConstructorDataType<DocumentInstanceForCompendiumMetadata<T>['data']> & Record<string, unknown>)\n      > & {\n        _id: string;\n      },\n      options?: Partial<DocumentModificationOptions>\n    ): ReturnType<DocumentInstanceForCompendiumMetadata<T>['update']>;\n\n    /** @deprecated since 0.8.0 */\n    deleteEntity(\n      id: string,\n      options?: Partial<DocumentModificationOptions>\n    ): ReturnType<DocumentInstanceForCompendiumMetadata<T>['delete']>;\n  }\n\n  namespace CompendiumCollection {\n    interface Configuration {\n      private: boolean;\n      locked: boolean;\n    }\n    interface Metadata {\n      entity: 'Actor' | 'Item' | 'JournalEntry' | 'Macro' | 'Playlist' | 'RollTable' | 'Scene';\n      name: string;\n      label: string;\n      path: string;\n      private: boolean;\n      package: string;\n      system?: string;\n    }\n  }\n}\n\ninterface ImportAllOptions {\n  /**\n   * An existing Folder _id to use.\n   * @defaultValue `null`\n   * */\n  folderId?: string | null;\n  /**\n   * A new Folder name to create.\n   * @defaultValue `''`\n   * */\n  folderName?: string;\n  /**\n   * Additional options forwarded to Document.createDocuments\n   * @defaultValue `{}`\n   */\n  options?: DocumentModificationContext;\n}\n\ntype DocumentClassForCompendiumMetadata<T extends CompendiumCollection.Metadata> = ConfiguredDocumentClassForName<\n  T['entity']\n>;\n\ntype DocumentInstanceForCompendiumMetadata<T extends CompendiumCollection.Metadata> = InstanceType<\n  DocumentClassForCompendiumMetadata<T>\n>;\n\ntype IndexTypeForMetadata<T extends CompendiumCollection.Metadata> = foundry.utils.Collection<\n  Pick<\n    DocumentInstanceForCompendiumMetadata<T>['data'],\n    '_id' | 'name' | 'img' | 'type' extends keyof DocumentInstanceForCompendiumMetadata<T>['data'] ? 'type' : never\n  >\n>;\n"]},75375:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\index.d.ts","import './compendiumCollection';\nimport './worldCollection';\nimport './worldCollections';\n"]},57971:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollection.d.ts","import { ConfiguredDocumentClass, DocumentConstructor } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * A collection of world-level Document objects with a singleton instance per primary Document type.\n   * Each primary Document type has an associated subclass of WorldCollection which contains them.\n   * @see {@link Game#collections}\n   */\n  abstract class WorldCollection<T extends DocumentConstructor, Name extends string> extends DocumentCollection<\n    T,\n    Name\n  > {\n    /**\n     *\n     * @param data - An array of data objects from which to create Document instances\n     *               (default: `[]`)\n     */\n    constructor(data?: InstanceType<ConfiguredDocumentClass<T>>['data']['_source'][]);\n\n    readonly _source: InstanceType<ConfiguredDocumentClass<T>>['data']['_source'][];\n\n    /**\n     * Initialize the WorldCollection object by constructing its contained Document instances\n     */\n    protected _initialize(): void;\n\n    /**\n     * @remarks In the abstract {@link WorldCollection}, this actually returns `null` but all deriving classes implement it properly.\n     */\n    get documentName(): ConfiguredDocumentClass<T>['metadata']['name'];\n\n    /**\n     * The base Document type which is contained within this WorldCollection\n     * @defaultValue `null`\n     * @remarks\n     * All deriving classes must set this to the string matching the name of the document type they contain because it\n     * is used as value for {@link WorldCollection#documentName}.\n     */\n    static documentName: string | null;\n\n    /**\n     * Return a reference to the SidebarDirectory application for this WorldCollection, or null if it has not yet been created.\n     * @remarks\n     * In the case where `Lowercase<Name>` is not a property of {@link ui}, this actually always returns `null` but\n     * {@link RollTables} overrides this so we need to allow a wider return type.\n     */\n    get directory(): Lowercase<Name> extends keyof typeof ui\n      ? typeof ui[Lowercase<Name>]\n      : null | SidebarDirectory | undefined;\n\n    /**\n     * Return a reference to the singleton instance of this WorldCollection, or null if it has not yet been created.\n     */\n    static get instance(): WorldCollection<DocumentConstructor, any>; // TODO: Find a way to type this more concretely. One option would be to separate the static and non static side of this class, which allows accessing the the static this type to use the `documentName`.\n\n    /** @override */\n    set(id: string, document: InstanceType<ConfiguredDocumentClass<T>>): this;\n\n    delete: (id: string) => boolean;\n\n    /**\n     * Import a Document from a Compendium collection, adding it to the current World.\n     * @param pack       - The CompendiumCollection instance from which to import\n     * @param id         - The ID of the compendium entry to import\n     * @param updateData - Optional additional data used to modify the imported Document before it is created\n     * @param options    - Optional arguments passed to the Document.create method\n     * @returns The imported Document instance\n     */\n    importFromCompendium(\n      pack: any, // TODO: CompendiumCollection\n      id: string,\n      updateData?: DeepPartial<InstanceType<ConfiguredDocumentClass<T>>['data']['_source']>,\n      options?: DocumentModificationContext\n    ): Promise<InstanceType<ConfiguredDocumentClass<T>>>;\n\n    /**\n     * Apply data transformations when importing a Document from a Compendium pack\n     * @param document - The source Document, or a plain data object\n     * @returns The processed data ready for world Document creation\n     */\n    fromCompendium(\n      document: InstanceType<ConfiguredDocumentClass<T>> | InstanceType<ConfiguredDocumentClass<T>>['data']['_source']\n    ): Omit<InstanceType<ConfiguredDocumentClass<T>>['data']['_source'], '_id' | 'folder'>;\n\n    /**\n     * The WorldCollection#insert method is deprecated in favor of the WorldCollection#set method and will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    insert(document: InstanceType<ConfiguredDocumentClass<T>>): this;\n\n    /**\n     * The WorldCollection#remove method is deprecated in favor of the WorldCollection#delete method and will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    remove(id: string): boolean;\n\n    /**\n     * The WorldCollection#entities property is deprecated in favor of the Collection#contents attribute and will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    get entities(): this['contents'];\n\n    /**\n     * The WorldCollection#object property has been deprecated in favor of WorldCollection#documentClass. Support will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    get object(): this['documentClass'];\n\n    /**\n     * The WorldCollection#importFromCollection method has been deprecated in favor of WorldCollection#importFromCompendium. Support for the old method name will be removed in 0.9.0\n     * @deprecated since 0.8.0\n     */\n    importFromCollection(\n      packName: string,\n      ...args: Parameters<this['importFromCompendium']> extends [any, ...infer U] ? U : never\n    ): ReturnType<this['importFromCompendium']>;\n  }\n}\n"]},85215:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\actors.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The singleton collection of Actor documents which exist within the active World.\n   * This Collection is accessible within the Game object as game.actors.\n   *\n   * @see {@link Actor} The Actor entity\n   * @see {@link ActorDirectory} The ActorDirectory sidebar directory\n   *\n   * @example <caption>Retrieve an existing Actor by its id</caption>\n   * ```typescript\n   * let actor = game.actors.get(actorId);\n   * ```\n   */\n  class Actors extends WorldCollection<typeof foundry.documents.BaseActor, 'Actors'> {\n    constructor(data?: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>['data']['_source'][]);\n    /**\n     * A mapping of synthetic Token Actors which are currently active within the viewed Scene.\n     * Each Actor is referenced by the Token.id.\n     */\n    tokens: Partial<Record<string, InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>>>;\n\n    /** @override */\n    static documentName: 'Actor';\n\n    /** @override */\n    fromCompendium(\n      document:\n        | InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>\n        | InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>['data']['_source']\n    ): Omit<\n      InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>['data']['_source'],\n      '_id' | 'folder'\n    >;\n\n    /**\n     * Register an Actor sheet class as a candidate which can be used to display Actors of a given type\n     * See EntitySheetConfig.registerSheet for details\n     *\n     * @example <caption>Register a new ActorSheet subclass for use with certain Actor types.</caption>\n     * ```typescript\n     * Actors.registerSheet(\"dnd5e\", ActorSheet5eCharacter, { types: [\"character\"], makeDefault: true });\n     * ```\n     */\n    static registerSheet(\n      scope: string,\n      sheetClass: ConstructorOf<ActorSheet>,\n      { label, types, makeDefault }?: { label?: string; types?: string[]; makeDefault?: boolean }\n    ): void;\n\n    /**\n     * Unregister an Actor sheet class, removing it from the list of avaliable sheet Applications to use\n     * See EntitySheetConfig.unregisterSheet for details\n     *\n     * @example <caption>Deregister the default ActorSheet subclass to replace it with others.</caption>\n     * ```typescript\n     * Actors.unregisterSheet(\"core\", ActorSheet);\n     * ```\n     */\n    static unregisterSheet(\n      scope: string,\n      sheetClass: ConstructorOf<ActorSheet>,\n      { types }?: { types?: string[] }\n    ): void;\n\n    /**\n     * Return an Array of currently registered sheet classes for this Entity type\n     */\n    static get registeredSheets(): typeof ActorSheet[];\n  }\n}\n"]},926:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\combatEncounters.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The singleton collection of Combat documents which exist within the active World.\n   * This Collection is accessible within the Game object as game.combats.\n   *\n   * @see {@link Combat} The Combat entity\n   * @see {@link CombatTracker} The CombatTracker sidebar directory\n   */\n  class CombatEncounters extends WorldCollection<typeof foundry.documents.BaseCombat, 'CombatEncounters'> {\n    /** @override */\n    static documentName: 'Combat';\n\n    /**\n     * Provide the settings object which configures the Combat entity\n     */\n    static get settings(): ClientSettings.Values[`core.${typeof Combat['CONFIG_SETTING']}`];\n\n    /**\n     * Get an Array of Combat instances which apply to the current canvas scene\n     */\n    get combats(): ReturnType<this['filter']>;\n\n    /**\n     * The currently active Combat instance\n     */\n    get active(): ReturnType<this['find']>;\n\n    /**\n     * The currently viewed Combat encounter\n     */\n    get viewed(): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseCombat>> | null;\n\n    /**\n     * When a Token is deleted, remove it as a combatant from any combat encounters which included the Token\n     * @param sceneId - The Scene id within which a Token is being deleted\n     * @param tokenId - The Token id being deleted\n     */\n    protected _onDeleteToken(sceneId: string, tokenId: string): Promise<void>;\n  }\n}\n"]},46801:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\fogExplorations.d.ts","/**\n * The singleton collection of FogExploration documents which exist within the active World.\n * This Collection is accessible within the Game object as game.fog.\n *\n * @see {@link FogExploration} The FogExploration document\n */\ndeclare class FogExplorations extends WorldCollection<typeof foundry.documents.BaseFogExploration, 'FogExplorations'> {\n  static documentName: 'FogExploration';\n}\n"]},72791:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\folders.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The singleton collection of Folder documents which exist within the active World.\n   * This Collection is accessible within the Game object as game.fog.\n   *\n   * @see {@link FogExploration} The FogExploration document\n   */\n  class Folders extends WorldCollection<typeof foundry.documents.BaseFolder, 'Folders'> {\n    constructor(data?: InstanceType<ConfiguredDocumentClass<typeof Folder>>['data']['_source'][]);\n\n    /**\n     * Track which Folders are currently expanded in the UI\n     */\n    protected _expanded: Partial<Record<string, boolean>>;\n\n    /** @override */\n    static documentName: 'Folder';\n\n    /** @override */\n    render(force?: boolean, context?: Application.Options): void;\n\n    /**\n     * Refresh the display of any active JournalSheet instances where the folder list will change.\n     */\n    protected _refreshJournalEntrySheets(): void;\n  }\n}\n"]},23167:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\index.d.ts","import './actors';\nimport './combatEncounters';\nimport './fogExplorations';\nimport './folders';\nimport './items';\nimport './journal';\nimport './macros';\nimport './messages';\nimport './playlists';\nimport './rollTables';\nimport './scenes';\nimport './users';\nimport './worldSettings';\n"]},60201:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\items.d.ts","/**\n * The singleton collection of Item documents which exist within the active World.\n * This Collection is accessible within the Game object as game.items.\n *\n * @see {@link Item} The Item entity\n * @see {@link ItemDirectory} The ItemDirectory sidebar directory\n */\ndeclare class Items extends WorldCollection<typeof foundry.documents.BaseItem, 'Items'> {\n  /** @override */\n  static documentName: 'Item';\n\n  /**\n   * Register an Item sheet class as a candidate which can be used to display Items of a given type\n   * See EntitySheetConfig.registerSheet for details\n   */\n  static registerSheet(\n    scope: string,\n    sheetClass: ConstructorOf<ItemSheet>,\n    { label, types, makeDefault }?: { label?: string; types?: string[]; makeDefault?: boolean }\n  ): void;\n\n  /**\n   * Unregister an Item sheet class, removing it from the list of available sheet Applications to use\n   * See EntitySheetConfig.unregisterSheet for details\n   */\n  static unregisterSheet(scope: string, sheetClass: ConstructorOf<ItemSheet>, { types }?: { types?: string[] }): void;\n\n  /**\n   * Return an Array of currently registered sheet classes for this Entity type\n   */\n  static get registeredSheets(): typeof ItemSheet[];\n}\n"]},42894:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\journal.d.ts","/**\n * The singleton collection of JournalEntry documents which exist within the active World.\n * This Collection is accessible within the Game object as game.journal.\n *\n * @see {@link JournalEntry} The JournalEntry entity\n * @see {@link JournalDirectory} The JournalDirectory sidebar directory\n */\ndeclare class Journal extends WorldCollection<typeof foundry.documents.BaseJournalEntry, 'Journal'> {\n  /** @override */\n  static documentName: 'JournalEntry';\n\n  /**\n   * Open Socket listeners which transact JournalEntry data\n   * @remarks This is not marked as protected because it is used in {@link Game#activateSocketListeners}\n   */\n  protected static _activateSocketListeners(socket: io.Socket): void;\n\n  /**\n   * Handle a received request to show a JournalEntry to the current client\n   * @param entryId - The ID of the journal entry to display for other players\n   * @param mode    - The JournalEntry mode to display\n   *                  (default: `'text'`)\n   * @param force   - Display the entry to all players regardless of normal permissions\n   *                  (default: `true`)\n   */\n  protected static _showEntry(entryId: string, mode?: 'text' | 'image', force?: boolean): Promise<void>;\n}\n"]},77576:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\macros.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The singleton collection of Macro documents which exist within the active World.\n   * This Collection is accessible within the Game object as game.macros.\n   *\n   * @see {@link Macro} The Macro entity\n   * @see {@link MacroDirectory} The MacroDirectory sidebar directory\n   */\n  class Macros extends WorldCollection<typeof foundry.documents.BaseMacro, 'Macros'> {\n    /** @override */\n    static documentName: 'Macro';\n\n    /** @override */\n    get directory(): typeof ui.macros;\n\n    /** @override */\n    fromCompendium(\n      document:\n        | InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseMacro>>\n        | InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseMacro>>['data']['_source']\n    ): Omit<\n      InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseMacro>>['data']['_source'],\n      '_id' | 'folder'\n    >;\n\n    /**\n     * You are calling Macros.canUseScripts which has been deprecated in favor of User#can('MACRO_SCRIPT')\n     * @deprecated since 0.8.1\n     */\n    static canUseScripts(user: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseUser>>): boolean;\n  }\n}\n"]},14960:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\messages.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The singleton collection of ChatMessage documents which exist within the active World.\n   * This Collection is accessible within the Game object as game.messages.\n   *\n   * @see {@link ChatMessage} The ChatMessage entity\n   * @see {@link ChatLog} The ChatLog sidebar directory\n   */\n  class Messages extends WorldCollection<typeof foundry.documents.BaseChatMessage, 'Messages'> {\n    /** @override */\n    static documentName: 'ChatMessage';\n\n    /** @override */\n    render(force?: boolean): void;\n\n    /**\n     * If requested, dispatch a Chat Bubble UI for the newly created message\n     * @param message - The ChatMessage entity to say\n     */\n    sayBubble(message: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseChatMessage>>): void;\n\n    /**\n     * Handle export of the chat log to a text file\n     */\n    export(): void;\n\n    /**\n     * Allow for bulk deletion of all chat messages, confirm first with a yes/no dialog.\n     * @see {@link Dialog.confirm}\n     */\n    flush(): Promise<\n      Promise<InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseChatMessage>>[]> | false | null\n    >;\n  }\n}\n"]},33209:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\playlists.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The singleton collection of Playlist documents which exist within the active World.\n   * This Collection is accessible within the Game object as game.playlists.\n   *\n   * @see {@link Playlist} The Playlist entity\n   * @see {@link PlaylistDirectory} The PlaylistDirectory sidebar directory\n   */\n  class Playlists extends WorldCollection<typeof foundry.documents.BasePlaylist, 'Playlists'> {\n    constructor(\n      data?: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BasePlaylist>>['data']['_source'][]\n    );\n\n    /** @override */\n    static documentName: 'Playlist';\n\n    /**\n     * Return the subset of Playlist entities which are currently playing\n     */\n    get playing(): ReturnType<this['filter']>;\n\n    /**\n     * Perform one-time initialization to begin playback of audio\n     */\n    initialize(): void;\n\n    /**\n     * Handle changes to a Scene to determine whether to trigger changes to Playlist entities.\n     * @param scene - The Scene entity being updated\n     * @param data  - The incremental update data\n     */\n    protected _onChangeScene(\n      scene: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseScene>>,\n      data: DeepPartial<ConstructorParameters<foundry.documents.BaseScene['data']>>\n    ): Promise<void>;\n  }\n}\n"]},19982:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\rollTables.d.ts","/**\n * The singleton collection of RollTable documents which exist within the active World.\n * This Collection is accessible within the Game object as game.tables.\n *\n * @see {@link RollTable} The RollTable document\n * @see {@link RollTableDirectory} The RollTableDirectory sidebar directory\n */\ndeclare class RollTables extends WorldCollection<typeof foundry.documents.BaseRollTable, 'RollTables'> {\n  /** @override */\n  static documentName: 'RollTable';\n\n  /** @override */\n  get directory(): typeof ui['tables'];\n\n  /**\n   * Register world settings related to RollTable entities\n   */\n  static registerSettings(): void;\n}\n"]},36997:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\scenes.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The singleton collection of Scene documents which exist within the active World.\n   * This Collection is accessible within the Game object as game.scenes.\n   *\n   * @see {@link Scene} The Scene entity\n   * @see {@link SceneDirectory} The SceneDirectory sidebar directory\n   */\n  class Scenes extends WorldCollection<typeof foundry.documents.BaseScene, 'Scenes'> {\n    /** @override */\n    static documentName: 'Scene';\n\n    /**\n     * Return a reference to the Scene which is currently active\n     */\n    get active(): Scene | undefined;\n\n    /**\n     * Return the current Scene target.\n     * This is the viewed scene if the canvas is active, otherwise it is the currently active scene.\n     */\n    get current(): Scene | undefined;\n\n    /**\n     * Return a reference to the Scene which is currently viewed\n     */\n    get viewed(): Scene | undefined;\n\n    /**\n     * Handle pre-loading the art assets for a Scene\n     *\n     * @param sceneId - The Scene id to begin loading\n     * @param push    - Trigger other connected clients to also pre-load Scene resources\n     *                  (default: `false`)\n     */\n    preload(sceneId: string, push?: boolean): io.Socket | Promise<unknown[]>;\n\n    /** @remarks This is not marked as protected because it is used in {@link Game#activateSocketListeners} */\n    static _activateSocketListeners(socket: io.Socket): void;\n\n    /**\n     * Augment the standard modifyDocument listener to flush fog exploration\n     */\n    protected static _resetFog(response: { scene: Scene; reset: boolean }): Promise<Canvas | undefined> | undefined;\n\n    /**\n     * Handle requests pulling the current User to a specific Scene\n     */\n    protected static _pullToScene(sceneId: string): void;\n\n    /** @override */\n    fromCompendium(\n      document:\n        | InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseScene>>\n        | InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseScene>>['data']['_source']\n    ): Omit<\n      InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseScene>>['data']['_source'],\n      '_id' | 'folder'\n    >;\n  }\n}\n"]},29408:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\users.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The singleton collection of User documents which exist within the active World.\n   * This Collection is accessible within the Game object as game.users.\n   *\n   * @see {@link User} The User entity\n   */\n  class Users extends WorldCollection<typeof foundry.documents.BaseUser, 'Users'> {\n    constructor(data?: foundry.data.UserData['_source'][]);\n\n    /**\n     * The User entity of the currently connected user\n     * @defaultValue `null`\n     */\n    current: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseUser>> | null;\n\n    /**\n     * Initialize the Map object and all its contained entities\n     */\n    protected _initialize(): void;\n\n    /** @override */\n    static documentName: 'User';\n\n    /**\n     * Get the users with player roles\n     */\n    get players(): ReturnType<this['filter']>;\n\n    /** @remarks This is not marked as protected because it is used in {@link Game#activateSocketListeners} */\n    static _activateSocketListeners(socket: io.Socket): void;\n\n    /**\n     * Handle receipt of activity data from another User connected to the Game session\n     * @param userId       - The User id who generated the activity data\n     * @param activityData - The object of activity data\n     */\n    protected static _handleUserActivity(userId: string, activityData?: User.ActivityData): void;\n  }\n}\n"]},86038:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\worldSettings.d.ts","/**\n * The Collection of Setting documents which exist within the active World.\n * This collection is accessible as game.settings.storages.get(\"world\")\n *\n * @see {@link Macro} The Macro entity\n * @see {@link MacroDirectory} The MacroDirectory sidebar directory\n */\ndeclare class WorldSettings extends WorldCollection<typeof foundry.documents.BaseSetting, 'WorldSettings'> {\n  /** @override */\n  static documentName: 'Setting';\n\n  /** @override */\n  get directory(): null;\n\n  /**\n   * Return the serialized value of the world setting as a string\n   * @param key - The setting key\n   * @returns The serialized setting string\n   * @remarks The documentation is incorrect, this actually returns a `Setting | undefined`\n   */\n  getSetting(key: string): ReturnType<this['find']>;\n\n  /**\n   * Return the serialized value of the world setting as a string\n   * @param key - The setting key\n   * @returns The serialized setting string\n   */\n  getItem(key: string): string | null;\n}\n"]},24723:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\index.d.ts","import './documentCollection';\nimport './documentCollections';\n"]},7355:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\config.d.ts","import { DocumentConstructor } from '../../types/helperTypes';\nimport DatabaseBackend from '../common/abstract/backend.mjs';\n\ntype ConfiguredDocumentClassOrDefault<Fallback extends DocumentConstructor> =\n  Fallback['metadata']['name'] extends keyof DocumentClassConfig\n    ? DocumentClassConfig[Fallback['metadata']['name']]\n    : Fallback;\n\ndeclare global {\n  /**\n   * This interface is used to configure the used document classes at a type\n   * level. Module and system authors should use declaration merging to provide\n   * the types of their configured document classes. It is extremely important\n   * that this is kept in sync with the configuration that actually happens at\n   * runtime.\n   *\n   * @example\n   * ```typescript\n   * // myActor.ts\n   * class MyActor extends Actor {}\n   *\n   * // entryPoint.ts\n   * import { MyActor } from './myActor'\n   *\n   * hooks.once('init', () => {\n   *   CONFIG.Actor.documentClass = typeof MyActor;\n   * });\n   *\n   * declare global {\n   *   interface DocumentClassConfig {\n   *     Actor: typeof MyActor\n   *   }\n   * }\n   * ```\n   */\n\n  //eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface DocumentClassConfig {}\n\n  /**\n   * This interface together with {@link SourceConfig} is used to configure the\n   * types of the `data`  and `data._source` properties of the\n   * {@link foundry.documents.BaseActor} and {@link foundry.documents.BaseItem}\n   * classes. System authors should use declaration merging to provide the types\n   * that match their `template.json` file. It is also very important for these\n   * types to stay in sync with the `template.json` file, otherwise unexpected\n   * runtime errors might appear.\n   *\n   * @example\n   * ```typescript\n   * interface ArmorDataSourceData {\n   *   armorValue: number;\n   * }\n   *\n   * interface ArmorDataSource {\n   *   type: 'armor';\n   *   data: ArmorDataSourceData;\n   * }\n   *\n   * interface WeaponDataSourceData {\n   *   damagePerHit: number;\n   *   attackSpeed: number;\n   * }\n   *\n   * interface WeaponDataSource {\n   *   type: 'weapon';\n   *   data: WeaponDataSourceData;\n   * }\n   *\n   * interface ArmorDataPropertiesData extends ArmorDataSourceData {\n   *   weight: number;\n   * }\n   *\n   * interface ArmorDataProperties {\n   *   type: 'armor';\n   *   data: ArmorDataPropertiesData;\n   * }\n   *\n   * interface WeaponDataPropertiesData extends WeaponDataSourceData {\n   *   damage: number;\n   * }\n   *\n   * interface WeaponDataProperties {\n   *   type: 'weapon';\n   *   data: WeaponDataPropertiesData;\n   * }\n   *\n   * type MyItemDataSource = ArmorDataSource | WeaponDataSource;\n   * type MyItemDataProperties = ArmorDataProperties | WeaponDataProperties;\n   *\n   * declare global {\n   *   interface DataConfig {\n   *     Item: MyItemDataProperties;\n   *   }\n   *\n   *   interface SourceConfig {\n   *     Item: MyItemDataSource;\n   *   }\n   * }\n   * const item = await Item.create({\n   *   name: 'Axe',\n   *   type: 'weapon',\n   *   attackSpeed: 1,\n   *   damage: 5\n   * });\n   *\n   * if(item.data.type === 'weapon') {\n   *   const damage: number = item.data.data.damage;\n   * }\n   *\n   * if(item.data._source.type === 'armor') {\n   *   const armorValue = item.data._source.data.armorValue;\n   * }\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface DataConfig {}\n\n  /**\n   * @see {@link DataConfig}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface SourceConfig {}\n\n  /**\n   * Runtime configuration settings for Foundry VTT which exposes a large number of variables which determine how\n   * aspects of the software behaves.\n   *\n   * Unlike the CONST analog which is frozen and immutable, the CONFIG object may be updated during the course of a\n   * session or modified by system and module developers to adjust how the application behaves.\n   */\n  interface CONFIG {\n    /**\n     * Configure debugging flags to display additional information\n     */\n    debug: {\n      /**\n       * @defaultValue `false`\n       */\n      dice: boolean;\n\n      /**\n       * @defaultValue `false`\n       */\n      documents: boolean;\n\n      /**\n       * @defaultValue `false`\n       */\n      fog: boolean;\n\n      /**\n       * @defaultValue `false`\n       */\n      hooks: boolean;\n\n      /**\n       * @defaultValue `false`\n       */\n      sight: boolean;\n\n      /**\n       * @defaultValue `false`\n       */\n      sightRays: boolean;\n\n      /**\n       * @defaultValue `false`\n       */\n      av: boolean;\n\n      /**\n       * @defaultValue `false`\n       */\n      avclient: boolean;\n\n      /**\n       * @defaultValue `false`\n       */\n      mouseInteraction: boolean;\n\n      /**\n       * @defaultValue `false`\n       */\n      time: boolean;\n    };\n\n    /**\n     * Configure the DatabaseBackend used to perform Document operations\n     * @defaultValue `new ClientDatabaseBackend()`\n     */\n    DatabaseBackend: DatabaseBackend; // TODO: ClientDatabaseBackend\n\n    /**\n     * Configuration for the Actor document\n     */\n    Actor: {\n      /**\n       * @defaultValue `Actor`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof Actor>;\n\n      /**\n       * @defaultValue `Actors`\n       */\n      collection: ConstructorOf<Actors>;\n\n      /**\n       * @defaultValue `{}`\n       */\n      sheetClasses: EntitySheetConfig.SheetClasses;\n\n      /**\n       * @defaultValue `'fas fa-user'`\n       */\n      sidebarIcon: string;\n\n      /**\n       * @defaultValue `{}`\n       */\n      typeLabels: Partial<Record<string, string>>;\n    };\n\n    /**\n     * Configuration for the ChatMessage document\n     */\n    ChatMessage: {\n      /**\n       * @defaultValue `ChatMessage`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof ChatMessage>;\n      /**\n       * @defaultValue `Messages`\n       */\n      collection: ConstructorOf<Messages>;\n\n      /**\n       * @defaultValue `'templates/sidebar/chat-message.html'`\n       */\n      template: string;\n\n      /**\n       * @defaultValue `'fas fa-comments'`\n       */\n      sidebarIcon: string;\n\n      /**\n       * @defaultValue `100`\n       */\n      batchSize: number;\n    };\n\n    /**\n     * Configuration for the Combat document\n     */\n    Combat: {\n      /**\n       * @defaultValue `Combat`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof Combat>;\n\n      /**\n       * @defaultValue `CombatEncounters`\n       */\n      collection: ConstructorOf<CombatEncounters>;\n\n      /**\n       * @defaultValue `'dead'`\n       */\n      defeatedStatusId: string;\n\n      /**\n       * @defaultValue `'fas fa-fist-raised'`\n       */\n      sidebarIcon: string;\n\n      initiative: {\n        /**\n         * @defaultValue `null`\n         */\n        formula: string | null;\n\n        /**\n         * @defaultValue `2`\n         */\n        decimals: number;\n      };\n    };\n\n    /**\n     * Configuration for dice rolling behaviors in the Foundry VTT client\n     */\n    Dice: {\n      /**\n       * @defaultValue `[Die, FateDie]`\n       */\n      types: Array<ConstructorOf<DiceTerm>>;\n\n      rollModes: {\n        /**\n         * @defaultValue `'CHAT.RollPublic'`\n         */\n        roll: string;\n\n        /**\n         * @defaultValue `'CHAT.RollPrivate'`\n         */\n        gmroll: string;\n\n        /**\n         * @defaultValue `CHAT.RollBlind'`\n         */\n        blindroll: string;\n\n        /**\n         * @defaultValue `'CHAT.RollSelf'`\n         */\n        selfroll: string;\n      } & Partial<Record<string, string>>;\n\n      /**\n       * @defaultValue `[Roll]`\n       */\n      rolls: Array<ConstructorOf<Roll>>;\n\n      /**\n       * @defaultValue\n       * ```typescript\n       * {\n       *   DiceTerm: typeof DiceTerm,\n       *   MathTerm: typeof MathTerm,\n       *   NumericTerm: typeof NumericTerm,\n       *   OperatorTerm: typeof OperatorTerm,\n       *   ParentheticalTerm: typeof ParentheticalTerm,\n       *   PoolTerm: typeof PoolTerm,\n       *   StringTerm: typeof StringTerm\n       * }\n       * ```\n       */\n      termTypes: Record<string, ConstructorOf<RollTerm>>;\n\n      terms: {\n        c: typeof Coin;\n        d: typeof Die;\n        f: typeof FateDie;\n      } & Partial<Record<string, ConstructorOf<DiceTerm>>>;\n\n      /**\n       * @defaultValue `MersenneTwister.random`\n       */\n      randomUniform: () => number;\n    };\n\n    /**\n     * Configuration for the FogExploration document\n     */\n    FogExploration: {\n      /**\n       * @defaultValue `FogExploration`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof FogExploration>;\n\n      /**\n       * @defaultValue `FogExplorations`\n       */\n      collection: ConstructorOf<FogExplorations>;\n    };\n\n    /**\n     * Configuration for the Folder entity\n     */\n    Folder: {\n      /**\n       * @defaultValue `Folder`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof Folder>;\n\n      /**\n       * @defaultValue `Folders`\n       */\n      collection: ConstructorOf<Folders>;\n\n      /**\n       * @defaultValue `FolderConfig`\n       */\n      sheetClass: ConstructorOf<FolderConfig>;\n    };\n\n    /**\n     * Configuration for the default Item entity class\n     */\n    Item: {\n      /**\n       * @defaultValue `Item`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof Item>;\n\n      /**\n       * @defaultValue `Items`\n       */\n      collection: ConstructorOf<Items>;\n\n      /**\n       * @defaultValue `{}`\n       */\n      sheetClasses: EntitySheetConfig.SheetClasses;\n\n      /**\n       * @defaultValue `'fas fa-suitcase'`\n       */\n      sidebarIcon: string;\n\n      /**\n       * defaultValue `{}`\n       */\n      typeLabels: Partial<Record<string, string>>;\n    };\n\n    /**\n     * Configuration for the JournalEntry entity\n     */\n    JournalEntry: {\n      /**\n       * @defaultValue `JournalEntry`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof JournalEntry>;\n\n      /**\n       * @defaultValue `Journal`\n       */\n      collection: ConstructorOf<Journal>;\n\n      /**\n       * @defaultValue `JournalSheet`\n       */\n      sheetClass: ConstructorOf<JournalSheet>;\n\n      noteIcons: {\n        /**\n         * @defaultValue `'icons/svg/anchor.svg'`\n         */\n        Anchor: string;\n\n        /**\n         * @defaultValue `'icons/svg/barrel.svg'`\n         */\n        Barrel: string;\n\n        /**\n         * @defaultValue `'icons/svg/book.svg'`\n         */\n        Book: string;\n\n        /**\n         * @defaultValue `'icons/svg/bridge.svg'`\n         */\n        Bridge: string;\n\n        /**\n         * @defaultValue `'icons/svg/cave.svg'`\n         */\n        Cave: string;\n\n        /**\n         * @defaultValue `'icons/svg/castle.svg`\n         */\n        Castle: string;\n\n        /**\n         * @defaultValue `'icons/svg/chest.svg'`\n         */\n        Chest: string;\n\n        /**\n         * @defaultValue `'icons/svg/city.svg'`\n         */\n        City: string;\n\n        /**\n         * @defaultValue `'icons/svg/coins.svg'`\n         */\n        Coins: string;\n\n        /**\n         * @defaultValue `'icons/svg/fire.svg'`\n         */\n        Fire: string;\n\n        /**\n         * @defaultValue `'icons/svg/hanging-sign.svg'`\n         */\n        'Hanging Sign': string;\n\n        /**\n         * @defaultValue `'icons/svg/house.svg'`\n         */\n        House: string;\n\n        /**\n         * @defaultValue `'icons/svg/mountain.svg'`\n         */\n        Mountain: string;\n\n        /**\n         * @defaultValue `'icons/svg/oak.svg'`\n         */\n        'Oak Tree': string;\n\n        /**\n         * @defaultValue `'icons/svg/obelisk.svg'`\n         */\n        Obelisk: string;\n\n        /**\n         * @defaultValue `'icons/svg/pawprint.svg'`\n         */\n        Pawprint: string;\n\n        /**\n         * @defaultValue `'icons/svg/ruins.svg'`\n         */\n        Ruins: string;\n\n        /**\n         * @defaultValue `'icons/svg/tankard.svg'`\n         */\n        Tankard: string;\n\n        /**\n         * @defaultValue `'icons/svg/temple.svg'`\n         */\n        Temple: string;\n\n        /**\n         * @defaultValue `'icons/svg/tower.svg'`\n         */\n        Tower: string;\n\n        /**\n         * @defaultValue `'icons/svg/trap.svg'`\n         */\n        Trap: string;\n\n        /**\n         * @defaultValue `'icons/svg/skull.svg'`\n         */\n        Skull: string;\n\n        /**\n         * @defaultValue `'icons/svg/statue.svg'`\n         */\n        Statue: string;\n\n        /**\n         * @defaultValue `'icons/svg/sword.svg'`\n         */\n        Sword: string;\n\n        /**\n         * @defaultValue `'icons/svg/village.svg'`\n         */\n        Village: string;\n\n        /**\n         * @defaultValue `'icons/svg/waterfall.svg'`\n         */\n        Waterfall: string;\n        /**\n         * @defaultValue `'icons/svg/windmill.svg'`\n         */\n        Windmill: string;\n      } & Partial<Record<string, string>>;\n\n      /**\n       * @defaultValue `'fas fa-book-open'`\n       */\n      sidebarIcon: string;\n    };\n\n    /**\n     * Configuration for the Macro entity\n     */\n    Macro: {\n      /**\n       * @defaultValue `Macro`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof Macro>;\n\n      /**\n       * @defaultValue `Macros`\n       */\n      collection: ConstructorOf<Macros>;\n\n      /**\n       * @defaultValue `MacroConfig`\n       */\n      sheetClass: ConstructorOf<MacroConfig>;\n\n      /**\n       * @defaultValue `'fas fa-terminal'`\n       */\n      sidebarIcon: string;\n    };\n\n    /**\n     * Configuration for the default Playlist entity class\n     */\n    Playlist: {\n      /**\n       * @defaultValue `Playlist`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof Playlist>;\n\n      /**\n       * @defaultValue `Playlists`\n       */\n      collection: ConstructorOf<Playlists>;\n\n      /**\n       * @defaultValue `PlaylistConfig`\n       */\n      sheetClass: ConstructorOf<PlaylistConfig>;\n\n      /**\n       * @defaultValue `'fas fa-music'`\n       */\n      sidebarIcon: string;\n\n      /**\n       * @defaultValue `20`\n       */\n      autoPreloadSeconds: number;\n    };\n\n    /**\n     * Configuration for RollTable random draws\n     */\n    RollTable: {\n      /**\n       * @defaultValue `RollTable`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof RollTable>;\n\n      /**\n       * @defaultValue `RollTables`\n       */\n      collection: ConstructorOf<RollTables>;\n\n      /**\n       * @defaultValue `RollTableConfig`\n       */\n      sheetClass: ConstructorOf<RollTableConfig>;\n\n      /**\n       * @defaultValue `'fas fa-th-list'`\n       */\n      sidebarIcon: string;\n\n      /**\n       * @defaultValue `'icons/svg/d20-black.svg'`\n       */\n      resultIcon: string;\n\n      /**\n       * @defaultValue `'templates/dice/table-result.html'`\n       */\n      resultTemplate: string;\n    };\n\n    /**\n     * Configuration for the default Scene entity class\n     */\n    Scene: {\n      /**\n       * @defaultValue `Scene`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof Scene>;\n\n      /**\n       * @defaultValue `Scenes`\n       */\n      collection: ConstructorOf<Scenes>;\n\n      /**\n       * @defaultValue `SceneConfig`\n       */\n      sheetClass: ConstructorOf<SceneConfig>;\n\n      /**\n       * @defaultValue `'fas fa-map'`\n       */\n      sidebarIcon: string;\n    };\n\n    Setting: {\n      documentClass: ConfiguredDocumentClassOrDefault<typeof Setting>;\n      collection: ConstructorOf<WorldSettings>;\n    };\n\n    /**\n     * Configuration for the User entity, it's roles, and permissions\n     */\n    User: {\n      /**\n       * @defaultValue `User`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof User>;\n\n      /**\n       * @defaultValue `Users`\n       */\n      collection: ConstructorOf<Users>;\n\n      /**\n       * @defaultValue `UserConfig`\n       */\n      sheetClass: ConstructorOf<UserConfig>;\n\n      /**\n       * @defaultValue `Users.permissions`\n       * @remarks this is set to `Users.permissions` but that property doesn't actually exist, see https://gitlab.com/foundrynet/foundryvtt/-/issues/5572\n       */\n      permissions: undefined;\n    };\n\n    /**\n     * Configuration settings for the Canvas and its contained layers and objects\n     */\n    Canvas: {\n      /**\n       * @defaultValue `8`\n       */\n      blurStrength: number;\n\n      /**\n       * @defaultValue `0x242448`\n       */\n      darknessColor: number;\n\n      /**\n       * @defaultValue `0.4`\n       */\n      darknessLightPenalty: number;\n\n      /**\n       * @defaultValue `0xeeeeee`\n       */\n      daylightColor: number;\n\n      dispositionColors: {\n        /**\n         * @defaultValue `0xe72124`\n         */\n        HOSTILE: number;\n\n        /**\n         * @defaultValue `0xf1d836`\n         */\n        NEUTRAL: number;\n\n        /**\n         * @defaultValue `0x43dfdf`\n         */\n        FRIENDLY: number;\n\n        /**\n         * @defaultValue `0x555555`\n         */\n        INACTIVE: number;\n\n        /**\n         * @defaultValue `0x33bc4e`\n         */\n        PARTY: number;\n\n        /**\n         * @defaultValue `0xff9829`\n         */\n        CONTROLLED: number;\n      };\n\n      /**\n       * @defaultValue `0x7f7f7f`\n       */\n      exploredColor: number;\n\n      /**\n       * @defaultValue `0x000000`\n       */\n      unexploredColor: number;\n\n      layers: {\n        /**\n         * @defaultValue `BackgroundLayer`\n         */\n        background: ConstructorOf<BackgroundLayer>;\n\n        /**\n         * @defaultValue `DrawingsLayer`\n         */\n        drawings: ConstructorOf<DrawingsLayer>;\n\n        /**\n         * @defaultValue `GridLayer`\n         */\n        grid: ConstructorOf<GridLayer>;\n\n        /**\n         * @defaultValue `WallsLayer`\n         */\n        walls: ConstructorOf<WallsLayer>;\n\n        /**\n         * @defaultValue `TemplateLayer`\n         */\n        templates: ConstructorOf<TemplateLayer>;\n\n        /**\n         * @defaultValue `NotesLayer`\n         */\n        notes: ConstructorOf<NotesLayer>;\n\n        /**\n         * @defaultValue `TokenLayer`\n         */\n        tokens: ConstructorOf<TokenLayer>;\n\n        /**\n         * @defaultValue `ForegroundLayer`\n         */\n        foreground: ConstructorOf<ForegroundLayer>;\n\n        /**\n         * @defaultValue `SoundsLayer`\n         */\n        sounds: ConstructorOf<SoundsLayer>;\n\n        /**\n         * @defaultValue `LightingLayer`\n         */\n        lighting: ConstructorOf<LightingLayer>;\n\n        /**\n         * @defaultValue `SightLayer`\n         */\n        sight: ConstructorOf<SightLayer>;\n\n        /**\n         * @defaultValue `EffectsLayer`\n         */\n        effects: ConstructorOf<EffectsLayer>;\n\n        /**\n         * @defaultValue `ControlsLayer`\n         */\n        controls: ConstructorOf<ControlsLayer>;\n      };\n\n      lightLevels: {\n        /**\n         * @defaultValue `0`\n         */\n        dark: number;\n\n        /**\n         * @defaultValue `0.5`\n         */\n        dim: number;\n\n        /**\n         * @defaultValue `1.0`\n         */\n        bright: number;\n      };\n\n      /**\n       * @defaultValue `0xb86200`\n       */\n      normalLightColor: number;\n\n      /**\n       * @defaultValue `3.0`\n       */\n      maxZoom: number;\n\n      /**\n       * @defaultValue `4`\n       */\n      objectBorderThickness: number;\n\n      lightAnimations: {\n        torch: {\n          /**\n           * @defaultValue `'LIGHT.AnimationTorch'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue PointSource.prototype.animateTorch\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `TorchIlluminationShader`\n           */\n          illuminationShader: ConstructorOf<AbstractBaseShader>;\n\n          /**\n           * @defaultValue `TorchColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        pulse: {\n          /**\n           * @defaultValue `'LIGHT.AnimationPulse'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animatePulse`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `PulseIlluminationShader`\n           */\n          illuminationShader: ConstructorOf<AbstractBaseShader>;\n\n          /**\n           * @defaultValue `PulseColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        chroma: {\n          /**\n           * @defaultValue `'LIGHT.AnimationChroma'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `ChromaColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        wave: {\n          /**\n           * @defaultValue `'LIGHT.AnimationWave'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `WaveIlluminationShader`\n           */\n          illuminationShader: ConstructorOf<AbstractBaseShader>;\n\n          /**\n           * @defaultValue `WaveColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        fog: {\n          /**\n           * @defaultValue `'LIGHT.AnimationFog'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `FogColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        sunburst: {\n          /**\n           * @defaultValue `'LIGHT.AnimationSunburst'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `SunburstIlluminationShader`\n           */\n          illuminationShader: ConstructorOf<AbstractBaseShader>;\n\n          /**\n           * @defaultValue `SunburstColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        dome: {\n          /**\n           * @defaultValue `'LIGHT.AnimationLightDome'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `LightDomeColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        emanation: {\n          /**\n           * @defaultValue `'LIGHT.AnimationEmanation'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `EmanationColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        hexa: {\n          /**\n           * @defaultValue `'LIGHT.AnimationHexaDome';`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `HexaDomeColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        ghost: {\n          /**\n           * @defaultValue `'LIGHT.AnimationGhostLight'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `GhostLightIlluminationShader`\n           */\n          illuminationShader: ConstructorOf<AbstractBaseShader>;\n\n          /**\n           * @defaultValue `GhostLightColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        energy: {\n          /**\n           * @defaultValue `'LIGHT.AnimationEnergyField'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `EnergyFieldColorationShader`\n           */\n          colorationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        roiling: {\n          /**\n           * @defaultValue `'LIGHT.AnimationRoilingMass'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `RoilingIlluminationShader`\n           */\n          illuminationShader: ConstructorOf<AbstractBaseShader>;\n        };\n\n        hole: {\n          /**\n           * @defaultValue `'LIGHT.AnimationBlackHole'`\n           */\n          label: string;\n\n          /**\n           * @defaultValue `PointSource.prototype.animateTime`\n           */\n          animation: PointSource.AnimationFunction;\n\n          /**\n           * @defaultValue `BlackHoleIlluminationShader`\n           */\n          illuminationShader: ConstructorOf<AbstractBaseShader>;\n        };\n      } & Partial<\n        Record<\n          string,\n          {\n            label: string;\n            animation: PointSource.AnimationFunction;\n            illuminationShader?: ConstructorOf<AbstractBaseShader>;\n            colorationShader?: ConstructorOf<AbstractBaseShader>;\n          }\n        >\n      >;\n    };\n\n    /**\n     * Configure the default Token text style so that it may be reused and overridden by modules\n     * @defaultValue\n     * ```typescript\n     * new PIXI.TextStyle({\n     *   fontFamily: 'Signika',\n     *   fontSize: 36,\n     *   fill: '#FFFFFF',\n     *   stroke: '#111111',\n     *   strokeThickness: 1,\n     *   dropShadow: true,\n     *   dropShadowColor: '#000000',\n     *   dropShadowBlur: 4,\n     *   dropShadowAngle: 0,\n     *   dropShadowDistance: 0,\n     *   align: 'center',\n     *   wordWrap: false,\n     *   padding: 1\n     * })\n     * ```\n     **/\n    canvasTextStyle: PIXI.TextStyle;\n\n    /**\n     * Available Weather Effects implementations\n     */\n    weatherEffects: {\n      /**\n       * @defaultValue `AutumnLeavesWeatherEffect`\n       */\n      leaves: ConstructorOf<SpecialEffect>;\n\n      /**\n       * @defaultValue `RainWeatherEffect`\n       */\n      rain: ConstructorOf<SpecialEffect>;\n\n      /**\n       * @defaultValue `SnowWeatherEffect`\n       */\n      snow: ConstructorOf<SpecialEffect>;\n    } & Partial<Record<string, ConstructorOf<SpecialEffect>>>;\n\n    /**\n     * The control icons used for rendering common HUD operations\n     */\n    controlIcons: {\n      /**\n       * @defaultValue `'icons/svg/combat.svg'`\n       */\n      combat: string;\n\n      /**\n       * @defaultValue `'icons/svg/cowled.svg'`\n       */\n      visibility: string;\n\n      /**\n       * @defaultValue `'icons/svg/aura.svg'`\n       */\n      effects: string;\n\n      /**\n       * @defaultValue `'icons/svg/padlock.svg'`\n       */\n      lock: string;\n\n      /**\n       * @defaultValue `'icons/svg/up.svg'`\n       */\n      up: string;\n\n      /**\n       * @defaultValue `'icons/svg/down.svg'`\n       */\n      down: string;\n\n      /**\n       * @defaultValue `'icons/svg/skull.svg'`\n       */\n      defeated: string;\n\n      /**\n       * @defaultValue `'icons/svg/light.svg'`\n       */\n      light: string;\n\n      /**\n       * @defaultValue `'icons/svg/light-off.svg'`\n       */\n      lightOff: string;\n\n      /**\n       * @defaultValue `'icons/svg/explosion.svg'`\n       */\n      template: string;\n\n      /**\n       * @defaultValue `'icons/svg/sound.svg'`\n       */\n      sound: string;\n\n      /**\n       * @defaultValue `'icons/svg/sound-off.svg'`\n       */\n      soundOff: string;\n\n      /**\n       * @defaultValue `'icons/svg/door-closed-outline.svg'`\n       */\n      doorClosed: string;\n\n      /**\n       * @defaultValue `'icons/svg/door-open-outline.svg'`\n       */\n      doorOpen: string;\n\n      /**\n       * @defaultValue `'icons/svg/door-secret-outline.svg'`\n       */\n      doorSecret: string;\n\n      /**\n       * @defaultValue `'icons/svg/door-locked-outline.svg'`\n       */\n      doorLocked: string;\n    } & Partial<Record<string, string>>;\n\n    /**\n     * Suggested font families that are displayed wherever a choice is presented\n     * @defaultValue `['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Times New Roman', 'Signika', 'Modesto Condensed']`\n     */\n    fontFamilies: string[];\n\n    /**\n     * The default font family used for text labels on the PIXI Canvas\n     * @defaultValue `'Signika'`\n     */\n    defaultFontFamily: string;\n\n    /**\n     * An array of status effect icons which can be applied to Tokens\n     * @defaultValue\n     * ```typescript\n     * [\n     *   {\n     *     id: 'dead';\n     *     label: 'EFFECT.StatusDead';\n     *     icon: 'icons/svg/skull.svg';\n     *   },\n     *   {\n     *     id: 'unconscious';\n     *     label: 'EFFECT.StatusUnconscious';\n     *     icon: 'icons/svg/unconscious.svg';\n     *   },\n     *   {\n     *     id: 'sleep';\n     *     label: 'EFFECT.StatusAsleep';\n     *     icon: 'icons/svg/sleep.svg';\n     *   },\n     *   {\n     *     id: 'stun';\n     *     label: 'EFFECT.StatusStunned';\n     *     icon: 'icons/svg/daze.svg';\n     *   },\n     *   {\n     *     id: 'prone';\n     *     label: 'EFFECT.StatusProne';\n     *     icon: 'icons/svg/falling.svg';\n     *   },\n     *   {\n     *     id: 'restrain';\n     *     label: 'EFFECT.StatusRestrained';\n     *     icon: 'icons/svg/net.svg';\n     *   },\n     *   {\n     *     id: 'paralysis';\n     *     label: 'EFFECT.StatusParalysis';\n     *     icon: 'icons/svg/paralysis.svg';\n     *   },\n     *   {\n     *     id: 'fly';\n     *     label: 'EFFECT.StatusFlying';\n     *     icon: 'icons/svg/wing.svg';\n     *   },\n     *   {\n     *     id: 'blind';\n     *     label: 'EFFECT.StatusBlind';\n     *     icon: 'icons/svg/blind.svg';\n     *   },\n     *   {\n     *     id: 'deaf';\n     *     label: 'EFFECT.StatusDeaf';\n     *     icon: 'icons/svg/deaf.svg';\n     *   },\n     *   {\n     *     id: 'silence';\n     *     label: 'EFFECT.StatusSilenced';\n     *     icon: 'icons/svg/silenced.svg';\n     *   },\n     *   {\n     *     id: 'fear';\n     *     label: 'EFFECT.StatusFear';\n     *     icon: 'icons/svg/terror.svg';\n     *   },\n     *   {\n     *     id: 'burning';\n     *     label: 'EFFECT.StatusBurning';\n     *     icon: 'icons/svg/fire.svg';\n     *   },\n     *   {\n     *     id: 'frozen';\n     *     label: 'EFFECT.StatusFrozen';\n     *     icon: 'icons/svg/frozen.svg';\n     *   },\n     *   {\n     *     id: 'shock';\n     *     label: 'EFFECT.StatusShocked';\n     *     icon: 'icons/svg/lightning.svg';\n     *   },\n     *   {\n     *     id: 'corrode';\n     *     label: 'EFFECT.StatusCorrode';\n     *     icon: 'icons/svg/acid.svg';\n     *   },\n     *   {\n     *     id: 'bleeding';\n     *     label: 'EFFECT.StatusBleeding';\n     *     icon: 'icons/svg/blood.svg';\n     *   },\n     *   {\n     *     id: 'disease';\n     *     label: 'EFFECT.StatusDisease';\n     *     icon: 'icons/svg/biohazard.svg';\n     *   },\n     *   {\n     *     id: 'poison';\n     *     label: 'EFFECT.StatusPoison';\n     *     icon: 'icons/svg/poison.svg';\n     *   },\n     *   {\n     *     id: 'radiation';\n     *     label: 'EFFECT.StatusRadiation';\n     *     icon: 'icons/svg/radiation.svg';\n     *   },\n     *   {\n     *     id: 'regen';\n     *     label: 'EFFECT.StatusRegen';\n     *     icon: 'icons/svg/regen.svg';\n     *   },\n     *   {\n     *     id: 'degen';\n     *     label: 'EFFECT.StatusDegen';\n     *     icon: 'icons/svg/degen.svg';\n     *   },\n     *   {\n     *     id: 'upgrade';\n     *     label: 'EFFECT.StatusUpgrade';\n     *     icon: 'icons/svg/upgrade.svg';\n     *   },\n     *   {\n     *     id: 'downgrade';\n     *     label: 'EFFECT.StatusDowngrade';\n     *     icon: 'icons/svg/downgrade.svg';\n     *   },\n     *   {\n     *     id: 'target';\n     *     label: 'EFFECT.StatusTarget';\n     *     icon: 'icons/svg/target.svg';\n     *   },\n     *   {\n     *     id: 'eye';\n     *     label: 'EFFECT.StatusMarked';\n     *     icon: 'icons/svg/eye.svg';\n     *   },\n     *   {\n     *     id: 'curse';\n     *     label: 'EFFECT.StatusCursed';\n     *     icon: 'icons/svg/sun.svg';\n     *   },\n     *   {\n     *     id: 'bless';\n     *     label: 'EFFECT.StatusBlessed';\n     *     icon: 'icons/svg/angel.svg';\n     *   },\n     *   {\n     *     id: 'fireShield';\n     *     label: 'EFFECT.StatusFireShield';\n     *     icon: 'icons/svg/fire-shield.svg';\n     *   },\n     *   {\n     *     id: 'coldShield';\n     *     label: 'EFFECT.StatusIceShield';\n     *     icon: 'icons/svg/ice-shield.svg';\n     *   },\n     *   {\n     *     id: 'magicShield';\n     *     label: 'EFFECT.StatusMagicShield';\n     *     icon: 'icons/svg/mage-shield.svg';\n     *   },\n     *   {\n     *     id: 'holyShield';\n     *     label: 'EFFECT.StatusHolyShield';\n     *     icon: 'icons/svg/holy-shield.svg';\n     *   }\n     * ]\n     * ```\n     */\n    statusEffects: { id: string; label: string; icon: string }[];\n\n    /**\n     * A mapping of core audio effects used which can be replaced by systems or mods\n     */\n    sounds: {\n      /**\n       * @defaultValue `'sounds/dice.wav'`\n       */\n      dice: string;\n\n      /**\n       * @defaultValue `'sounds/lock.wav'`\n       */\n      lock: string;\n\n      /**\n       * @defaultValue `'sounds/notify.wav'`\n       */\n      notification: string;\n\n      /**\n       * @defaultValue `'sounds/drums.wav'`\n       */\n      combat: string;\n    };\n\n    /**\n     * Define the set of supported languages for localization\n     * @defaultValue `{ en: 'English' }`\n     */\n    supportedLanguages: {\n      en: string;\n    } & Partial<Record<string, string>>;\n\n    /**\n     * Configuration for time tracking\n     */\n    time: {\n      /**\n       * @defaultValue `0`\n       */\n      turnTime: number;\n\n      /**\n       * @defaultValue `0`\n       */\n      roundTime: number;\n    };\n\n    /**\n     * Configuration for the ActiveEffect embedded document type\n     */\n    ActiveEffect: {\n      /**\n       * @defaultValue `ActiveEffect`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof ActiveEffect>;\n\n      /**\n       * @defaultValue `ActiveEffectConfig`\n       */\n      sheetClass: ConstructorOf<ActiveEffectConfig>;\n    };\n\n    /**\n     * Configuration for the TableResult embedded document type\n     */\n    TableResult: {\n      /**\n       * @defaultValue `TableResult`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof foundry.documents.BaseTableResult>; // TODO TableResult\n    };\n\n    /**\n     * Configuration for the ActiveEffect embedded document type\n     */\n    PlaylistSound: {\n      /**\n       * @defaultValue `PlaylistSound`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof foundry.documents.BasePlaylistSound>; // TODO PlaylistSound\n\n      /**\n       * @defaultValue `PlaylistSoundConfig`\n       */\n      sheetClass: ConstructorOf<PlaylistSoundConfig>;\n    };\n\n    /**\n     * Configuration for the AmbientLight embedded document type and its representation on the game Canvas\n     */\n    AmbientLight: {\n      /**\n       * @defaultValue `AmbientLightDocument`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof AmbientLightDocument>;\n\n      /**\n       * @defaultValue `AmbientLightDocument`\n       */\n      objectClass: ConstructorOf<AmbientLight>;\n\n      /**\n       * @defaultValue `AmbientLightDocument`\n       */\n      layerClass: ConstructorOf<LightingLayer>;\n\n      /**\n       * @defaultValue `AmbientLightDocument`\n       */\n      sheetClass: ConstructorOf<LightConfig>;\n    };\n\n    /**\n     * Configuration for the AmbientSound embedded document type and its representation on the game Canvas\n     */\n    AmbientSound: {\n      /**\n       * @defaultValue `AmbientSoundDocument`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof foundry.documents.BaseAmbientSound>; // TODO: AmbientSoundDocument\n\n      /**\n       * @defaultValue `AmbientSound`\n       */\n      objectClass: ConstructorOf<AmbientSound>;\n\n      /**\n       * @defaultValue `SoundsLayer`\n       */\n      layerClass: ConstructorOf<SoundsLayer>;\n\n      /**\n       * @defaultValue `AmbientSoundConfig`\n       */\n      sheetClass: ConstructorOf<AmbientSoundConfig>;\n    };\n\n    /**\n     * Configuration for the Combatant embedded document type within a Combat document\n     */\n    Combatant: {\n      /**\n       * @defaultValue `Combatant`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof Combatant>;\n\n      /**\n       * @defaultValue `CombatantConfig`\n       */\n      sheetClass: ConstructorOf<CombatantConfig>;\n    };\n\n    /**\n     * Configuration for the Drawing embedded document type and its representation on the game Canvas\n     */\n    Drawing: {\n      /**\n       * @defaultValue `DrawingDocument`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof DrawingDocument>;\n\n      /**\n       * @defaultValue `Drawing`\n       */\n      objectClass: ConstructorOf<Drawing>;\n\n      /**\n       * @defaultValue `DrawingsLayer`\n       */\n      layerClass: ConstructorOf<DrawingsLayer>;\n\n      /**\n       * @defaultValue `DrawingConfig`\n       */\n      sheetClass: ConstructorOf<DrawingConfig>;\n    };\n\n    /**\n     * Configuration for the MeasuredTemplate embedded document type and its representation on the game Canvas\n     */\n    MeasuredTemplate: {\n      defaults: {\n        /**\n         * @defaultValue `53.13`\n         */\n        angle: number;\n\n        /**\n         * @defaultValue `1`\n         */\n        width: number;\n      };\n\n      types: {\n        /**\n         * @defaultValue `'Circle'`\n         */\n        circle: string;\n\n        /**\n         * @defaultValue `'Cone'`\n         */\n        cone: string;\n\n        /**\n         * @defaultValue `'Rectangle'`\n         */\n        rect: string;\n\n        /**\n         * @defaultValue `'Ray'`\n         */\n        ray: string;\n      } & Partial<Record<string, string>>;\n\n      /**\n       * @defaultValue `MeasuredTemplateDocument`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof MeasuredTemplateDocument>;\n\n      /**\n       * @defaultValue `MeasuredTemplate`\n       */\n      objectClass: ConstructorOf<MeasuredTemplate>;\n\n      /**\n       * @defaultValue `TemplateLayer`\n       */\n      layerClass: ConstructorOf<TemplateLayer>;\n\n      /**\n       * @defaultValue `MeasuredTemplateConfig`\n       */\n      sheetClass: ConstructorOf<MeasuredTemplateConfig>;\n    };\n\n    /**\n     * Configuration for the Note embedded document type and its representation on the game Canvas\n     */\n    Note: {\n      /**\n       * @defaultValue `NoteDocument`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof foundry.documents.BaseNote>; // TODO: NodeDocument\n\n      /**\n       * @defaultValue `Note`\n       */\n      objectClass: ConstructorOf<Note>;\n\n      /**\n       * @defaultValue `NotesLayer`\n       */\n      layerClass: ConstructorOf<NotesLayer>;\n\n      /**\n       * @defaultValue `NoteConfig`\n       */\n      sheetClass: ConstructorOf<NoteConfig>;\n    };\n\n    /**\n     * Configuration for the Tile embedded document type and its representation on the game Canvas\n     */\n    Tile: {\n      /**\n       * @defaultValue `TileDocument`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof foundry.documents.BaseTile>; // TODO: TileDocument\n\n      /**\n       * @defaultValue `Tile`\n       */\n      objectClass: ConstructorOf<Tile>;\n\n      /**\n       * @defaultValue `BackgroundLayer`\n       */\n      layerClass: ConstructorOf<BackgroundLayer>;\n\n      /**\n       * @defaultValue `TileConfig`\n       */\n      sheetClass: ConstructorOf<TileConfig>;\n    };\n\n    /**\n     * Configuration for the Token embedded document type and its representation on the game Canvas\n     */\n    Token: {\n      /**\n       * @defaultValue `TokenDocument`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof TokenDocument>;\n\n      /**\n       * @defaultValue `Token`\n       */\n      objectClass: ConstructorOf<Token>;\n\n      /**\n       * @defaultValue `TokenLayer`\n       */\n      layerClass: ConstructorOf<TokenLayer>;\n\n      /**\n       * @defaultValue `TokenConfig`\n       */\n      sheetClass: ConstructorOf<TokenConfig>;\n    };\n\n    /**\n     * Configuration for the Wall embedded document type and its representation on the game Canvas\n     */\n    Wall: {\n      /**\n       * @defaultValue `WallDocument`\n       */\n      documentClass: ConfiguredDocumentClassOrDefault<typeof foundry.documents.BaseWall>; // TODO: WallDocument\n\n      /**\n       * @defaultValue `Wall`\n       */\n      objectClass: ConstructorOf<Wall>;\n\n      /**\n       * @defaultValue `WallsLayer`\n       */\n      layerClass: ConstructorOf<WallsLayer>;\n\n      /**\n       * @defaultValue `WallConfig`\n       */\n      sheetClass: ConstructorOf<WallConfig>;\n    };\n\n    /**\n     * Default configuration options for TinyMCE editors\n     */\n    TinyMCE: tinyMCE.RawEditorSettings;\n\n    /**\n     * Configuration for the WebRTC implementation class\n     */\n    WebRTC: {\n      /**\n       * @defaultValue `SimplePeerAVClient`\n       */\n      clientClass: ConstructorOf<AVClient>;\n\n      /**\n       * @defaultValue `50`\n       */\n      detectPeerVolumeInterval: number;\n\n      /**\n       * @defaultValue `20`\n       */\n      detectSelfVolumeInterval: number;\n\n      /**\n       * @defaultValue `25`\n       */\n      emitVolumeInterval: number;\n\n      /**\n       * @defaultValue `2`\n       */\n      speakingThresholdEvents: number;\n\n      /**\n       * @defaultValue `10`\n       */\n      speakingHistoryLength: number;\n    };\n\n    /**\n     * Configure the Application classes used to render various core UI elements in the application\n     */\n    ui: CONFIG.UI;\n  }\n\n  namespace CONFIG {\n    interface UI {\n      /**\n       * @defaultValue `MainMenu`\n       */\n      menu: ConstructorOf<MainMenu>;\n\n      /**\n       * @defaultValue `Sidebar`\n       */\n      sidebar: ConstructorOf<Sidebar>;\n\n      /**\n       * @defaultValue `Pause`\n       */\n      pause: ConstructorOf<Pause>;\n\n      /**\n       * @defaultValue `SceneNavigation`\n       */\n      nav: ConstructorOf<SceneNavigation>;\n\n      /**\n       * @defaultValue `Notifications`\n       */\n      notifications: ConstructorOf<Notifications>;\n\n      /**\n       * @defaultValue `ActorDirectory`\n       */\n      actors: ConstructorOf<ActorDirectory>;\n\n      /**\n       * @defaultValue `ChatLog`\n       */\n      chat: ConstructorOf<ChatLog>;\n\n      /**\n       * @defaultValue `CombatTracker`\n       */\n      combat: ConstructorOf<CombatTracker>;\n\n      /**\n       * @defaultValue `CompendiumDirectory`\n       */\n      compendium: ConstructorOf<CompendiumDirectory>;\n\n      /**\n       * @defaultValue `SceneControls`\n       */\n      controls: ConstructorOf<SceneControls>;\n\n      /**\n       * @defaultValue `Hotbar`\n       */\n      hotbar: ConstructorOf<Hotbar>;\n\n      /**\n       * @defaultValue `ItemDirectory`\n       */\n      items: ConstructorOf<ItemDirectory>;\n\n      /**\n       * @defaultValue `JournalDirectory`\n       */\n      journal: ConstructorOf<JournalDirectory>;\n\n      /**\n       * @defaultValue `MacroDirectory`\n       */\n      macros: ConstructorOf<MacroDirectory>;\n\n      /**\n       * @defaultValue `PlayerList`\n       */\n      players: ConstructorOf<PlayerList>;\n\n      /**\n       * @defaultValue `PlaylistDirectory`\n       */\n      playlists: ConstructorOf<PlaylistDirectory>;\n\n      /**\n       * @defaultValue `SceneDirectory`\n       */\n      scenes: ConstructorOf<SceneDirectory>;\n\n      /**\n       * @defaultValue `Settings`\n       */\n      settings: ConstructorOf<Settings>;\n\n      /**\n       * @defaultValue `RollTableDirectory`\n       */\n      tables: ConstructorOf<RollTableDirectory>;\n\n      /**\n       * @defaultValue `CameraViews`\n       */\n      webrtc: ConstructorOf<CameraViews>;\n    }\n  }\n\n  const CONFIG: CONFIG;\n}\n"]},17027:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\contextMenu.d.ts","/**\n * Display a right-click activated Context Menu which provides a dropdown menu of options\n * A ContextMenu is constructed by designating a parent HTML container and a target selector\n * An Array of menuItems defines the entries of the menu which is displayed\n *\n * @param element - The containing HTML element within which the menu is positioned\n * @param selector - A CSS selector which activates the context menu.\n * @param menuItems - An Array of entries to display in the menu\n * @param eventName - Optionally override the triggering event which can spawn the menu\n *                    (default: `'contextmenu'`)\n */\ndeclare class ContextMenu {\n  constructor(\n    element: JQuery,\n    selector: string | null | undefined,\n    menuItems: ContextMenu.Item[],\n    { eventName }?: { eventName?: string }\n  );\n\n  /**\n   * The target HTMLElement being selected\n   */\n  element: JQuery;\n\n  /**\n   * The target CSS selector which activates the menu\n   * @defaultValue `element.attr(\"id\")`\n   */\n  selector: string;\n\n  /**\n   * An interaction event name which activates the menu\n   */\n  eventName: string;\n\n  /**\n   * The array of menu items being rendered\n   */\n  menuItems: ContextMenu.Item[];\n\n  /**\n   * Track which direction the menu is expanded in\n   * @defaultValue `false`\n   */\n  protected _expandUp: boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A convenience accessor to the context menu HTML object\n   */\n  get menu(): JQuery;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Attach a ContextMenu instance to an HTML selector\n   */\n  bind(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Animate closing the menu by sliding up and removing from the DOM\n   */\n  close(): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  protected _animateOpen(menu: JQuery): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  protected _animateClose(menu: JQuery): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Render the Context Menu by iterating over the menuItems it contains\n   * Check the visibility of each menu item, and only render ones which are allowed by the item's logical condition\n   * Attach a click handler to each item which is rendered\n   */\n  render(target: JQuery): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Set the position of the context menu, taking into consideration whether the menu should expand upward or downward\n   */\n  protected _setPosition(html: JQuery, target: JQuery): void;\n\n  /* -------------------------------------------- */\n\n  static eventListeners(): void;\n}\n\ndeclare namespace ContextMenu {\n  interface Item {\n    /**\n     * The displayed item name\n     */\n    name: string;\n\n    /**\n     * An icon glyph HTML string\n     */\n    icon: string;\n\n    /**\n     * A function which returns a Boolean for whether or not to display the item\n     */\n    condition?: boolean | ((target: JQuery) => boolean);\n\n    /**\n     * A callback function to trigger when the entry of the menu is clicked\n     */\n    callback: (target: JQuery) => void;\n  }\n}\n"]},13617:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\dragDrop.d.ts","/**\n * A controller class for managing drag and drop workflows within an Application instance.\n * The controller manages the following actions: dragstart, dragover, drop\n * @see {@link Application}\n *\n * @example\n * ```typescript\n * const dragDrop = new DragDrop({\n *   dragSelector: \".item\",\n *   dropSelector: \".items\",\n *   permissions: { dragstart: this._canDragStart.bind(this), drop: this._canDragDrop.bind(this) }\n *   callbacks: { dragstart: this._onDragStart.bind(this), drop: this._onDragDrop.bind(this) }\n * });\n * dragDrop.bind(html);\n * ```\n */\ndeclare class DragDrop {\n  /**\n   * @param dragSelector - The CSS selector used to target draggable elements.\n   *                       (default: `null`)\n   * @param dropSelector - The CSS selector used to target viable drop targets.\n   *                       (default: `null`)\n   * @param permissions  - An object of permission test functions for each action\n   *                       (default: `{}`)\n   * @param callbacks    - An object of callback functions for each action\n   *                       (default: `{}`)\n   */\n  constructor({ dragSelector, dropSelector, permissions, callbacks }?: DragDrop.Options);\n\n  /**\n   * The HTML selector which identifies draggable elements\n   * @defaultValue `null`\n   */\n  dragSelector: string | null;\n\n  /**\n   * The HTML selector which identifies drop targets\n   * @defaultValue `null`\n   */\n  dropSelector: string | null;\n\n  /**\n   * A set of permission checking functions for each action of the Drag and Drop workflow\n   * @defaultValue `{}`\n   */\n  permissions: Partial<Record<string, (selector: string | null) => boolean>>;\n\n  /**\n   * A set of callback functions for each action of the Drag and Drop workflow\n   * @defaultValue `{}`\n   */\n  callbacks: Partial<Record<string, (event: DragEvent) => unknown>>;\n\n  /**\n   * Bind the DragDrop controller to an HTML application\n   * @param html - The HTML element to which the handler is bound\n   */\n  bind(html: HTMLElement): this;\n\n  /**\n   * Execute a callback function associated with a certain action in the workflow\n   * @param event  - The drag event being handled\n   * @param action - The action being attempted\n   */\n  callback(event: DragEvent, action: string): unknown;\n\n  /**\n   * Test whether the current user has permission to perform a step of the workflow\n   * @param action   - The action being attempted\n   * @param selector - The selector being targeted\n   * @returns Can the action be performed?\n   */\n  can(action: string, selector: string | null): boolean;\n\n  /**\n   * Handle the start of a drag workflow\n   * @param event - The drag event being handled\n   */\n  protected _handleDragStart(event: DragEvent): void;\n\n  /**\n   * Handle a dragged element over a droppable target\n   * @param event - The drag event being handled\n   */\n  protected _handleDragOver(event: DragEvent): false;\n\n  /**\n   * Handle a dragged element dropped on a droppable target\n   * @param event - The drag event being handled\n   */\n  protected _handleDrop(event: DragEvent): unknown;\n\n  static createDragImage(img: HTMLImageElement, width: number, height: number): HTMLDivElement | HTMLElement;\n}\n\ndeclare namespace DragDrop {\n  interface Options {\n    /**\n     * The CSS selector used to target draggable elements.\n     * @defaultValue `null`\n     */\n    dragSelector?: DragDrop['dragSelector'];\n\n    /**\n     * The CSS selector used to target viable drop targets.\n     * @defaultValue `null`\n     */\n    dropSelector?: DragDrop['dropSelector'];\n\n    /**\n     * An object of permission test functions for each action\n     * @defaultValue `{}`\n     */\n    permissions?: DragDrop['permissions'];\n\n    /**\n     * An object of callback functions for each action\n     * @defaultValue `{}`\n     */\n    callbacks?: DragDrop['callbacks'];\n  }\n}\n"]},99777:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\draggable.d.ts","/**\n * A UI utility to make an element draggable.\n */\ndeclare class Draggable<R extends boolean | undefined = undefined> {\n  constructor(app: Draggable['app'], element: JQuery, handle: Draggable['handle'], resizable?: R);\n\n  app: Application;\n\n  element: HTMLElement;\n\n  handle: HTMLElement;\n\n  /**\n   * @defaultValue `false`\n   */\n  resizable: R extends boolean ? R : false;\n\n  /**\n   * Duplicate the application's starting position to track differences\n   * @defaultValue `null`\n   */\n  position: foundry.utils.Duplicated<Application.Position> | null;\n\n  /**\n   * Remember event handlers associated with this Draggable class so they may be later unregistered\n   */\n  // prettier-ignore\n  handlers: this['resizable'] extends true\n    ? Draggable.ResizableHandlers\n    : this['resizable'] extends false\n      ? Draggable.Handlers\n      : Draggable.Handlers | Draggable.ResizableHandlers;\n\n  /**\n   * Throttle mousemove event handling to 60fps\n   * @defaultValue `0`\n   */\n  protected _moveTime: number;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Activate event handling for a Draggable application\n   * Attach handlers for floating, dragging, and resizing\n   */\n  activateListeners(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle the initial mouse click which activates dragging behavior for the application\n   */\n  protected _onDragMouseDown(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Move the window with the mouse, bounding the movement to ensure the window stays within bounds of the viewport\n   */\n  protected _onDragMouseMove(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Conclude the dragging behavior when the mouse is release, setting the final position and removing listeners\n   */\n  protected _onDragMouseUp(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle the initial mouse click which activates dragging behavior for the application\n   */\n  protected _onResizeMouseDown(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Move the window with the mouse, bounding the movement to ensure the window stays within bounds of the viewport\n   */\n  protected _onResizeMouseMove(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Conclude the dragging behavior when the mouse is release, setting the final position and removing listeners\n   */\n  protected _onResizeMouseUp(event: Event): void;\n}\n\ndeclare namespace Draggable {\n  interface Handlers {\n    click: ['click', (e: Event) => void, { capture: boolean; passive: boolean }];\n\n    dragDown: ['mousedown', (e: Event) => void, false];\n    dragMove: ['mousemove', (e: Event) => void, false];\n    dragUp: ['mouseup', (e: Event) => void, false];\n  }\n\n  interface ResizableHandlers extends Handlers {\n    resizeDown: ['mousedown', (e: Event) => void, false];\n    resizeMove: ['mousemove', (e: Event) => void, false];\n    resizeUp: ['mouseup', (e: Event) => void, false];\n  }\n}\n"]},87030:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\entity.d.ts",'/**\n * An abstract class pattern for all primary data entities within the Foundry VTT Framework. An entity represents a\n * primary data concept, for example: Actor, Item, Scene, or ChatMessage. Each Entity type in Foundry Virtual\n * Tabletop extends this base Entity class which ensures similar behavior and workflow across all entity types.\n *\n * Documentation for this class is provided for reference, but developers should not extend this class directly,\n * instead work with or extend the Entity implementations that are referenced in this section of the API documentation.\n *\n * Entities are instantiated by providing their base data, and an optional Array of Application instances which should\n * be automatically refreshed when the Entity experiences an update.\n *\n * @see {@link EntityCollection} The EntityCollection abstract class which contains Entity instances.\n * @see {@link Actor} The Actor Entity.\n * @see {@link Combat} The Combat Encounter Entity.\n * @see {@link Folder} The Folder Entity.\n * @see {@link Item} The Item Entity.\n * @see {@link JournalEntry} The Journal Entry Entity.\n * @see {@link ChatMessage} The Chat Message Entity.\n * @see {@link Playlist} The Audio Playlist Entity.\n * @see {@link Scene} The Scene Entity.\n * @see {@link RollTable} The Rollable Table Entity.\n * @see {@link User} The User Entity.\n * @see {@link Compendium} The Compendium which may contain Entities in a compendium pack.\n *\n * @typeParam D  - The type of the `Entity`s `_data` field. It should extend Entity.Data\n * @typeParam PD - The type of `Entity`s `data` field after `prepareData` has been called. It should extend `D`.\n *\n * @example\n * ```typescript\n * let actorData = {name: "John Doe", type: "character", img: "icons/svg/mystery-man.svg"}\n * let actor = new Actor(actorData)\n * ```\n */\ndeclare abstract class Entity<D extends Entity.Data = Entity.Data, PD extends D = D> {\n  /**\n   * @param data    - The data Object with which to create the Entity\n   * @param options - Additional options which modify the created Entity behavior\n   */\n  constructor(data?: DeepPartial<D>, options?: Entity.CreateOptions);\n\n  /**\n   * The original source data for the Entity provided upon initialization.\n   * This reflects the database state of the Entity before any transformations are applied.\n   * @defaultValue `{}`\n   */\n  _data: D;\n\n  /**\n   * The effective data for the Entity.\n   * This data object may have transformations applied to it.\n   * @defaultValue `this._data`\n   */\n  data: PD;\n\n  /**\n   * The options object that was used to configure the Entity upon initialization.\n   * @defaultValue `{}`\n   */\n  options: Entity.CreateOptions;\n\n  /**\n   * A collection of Application instances which should be re- rendered whenever this Entity experiences an update to\n   * its data. The keys of this object are the application ids and the values are Application instances. Each\n   * Application in this object will have its render method called by {@link Entity#render}.\n   * @see Entity#render\n   * @defaultValue `{}`\n   */\n  apps: Application[];\n\n  /**\n   * The Entity may optionally belong to a parent Compendium pack. If so this attribute will contain a reference\n   * to that Compendium object. Otherwise null.\n   * @defaultValue `null`\n   */\n  compendium: Compendium | null;\n\n  /**\n   * Safely Initialize data structure for the Entity.\n   * Errors that occur here should be captured and logged, but should not break construction of the Entity instance.\n   */\n  protected _initialize(): void;\n\n  /**\n   * Configure the attributes of this Entity class\n   * @param baseEntity - The parent class which directly inherits from the Entity interface.\n   * @param collection - The Collection instance to which Entities of this type belong.\n   * @param embeddedEntities - The names of any Embedded Entities within the Entity data structure.\n   *\n   * @remarks This method is abstract on Entity.\n   */\n  static get config(): Entity.Config;\n\n  /**\n   * A Universally Unique Identifier (uuid) for this Entity instance\n   */\n  get uuid(): string;\n\n  /**\n   * Return a string which represents a dynamic link to this Entity.\n   */\n  get link(): string;\n\n  /**\n   * Prepare data for the Entity whenever the instance is first created or later updated.\n   * This method can be used to derive any internal attributes which are computed in a formulaic manner.\n   * For example, in a d20 system - computing an ability modifier based on the value of that ability score.\n   */\n  prepareData(): PD | void;\n\n  /**\n   * Prepare Embedded Entities which exist within this parent Entity.\n   * For example, in the case of an Actor, this method is responsible for preparing the Owned Items the Actor contains.\n   * @remarks\n   * This is abstract on Entity and needs to be implemented, when the Entity subclass includes embedded Entities.\n   */\n  prepareEmbeddedEntities(): void;\n\n  /**\n   * Obtain a reference to the Array of source data within the data object for a certain Embedded Entity name\n   * @param embeddedName - The name of the Embedded Entity type\n   */\n  getEmbeddedCollection(embeddedName: string): any[]; // TODO maybe add general Entity data and return this here\n\n  /**\n   * Render all of the Application instances which are connected to this Entity by calling their respective\n   * {@link Application#render} methods.\n   * @param force   - Force rendering\n   *                  (default: `false`)\n   * @param context - Optional context\n   *                  (default: `{}`)\n   */\n  render(force?: boolean, context?: Entity.RenderOptions): void;\n\n  /**\n   * The class name of the base Entity type, for example "Actor". This is useful in cases where there is an inheritance\n   * chain. Many places throughout the framework rely upon the canonical entity name which may not always be equal\n   * to the class name. This property is available as both a static and instance method.\n   *\n   * @example\n   * ```typescript\n   * class Actor2ndGen extends Actor<Actor2ndGenData, Item2ndGen> {...}\n   * Actor2ndGen.entity // "Actor"\n   * ```\n   */\n  static get entity(): string;\n\n  get entity(): string;\n\n  /**\n   * A convenience accessor for the _id attribute of the Entity data object.\n   */\n  get id(): string;\n\n  get _id(): string;\n\n  /**\n   * A convenience accessor for the name attribute of the Entity data object\n   */\n  get name(): string;\n\n  /**\n   * A property which gets or creates a singleton instance of the sheet class used to render and edit data for this\n   * particular entity type.\n   *\n   * @example <caption>A subclass of the Actor entity</caption>\n   * ```typescript\n   * if (game.actors === undefined) throw "Too early to use entity collections";\n   * let actor = game.actors.get(actorId);\n   * if (actor === undefined) return;\n   * actor.sheet // ActorSheet\n   * ```\n   */\n  get sheet(): DocumentSheet<DocumentSheet.Options, DocumentSheet.Data<any>, any> | null;\n\n  /**\n   * Obtain a reference to the DocumentSheet implementation which should be used to render the Entity instance\n   * configuration sheet.\n   */\n  protected get _sheetClass(): ConstructorOf<FormApplication> | null;\n\n  /**\n   * Return a reference to the Folder which this Entity belongs to, if any.\n   *\n   * @example <caption>Entities may belong to Folders</caption>\n   * ```typescript\n   * if (game.folders === undefined) throw "Too early to use entity collections";\n   * let folder = game.folders.entities[0]\n   * let actor = await Actor.create({name: "New Actor", folder: folder.id})\n   * console.log(actor?.data.folder) // folder.id;\n   * console.log(actor?.folder) // folder;\n   * ```\n   */\n  get folder(): Folder | null | undefined;\n\n  /**\n   * Return the permission level that the current game User has over this Entity.\n   * See the CONST.ENTITY_PERMISSIONS object for an enumeration of these levels.\n   *\n   * @example\n   * ```typescript\n   * if (game.user === null) throw "Too early to use game.user";\n   * game.user.id // "dkasjkkj23kjf"\n   * entity.data.permission // {default: 1, "dkasjkkj23kjf": 2};\n   * entity.permission // 2\n   * ```\n   */\n  get permission(): foundry.CONST.EntityPermission;\n\n  /**\n   * A boolean indicator for whether or not the current game User has ownership rights for this Entity.\n   * This property has a setter which allows for ownership rights to be temporarily overridden on a per- instance basis.\n   */\n  get owner(): boolean;\n\n  /**\n   * A boolean indicator for whether or not the current game User has at least limited visibility for this Entity.\n   */\n  get visible(): boolean;\n\n  /**\n   * A boolean indicator for whether the current game user has ONLY limited visibility for this Entity.\n   * Note that a GM user\'s perspective of an Entity is never limited.\n   */\n  get limited(): boolean;\n\n  /**\n   * Return an array of User entities who have a certain permission level or greater to the Entity.\n   * @param permission - The permission level or level name to test\n   * @param exact      - Tests for an exact permission level match, by default this method tests for\n   *        an equal or greater permission level\n   * @returns An array of User entities who match the permission level\n   */\n  getUsers(permission: string | number, exact?: boolean): User[];\n\n  /**\n   * Test whether a provided User a specific permission level (or greater) over the Entity instance\n   * @param user       - The user to test for permission\n   * @param permission - The permission level or level name to test\n   * @param exact      - Tests for an exact permission level match, by default this method tests for an equal or greater permission level.\n   *\n   * @example <caption>Test whether a specific user has a certain permission</caption>\n   * ```typescript\n   * // These two are equivalent\n   * entity.hasPerm(game.user, "OWNER")\n   * entity.owner\n   * // These two are also equivalent\n   * entity.hasPerm(game.user, "LIMITED", true)\n   * entity.limited\n   * ```\n   */\n  hasPerm(user: User, permission: string | number, exact?: boolean): boolean;\n\n  /**\n   * Test whether a given User has permission to perform some action on this Entity\n   * @param user   - The User requesting creation\n   * @param action - The attempted action\n   * @param target - The targeted Entity\n   */\n  static can(user: User, action: string, target: Entity): boolean;\n\n  /**\n   * Test whether a given User has permission to perform some action on this Entity\n   * @param user   - The User to test\n   * @param action - The name of the action\n   * @remarks\n   * args is untyped because of a mismatch between most entities and User that is likely to be fixed in Foundry 0.8.x\n   *\n   */\n  can(...args: any): boolean;\n  // TODO: This is intentionally untyped. This is a known issue that will likely be fixed in 0.8.x\n\n  /**\n   * Test for whether this Entity can be owned by any non-gamemaster player.\n   */\n  get hasPlayerOwner(): boolean;\n\n  /**\n   * Activate the Socket event listeners used to receive responses from events which modify database documents\n   * @param socket - The active game socket\n   */\n  static activateSocketListeners(socket: io.Socket): void;\n\n  /**\n   * Create one or multiple new entities using provided input data.\n   * Data may be provided as a single object to create one Entity, or as an Array of Objects.\n   * Entities may be temporary (unsaved to the database) by passing the temporary option as true.\n   *\n   * @param data    - A Data object or array of Data\n   * @param options - Additional options which customize the creation workflow\n   *\n   * @example\n   * ```typescript\n   * const data = {name: "New Entity", type: "character", img: "path/to/profile.jpg"};\n   * const created: Actor | null = await Actor.create(data); // Returns one Entity, saved to the database\n   * const temp: Actor | null = await Actor.create(data, {temporary: true}); // Not saved to the database\n   * ```\n   *\n   * @example\n   * ```typescript\n   * const data = [{name: "Tim", type: "npc"}, {name: "Tom", type: "npc"}];\n   * const created: Actor[] | Actor | null = await Actor.create(data); // Returns an Array of Entities, saved to the database\n   * const created: Actor[] | Actor | null = await Actor.create(data, {temporary: true}); // Not saved to the database\n   * ```\n   */\n  static create<T extends Entity, U>(\n    this: ConstructorOf<T>,\n    data: Expanded<U> extends DeepPartial<T[\'_data\']> ? U : DeepPartial<T[\'_data\']>,\n    options?: Entity.CreateOptions\n  ): Promise<T | null>;\n  static create<T extends Entity, U>(\n    this: ConstructorOf<T>,\n    data: Expanded<U> extends DeepPartial<T[\'_data\']> ? ReadonlyArray<U> : ReadonlyArray<DeepPartial<T[\'_data\']>>,\n    options?: Entity.CreateOptions\n  ): Promise<T | T[] | null>;\n\n  /**\n   * Handle a SocketResponse from the server when one or multiple Entities are created\n   * @param request - The initial request\n   * @param result  - An Array of created Entity data\n   * @param userId  - The id of the requesting User\n   */\n  protected static _handleCreate<T extends Entity>(this: ConstructorOf<T>, { request, result, userId }: any): T[];\n\n  /**\n   * Entity- specific actions that should occur when the Entity is first created\n   */\n  protected _onCreate(data: PD, options: any, userId: string): void;\n\n  /**\n   * Update one or multiple existing entities using provided input data.\n   * Data may be provided as a single object to update one Entity, or as an Array of Objects.\n   *\n   * @param data    - A Data object or array of Data. Each element must contain the _id of an existing Entity.\n   * @param options - Additional options which customize the update workflow\n   *\n   * @example\n   * ```typescript\n   * const data = {_id: "12ekjf43kj2312ds", name: "New Name"}}\n   * const updated = await Actor.update(data) // Updated entity saved to the database\n   * ```\n   *\n   * @example\n   * ```typescript\n   * const data = [{_id: "12ekjf43kj2312ds", name: "New Name 1"}, {_id: "kj549dk48k34jk34", name: "New Name 2"}]}\n   * const updated = await Actor.update(data); // Returns an Array of Entities, updated in the database\n   * ```\n   */\n  static update<T extends Entity, U>(\n    this: ConstructorOf<T>,\n    data: Expanded<U> extends DeepPartial<T[\'_data\']> ? U & { _id: string } : DeepPartial<T[\'_data\']> & { _id: string },\n    options?: Entity.UpdateOptions\n  ): Promise<T | []>;\n  static update<T extends Entity, U>(\n    this: ConstructorOf<T>,\n    data: Expanded<U> extends DeepPartial<T[\'_data\']>\n      ? ReadonlyArray<U & { _id: string }>\n      : ReadonlyArray<DeepPartial<T[\'_data\']> & { _id: string }>,\n    options?: Entity.UpdateOptions\n  ): Promise<T | T[]>;\n\n  /**\n   * Handle a SocketResponse from the server when one or multiple Entities are updated\n   * @param request - The initial request\n   * @param result  - An Array of updated Entity data\n   * @param userId  - The id of the requesting User\n   */\n  protected static _handleUpdate<T extends Entity>(this: ConstructorOf<T>, { request, result, userId }: any): T[];\n\n  /**\n   * Entity-specific actions that should occur when the Entity is updated\n   */\n  protected _onUpdate(data: DeepPartial<D>, options: Entity.UpdateOptions, userId: string): void;\n\n  /**\n   * Update the current Entity using provided input data.\n   * Data must be provided as a single object which updates the Entity data.\n   * @see Entity.update\n   *\n   * @param data    - A Data object which updates the Entity\n   * @param options - Additional options which customize the update workflow\n   */\n  update<U>(data: Expanded<U> extends DeepPartial<D> ? U : never, options?: Entity.UpdateOptions): Promise<this>;\n  update(data: DeepPartial<D>, options?: Entity.UpdateOptions): Promise<this>;\n\n  /**\n   * Delete one or multiple existing entities using provided ids.\n   * The target ids may be a single string or an Array of strings.\n   *\n   * @param data    - A single id or Array of ids\n   * @param options - Additional options which customize the deletion workflow\n   *\n   *\n   * @example\n   * ```typescript\n   * const id = "12ekjf43kj2312ds"\n   * const deleted = await Entity.delete(id) // A single deleted entity from the database\n   * ```\n   *\n   * @example\n   * ```typescript\n   * const ids = ["12ekjf43kj2312ds", "kj549dk48k34jk34"]\n   * const deleted = await Entity.delete(ids) // Returns an Array of deleted Entities\n   * ```\n   */\n  static delete<T extends Entity>(\n    this: ConstructorOf<T>,\n    data: string,\n    options?: Entity.DeleteOptions\n  ): Promise<T | null>;\n  static delete<T extends Entity>(\n    this: ConstructorOf<T>,\n    data: ReadonlyArray<string>,\n    options?: Entity.DeleteOptions\n  ): Promise<T | T[] | null>;\n\n  /**\n   * Handle a SocketResponse from the server when one or multiple Entities are deleted\n   * @param request - The initial request\n   * @param result  - An Array of deleted Entity ids\n   * @param userId  - The id of the requesting User\n   */\n  protected static _handleDelete<T extends Entity>(this: ConstructorOf<T>, { request, result, userId }: any): T[];\n\n  /**\n   * Entity- specific actions that should occur when the Entity is deleted\n   */\n  protected _onDelete(options: Entity.DeleteOptions, userId: string): void;\n\n  /**\n   * Delete the current Entity.\n   * @see Entity.delete\n   *\n   * @param options - Options which customize the deletion workflow\n   */\n  delete(options?: Entity.DeleteOptions): Promise<this>;\n\n  /**\n   * Get an Embedded Entity by it\'s id from a named collection in the parent Entity.\n   *\n   * @param embeddedName - The name of the Embedded Entity type to retrieve\n   * @param id           - The numeric ID of the child to retrieve\n   * @param strict       - Throw an Error if the requested id does not exist, otherwise return null. Default false.\n   */\n  getEmbeddedEntity(embeddedName: string, id: string, { strict }?: { strict?: boolean }): any;\n\n  /**\n   * Create one or multiple EmbeddedEntities within this parent Entity.\n   * Data may be provided as a single Object to create one EmbeddedEntity or as an Array of Objects to create many.\n   * Entities may be temporary (unsaved to the database) by passing the temporary option as true.\n   *\n   * @param embeddedName - The name of the Embedded Entity class to create\n   * @param data         - A Data object or an Array of Data objects to create\n   * @param options      - Additional creation options which modify the request\n   *\n   * @example\n   * ```typescript\n   * if (game.actors === undefined) throw "Too early to use an enitity collection";\n   * const actor = game.actors.get("dfv934kj23lk6h9k");\n   * if (actor === null) return;\n   * const data = {name: "Magic Sword", type: "weapon", img: "path/to/icon.png"};\n   * const created = await actor.createEmbeddedEntity("OwnedItem", data); // Returns one EmbeddedEntity, saved to the Actor\n   * const temp = await actor.createEmbeddedEntity("OwnedItem", data, {temporary: true}); // Not saved to the Actor\n   * ```\n   *\n   * @example\n   * ```typescript\n   * if (game.actors === undefined) throw "Too early to use an enitity collection";\n   * const actor = game.actors.get("dfv934kj23lk6h9k");\n   * if (actor === null) return;\n   * const data = [{name: "Mace of Crushing", type: "weapon"}, {name: "Shield of Defense", type: "armor"}];\n   * const created = await actor.createEmbeddedEntity("OwnedItem", data); // Returns an Array of EmbeddedEntities, saved to the Actor\n   * const temp = await actor.createEmbeddedEntity("OwnedItem", data, {temporary: true}); // Not saved to the Actor\n   * ```\n   */\n  createEmbeddedEntity(embeddedName: string, data: any, options?: Entity.CreateOptions): Promise<any>;\n\n  /**\n   * Handle a SocketResponse from the server when one or multiple Embedded Entities are created\n   * @param request - The initial request\n   * @param result  - An Array of created Entity data\n   * @param userId  - The id of the requesting User\n   */\n  protected static _handleCreateEmbeddedEntity({ request, result, userId }: any): any[];\n\n  /**\n   * Handle Embedded Entity creation within this Entity with specific callback steps.\n   * This function is triggered once per EmbeddedEntity which is updated.\n   * It therefore may run multiple times per creation workflow.\n   * Any steps defined here should run on a per- EmbeddedEntity basis.\n   * Steps that should run once for the whole batch should go in _onModifyEmbeddedEntity()\n   */\n  protected _onCreateEmbeddedEntity(embeddedName: string, child: any, options: any, userId: string): void;\n\n  /**\n   * Update one or multiple existing entities using provided input data.\n   * Data may be provided as a single object to update one Entity, or as an Array of Objects.\n   *\n   * @param embeddedName - The name of the Embedded Entity class to create\n   * @param data         - A Data object or array of Data. Each element must contain the _id of an existing Entity.\n   * @param options      - Additional options which customize the update workflow\n   *\n   * @example\n   * ```typescript\n   * if (game.actors === undefined) throw "too early to use an enitity collection";\n   * const actor = game.actors.get("dfv934kj23lk6h9k");\n   * if (actor === undefined) return;\n   * const item = actor.data.items.find(i => i.name === "magic sword");\n   * if (item === undefined) return;\n   * const update = {_id: item._id, name: "magic sword +1"};\n   * const updated = await actor.updateEmbeddedEntity("owneditem", update); // updates one embeddedentity\n   * ```\n   *\n   * @example\n   * ```typescript\n   * if (game.actors === undefined) throw "Too early to use an enitity collection";\n   * const actor = game.actors.get("dfv934kj23lk6h9k");\n   * if (actor === undefined) return;\n   * const weapons = actor.data.items.filter(i => i.type === "weapon");\n   * const updates = weapons.map(i => {\n   *   return {_id: i._id, name: i.name + "+1"};\n   * });\n   * const updated = await actor.updateEmbeddedEntity("OwnedItem", updates); // Updates multiple EmbeddedEntity objects\n   * ```\n   */\n  updateEmbeddedEntity(embeddedName: string, data: any, options?: Entity.UpdateOptions): Promise<any>;\n  updateEmbeddedEntity(embeddedName: string, data: any[], options?: Entity.UpdateOptions): Promise<any[]>;\n\n  /**\n   * Handle a SocketResponse from the server when one or multiple Embedded Entities are updated\n   * @param request - The initial request\n   * @param result  - An Array of updated Entity data\n   * @param userId  - The id of the requesting User\n   */\n  protected static _handleUpdateEmbeddedEntity({ request, result, userId }: any): any[];\n\n  /**\n   * Handle Embedded Entity updates within this Entity with specific callback steps.\n   * This function is triggered once per EmbeddedEntity which is updated.\n   * It therefore may run multiple times per creation workflow.\n   * Any steps defined here should run on a per- EmbeddedEntity basis.\n   * Steps that should run once for the whole batch should go in _onModifyEmbeddedEntity()\n   */\n  protected _onUpdateEmbeddedEntity(\n    embeddedName: string,\n    child: any,\n    updateData: any,\n    options: any,\n    userId: string\n  ): void;\n\n  /**\n   * Delete one or multiple existing EmbeddedEntity objects using provided input data.\n   * Data may be provided as a single id to delete one object or as an Array of string ids.\n   *\n   * @param embeddedName - The name of the Embedded Entity class to create\n   * @param data         - A Data object or array of Data. Each element must contain the _id of an existing Entity.\n   * @param options      - Additional options which customize the update workflow\n   *\n   * @example\n   * ```typescript\n   * if (game.actors === undefined) throw "Too early to use an enitity collection";\n   * const actor = game.actors.get("dfv934kj23lk6h9k");\n   * if (actor === undefined) return;\n   * const item = actor.data.items.find(i => i.name === "Magic Sword");\n   * if (item === undefined) return;\n   * const deleted = await actor.deleteEmbeddedEntity("OwnedItem", item._id); // Deletes one EmbeddedEntity\n   * ```\n   *\n   * @example\n   * ```typescript\n   * if (game.actors === undefined) throw "Too early to use an enitity collection";\n   * const actor = game.actors.get("dfv934kj23lk6h9k");\n   * if (actor === undefined) return;\n   * const weapons = actor.data.items.filter(i => i.type === "weapon");\n   * const deletions = weapons.map(i => i._id);\n   * const deleted = await actor.deleteEmbeddedEntity("OwnedItem", deletions); // Deletes multiple EmbeddedEntity objects\n   * ```\n   */\n  deleteEmbeddedEntity(embeddedName: string, data: any, options?: Entity.DeleteOptions): Promise<any | any[]>;\n\n  /**\n   * Handle a SocketResponse from the server when one or multiple Embedded Entities are deleted\n   * @param request - The initial request\n   * @param result  - An Array of deleted EmbeddedEntity ids\n   * @param userId  - The id of the requesting User\n   */\n  protected static _handleDeleteEmbeddedEntity({ request, result, userId }: any): any[];\n\n  /**\n   * Handle Embedded Entity deletion within this Entity with specific callback steps.\n   * This function is triggered once per EmbeddedEntity which is updated.\n   * It therefore may run multiple times per creation workflow.\n   * Any steps defined here should run on a per- EmbeddedEntity basis.\n   * Steps that should run once for the whole batch should go in _onModifyEmbeddedEntity()\n   */\n  protected _onDeleteEmbeddedEntity(embeddedName: string, child: any, options: any, userId: string): void;\n\n  /**\n   * A generic helper since we take the same actions for every type of Embedded Entity update\n   * Unlike the specific _onCreate, _onUpdate, and _onDelete methods this only runs once per updated batch\n   */\n  protected _onModifyEmbeddedEntity(\n    embeddedName: string,\n    changes: any[],\n    options: any,\n    userId: string,\n    context?: any\n  ): void;\n\n  /**\n   * Get the value of a "flag" for this Entity\n   * See the setFlag method for more details on flags\n   *\n   * @param scope - The flag scope which namespaces the key\n   * @param key   - The flag key\n   */\n  getFlag(scope: string, key: string): unknown;\n\n  /**\n   * Assign a "flag" to this Entity.\n   * Flags represent key- value type data which can be used to store flexible or arbitrary data required by either\n   * the core software, game systems, or user- created modules.\n   *\n   * Each flag should be set using a scope which provides a namespace for the flag to help prevent collisions.\n   *\n   * Flags set by the core software use the "core" scope.\n   * Flags set by game systems or modules should use the canonical name attribute for the module\n   * Flags set by an individual world should "world" as the scope.\n   *\n   * Flag values can assume almost any data type. Setting a flag value to null will delete that flag.\n   *\n   * @param scope - The flag scope which namespaces the key\n   * @param key   - The flag key\n   * @param value - The flag value\n   *\n   */\n  setFlag(scope: string, key: string, value: unknown): Promise<this>;\n\n  /**\n   * Remove a flag assigned to the Entity\n   * @param scope - The flag scope which namespaces the key\n   * @param key   - The flag key\n   */\n  unsetFlag(scope: string, key: string): Promise<this>;\n\n  /**\n   * Sort this Entity relative a target by providing the target, an Array of siblings and other options.\n   * If the Entity has an rendered sheet, record the sort change as part of a form submission\n   * See SortingHelper.performIntegerSort for more details\n   */\n  sortRelative({\n    target,\n    siblings,\n    sortKey,\n    sortBefore,\n    updateData\n  }: {\n    target?: Entity | null;\n    siblings?: Entity[];\n    sortKey?: string;\n    sortBefore?: boolean;\n    updateData?: any;\n  }): Promise<void>;\n\n  /**\n   * Clone an Entity, creating a new Entity using the current data as well as provided creation overrides.\n   *\n   * @param createData - Additional data which overrides current Entity data at the time of creation\n   * @param options - Additional creation options passed to the Entity.create method\n   * @returns A Promise which resolves to the created clone Entity\n   */\n  clone(createData?: DeepPartial<D>, options?: Entity.CreateOptions): Promise<this>;\n\n  /**\n   * Serializing an Entity should simply serialize it\'s inner data, not the entire instance\n   */\n  toJSON(): D;\n\n  /**\n   * Export entity data to a JSON file which can be saved by the client and later imported into a different session\n   */\n  exportToJSON(): void;\n\n  /**\n   * A helper function to handle obtaining the dropped Entity data from a dropped event. Entity drop data could have:\n   * 1. A compendium pack and entry id\n   * 2. A World Entity _id\n   * 3. A data object explicitly provided\n   *\n   * @param data - The data object extracted from a DataTransfer event\n   */\n  static fromDropData<\n    T extends Entity,\n    U extends { data: DeepPartial<T[\'_data\']> } | { pack: string } | { id: string }\n  >(\n    this: ConstructorOf<T>,\n    data: U\n  ): U extends { data: DeepPartial<T[\'_data\']> }\n    ? Promise<T>\n    : U extends { id: string }\n    ? Promise<T | null>\n    : Promise<T | undefined | null>;\n\n  /**\n   * Import data and update this entity\n   * @param json - JSON data string\n   */\n  importFromJSON(json: string): Promise<this>;\n\n  /**\n   * Render an import dialog for updating the data related to this Entity through an exported JSON file\n   */\n  importFromJSONDialog(): Promise<void>;\n\n  /**\n   * Transform the Entity data to be stored in a Compendium pack.\n   * Remove any features of the data which are world- specific.\n   * This function is asynchronous in case any complex operations are required prior to exporting.\n   */\n  toCompendium(): Promise<Omit<foundry.utils.Duplicated<D>, \'_id\' | \'permission\' | \'folder\' | \'sort\' | \'active\'>>;\n\n  /**\n   * Provide a Dialog form to create a new Entity of this type.\n   * Choose a name and a type from a select menu of types.\n   * @param data - Initial data with which to populate the creation form\n   * @param options - Initial positioning and sizing options for the dialog form\n   */\n  static createDialog(\n    data?: { name?: string; folder?: string; type?: string },\n    options?: Partial<Dialog.Options>\n  ): Promise<Entity>;\n}\n\ndeclare namespace Entity {\n  /**\n   * Common {@link Entity} create options\n   */\n  interface CreateOptions {\n    [propName: string]: any;\n\n    /**\n     * A reference to the Compendium pack from which this Entity was drawn.\n     */\n    compendium?: Compendium;\n\n    /**\n     * Block the dispatch of preCreate hooks for this operation.\n     * @defaultValue `false`\n     */\n    noHook?: boolean;\n\n    /**\n     * Display the sheet for the created entity once it is created.\n     * @defaultValue `false`\n     */\n    renderSheet?: boolean;\n\n    /**\n     * Create a temporary entity which is not saved to the world database.\n     * @defaultValue `false`\n     */\n    temporary?: boolean;\n  }\n\n  /**\n   * Common {@link Entity} delete options\n   */\n  interface DeleteOptions {\n    [propName: string]: any;\n\n    /**\n     * Block the dispatch of preDelete hooks for this operation.\n     * @defaultValue `false`\n     */\n    noHook?: boolean;\n  }\n\n  /**\n   * Common {@link Entity} update options\n   */\n  interface UpdateOptions {\n    [propName: string]: any;\n\n    /**\n     * Difference the provided data against the current to eliminate unnecessary\n     * changes.\n     * @defaultValue `true`\n     */\n    diff?: boolean;\n\n    /**\n     * Block the dispatch of preUpdate hooks for this operation.\n     * @defaultValue `false`\n     */\n    noHook?: boolean;\n  }\n\n  interface Config<E extends Entity = Entity> {\n    baseEntity: ConstructorOf<E>;\n    embeddedEntities?: {\n      [embedType: string]: string;\n    };\n    label?: string;\n    permissions?: {\n      [propName: string]: string;\n    };\n  }\n\n  interface Permission {\n    [userId: string]: number;\n    default: number;\n  }\n\n  /**\n   * Data structure common to all entities\n   */\n  interface Data {\n    /**\n     * The id assigned by the database\n     */\n    _id: string;\n\n    /**\n     * Flags for arbitrary data from modules &c.\n     */\n    flags: Record<string, unknown>;\n\n    folder?: string;\n\n    name?: string;\n\n    permission?: Permission;\n\n    type?: any;\n  }\n\n  interface RenderOptions extends Application.RenderOptions {\n    data: {\n      permission: unknown;\n    };\n  }\n}\n']},45848:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\features.d.ts",""]},87341:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\fonts.d.ts","/**\n * A configuration of font families which are initialized when the page loads\n */\ndeclare const FONTS: {\n  FontAwesome: {\n    custom: {\n      families: ['FontAwesome'];\n      urls: ['fonts/fontawesome/css/all.min.css'];\n    };\n  };\n  Signika: {\n    custom: {\n      families: ['Signika'];\n      urls: ['fonts/signika/signika.css'];\n    };\n  };\n  _loaded: [];\n};\n\n/**\n * Load font, and perform a callback once the font has been rendered\n * @deprecated since 0.6.4, to be removed in 0.8.x\n */\ndeclare function loadFont(fontName: string, callback: () => void): void;\n"]},55461:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\formDataExtended.d.ts","/**\n * An extension of the native FormData implementation.\n *\n * This class functions the same way that the default FormData does, but it is more opinionated about how\n * input fields of certain types should be evaluated and handled.\n *\n * It also adds support for certain Foundry VTT specific concepts including:\n *  Support for defined data types and type conversion\n *  Support for TinyMCE editors\n *  Support for editable HTML elements\n */\ndeclare class FormDataExtended extends FormData {\n  /**\n   * @param form    - The form being processed\n   * @param editors - A record of TinyMCE editor metadata objects, indexed by their update key\n   *                  (default: `{}`)\n   * @param dtypes  - A mapping of data types for form fields\n   *                  (default: `{}`)\n   */\n  constructor(\n    form: HTMLFormElement,\n    { editors, dtypes }: { editors?: FormDataExtended['editors']; dtypes?: FormDataExtended['dtypes'] }\n  );\n\n  /**\n   * A mapping of data types requested for each form field\n   * @defaultValue `{}`\n   */\n  dtypes: Partial<Record<string, string>>;\n\n  /**\n   * A record of TinyMCE editors which are linked to this form\n   * @defaultValue `{}`\n   */\n  editors: Partial<Record<string, FormApplication.FormApplicationEditor>>;\n\n  /**\n   * Process the HTML form element to populate the FormData instance.\n   * @param form - The HTML form\n   */\n  process(form: HTMLFormElement): void;\n\n  /**\n   * Export the FormData as an object\n   */\n  toObject(): Record<string, unknown>;\n}\n"]},62250:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\game.d.ts","import { ConfiguredDocumentClass, ConfiguredDocumentClassForName, DocumentConstructor } from '../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The core Game instance which encapsulates the data, settings, and states relevant for managing the game experience.\n   * The singleton instance of the Game class is available as the global variable game.\n   */\n  class Game {\n    /**\n     * @param view      - The named view which is active for this game instance.\n     * @param data      - An object of all the World data vended by the server when the client first connects\n     * @param sessionId - The ID of the currently active client session retrieved from the browser cookie\n     * @param socket    - The open web-socket which should be used to transact game-state data\n     */\n    constructor(view: Game['view'], data: Game.ConstructorData, sessionId: Game['sessionId'], socket: Game['socket']);\n\n    /**\n     * The named view which is currently active.\n     * Game views include: join, setup, players, license, game, stream\n     */\n    view: Game.View;\n\n    /**\n     * The object of world data passed from the server\n     */\n    data: Game.Data;\n\n    /**\n     * The id of the active World user, if any\n     */\n    userId: string | null;\n\n    /**\n     * The game World which is currently active\n     */\n    world: this['data']['world'];\n\n    /**\n     * The System which is used to power this game world\n     */\n    system: this['data']['system'];\n\n    /**\n     * A Map of active modules which are currently enabled in this World\n     * @remarks\n     * - This is actually defined twice. The second time it has the documentation \"A mapping of installed modules\".\n     * - This includes _all_ modules that are installed, not only those that are enabled.\n     */\n    modules: Map<string, this['data']['modules'][number]>;\n\n    /**\n     * A mapping of WorldCollection instances, one per primary Document type.\n     */\n    collections: foundry.utils.Collection<WorldCollection<DocumentConstructor, string>>;\n\n    /**\n     * A mapping of CompendiumCollection instances, one per Compendium pack.\n     */\n    packs: foundry.utils.Collection<CompendiumCollection<CompendiumCollection.Metadata>>;\n\n    /**\n     * Localization support\n     */\n    i18n: Localization;\n\n    /**\n     * The Keyboard Manager\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     * @defaultValue `null`\n     */\n    keyboard: KeyboardManager | null;\n\n    /**\n     * The user role permissions setting\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     * @defaultValue `null`\n     */\n    permissions: Game.Permissions | null;\n\n    /**\n     * The client session id which is currently active\n     */\n    sessionId: string;\n\n    /**\n     * Client settings which are used to configure application behavior\n     */\n    settings: ClientSettings;\n\n    /**\n     * A reference to the open Socket.io connection\n     */\n    socket: io.Socket | null;\n\n    /**\n     * A singleton GameTime instance which manages the progression of time within the game world.\n     */\n    time: GameTime;\n\n    /**\n     * A singleton reference to the Canvas object which may be used.\n     */\n    canvas: Canvas;\n\n    /**\n     * A singleton instance of the Audio Helper class\n     */\n    audio: AudioHelper;\n\n    /**\n     * A singleton instance of the Video Helper class\n     */\n    video: VideoHelper;\n\n    /**\n     * Whether the Game is running in debug mode\n     * @defaultValue `false`\n     */\n    debug: boolean;\n\n    /**\n     * A flag for whether texture assets for the game canvas are currently loading\n     * @defaultValue `false`\n     */\n    loading: boolean;\n\n    /**\n     * A flag for whether the Game has successfully reached the \"ready\" hook\n     * @defaultValue `false`\n     */\n    ready: boolean;\n\n    /**\n     * Fetch World data and return a Game instance\n     * @param view      - The named view being created\n     * @param sessionId - The current sessionId of the connecting client\n     * @returns A Promise which resolves to the created Game instance\n     */\n    static create(view: string, sessionId: string | null): Promise<Game>;\n\n    /**\n     * Establish a live connection to the game server through the socket.io URL\n     * @param sessionId - The client session ID with which to establish the connection\n     * @returns A promise which resolves to the connected socket, if successful\n     */\n    static connect(sessionId: string): Promise<io.Socket>;\n\n    /**\n     * Retrieve the cookies which are attached to the client session\n     * @returns The session cookies\n     */\n    static getCookies(): Record<string, string>;\n\n    /**\n     * Request World data from server and return it\n     */\n    static getWorldData(socket: io.Socket): Promise<Game.Data>;\n\n    /**\n     * Get the current World status upon initial connection.\n     */\n    static getWorldStatus(socket: io.Socket): Promise<boolean>;\n\n    /**\n     * Configure package data that is currently enabled for this world\n     */\n    setupPackages(data: Game.Data): void;\n\n    /**\n     * Return the named scopes which can exist for packages.\n     * Scopes are returned in the prioritization order that their content is loaded.\n     * @returns An array of string package scopes\n     */\n    getPackageScopes(): string[];\n\n    /**\n     * Initialize the Game for the current window location\n     */\n    initialize(): void;\n\n    /**\n     * Display certain usability error messages which are likely to result in the player having a bad experience.\n     */\n    protected _displayUsabilityErrors(): void;\n\n    /**\n     * Shut down the currently active Game. Requires GameMaster user permission.\n     * @returns A Promise which resolves to the response object from the server\n     * @remarks The documentation is a lie, it returns `Promise<void>`, see https://gitlab.com/foundrynet/foundryvtt/-/issues/5573\n     */\n    shutDown(): Promise<void>;\n\n    /**\n     * Fully set up the game state, initializing Entities, UI applications, and the Canvas\n     */\n    setupGame(): Promise<void>;\n\n    /**\n     * Initialize game state data by creating WorldCollection instances for every primary Document type\n     */\n    initializeEntities(): void;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    users?: ConfiguredCollectionClassForName<'User'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    folders?: ConfiguredCollectionClassForName<'Folder'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    actors?: ConfiguredCollectionClassForName<'Actor'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    items?: ConfiguredCollectionClassForName<'Item'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    scenes?: ConfiguredCollectionClassForName<'Scene'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    combats?: ConfiguredCollectionClassForName<'Combat'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    journal?: ConfiguredCollectionClassForName<'JournalEntry'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    macros?: ConfiguredCollectionClassForName<'Macro'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    playlists?: ConfiguredCollectionClassForName<'Playlist'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    tables?: ConfiguredCollectionClassForName<'RollTable'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    messages?: ConfiguredCollectionClassForName<'ChatMessage'>;\n\n    /**\n     * Initialize the Compendium packs which are present within this Game\n     * Create a Collection which maps each Compendium pack using it's collection ID\n     */\n    initializePacks(): Promise<this['packs']>;\n\n    /**\n     * Initialize the WebRTC implementation\n     */\n    initializeRTC(): Promise<boolean>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    webrtc?: AVMaster;\n\n    /**\n     * Initialize core UI elements\n     */\n    initializeUI(): void;\n\n    /**\n     * Initialize the game Canvas\n     */\n    initializeCanvas(): Promise<void>;\n\n    /**\n     * Ensure that necessary fonts have loaded and are ready for use\n     * Enforce a maximum timeout in milliseconds.\n     * Proceed with rendering after that point even if fonts are not yet available.\n     * @param ms - The timeout to delay\n     */\n    protected _checkFontsReady(ms: number): Promise<void>;\n\n    /**\n     * Initialize Keyboard and Mouse controls\n     */\n    initializeKeyboard(): void;\n\n    /**\n     * Register core game settings\n     */\n    registerSettings(): void;\n\n    /**\n     * Is the current session user authenticated as an application administrator?\n     */\n    get isAdmin(): boolean;\n\n    /**\n     * The currently connected User entity, or null if Users is not yet initialized\n     */\n    get user(): InstanceType<ConfiguredDocumentClass<typeof User>> | null;\n\n    /**\n     * A convenience accessor for the currently viewed Combat encounter\n     */\n    get combat(): CombatEncounters['viewed'];\n\n    /**\n     * A state variable which tracks whether or not the game session is currently paused\n     */\n    get paused(): boolean;\n\n    /**\n     * A convenient reference to the currently active canvas tool\n     */\n    get activeTool(): string;\n\n    /**\n     * Toggle the pause state of the game\n     * Trigger the `pauseGame` Hook when the paused state changes\n     * @param pause - The desired pause state. When true, the game will be paused, when false the game will be un-paused.\n     * @param push  - Push the pause state change to other connected clients? Requires an GM user.\n     *                (default: `false`)\n     */\n    togglePause(pause: boolean, push?: boolean): void;\n\n    /**\n     * Log out of the game session by returning to the Join screen\n     */\n    logOut(): void;\n\n    /**\n     * Activate Socket event listeners which are used to transact game state data with the server\n     */\n    activateSocketListeners(): void;\n\n    /**\n     * Activate Event Listeners which apply to every Game View\n     */\n    activateListeners(): void;\n\n    /**\n     * Support mousewheel control for range type input elements\n     * @param event - A Mouse Wheel scroll event\n     */\n    protected static _handleMouseWheelInputChange(event: WheelEvent): void;\n\n    /**\n     * On left mouse clicks, check if the element is contained in a valid hyperlink and open it in a new tab.\n     */\n    protected _onClickHyperlink(event: MouseEvent): void;\n\n    /**\n     * Prevent starting a drag and drop workflow on elements within the document unless the element has the draggable\n     * attribute explicitly defined or overrides the dragstart handler.\n     * @param event - The initiating drag start event\n     */\n    protected _onPreventDragstart(event: DragEvent): boolean;\n\n    /**\n     * Disallow dragging of external content onto anything but a file input element\n     * @param event - The requested drag event\n     */\n    protected _onPreventDragover(event: DragEvent): void;\n\n    /**\n     * Disallow dropping of external content onto anything but a file input element\n     * @param event - The requested drag event\n     */\n    protected _onPreventDrop(event: DragEvent): void;\n\n    /**\n     * On a left-click event, remove any currently displayed inline roll tooltip\n     * @param event - The mousedown pointer event\n     */\n    protected _onPointerDown(event: PointerEvent): void;\n\n    /**\n     * Fallback handling for mouse-up events which aren't handled further upstream.\n     * @param event - The mouseup pointer event\n     */\n    protected _onPointerUp(event: PointerEvent): void;\n\n    /**\n     * Handle resizing of the game window\n     * Reposition any active UI windows\n     */\n    protected _onWindowResize(event: UIEvent): void;\n\n    /**\n     * Handle window unload operations to clean up any data which may be pending a final save\n     * @param event - The window unload event which is about to occur\n     */\n    protected _onWindowBeforeUnload(event: Event): Promise<void>;\n\n    /**\n     * Handle cases where the browser window loses focus to reset detection of currently pressed keys\n     * @param event - The originating window.blur event\n     */\n    protected _onWindowBlur(event: FocusEvent): void;\n\n    /**\n     * @param event - (unused)\n     */\n    protected _onWindowPopState(event: PopStateEvent): void;\n\n    /**\n     * Initialize elements required for the current view\n     */\n    protected _initializeView(): Promise<void>;\n\n    /**\n     * Initialization steps for the primary Game view\n     */\n    protected _initializeGameView(): Promise<void>;\n\n    /**\n     * Initialization steps for the Stream helper view\n     */\n    protected _initializeStreamView(): Promise<void>;\n  }\n\n  namespace Game {\n    interface Language {\n      lang: string;\n      name: string;\n      path: string;\n    }\n\n    interface PackageData<T> {\n      type: 'world' | 'system' | 'module';\n      data: T;\n      id: string;\n      path: string;\n      scripts: string[];\n      esmodules: string[];\n      styles: string[];\n      languages: Language[];\n      packs: {\n        name: string;\n        label: string;\n        path: string;\n        private: boolean;\n        entity: foundry.CONST.CompendiumEntityType;\n        system?: string;\n        absPath: string;\n        package: string;\n      };\n      locked: boolean;\n      availability: number;\n      unavailable: boolean;\n      _systemUpdateCheckTime: number;\n    }\n\n    interface WorldData<T> extends PackageData<T> {\n      type: 'world';\n    }\n\n    interface SystemData<T> extends PackageData<T> {\n      type: 'system';\n      template: {\n        Actor?: {\n          types: string[];\n          templates?: Partial<Record<string, unknown>>;\n        } & Partial<Record<string, unknown>>;\n        Item?: {\n          types: string[];\n          templates?: Partial<Record<string, unknown>>;\n        } & Partial<Record<string, unknown>>;\n      };\n      entityTypes: { [Key in foundry.CONST.EntityType | 'Setting' | 'FogExploration']: string[] };\n      model: {\n        Actor: Partial<Record<string, Partial<Record<string, unknown>>>>;\n        Item: Partial<Record<string, Partial<Record<string, unknown>>>>;\n      };\n    }\n\n    interface ModuleData<T> extends PackageData<T> {\n      type: 'module';\n      active: boolean;\n    }\n\n    type Data = {\n      userId: string;\n      version: string;\n      world: WorldData<foundry.packages.WorldData>;\n      system: SystemData<foundry.packages.SystemData>;\n      modules: ModuleData<foundry.packages.ModuleData>[];\n      paused: boolean;\n      addresses: {\n        local: string;\n        remote: string;\n      };\n      files: {\n        storages: ('public' | 'data' | 's3')[];\n        s3?: {\n          endpoint: {\n            protocol: string;\n            host: string;\n            port: number;\n            hostname: string;\n            pathname: string;\n            path: string;\n            href: string;\n          };\n          buckets: string[];\n        };\n      };\n      options: {\n        language: string;\n        port: number;\n        routePrefix: string | null;\n        updateChannel: string;\n        demo: boolean;\n      };\n      activeUsers: string[];\n      packs: {\n        name: string;\n        label: string;\n        path: string;\n        private: boolean;\n        entity: foundry.CONST.CompendiumEntityType;\n        system?: string;\n        package: string;\n        index: { name: string; type: string; _id: string }[];\n      };\n      coreUpdate: string | null;\n      systemUpdate: string | null;\n    } & {\n      [DocumentType in\n        | foundry.CONST.EntityType\n        | 'Setting' as ConfiguredDocumentClassForName<DocumentType>['metadata']['collection']]?: InstanceType<\n        ConfiguredDocumentClassForName<DocumentType>\n      >['data']['_source'][];\n    };\n\n    type ConstructorData = Omit<Data, 'world' | 'system' | 'modules'> & {\n      world: WorldData<foundry.packages.WorldData['_source']>;\n      system: SystemData<foundry.packages.SystemData['_source']>;\n      modules: ModuleData<foundry.packages.ModuleData['_source']>[];\n    };\n\n    type Permissions = {\n      [Key in keyof typeof foundry.CONST.USER_PERMISSIONS]: foundry.CONST.UserRole[];\n    };\n\n    type View = ValueOf<typeof foundry.CONST.GAME_VIEWS>;\n  }\n}\n\ntype ConfiguredCollectionClassForName<Name extends foundry.CONST.EntityType> = InstanceType<CONFIG[Name]['collection']>;\n"]},60200:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\gameTime.d.ts","/**\n * A singleton class {@link game#time} which keeps the official Server and World time stamps.\n * Uses a basic implementation of https://www.geeksforgeeks.org/cristians-algorithm/ for synchronization.\n */\ndeclare class GameTime {\n  constructor(socket: io.Socket);\n\n  /**\n   * The most recently synchronized timestamps retrieved from the server.\n   * @defaultValue `{}`\n   */\n  protected _time: GameTime.Timestamps;\n\n  /**\n   * The average one-way latency across the most recent 5 trips\n   * @defaultValue `0`\n   */\n  protected _dt: number;\n\n  /**\n   * The most recent five synchronization durations\n   * @defaultValue `[]`\n   */\n  protected _dts: number[];\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * The current server time based on the last synchronization point and the approximated one-way latency.\n   */\n  get serverTime(): number;\n\n  /* -------------------------------------------- */\n\n  /**\n   * The current World time based on the last recorded value of the core.time setting\n   */\n  get worldTime(): number;\n\n  /* -------------------------------------------- */\n  /*  Methods                                     */\n  /* -------------------------------------------- */\n\n  /**\n   * Advance the game time by a certain number of seconds\n   * @param seconds - The number of seconds to advance (or rewind if negative) by\n   * @returns The new game time\n   */\n  advance(seconds: number): Promise<number>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Synchronize the local client game time with the official time kept by the server\n   */\n  sync(socket: io.Socket): Promise<GameTime>;\n\n  /* -------------------------------------------- */\n  /*  Event Handlers and Callbacks                */\n  /* -------------------------------------------- */\n\n  /**\n   * Handle follow-up actions when the official World time is changed\n   * @param worldTime - The new canonical World time.\n   */\n  onUpdateWorldTime(worldTime: number): void;\n\n  /**\n   * The amount of time to delay before re-syncing the official server time.\n   * @defaultValue `1000 * 60 * 5`\n   */\n  static SYNC_INTERVAL_MS: number;\n}\n\ndeclare namespace GameTime {\n  interface Timestamps {\n    clientTime: number;\n    serverTime: number;\n    worldTime: number;\n  }\n}\n"]},31382:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\globalVariables.d.ts","declare global {\n  /**\n   * Some global variables (such as {@link game}) are only initialized after certain events have happened during the\n   * initialization of Foundry VTT. For that reason, the correct types for these variables include the types for the\n   * uninitialized state.\n   *\n   * While this is correct from a type checking perspective, it can be inconvenient to have to type guard these global\n   * variables everywhere. Some users might prefer the convenience over the 100% correctness in type checking.\n   *\n   * For this reason, this interface provides a way for users to configure certain global variables to be typed more\n   * leniently, i.e., as the types of their initialized state. This is done via declaration merging. To configure a\n   * specific global variable to be typed leniently, the user simply needs to merge a property with the name of the\n   * variable into this interface (the type doesn't matter).\n   *\n   * The currently supported variables are:\n   * - {@link game}\n   * - {@link socket}\n   * - {@link canvas}\n   *\n   * @example\n   * ```typescript\n   * declare global {\n   *   interface LenientGlobalVariableTypes {\n   *     game: never; // the type doesn't matter\n   *   }\n   * }\n   *\n   * const referenceToGame: Game = game; // ok! :)\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface LenientGlobalVariableTypes {}\n\n  let vtt: 'Foundry VTT';\n\n  /**\n   * @defaultValue `{}`\n   * @remarks\n   * Initialized between the `'DOMContentLoaded'` event and the `'init'` hook event.\n   */\n  let game: 'game' extends keyof LenientGlobalVariableTypes ? Game : Game | {};\n\n  /**\n   * @defaultValue `null`\n   * @remarks\n   * Initialized between the `'DOMContentLoaded'` event and the `'init'` hook event.\n   */\n  let socket: 'socket' extends keyof LenientGlobalVariableTypes ? io.Socket : io.Socket | null;\n\n  /**\n   * A collection of application instances\n   * @remarks\n   * - All of the elements of {@link ui} except for `context` and `window` are initialized between the `'setup'` and `'ready'` hook events.\n   * - In the `/stream` view, only `chat` is initialized but none of the other {@link Application}s.\n   */\n  let ui: {\n    /**\n     * @remarks\n     * Initialized whenever a {@link ContextMenu} is opened, deleted when it's closed again.\n     */\n    context?: ContextMenu;\n\n    /**\n     * @defaultValue `{}`\n     */\n    windows: Record<number, Application>;\n  } & {\n    [Key in keyof CONFIG['ui']]?: InstanceType<CONFIG['ui'][Key]>;\n  };\n\n  /** The client-side console is the default logger  */\n  let logger: typeof console;\n\n  /**\n   * @deprecated since 0.8.0\n   * You are referencing the FEATURES object which has been deprecated as it is no longer an agreed-upon method for how to track evolution of the Foundry Virtual Tabletop API. Discussion about alternate approaches is actively ongoing within the League of Developers community. For the time being the recommendation is to test against game.data.version to understand the current Foundry VTT version which is active. The FEATURES object will be removed in 0.9.0.\n   */\n  let FEATURES: {\n    readonly ACTIVE_EFFECTS: 2;\n    readonly ACTORS: 3;\n    readonly AUDIO_VIDEO: 2;\n    readonly CHAT: 3;\n    readonly COMBAT: 3;\n    readonly COMPENDIUM: 3;\n    readonly DICE: 2;\n    readonly DRAWINGS: 3;\n    readonly ENTITIES: 5;\n    readonly GRID: 2;\n    readonly ITEMS: 3;\n    readonly JOURNAL: 2;\n    readonly LIGHTING: 3;\n    readonly LOCALIZATION: 2;\n    readonly MACROS: 2;\n    readonly NOTES: 2;\n    readonly PLAYLISTS: 2;\n    readonly ROLL_TABLES: 2;\n    readonly SETTINGS: 3;\n    readonly SOUND: 2;\n    readonly TEMPLATES: 2;\n    readonly TILES: 3;\n    readonly TOKENS: 4;\n    readonly WALLS: 3;\n  };\n\n  /**\n   * @defaultValue `undefined`\n   * Initialized between the `'DOMContentLoaded'` event and the `'init'` hook event.\n   */\n  let canvas: 'canvas' extends keyof LenientGlobalVariableTypes ? Canvas : Canvas | undefined;\n\n  /**\n   * A \"secret\" global to help debug attributes of the currently controlled Token.\n   * This is only for debugging, and may be removed in the future, so it's not safe to use.\n   */\n  let _token: InstanceType<CONFIG['Token']['objectClass']> | null;\n}\n\nexport {};\n"]},823:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\handlebarsHelpers.d.ts",'/* -------------------------------------------- */\n/*  Handlebars Template Helpers                 */\n/* -------------------------------------------- */\n\n/**\n * A collection of Handlebars template helpers which can be used within HTML templates.\n */\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\ndeclare class HandlebarsHelpers {\n  /**\n   * For checkboxes, if the value of the checkbox is true, add the "checked" property, otherwise add nothing.\n   */\n  static checked(value: any): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Construct an editor element for rich text editing with TinyMCE\n   */\n  static editor(options: HandlebarsHelpers.EditorOptions): Handlebars.SafeString;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Render a file-picker button linked to an <input> field\n   */\n  static filePicker(options: object): Handlebars.SafeString | string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Translate a provided string key by using the loaded dictionary of localization strings.\n   *\n   * @example <caption>Translate a provided localization string, optionally including formatting parameters</caption>\n   * ```handlebars\n   * <label>{{localize "ACTOR.Create"}}</label> \x3c!-- "Create Actor" --\x3e\n   * <label>{{localize "CHAT.InvalidCommand", command=foo}}</label> \x3c!-- "foo is not a valid chat message command." --\x3e\n   * ```\n   */\n  static localize(value: string, options: Record<string, any>): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A string formatting helper to display a number with a certain fixed number of decimals and an explicit sign.\n   */\n  static numberFormat(value: any, options: HandlebarsHelpers.NumberFormatOptions): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A helper to create a set of radio checkbox input elements in a named set.\n   * The provided keys are the possible radio values while the provided values are human readable labels.\n   *\n   * @param name     - The radio checkbox field name\n   * @param choices  - A mapping of radio checkbox values to human readable labels\n   * @param checked  - Which key is currently checked?\n   * @param localize - Pass each label through string localization?\n   *\n   * @example <caption>The provided input data</caption>\n   * ```typescript\n   * let groupName = "importantChoice";\n   * let choices = {a: "Choice A", b: "Choice B"};\n   * let chosen = "a";\n   * ```\n   *\n   * @example <caption>The template HTML structure</caption>\n   * ```handlebars\n   * <div class="form-group">\n   *   <label>Radio Group Label</label>\n   *   <div class="form-fields">\n   *     {{radioBoxes groupName choices checked=chosen localize=true}}\n   *   </div>\n   * </div>\n   * ```\n   */\n  static radioBoxes(\n    name: string,\n    choices: Record<string, string>,\n    options: HandlebarsHelpers.RadioBoxesOptions\n  ): Handlebars.SafeString;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A helper to assign an <option> within a <select> block as selected based on its value\n   * Escape the string as handlebars would, then escape any regexp characters in it\n   */\n  static select(selected: string, { fn }: { fn: Handlebars.TemplateDelegate }): Handlebars.SafeString;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A helper to create a set of <option> elements in a <select> block based on a provided dictionary.\n   * The provided keys are the option values while the provided values are human readable labels.\n   * This helper supports both single-select as well as multi-select input fields.\n   *\n   * @param choices  - A mapping of radio checkbox values to human readable labels\n   * @param selected - Which key or array of keys that are currently selected?\n   * @param localize - Pass each label through string localization?\n   *\n   * @example <caption>The provided input data</caption>\n   * ```typescript\n   * let choices = {a: "Choice A", b: "Choice B"};\n   * let value = "a";\n   * ```\n   *\n   * @example <caption>The template HTML structure</caption>\n   * ```handlebars\n   * <select name="importantChoice">\n   *   {{selectOptions choices selected=value localize=true}}\n   * </select>\n   * ```\n   */\n  static selectOptions(\n    choices: Record<string, string>,\n    options: HandlebarsHelpers.SelectOptionsOptions\n  ): Handlebars.SafeString;\n}\n\ndeclare namespace HandlebarsHelpers {\n  interface EditorOptions {\n    hash: {\n      button?: boolean;\n\n      /**\n       * @defaultValue `\'\'`\n       */\n      content?: string;\n\n      editable?: boolean;\n\n      owner?: boolean;\n\n      target: string;\n    };\n  }\n\n  interface NumberFormatOptions {\n    hash: {\n      /**\n       * @defaultValue `0`\n       */\n      decimals?: number;\n\n      /**\n       * @defaultValue `false`\n       */\n      sign?: boolean;\n    };\n  }\n\n  interface RadioBoxesOptions {\n    hash: {\n      /**\n       * @defaultValue `null`\n       */\n      checked?: string;\n\n      /**\n       * @defaultValue `false`\n       */\n      localize?: boolean;\n    };\n  }\n\n  interface SelectOptionsOptions {\n    hash: {\n      /**\n       * @defaultValue `null`\n       */\n      blank?: string;\n\n      /**\n       * @defaultValue `false`\n       */\n      localize?: boolean;\n\n      /**\n       * @defaultValue `null`\n       */\n      selected?: string | string[];\n    };\n  }\n}\n']},36757:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\hooks.d.ts","import {\n  ConfiguredDocumentClass,\n  ConfiguredObjectClassForName,\n  DocumentConstructor,\n  ToObjectFalseType\n} from '../../types/helperTypes.js';\nimport { DocumentModificationOptions } from '../common/abstract/document.mjs.js';\nimport { EffectChangeData } from '../common/data/data.mjs/effectChangeData.js';\n\ndeclare global {\n  /**\n   * A simple event framework used throughout Foundry Virtual Tabletop.\n   * When key actions or events occur, a \"hook\" is defined where user-defined callback functions can execute.\n   * This class manages the registration and execution of hooked callback functions.\n   */\n  class Hooks {\n    /**\n     * Register a callback handler which should be triggered when a hook is triggered.\n     *\n     * @param hook - The unique name of the hooked event\n     * @param fn   - The callback function which should be triggered when the hook event occurs\n     * @returns An ID number of the hooked function which can be used to turn off the hook later\n     */\n    static on<K extends keyof Hooks.StaticCallbacks>(hook: K, fn: Hooks.StaticCallbacks[K]): number;\n    static on<H extends Hooks.DynamicCallbacks>(hook: string, fn: H): number;\n    static on<H extends (...args: any) => any>(hook: string, fn: H): number;\n\n    /**\n     * Register a callback handler for an event which is only triggered once the first time the event occurs.\n     * After a \"once\" hook is triggered the hook is automatically removed.\n     *\n     * @param hook - The unique name of the hooked event\n     * @param fn   - The callback function which should be triggered when the hook event occurs\n     * @returns An ID number of the hooked function which can be used to turn off the hook later\n     */\n    static once<K extends keyof Hooks.StaticCallbacks>(\n      hook: K,\n      fn: Hooks.StaticCallbacks[K]\n    ): ReturnType<typeof Hooks['on']>;\n    static once<H extends Hooks.DynamicCallbacks>(hook: string, fn: H): ReturnType<typeof Hooks['on']>;\n    static once<H extends (...args: any) => any>(hook: string, fn: H): ReturnType<typeof Hooks['on']>;\n\n    /**\n     * Unregister a callback handler for a particular hook event\n     *\n     * @param hook - The unique name of the hooked event\n     * @param fn   - The function, or ID number for the function, that should be turned off\n     */\n    static off<K extends keyof Hooks.StaticCallbacks>(hook: K, fn: number | Hooks.StaticCallbacks[K]): void;\n    static off<H extends Hooks.DynamicCallbacks>(hook: string, fn: number | H): void;\n    static off<H extends (...args: any) => any>(hook: string, fn: number | H): void;\n\n    /**\n     * Call all hook listeners in the order in which they were registered\n     * Hooks called this way can not be handled by returning false and will always trigger every hook callback.\n     *\n     * @param hook - The hook being triggered\n     * @param args - Arguments passed to the hook callback functions\n     */\n    static callAll<K extends keyof Hooks.StaticCallbacks>(hook: K, ...args: Parameters<Hooks.StaticCallbacks[K]>): true;\n    static callAll<H extends Hooks.DynamicCallbacks>(hook: string, ...args: Parameters<H>): true;\n    static callAll<H extends (...args: any) => any>(hook: string, ...args: Parameters<H>): true;\n\n    /**\n     * Call hook listeners in the order in which they were registered.\n     * Continue calling hooks until either all have been called or one returns false.\n     *\n     * Hook listeners which return false denote that the original event has been adequately handled and no further\n     * hooks should be called.\n     *\n     * @param hook - The hook being triggered\n     * @param args - Arguments passed to the hook callback functions\n     */\n    static call<K extends keyof Hooks.StaticCallbacks>(hook: K, ...args: Parameters<Hooks.StaticCallbacks[K]>): boolean;\n    static call<H extends Hooks.DynamicCallbacks>(hook: string, ...args: Parameters<H>): boolean;\n    static call<H extends (...args: any) => any>(hook: string, ...args: Parameters<H>): boolean;\n\n    /**\n     * Call a hooked function using provided arguments and perhaps unregister it.\n     */\n    protected static _call<K extends keyof Hooks.StaticCallbacks>(\n      hook: K,\n      fn: Hooks.StaticCallbacks[K],\n      ...args: Parameters<Hooks.StaticCallbacks[K]>\n    ): ReturnType<Hooks.StaticCallbacks[K]> | undefined;\n    protected static _call<H extends Hooks.DynamicCallbacks>(\n      hook: string,\n      fn: H,\n      ...args: Parameters<H>\n    ): ReturnType<H> | undefined;\n    protected static _call<H extends (...args: any) => any>(\n      hook: string,\n      fn: H,\n      ...args: Parameters<H>\n    ): ReturnType<H> | undefined;\n\n    /**\n     * @defaultValue `{}`\n     */\n    protected static _hooks: Record<string, (...args: any) => any>;\n\n    /**\n     * @defaultValue `[]`\n     */\n    protected static _once: Array<(...args: any) => any>;\n\n    /**\n     * @defaultValue `{}`\n     */\n    protected static _ids: Record<number, Array<(...args: any) => any>>;\n\n    /**\n     * @defaultValue `1`\n     */\n    protected static _id: number;\n  }\n\n  /**\n   * This namespace contains typescript specific type definitions for the {@link Hooks} callback functions. It contains an\n   * interface ({@link Hooks.StaticCallbacks}) for callbacks with static names. There are more function types in the\n   * namespace for the dynamic hooks, whose names are generated at runtime. There is also a union of all of the dynamic\n   * hooks ({@link Hooks.DynamicCallbacks}).\n   *\n   * Callback types remarked to be called with {@link Hooks.callAll} do not care about the return value of the callback.\n   * Callback types remarked to be called with {@link Hooks.call} do care about the return value and will stop executing\n   * remaining callbacks if `false` is returned. If a callback type does not have such a remark, pay attention to the\n   * return value documentation.\n   *\n   * @example Using a callback type with a static name\n   * ```typescript\n   * Hooks.on('updateWorldTime', (worldTime, dt) => {\n   *   // [...]\n   * })\n   * ```\n   *\n   * @example Using a callback with a dynamic name\n   * ```typescript\n   * Hooks.on<Hooks.GetCompendiumDirectoryEntryContext>('getJournalEntryContext', (jq, entryOptions) => {\n   *   // [...]\n   * })\n   * ```\n   *\n   * @example Using a callback with a dynamic name and generic parameter\n   * ```typescript\n   * Hooks.on<Hooks.CloseApplication<FormApplication>>('closeFormApplication', (app, jq) => {\n   *   // [...]\n   * })\n   * ```\n   */\n  namespace Hooks {\n    interface StaticCallbacks {\n      /**\n       * @remarks Called when applying custom active effect changes.\n       * @param actor  - the Actor to whom this effect should be applied\n       * @param change - the change data being applied\n       * @remarks This is called by {@link Hooks.call}.\n       * @see {@link ActiveEffect#_applyCustom}\n       */\n      applyActiveEffect: (\n        actor: InstanceType<ConfiguredDocumentClass<typeof Actor>>,\n        change: EffectChangeData\n      ) => boolean | void;\n\n      /**\n       * @remarks This is called before a {@link Canvas} is drawn.\n       * @param canvas - the Canvas\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link Canvas#draw}\n       */\n      canvasInit: (canvas: Canvas) => unknown;\n\n      /**\n       * @remarks This is called when a {@link Canvas} is panned. When called during animated panning, the callback is\n       * called on every tick.\n       * @param canvas - the Canvas\n       * @param view   - the CanvasView\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link Canvas#pan}\n       * @see {@link Canvas#animatePan}\n       */\n      canvasPan: (canvas: Canvas, view: Canvas.View) => unknown;\n\n      /**\n       * @remarks This is called after a {@link Canvas} is done initializing.\n       * @param canvas - the Canvas\n       * @remarks This is called by {@link Hooks.call}.\n       * @see {@link Canvas#draw}\n       */\n      canvasReady: (canvas: Canvas) => boolean | void;\n\n      /**\n       * A hook event that fires when the Sidebar tab is changed.\n       * @param app - The SidebarTab application which is now active\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link Sidebar#_onChangeTab}\n       */\n      changeSidebarTab: (app: SidebarTab) => unknown;\n\n      /**\n       * @remarks This is called when creating a {@link ChatBubble}, but before displaying it.\n       * @param token   - the speaking token\n       * @param jq      - the JQuery for the chat bubble\n       * @param message - the spoken message text\n       * @param options - additional options\n       * @param emote   - whether to style the speech bubble as an emote\n       * @remarks This is called by {@link Hooks.call}.\n       * @remarks An explicit return value of `false` prevents the chat bubble being shown.\n       * @see {@link ChatBubbles#say}\n       */\n      chatBubble: (\n        token: Token,\n        html: JQuery,\n        message: string,\n        options: {\n          emote: boolean;\n        }\n      ) => boolean | void;\n\n      /**\n       * @remarks This is called first when processing a chat message.\n       * @param chatLog  - the ChatLog\n       * @param message  - the original string of the message content\n       * @param chatData - the ChatData\n       * @remarks This is called by {@link Hooks.call}.\n       * @remarks An explicit return value of `false` prevents the chat message from being created.\n       * @see {@link ChatLog#processMessage}\n       */\n      chatMessage: (\n        chatLog: ChatLog,\n        message: string,\n        chatData: { user: string; speaker: ReturnType<ConfiguredDocumentClass<typeof ChatMessage>['getSpeaker']> }\n      ) => boolean | void;\n\n      /**\n       * @remarks This is called after the {@link SceneNavigation} is expanded or collapsed.\n       * @param nav       - the SceneNavigation\n       * @param collapsed - whether the navigation is collapsed\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link SceneNavigation#expand}\n       * @see {@link SceneNavigation#collapse}\n       */\n      collapseSceneNavigation: (nav: SceneNavigation, collapsed: boolean) => unknown;\n\n      /**\n       * @remarks This is called when expanding or collapsing a {@link Sidebar}.\n       * @param sidebar   - the Sidebar\n       * @param collapsed - whether the Sidebar is collapsed\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link Sidebar#expand}\n       * @see {@link Sidebar#collapse}\n       */\n      collapseSidebar: (sidebar: Sidebar, collapsed: boolean) => unknown;\n\n      /**\n       * @remarks This is called during the drop portion of a drag-and-drop event on an actor sheet.\n       * @param actor - the Actor the sheet belongs to\n       * @param sheet - the ActorSheet, the data was dropped on\n       * @param data  - the dropped data, already parsed as an object via JSON\n       * @remarks This is called by {@link Hooks.call}.\n       * @remarks An explicit return value of `false` prevents the Document being created.\n       * @see {@link ActorSheet#_onDrop}\n       */\n      dropActorSheetData: (\n        actor: InstanceType<ConfiguredDocumentClass<typeof Actor>>,\n        sheet: ActorSheet,\n        data: ActorSheet.DropData\n      ) => boolean | void;\n\n      /**\n       * @remarks This is called during the drop portion of a drag-and-drop event on a canvas.\n       * @param canvas - the Canvas the data has been dropped on\n       * @param data   - the dropped data, already parsed as an object via JSON\n       * @remarks This is called by {@link Hooks.call}.\n       * @remarks An explicit return value of `false` prevents the Document being created.\n       * @see {@link Canvas#_onDrop}\n       */\n      dropCanvasData: (\n        canvas: Canvas,\n        data: TokenLayer.DropData | NotesLayer.DropData | MapLayer.DropData\n      ) => boolean | void;\n\n      /**\n       * @remarks This is called during the drop portion of a drag-and-drop event on a roll table.\n       * @param entity - the Document the table belongs to\n       * @param config - the RollTableConfig\n       * @param data   - the dropped data, already parsed as an object via JSON\n       * @remarks This is called by {@link Hooks.call}.\n       * @remarks An explicit return value of `false` prevents the Document being created.\n       * @see {@link RollTableConfig#_onDrop}\n       */\n      dropRollTableSheetData: (\n        rollTable: InstanceType<ConfiguredDocumentClass<typeof RollTable>>,\n        config: RollTableConfig,\n        data: object\n      ) => boolean | void;\n\n      /**\n       * @remarks This is called after the initial {@link SceneControls} have been set up.\n       * @param controls - the created controls\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link SceneControls#_getControlButtons}\n       */\n      getSceneControlButtons: (controls: SceneControl[]) => unknown;\n\n      /**\n       * @remarks This is called after getting the {@link ContextMenu} options for the {@link SceneNavigation}, but before\n       * creating the ContextMenu.\n       * @param jq             - the JQuery of the ContextMenu parent element\n       * @param contextOptions - the already created ContextMenu.Items\n       * @remarks This is called by {@link Hooks.call}.\n       * @see {@link SceneNavigation#activateListeners}\n       */\n      getSceneNavigationContext: (jq: JQuery, contextOptions: ContextMenu.Item[]) => boolean | void;\n\n      /**\n       * @remarks This is called after getting the {@link ContextMenu} options for a {@link PlayerList} user, but before\n       * creating the ContextMenu.\n       * @param jq             - the JQuery of the ContextMenu parent element\n       * @param contextOptions - the already created ContextMenu.Items\n       * @remarks This is called by {@link Hooks.call}.\n       * @see {@link PlayerList#activateListeners}\n       */\n      getUserContextOptions: (jq: JQuery, contextOptions: ContextMenu.Item[]) => boolean | void;\n\n      /**\n       * A hook event that fires whenever data is dropped into a Hotbar slot.\n       * The hook provides a reference to the Hotbar application, the dropped data, and the target slot.\n       * Default handling of the drop event can be prevented by returning false within the hooked function.\n       * @param hotbar - The Hotbar application instance\n       * @param data   - The dropped data object\n       * @param slot   - The target hotbar slot\n       * @remarks This is called by {@link Hooks.call}.\n       * @remarks An explicit return value of `false` prevents the Document being created.\n       * @see {@link Hotbar#_onDrop}\n       */\n      hotbarDrop: (hotbar: Hotbar, data: Hotbar.DropData, slot: number) => boolean | void;\n\n      /**\n       * @remarks This is called before the {@link Game} is initialized for the current window location.\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link Game#initialize}\n       */\n      init: () => unknown;\n\n      /**\n       * @remarks This is called when initializing shaders for a {@link PointSource}.\n       * @param pointSource   - the PointSource to initialize shaders for\n       * @param animationType - a key used in `CONFIG.Canvas.lightAnimations`\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link PointSource#_initializeShaders}\n       */\n      initializePointSourceShaders: (pointSource: PointSource, animationType: string | null) => unknown;\n\n      /**\n       * @remarks This is called after refreshing the {@link LightingLayer}.\n       * @param layer - the LightingLayer\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link LightingLayer#refresh}\n       */\n      lightingRefresh: (lighting: LightingLayer) => unknown;\n\n      /**\n       * @remarks This is called when the values of a {@link Token} are updated and before updating the values of the\n       * associated {@link Actor}.\n       * @param attribute  - the attribute path\n       * @param isBar      - whether the new value is part of an attribute bar, or just a direct value\n       * @param isDelta    - whether the number represents a relative change (true) or an absolute change (false)\n       * @param value      - the target attribute value\n       * @param update     - the same object data, that will be passed to {@link Actor#update}\n       * @returns whether the Actor should be updated\n       * @remarks This is called by {@link Hooks.call}.\n       * @see {@link Actor#modifyTokenAttribute}\n       * @see {@link Actor#update}\n       */\n      modifyTokenAttribute: (\n        {\n          attribute,\n          isBar,\n          isDelta,\n          value\n        }: {\n          attribute: string;\n          isBar: boolean;\n          isDelta: boolean;\n          value: number;\n        },\n        updates: Record<string, number>\n      ) => boolean;\n\n      /**\n       * A hook event that fires when the game is paused or un-paused.\n       * @param paused - Is the game now paused (true) or un-paused (false)\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link Game#togglePause}\n       */\n      pauseGame: (paused: boolean) => unknown;\n\n      /**\n       * @remarks This is called after the {@link Game} is fully set up.\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link Game#setupGame}\n       */\n      ready: () => unknown;\n\n      /**\n       * A hook event that fires for each ChatMessage which is rendered for addition to the ChatLog.\n       * This hook allows for final customization of the message HTML before it is added to the log.\n       * @param message - The ChatMessage document being rendered\n       * @param html    - The pending HTML as a jQuery object\n       * @param data    - The input data provided for template rendering\n       * @remarks This is called by {@link Hooks.call}.\n       * @see {@link ChatMessage#render}\n       */\n      renderChatMessage: (\n        message: ChatMessage,\n        html: JQuery,\n        data: {\n          message: ToObjectFalseType<InstanceType<ConfiguredDocumentClass<typeof ChatMessage>>>;\n          user: Game['user'];\n          author: InstanceType<ConfiguredDocumentClass<typeof ChatMessage>>['user'];\n          alias: InstanceType<ConfiguredDocumentClass<typeof ChatMessage>>['alias'];\n          cssClass: string;\n          isWhisper: boolean;\n          whisperTo: string;\n          borderColor?: string;\n        }\n      ) => boolean | void;\n\n      /**\n       * @remarks This is called after {@link AVSettings} are changed.\n       * @param settings - the AVSettings\n       * @param changed  - an object reflecting the changed settings\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link AVSettings#_onSettingsChanged}\n       */\n      rtcSettingsChanged: (settings: AVSettings, changed: DeepPartial<AVSettings.Settings>) => unknown;\n\n      /**\n       * @remarks This is called before the {@link Game} is fully set up.\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link Game#setupGame}\n       */\n      setup: () => unknown;\n\n      /**\n       * @remarks This is called after refreshing the {@link SightLayer}.\n       * @param layer - the SightLayer\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link SightLayer#restrictVisibility}\n       */\n      sightRefresh: (layer: SightLayer) => unknown;\n\n      /**\n       * @remarks This is called after the targeted state for a {@link Token} changed.\n       * @param user     - the User that caused the targeted state change\n       * @param token    - the Token for which the targeted state changed\n       * @param targeted - whether the Token is targeted\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link UserTargets#_hook}\n       */\n      targetToken: (\n        user: InstanceType<ConfiguredDocumentClass<typeof User>>,\n        token: ConfiguredObjectClassForName<'Token'>,\n        targeted: boolean\n      ) => unknown;\n\n      /**\n       * A hook event that fires whenever the contents of a Compendium pack were modified.\n       * This hook fires for all connected clients after the update has been processed.\n       *\n       * @param pack      - The Compendium pack being modified\n       * @param documents - The locally-cached Documents which were modified in the operation\n       * @param options   - Additional options which modified the modification request\n       * @param userId    - The ID of the User who triggered the modification workflow\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link CompendiumCollection#_onModifyContents}\n       */\n      updateCompendium: (\n        pack: CompendiumCollection<any>,\n        documents: foundry.abstract.Document<any, any>[],\n        options: DocumentModificationOptions,\n        userId: string\n      ) => unknown;\n\n      /**\n       * @remarks This is called when the official world time changes.\n       * @param worldTime - The new canonical World time\n       * @param dt        - the time advance delta, in seconds\n       * @remarks This is called by {@link Hooks.callAll}.\n       * @see {@link GameTime#onUpdateWorldTime}\n       */\n      updateWorldTime: (worldTime: number, dt: number) => unknown;\n    }\n\n    /**\n     * A hook event that fires whenever this Application is closed.\n     * @param app   - The Application instance being closed\n     * @param html  - The application HTML when it is closed\n     * @typeParam A - the type of the Application\n     * @remarks The name for this hook is dynamically created by joining 'close' with the type name of the Application.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link Application#close}\n     */\n    type CloseApplication<A extends Application = Application> = (app: A, html: JQuery) => boolean | void;\n\n    /**\n     * @remarks This is called after assuming or releasing control over a {@link PlaceableObject}.\n     * @param object     - the PlaceableObject\n     * @param controlled - whether the PlaceableObject is controlled\n     * @typeParam P      - the type of the PlaceableObject\n     * @remarks The name for this hook is dynamically created by joining 'control' and the type name of the\n     * PlaceableObject.\n     * @remarks This is called by {@link Hooks.callAll}.\n     * @see {@link PlaceableObject#control}\n     * @see {@link PlaceableObject#release}\n     */\n    type ControlPlaceableObject<P extends PlaceableObject = PlaceableObject> = (\n      object: P,\n      controlled: boolean\n    ) => unknown;\n\n    /**\n     * A hook event that fires for every embedded Document type after conclusion of a creation workflow.\n     * Substitute the Document name in the hook event to target a specific type, for example \"createToken\".\n     * This hook fires for all connected clients after the creation has been processed.\n     *\n     * @param document - The new Document instance which has been created\n     * @param options  - Additional options which modified the creation request\n     * @param userId   - The ID of the User who triggered the creation workflow\n     * @typeParam D    - the type of the Document constructor\n     * @remarks The name for this hook is dynamically created by joining 'create' and the type name of the Document.\n     * @remarks This is called by {@link Hooks.callAll}.\n     * @see {@link ClientDatabaseBackend#_postCreateDocumentCallbacks}\n     * @see {@link TokenDocument#_onUpdateTokenActor}\n     */\n    type CreateDocument<D extends DocumentConstructor = DocumentConstructor> = (\n      document: InstanceType<ConfiguredDocumentClass<D>>,\n      options: DocumentModificationOptions,\n      userId: string\n    ) => unknown;\n\n    /**\n     * A hook event that fires for every Document type after conclusion of an deletion workflow.\n     * Substitute the Document name in the hook event to target a specific Document type, for example \"deleteActor\".\n     * This hook fires for all connected clients after the deletion has been processed.\n     *\n     * @param document - The existing Document which was deleted\n     * @param options  - Additional options which modified the deletion request\n     * @param userId   - The ID of the User who triggered the deletion workflow\n     * @typeParam D    - the type of the Document constructor\n     * @remarks The name for this hook is dynamically created by joining 'delete' with the type name of the Document.\n     * @remarks This is called by {@link Hooks.callAll}.\n     * @see {@link ClientDatabaseBackend#_postDeleteDocumentCallbacks}\n     * @see {@link TokenDocument#_onUpdateTokenActor}\n     */\n    type DeleteDocument<D extends DocumentConstructor = DocumentConstructor> = (\n      document: InstanceType<ConfiguredDocumentClass<D>>,\n      options: DocumentModificationOptions,\n      userId: string\n    ) => unknown;\n\n    /**\n     * A hook event that fires whenever this Application is first rendered to add buttons to its header.\n     * @param app     - The Application instance being rendered\n     * @param buttons - The array of header buttons which will be displayed\n     * @typeParam A   - the type of the Application\n     * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the Application and\n     * 'HeaderButtons'.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link Application#_getHeaderButtons}\n     */\n    type GetApplicationHeaderButtons<A extends Application = Application> = (\n      app: A,\n      buttons: Application.HeaderButton[]\n    ) => boolean | void;\n\n    /**\n     * @remarks This is called after getting the {@link ContextMenu} options for a {@link ChatLog}, but before creating\n     * the ContextMenu.\n     * @param jq           - the JQuery of the ContextMenu parent element\n     * @param entryOptions - the already created ContextMenuOptions\n     * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the ChatLog and\n     * 'EntryContext'.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link ChatLog#_contextMenu}\n     */\n    type GetChatLogEntryContext = (jq: JQuery, entryOptions: ContextMenu.Item[]) => boolean | void;\n\n    /**\n     * @remarks This is called after getting the {@link ContextMenu} options for a {@link CombatTracker} entry, but before\n     * creating the ContextMenu.\n     * @param jq           - the JQuery of the ContextMenu parent element\n     * @param entryOptions - the already created ContextMenuOptions\n     * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the CombatTracker and\n     * 'EntryContext'.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link CombatTracker#_contextMenu}\n     */\n    type GetCombatTrackerEntryContext = (jq: JQuery, entryOptions: ContextMenu.Item[]) => boolean | void;\n\n    /**\n     * @remarks This is called after getting the {@link ContextMenu} options for a {@link CompendiumDirectory} entry, but\n     * before creating the ContextMenu.\n     * @param jq           - the JQuery of the ContextMenu parent element\n     * @param entryOptions - the already created ContextMenuOptions\n     * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the\n     * CompendiumDirectory and 'EntryContext'.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link CompendiumDirectory#_contextMenu}\n     */\n    type GetCompendiumDirectoryEntryContext = (jq: JQuery, entryOptions: ContextMenu.Item[]) => boolean | void;\n\n    /**\n     * @remarks This is called after getting the {@link ContextMenu} options for a {@link PlaylistDirectory} sound, but\n     * before creating the ContextMenu.\n     * @param jq           - the JQuery of the ContextMenu parent element\n     * @param entryOptions - the already created ContextMenuOptions\n     * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the PlaylistDirectory\n     * and 'SoundContext'.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link PlaylistDirectory#_contextMenu}\n     */\n    type GetPlaylistDirectorySoundContext = (jq: JQuery, entryOptions: ContextMenu.Item[]) => boolean | void;\n\n    /**\n     * @remarks This is called after getting the {@link ContextMenu} options for a {@link SidebarDirectory} entry, but\n     * before creating the ContextMenu.\n     * @param jq           - the JQuery of the ContextMenu parent element\n     * @param entryOptions - the already created ContextMenuOptions\n     * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the SidebarDirectory\n     * and 'EntryContext'.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link SidebarDirectory#_contextMenu}\n     */\n    type GetSidebarDirectoryEntryContext = (jq: JQuery, entryOptions: ContextMenu.Item[]) => boolean | void;\n\n    /**\n     * @remarks This is called after getting the {@link ContextMenu} options for a {@link SidebarDirectory} folder, but\n     * before creating the ContextMenu.\n     * @param jq            - the JQuery of the ContextMenu parent element\n     * @param folderOptions - the already created ContextMenuOptions\n     * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the SidebarDirectory\n     * and 'FolderContext'.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link SidebarDirectory#_contextMenu}\n     */\n    type GetSidebarDirectoryFolderContext = (jq: JQuery, folderOptions: ContextMenu.Item[]) => boolean | void;\n\n    /**\n     * A hook event that fires when the user modifies a global volume slider.\n     * The hook name needs to be customized to include the type of global volume being changed, one of:\n     * `globalPlaylistVolumeChanged`, `globalAmbientVolumeChanged`, or `globalInterfaceVolumeChanged`.\n     * @param volume - The new volume level\n     * @remarks The name for this hook is dynamically created by joining the name of the volume with 'Changed'.\n     * @remarks This is called by {@link Hooks.callAll}.\n     * @see {@link AudioHelper#_onChangeGlobalVolume}\n     */\n    type GlobalVolumeChanged = (volume: number) => unknown;\n\n    /**\n     * @remarks This is called when the user mouse is entering or leaving a hover state over a {@link PlaceableObject}.\n     * @param object - the PlaceableObject\n     * @param hover  - whether the mouse is hovering over the PlaceableObject\n     * @typeParam P  - the type of the PlaceableObject\n     * @remarks The name for this hook is dynamically created by joining 'hover' and the type name of the PlaceableObject.\n     * @remarks This is called by {@link Hooks.callAll}.\n     * @see {@link PlaceableObject#_onHoverIn}\n     * @see {@link PlaceableObject#_onHoverOut}\n     */\n    type HoverPlaceableObject<P extends PlaceableObject = PlaceableObject> = (object: P, hover: boolean) => unknown;\n\n    /**\n     * @remarks This is called after copying {@link PlaceableObject}s in a copy-paste action, but before embedding them\n     * into the {@link PlaceablesLayer}.\n     * @param copied   - the originally copied PlaceableObjects\n     * @param toCreate - the pasted copies with new coordinates\n     * @param P        - the type of the PlaceableObject\n     * @remarks The name for this hook is dynamically created by joining 'paste' with the type name of the\n     * PlaceableObject.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link PlaceablesLayer#pasteObjects}\n     */\n    type PastePlaceableObject<P extends PlaceableObject = PlaceableObject> = (\n      copied: P[],\n      toCreate: Array<P['document']['data']['_source']>\n    ) => boolean | void;\n\n    /**\n     * A hook event that fires for every Document type before execution of a creation workflow. Substitute the\n     * Document name in the hook event to target a specific Document type, for example \"preCreateActor\". This hook\n     * only fires for the client who is initiating the creation request.\n     *\n     * The hook provides the pending document instance which will be used for the Document creation. Hooked functions\n     * may modify that data or prevent the workflow entirely by explicitly returning false.\n     *\n     * @param document - The pending document which is requested for creation\n     * @param data     - The initial data object provided to the document creation request\n     * @param options  - Additional options which modify the creation request\n     * @param userId   - The ID of the requesting user, always game.user.id\n     * @typeParam D    - the type of the Document constructor\n     * @returns Explicitly return false to prevent creation of this Document\n     * @remarks The name for this hook is dynamically created by joining 'preCreate' with the name of the Document.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link ClientDatabaseBackend#_preCreateDocumentArray}\n     * @see {@link TokenDocument#_preUpdateTokenActor}\n     */\n    type PreCreateDocument<D extends DocumentConstructor = DocumentConstructor> = (\n      document: InstanceType<ConfiguredDocumentClass<D>>,\n      data: ConstructorParameters<D>[0],\n      options: DocumentModificationOptions,\n      userId: string\n    ) => boolean | void;\n\n    /**\n     * A hook event that fires for every Document type before execution of a deletion workflow. Substitute the\n     * Document name in the hook event to target a specific Document type, for example \"preDeleteActor\". This hook\n     * only fires for the client who is initiating the update request.\n     *\n     * The hook provides the Document instance which is requested for deletion. Hooked functions may prevent the\n     * workflow entirely by explicitly returning false.\n     *\n     * @param document - The Document instance being deleted\n     * @param options  - Additional options which modify the deletion request\n     * @param userId   - The ID of the requesting user, always game.user.id\n     * @typeParam D    - the type of the Document constructor\n     * @returns Explicitly return false to prevent deletion of this Document\n     * @remarks The name for this hook is dynamically created by joining 'preDelete' with the type name of the Document.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link ClientDatabaseBackend#_preDeleteDocumentArray}.\n     * @see {@link TokenDocument#_preUpdateTokenActor}\n     */\n    type PreDeleteDocument<D extends DocumentConstructor = DocumentConstructor> = (\n      document: InstanceType<ConfiguredDocumentClass<D>>,\n      options: DocumentModificationOptions,\n      userId: string\n    ) => boolean | void;\n\n    /**\n     * A hook event that fires for every Document type before execution of an update workflow. Substitute the Document\n     * name in the hook event to target a specific Document type, for example \"preUpdateActor\". This hook only fires\n     * for the client who is initiating the update request.\n     *\n     * The hook provides the differential data which will be used to update the Document. Hooked functions may modify\n     * that data or prevent the workflow entirely by explicitly returning false.\n     *\n     * @param document - The Document instance being updated\n     * @param change   - Differential data that will be used to update the document\n     * @param options  - Additional options which modify the update request\n     * @param userId   - The ID of the requesting user, always game.user.id\n     * @typeParam D    - the type of the Document constructor\n     * @returns Explicitly return false to prevent update of this Document\n     * @remarks The name for this hook is dynamically created by joining 'preUpdate' with the type name of the Document.\n     * @remarks This is called {@link Hooks.call}.\n     * @see {@link ClientDatabaseBackend#_preUpdateDocumentArray}\n     * @see {@link TokenDocument#_preUpdateTokenActor}\n     */\n    type PreUpdateDocument<D extends DocumentConstructor = DocumentConstructor> = (\n      document: InstanceType<ConfiguredDocumentClass<D>>,\n      change: DeepPartial<ConstructorParameters<D>[0]>,\n      options: DocumentModificationOptions,\n      userId: string\n    ) => boolean | void;\n\n    /**\n     * A hook event that fires whenever this Application is rendered.\n     * The hook provides the pending application HTML which will be added to the DOM.\n     * Hooked functions may modify that HTML or attach interactive listeners to it.\n     *\n     * @param app   - The Application instance being rendered\n     * @param html  - The inner HTML of the document that will be displayed and may be modified\n     * @param data  - The object of data used when rendering the application\n     * @typeParam A - the type of the Application\n     * @remarks The name for this hook is dynamically created by joining 'render' with the type name of the Application.\n     * @remarks This is called by {@link Hooks.call}.\n     * @see {@link Application#_render}\n     */\n    type RenderApplication<A extends Application = Application> = (\n      app: A,\n      html: JQuery,\n      data: ReturnType<A['getData']> extends Promise<infer T> ? T : ReturnType<A['getData']>\n    ) => boolean | void;\n\n    /**\n     * A hook event that fires for every Document type after conclusion of an update workflow.\n     * Substitute the Document name in the hook event to target a specific Document type, for example \"updateActor\".\n     * This hook fires for all connected clients after the update has been processed.\n     *\n     * @param document - The existing Document which was updated\n     * @param change   - Differential data that was used used to update the document\n     * @param options  - Additional options which modified the update request\n     * @param userId   - The ID of the User who triggered the update workflow\n     * @typeParam D    - the type of the Document constructor\n     * @remarks The name for this hook is dynamically created by joining 'update' with the type name of the Document.\n     * @remarks This is called by {@link Hooks.callAll}.\n     * @see {@link ClientDatabaseBackend#_postUpdateDocumentCallbacks}\n     * @see {@link TokenDocument#_onUpdateTokenActor}\n     */\n    type UpdateDocument<D extends DocumentConstructor = DocumentConstructor> = (\n      document: InstanceType<ConfiguredDocumentClass<D>>,\n      change: DeepPartial<ConstructorParameters<D>[0]>,\n      options: DocumentModificationOptions,\n      userId: string\n    ) => unknown;\n\n    type DynamicCallbacks =\n      | CloseApplication\n      | ControlPlaceableObject\n      | CreateDocument\n      | DeleteDocument\n      | GetApplicationHeaderButtons\n      | GetChatLogEntryContext\n      | GetCombatTrackerEntryContext\n      | GetCompendiumDirectoryEntryContext\n      | GetPlaylistDirectorySoundContext\n      | GetSidebarDirectoryEntryContext\n      | GetSidebarDirectoryFolderContext\n      | HoverPlaceableObject\n      | PastePlaceableObject\n      | PreCreateDocument\n      | PreDeleteDocument\n      | PreUpdateDocument\n      | RenderApplication\n      | UpdateDocument;\n  }\n}\n"]},17778:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\imageHelper.d.ts","/**\n * A helper class to provide common functionality for working with Image objects\n */\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\ndeclare class ImageHelper {\n  /**\n   * Create thumbnail preview for a provided image path.\n   * @param src     - The string URL or DisplayObject of the texture to render to a thumbnail\n   * @param options - Additional named options passed to the {@link ImageHelper.compositeCanvasTexture} method\n   *                  (default: `{}`)\n   * @returns The parsed and converted thumbnail data\n   */\n  static createThumbnail(\n    src: string | PIXI.DisplayObject,\n    options?: ImageHelper.CompositeOptions\n  ): Promise<ImageHelper.ThumbnailReturn>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Composite a canvas object by rendering it to a single texture\n   * @param object  - The DisplayObject to render to a texture\n   * @param options - Additional named options\n   *                  (default: `{}`)\n   * @returns The composite Texture object\n   */\n  static compositeCanvasTexture(object: PIXI.DisplayObject, options?: ImageHelper.CompositeOptions): PIXI.Texture;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Extract a texture to a base64 PNG string\n   * @param texture - The Texture object to extract\n   * @returns A base64 png string of the texture\n   */\n  static textureToImage(texture: PIXI.Texture): string;\n}\n\ndeclare namespace ImageHelper {\n  /**\n   * An interface for options for the {@link ImageHelper.createThumbnail} and {@link ImageHelper.compositeCanvasTexture}\n   * methods.\n   */\n  interface CompositeOptions {\n    /**\n     * Center the texture in the rendered frame?\n     * @defaultValue `true`\n     */\n    center?: boolean;\n\n    /**\n     * The desired height of the output texture\n     * @defaultValue The height of the object passed to {@link ImageHelper.compositeCanvasTexture}\n     */\n    height?: number;\n\n    /**\n     * A horizontal translation to apply to the object\n     * @defaultValue `0`\n     */\n    tx?: number;\n\n    /**\n     * A vertical translation to apply to the object\n     * @defaultValue `0`\n     */\n    ty?: number;\n\n    /**\n     * The desired width of the output texture\n     * @defaultValue The width of the object passed to {@link ImageHelper.compositeCanvasTexture}\n     */\n    width?: number;\n  }\n\n  /**\n   * An interface for return values of the {@link ImageHelper.createThumbnail} method.\n   */\n  interface ThumbnailReturn {\n    /**\n     * The height of the {@link PIXI.Sprite}, created by {@link ImageHelper.createThumbnail}\n     */\n    height: number;\n\n    /**\n     * The originally passed `string` URL or DisplayObject\n     */\n    src: string | PIXI.DisplayObject;\n\n    /**\n     * The Texture, returned from {@link ImageHelper.compositeCanvasTexture}, with `destroy(true)` already called on it.\n     */\n    texture: PIXI.Texture;\n\n    /**\n     * The base64 encoded image data, returned from {@link ImageHelper.textureToImage}\n     */\n    thumb: string;\n\n    /**\n     * The width of the {@link PIXI.Sprite}, created by {@link ImageHelper.createThumbnail}\n     */\n    width: number;\n  }\n}\n"]},18596:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\keyboardManager.d.ts","/**\n * A set of helpers and management functions for dealing with user input from keyboard events.\n * {@link https://keycode.info/}\n */\ndeclare class KeyboardManager {\n  constructor();\n\n  /**\n   * The set of key codes which are currently depressed (down)\n   */\n  protected _downKeys: Set<string>;\n\n  /**\n   * The set of key codes which have been already handled per workflow\n   */\n  protected _handled: Set<string>;\n\n  /**\n   * A mapping of movement keys which are pending\n   * @defaultValue `null`\n   */\n  protected _moveKeys: Set<string>;\n\n  /**\n   * @defaultValue `null`\n   */\n  protected _moveTime: number | null;\n\n  /**\n   * @defaultValue `0`\n   */\n  protected _tabState: 0 | 1;\n\n  /**\n   * @defaultValue `0`\n   */\n  protected _wheelTime: number;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Reset tracking for which keys are in the down and released states\n   */\n  protected _reset(): void;\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * Return whether the key code is currently in the DOWN state\n   * @param code - key code to test\n   */\n  isDown(code: string): boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A helper method to test whether, given an Event, the CTRL (or CMD) keys are pressed\n   */\n  isCtrl(event: Event): boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get a standardized keyboard code for a given event\n   * @param event - The originating keypress event\n   * @returns The standardized string code to use\n   */\n  getKey(event: KeyboardEvent): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * The key codes which represent a possible movement key\n   */\n  get moveKeys(): Record<string, string[]>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * The key codes which represent a digit key\n   */\n  get digitKeys(): string[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return the key codes used for zooming the canvas\n   */\n  get zoomKeys(): Record<string, string>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Test whether an input currently has focus\n   */\n  get hasFocus(): boolean;\n\n  /* -------------------------------------------- */\n  /*  Event Listeners and Handlers                */\n  /* -------------------------------------------- */\n\n  /**\n   * Handle a key press into the down position\n   * @param event - The originating keyboard event\n   */\n  protected _onKeyDown(event: KeyboardEvent): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle a key release into the up position\n   * @param event - The originating keyboard event\n   */\n  protected _onKeyUp(event: KeyboardEvent): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Delegate tracked key codes by dispatching to their various handlers\n   * @param event - The keydown or keyup event\n   * @param key   - The key being depressed\n   * @param up    - A flag for whether the key is down or up\n   */\n  protected _handleKeys(event: KeyboardEvent, key: string, up: boolean): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Input events do not fire with isComposing = false at the end of a composition event in Chrome\n   * See: https://github.com/w3c/uievents/issues/202\n   */\n  protected _onCompositionEnd(event: CompositionEvent): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Master mouse-wheel event keyboard handler\n   */\n  protected _onWheel(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle TAB keypress events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onTab(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle ESC keypress events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onEscape(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle SPACE keypress events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onSpace(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle ALT keypress events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   *                    (unused)\n   */\n  protected _onAlt(event: KeyboardEvent, up: boolean, modifiers?: any): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle movement keypress events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onMovement(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle keyboard movement once a small delay has elapsed to allow for multiple simultaneous key-presses.\n   */\n  protected _handleMovement(event: KeyboardEvent, layer: PlaceablesLayer<any>): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle panning the canvas using CTRL + directional keys\n   */\n  protected _handleCanvasPan(): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle number key presses\n   * @param event     - The original digit key press\n   *                    (unused)\n   * @param up        - Is it a keyup?\n   * @param modifiers - What modifiers affect the keypress?\n   */\n  protected _onDigit(event: any, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle \"A\" keypress events (CTRL only) to select all objects\n   * @param event     - The originating keyboard event\n   *                    (unused)\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onKeyA(event: any, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle \"C\" keypress events to copy data to clipboard\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onKeyC(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle \"V\" keypress events to paste data from clipboard\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onKeyV(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle Z Keypress Events to generally undo previous actions\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onKeyZ(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle presses to keyboard zoom keys\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onKeyZoom(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle DELETE Keypress Events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onDelete(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /**\n   * Specify a rate limit for mouse wheel to gate repeated scrolling.\n   * This is especially important for continuous scrolling mice which emit hundreds of events per second.\n   * This designates a minimum number of milliseconds which must pass before another wheel event is handled\n   */\n  static MOUSE_WHEEL_RATE_LIMIT: 50;\n\n  /**\n   * Enumerate the \"digit keys\"\n   */\n  static DIGIT_KEYS: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\n  /**\n   * Map keys used for movement\n   */\n  static MOVEMENT_KEYS: {\n    w: ['up'];\n    a: ['left'];\n    s: ['down'];\n    d: ['right'];\n    W: ['up'];\n    A: ['left'];\n    S: ['down'];\n    D: ['right'];\n    ArrowUp: ['up'];\n    ArrowRight: ['right'];\n    ArrowDown: ['down'];\n    ArrowLeft: ['left'];\n    Numpad1: ['down', 'left'];\n    Numpad2: ['down'];\n    Numpad3: ['down', 'right'];\n    Numpad4: ['left'];\n    Numpad6: ['right'];\n    Numpad7: ['up', 'left'];\n    Numpad8: ['up'];\n    Numpad9: ['up', 'right'];\n  };\n\n  /**\n   * Map keys used for canvas zooming\n   */\n  static ZOOM_KEYS: {\n    NumpadAdd: 'in';\n    NumpadSubtract: 'out';\n    PageDown: 'out';\n    PageUp: 'in';\n  };\n}\n\ndeclare namespace KeyboardManager {\n  interface MetaModifiers {\n    hasFocus: boolean;\n    isAlt: boolean;\n    isCtrl: boolean;\n    isShift: boolean;\n    key: string;\n  }\n}\n"]},63517:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\localization.d.ts",'/**\n * A helper class which assists with localization and string translation\n */\ndeclare class Localization {\n  constructor(language: string);\n\n  /**\n   * The target language for localization\n   * @defaultValue `\'en\'`\n   */\n  lang: string;\n\n  /**\n   * The package authorized to provide default language configurations\n   * @defaultValue `\'core\'`\n   */\n  defaultModule: string;\n\n  /**\n   * The translation dictionary for the target language\n   * @defaultValue `{}`\n   */\n  translations: Record<string, string>;\n\n  /**\n   * Fallback translations if the target keys are not found\n   * @defaultValue `{}`\n   */\n  protected _fallback: Record<string, string>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Initialize the Localization module\n   * Discover available language translations and apply the current language setting\n   * @returns A Promise which resolves once languages are initialized\n   */\n  initialize(): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Set a language as the active translation source for the session\n   * @param lang - A language string in CONFIG.supportedLanguages\n   * @returns A Promise which resolves once the translations for the requested language are ready\n   */\n  setLanguage(lang: string): Promise<void>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Discover the available supported languages from the set of packages which are provided\n   */\n  protected _discoverSupportedLanguages(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare the dictionary of translation strings for the requested language\n   * @param lang - The language for which to load translations\n   * @returns The retrieved translations object\n   */\n  protected _getTranslations(lang: string): Promise<Record<string, string>>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Load a single translation file and return its contents as processed JSON\n   * @param src - The translation file path to load\n   */\n  protected _loadTranslationFile(src: string): Promise<object>;\n\n  /* -------------------------------------------- */\n  /*  Localization API                            */\n  /* -------------------------------------------- */\n\n  /**\n   * Return whether a certain string has a known translation defined.\n   * @param stringId - The string key being translated\n   * @param fallback - Allow fallback translations to count?\n   *                   (unused)\n   */\n  has(stringId: string, fallback?: any): boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Localize a string by drawing a translation from the available translations dictionary, if available\n   * If a translation is not available, the original string is returned\n   * @param stringId - The string ID to translate\n   * @returns The translated string\n   *\n   * @example\n   * ```typescript\n   * {\n   *   "MYMODULE.MYSTRING": "Hello, this is my module!"\n   * }\n   * game.i18n.localize("MYMODULE.MYSTRING"); // Hello, this is my module!\n   * ```\n   */\n  localize(stringId: string): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Localize a string including variable formatting for input arguments.\n   * Provide a string ID which defines the localized template.\n   * Variables can be included in the template enclosed in braces and will be substituted using those named keys.\n   *\n   * @param stringId - The string ID to translate\n   * @param data     - Provided input data\n   * @returns The translated and formatted string\n   *\n   * @example\n   * ```typescript\n   * {\n   *   "MYMODULE.GREETING": "Hello {name}, this is my module!"\n   * }\n   * game.i18n.format("MYMODULE.GREETING", {name: "Andrew"}); // Hello Andrew, this is my module!\n   * ```\n   */\n  format(stringId: string, data?: Record<string, any>): string;\n}\n']},27401:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\mersenneTwister.d.ts",'/**\n * A standalone, pure JavaScript implementation of the Mersenne Twister pseudo random number generator.\n *\n * author: Raphael Pigulla \\<pigulla\\@four66.com\\>\n * version: 0.2.3\n * license:\n * Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * 3. The names of its contributors may not be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\ndeclare class MersenneTwister {\n  /**\n   * Instantiates a new Mersenne Twister.\n   * @param seed - The initial seed value, if not provided the current timestamp will be used.\n   */\n  constructor(seed?: number);\n\n  /**\n   * Initializes the state vector by using one unsigned 32-bit integer "seed", which may be zero.\n   *\n   * since: 0.1.0\n   * @param seed - The seed value.\n   */\n  seed(seed: number): number;\n\n  /**\n   * Initializes the state vector by using an array key[] of unsigned 32-bit integers of the specified length. If\n   * length is smaller than 624, then each array of 32-bit integers gives distinct initial state vector. This is\n   * useful if you want a larger seed space than 32-bit word.\n   *\n   * since: 0.1.0\n   * @param vector - The seed vector.\n   */\n  seedArray(vector: number[]): void;\n\n  /**\n   * Generates a random unsigned 32-bit integer.\n   *\n   * since: 0.1.0\n   */\n  int(): number;\n\n  /**\n   * Generates a random unsigned 31-bit integer.\n   *\n   * since: 0.1.0\n   */\n  int31(): number;\n\n  /**\n   * Generates a random real in the interval [0;1] with 32-bit resolution.\n   *\n   * since: 0.1.0\n   */\n  real(): number;\n\n  /**\n   * Generates a random real in the interval ]0;1[ with 32-bit resolution.\n   *\n   * since: 0.1.0\n   */\n  realx(): number;\n\n  /**\n   * Generates a random real in the interval [0;1[ with 32-bit resolution.\n   *\n   * since: 0.1.0\n   */\n  rnd(): number;\n\n  /**\n   * Generates a random real in the interval [0;1[ with 32-bit resolution.\n   *\n   * Same as .rnd() method - for consistency with Math.random() interface.\n   *\n   * since: 0.2.0\n   * @see {@link MersenneTwister#rnd}\n   */\n  random(): number;\n\n  /**\n   * Generates a random real in the interval [0;1[ with 53-bit resolution.\n   *\n   * since: 0.1.0\n   */\n  rndHiRes(): number;\n\n  /**\n   * A pseudo-normal distribution using the Box-Muller transform.\n   * @param mu    - The normal distribution mean\n   * @param sigma - The normal distribution standard deviation\n   */\n  normal(mu: number, sigma: number): number;\n\n  /**\n   * A factory method for generating random uniform rolls\n   * @see {@link MersenneTwister#random}\n   */\n  static random(): number;\n\n  /**\n   * A factory method for generating random normal rolls\n   * @see {@link MersenneTwister#normal}\n   */\n  static normal(mu: number, sigma: number): number;\n}\n\ndeclare const twist: MersenneTwister;\n']},52845:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\mouseInteractionManager.d.ts","/**\n * Handle mouse interaction events for a Canvas object.\n * There are three phases of events: hover, click, and drag\n * @typeParam O - Canvas object this instance handles events for\n * @typeParam T - Target object for mouseinteraction events. Generally a `ControlIcon` or `O`.\n *                (default: `O`)\n *\n * Hover Events:\n * _handleMouseOver\n *  action: hoverIn\n * _handleMouseOut\n *  action: hoverOut\n *\n * Left Click and Double-Click\n * _handleMouseDown\n *  action: clickLeft\n *  action: clickLeft2\n *\n * Right Click and Double-Click\n * _handleRightDown\n *  action: clickRight\n *  action: clickRight2\n *\n * Drag and Drop\n * _handleMouseMove\n *  action: dragLeftStart\n *  action: dragLeftMove\n *  action: dragRightStart\n *  action: dragLeftMove\n * _handleMouseUp\n *  action: dragLeftDrop\n *  action: dragRightDrop\n * _handleDragCancel\n *  action: dragLeftCancel\n *  action: dragRightCancel\n */\ndeclare class MouseInteractionManager<O extends PIXI.Container = PIXI.Container, T extends PIXI.Container = O> {\n  /**\n   * @param permissions - (default: `{}`)\n   * @param callbacks   - (default: `{}`)\n   * @param options     - (default: `{}`)\n   */\n  constructor(\n    object: O,\n    layer: MouseInteractionManager['layer'],\n    permissions?: MouseInteractionManager['permissions'],\n    callbacks?: MouseInteractionManager['callbacks'],\n    options?: MouseInteractionManager['options']\n  );\n\n  object: O;\n\n  layer: PIXI.Container;\n\n  /**\n   * @defaultValue `{}`\n   */\n  permissions: Partial<\n    Record<MouseInteractionManager.EventNames, ((user: User, event: PIXI.InteractionEvent) => boolean) | boolean>\n  >;\n\n  /**\n   * @defaultValue `{}`\n   */\n  callbacks: Partial<\n    Record<MouseInteractionManager.EventNames, ((event: Event | PIXI.InteractionEvent) => unknown) | null>\n  >;\n\n  /**\n   * @defaultValue `{}`\n   */\n  options: { target?: string[] | string | null };\n\n  /**\n   * The current interaction state\n   * @defaultValue `0`\n   */\n  state: ValueOf<typeof MouseInteractionManager['INTERACTION_STATES']>;\n\n  /**\n   * Bound handlers which can be added and removed\n   * @defaultValue `{}`\n   */\n  handlers: Partial<\n    Record<'contextmenu' | 'mousedown' | 'mousemove' | 'mouseout' | 'mouseover' | 'mouseup' | 'rightdown', Function>\n  >;\n\n  /**\n   * The drag handling time\n   * @defaultValue `0`\n   */\n  dragTime: number;\n\n  /**\n   * The throttling time below which a mouse move event will not be handled\n   * @defaultValue `Math.ceil(1000 / canvas.app.ticker.maxFPS)`\n   */\n  protected _dragThrottleMS: number;\n\n  /**\n   * The time of the last left-click event\n   * @defaultValue `0`\n   */\n  lcTime: number;\n\n  /**\n   * The time of the last right-click event\n   * @defaultValue `0`\n   */\n  rcTime: number;\n\n  /**\n   * A flag for whether we are right-click dragging\n   * @defaultValue `false`\n   */\n  protected _dragRight: boolean;\n\n  /**\n   * Get the target\n   * @returns `this.object` or `this.object[this.options.target]`\n   */\n  get target(): T;\n\n  /**\n   * Activate interactivity for the handled object\n   */\n  activate(): this;\n\n  /**\n   * Test whether the current user has permission to perform a step of the workflow\n   * @param action - The action being attempted\n   * @param event  - The event being handled\n   * @returns Can the action be performed?\n   */\n  can(action: MouseInteractionManager.EventNames, event: Event | PIXI.InteractionEvent): boolean;\n\n  /**\n   * Execute a callback function associated with a certain action in the workflow\n   * @param action - The action being attempted\n   * @param event  - The event being handled\n   */\n  callback(action: MouseInteractionManager.EventNames, event: Event | PIXI.InteractionEvent): unknown;\n\n  /**\n   * A reference to the possible interaction states which can be observed\n   */\n  get states(): typeof MouseInteractionManager['INTERACTION_STATES'];\n\n  /**\n   * Activate a set of listeners which handle hover events on the target object\n   */\n  protected _activateHoverEvents(): void;\n\n  /**\n   * Activate a new set of listeners for click events on the target object\n   */\n  protected _activateClickEvents(): void;\n\n  /**\n   * Deactivate event listeners for click events on the target object\n   */\n  protected _deactivateClickEvents(): void;\n\n  /**\n   * Activate events required for handling a drag-and-drop workflow\n   */\n  protected _activateDragEvents(): void;\n\n  /**\n   * Deactivate events required for handling drag-and-drop workflow.\n   */\n  protected _deactivateDragEvents(): void;\n\n  /**\n   * Handle mouse-over events which activate downstream listeners and do not stop propagation.\n   */\n  protected _handleMouseOver(event: PIXI.InteractionEvent): unknown;\n\n  /**\n   * Handle mouse-out events which terminate hover workflows and do not stop propagation.\n   */\n  protected _handleMouseOut(event: PIXI.InteractionEvent): unknown;\n\n  /**\n   * Handle mouse-down events which activate downstream listeners.\n   * Stop further propagation only if the event is allowed by either single or double-click.\n   */\n  protected _handleMouseDown(event: PIXI.InteractionEvent): unknown;\n\n  /**\n   * Handle mouse-down which trigger a single left-click workflow.\n   */\n  protected _handleClickLeft(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle mouse-down which trigger a single left-click workflow.\n   */\n  protected _handleClickLeft2(event: PIXI.InteractionEvent): unknown;\n\n  /**\n   * Handle right-click mouse-down events.\n   * Stop further propagation only if the event is allowed by either single or double-click.\n   */\n  protected _handleRightDown(event: PIXI.InteractionEvent): unknown;\n\n  /**\n   * Handle single right-click actions.\n   */\n  protected _handleClickRight(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle double right-click actions.\n   */\n  protected _handleClickRight2(event: PIXI.InteractionEvent): unknown;\n\n  /**\n   * Handle mouse movement during a drag workflow\n   */\n  protected _handleMouseMove(event: PIXI.InteractionEvent): unknown;\n\n  /**\n   * Handle the beginning of a new drag start workflow, moving all controlled objects on the layer\n   */\n  protected _handleDragStart(event: PIXI.InteractionEvent): unknown;\n\n  /**\n   * Handle the continuation of a drag workflow, moving all controlled objects on the layer\n   */\n  protected _handleDragMove(event: PIXI.InteractionEvent): unknown;\n\n  /**\n   * Handle mouse up events which may optionally conclude a drag workflow\n   */\n  protected _handleMouseUp(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle the conclusion of a drag workflow, placing all dragged objects back on the layer\n   */\n  protected _handleDragDrop(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle the cancellation of a drag workflow, resetting back to the original state\n   */\n  protected _handleDragCancel(event: PointerEvent): void;\n\n  /**\n   * Enumerate the states of a mouse interaction workflow.\n   * 0: NONE - the object is inactive\n   * 1: HOVER - the mouse is hovered over the object\n   * 2: CLICKED - the object is clicked\n   * 3: DRAG - the object is being dragged\n   * 4: DROP - the object is being dropped\n   */\n  static INTERACTION_STATES: {\n    NONE: 0;\n    HOVER: 1;\n    CLICKED: 2;\n    DRAG: 3;\n    DROP: 4;\n  };\n}\n\ndeclare namespace MouseInteractionManager {\n  type EventNames =\n    | 'clickLeft'\n    | 'clickLeft2'\n    | 'clickRight'\n    | 'clickRight2'\n    | 'dragLeftCancel'\n    | 'dragLeftDrop'\n    | 'dragLeftMove'\n    | 'dragLeftStart'\n    | 'dragRightCancel'\n    | 'dragRightDrop'\n    | 'dragRightMove'\n    | 'dragRightStart'\n    | 'hoverIn'\n    | 'hoverOut';\n}\n"]},56227:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\blendModes.d.ts","declare const BLEND_MODES: {\n  /**\n   * Register a custom blend mode equation which chooses the maximum color from each channel within the stack.\n   * @defaultValue\n   * ```typescript\n   * [\n   *   WebGL2RenderingContext.ONE,\n   *   WebGL2RenderingContext.ONE,\n   *   WebGL2RenderingContext.ONE,\n   *   WebGL2RenderingContext.ONE,\n   *   WebGL2RenderingContext.MAX,\n   *   WebGL2RenderingContext.MAX,\n   * ]\n   * ```\n   */\n  MAX_COLOR: [GLenum, GLenum, GLenum, GLenum, GLenum, GLenum];\n\n  /**\n   * Register a custom blend mode equation which chooses the minimum color from each channel within the stack.\n   * @defaultValue\n   * ```typescript\n   * [\n   *   WebGL2RenderingContext.ONE,\n   *   WebGL2RenderingContext.ONE,\n   *   WebGL2RenderingContext.ONE,\n   *   WebGL2RenderingContext.ONE,\n   *   WebGL2RenderingContext.MIN,\n   *   WebGL2RenderingContext.MAX,\n   * ]\n   * ```\n   */\n  MIN_COLOR: [GLenum, GLenum, GLenum, GLenum, GLenum, GLenum];\n};\n"]},49986:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\baseGrid.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The base grid class.\n * This double-dips to implement the \"gridless\" option\n */\ndeclare class BaseGrid extends PIXI.Container {\n  constructor(options: {\n    dimensions: Canvas['dimensions'];\n    color: string;\n    alpha: Scene['data']['gridAlpha'];\n    columns?: boolean;\n    even?: boolean;\n  });\n\n  /**\n   * Grid Unit Width\n   */\n  w: number;\n\n  /**\n   * Grid Unit Height\n   */\n  h: number;\n\n  /**\n   * Highlight active grid spaces\n   */\n  highlight: PIXI.Container;\n\n  draw(): this;\n\n  /**\n   * Highlight a grid position for a certain coordinates\n   * @param layer  - The highlight layer to use\n   * @param x      - The x-coordinate of the highlighted position\n   * @param y      - The y-coordinate of the highlighted position\n   * @param color  - The hex fill color of the highlight\n   *                 (default: `0x33BBFF`)\n   * @param border - The hex border color of the highlight\n   *                 (default: `null`)\n   * @param alpha  - The opacity of the highlight\n   *                 (default: `0.25`)\n   * @param shape  - A predefined shape to highlight\n   *                 (default: `null`)\n   */\n  highlightGridPosition(\n    layer: GridHighlight,\n    options?: {\n      x?: number;\n      y?: number;\n      color?: number;\n      border?: number | null;\n      alpha?: number;\n      shape?: PIXI.Polygon | null;\n    }\n  ): void;\n\n  /**\n   * Given a pair of coordinates (x, y) - return the top-left of the grid square which contains that point\n   * @param x - The x-coordinate\n   * @param y - The y-coordinate\n   * @returns An Array [x, y] of the top-left coordinate of the square which contains (x, y)\n   */\n  getTopLeft(x: number, y: number): PointArray;\n\n  /**\n   * Given a pair of coordinates (x, y), return the center of the grid square which contains that point\n   * @param x - The x-coordinate\n   * @param y - The y-coordinate\n   * @returns An array [cx, cy] of the central point of the grid space which contains (x, y)\n   */\n  getCenter(x: number, y: number): PointArray;\n\n  /**\n   * Given a pair of coordinates (x1,y1), return the grid coordinates (x2,y2) which represent the snapped position\n   * Under a \"gridless\" system, every pixel position is a valid snapping position\n   *\n   * @param x        - The exact target location x\n   * @param y        - The exact target location y\n   * @param interval - An interval of grid spaces at which to snap.\n   *                   At interval=1, snapping occurs at pixel intervals defined by the grid size\n   *                   At interval=2, snapping would occur at the center-points of each grid size\n   *                   At interval=null, no snapping occurs\n   *                   (default: `null`)\n   * @returns An object containing the coordinates of the snapped location\n   */\n  getSnappedPosition(x: number, y: number, interval: number | null): { x: number; y: number };\n\n  /**\n   * Given a pair of pixel coordinates, return the grid position as an Array.\n   * Always round down to the nearest grid position so the pixels are within the grid space (from top-left).\n   * @param x - The x-coordinate pixel position\n   * @param y - The y-coordinate pixel position\n   * @returns An array [x, y] representing the position in grid units\n   */\n  getGridPositionFromPixels(x: number, y: number): PointArray;\n\n  /**\n   * Given a pair of grid coordinates, return the pixel position as an Array.\n   * Always round up to a whole pixel so the pixel is within the grid space (from top-left).\n   * @param x - The x-coordinate grid position\n   * @param y - The y-coordinate grid position\n   * @returns An array [x, y] representing the position in pixels\n   */\n  getPixelsFromGridPosition(x: number, y: number): PointArray;\n\n  /**\n   * Shift a pixel position [x,y] by some number of grid units dx and dy\n   * @param x  - The starting x-coordinate in pixels\n   * @param y  - The starting y-coordinate in pixels\n   * @param dx - The number of grid positions to shift horizontally\n   * @param dy - The number of grid positions to shift vertically\n   * @returns An array [x, y] representing the new position in pixels\n   */\n  shiftPosition(x: number, y: number, dx: number, dy: number): PointArray;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Measure the distance traversed over an array of measured segments\n   * @param segments - An Array of measured movement segments\n   * @param options  - Additional options which modify the measurement\n   *                   (default: `{}`)\n   * @returns An Array of distance measurements for each segment\n   */\n  measureDistances(\n    segments: { ray: Ray; label?: Ruler['labels']['children'][number] }[],\n    options?: { gridSpaces?: boolean }\n  ): number[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get the grid row and column positions which are neighbors of a certain position\n   * @param row - The grid row coordinate against which to test for neighbors\n   * @param col - The grid column coordinate against which to test for neighbors\n   * @returns An array of grid positions which are neighbors of the row and column\n   */\n  getNeighbors(row: number, col: number): [number, number][];\n}\n"]},73605:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\baseGrids\\hexagonalGrid.d.ts","// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * Construct a hexagonal grid\n */\ndeclare class HexagonalGrid extends BaseGrid {\n  columns: boolean;\n\n  even: boolean;\n\n  h: number;\n\n  w: number;\n  constructor(options: {\n    dimensions: Canvas['dimensions'];\n    color: string;\n    alpha: Scene['data']['gridAlpha'];\n    columns?: boolean;\n    even?: boolean;\n  });\n\n  /**\n   * A matrix of x and y offsets which is multiplied by the width/height vector to get pointy-top polygon coordinates\n   */\n  static get pointyHexPoints(): PointArray[];\n\n  /**\n   * A matrix of x and y offsets which is multiplied by the width/height vector to get flat-top polygon coordinates\n   */\n  static get flatHexPoints(): PointArray[];\n\n  /**\n   * An array of the points which define a hexagon for this grid shape\n   */\n  get hexPoints(): PointArray[];\n\n  /** @override */\n  draw(): this;\n\n  /**\n   * A convenience method for getting all the polygon points relative to a top-left [x,y] coordinate pair\n   * @param x - The top-left x-coordinate\n   * @param y - The top-right y-coordinate\n   * @param w - An optional polygon width\n   * @param h - An optional polygon height\n   */\n  getPolygon(x: number, y: number, w: number, h: number): PointArray[];\n\n  protected _drawGrid(): PIXI.Graphics;\n\n  protected _drawRows(grid: PIXI.Graphics, nrows: number, ncols: number): void;\n\n  protected _drawColumns(grid: PIXI.Graphics, nrows: number, ncols: number): void;\n\n  /** @override */\n  getGridPositionFromPixels(x: number, y: number): PointArray;\n\n  /** @override */\n  getPixelsFromGridPosition(row: number, col: number): PointArray;\n\n  /** @override */\n  getTopLeft(x: number, y: number): PointArray;\n\n  /** @override */\n  getCenter(x: number, y: number): PointArray;\n\n  /** @override  */\n  getSnappedPosition(x: number, y: number, interval: number): { x: number; y: number };\n\n  /** @override */\n  shiftPosition(x: number, y: number, dx: number, dy: number): PointArray;\n\n  /** @override */\n  highlightGridPosition(\n    layer: GridHighlight,\n    options: {\n      x: number;\n      y: number;\n      color: number;\n      border: number;\n      alpha: number;\n      shape: PIXI.Polygon;\n    }\n  ): void;\n\n  /** @override */\n  getNeighbors(row: number, col: number): [number, number][];\n\n  /** @override */\n  measureDistances(\n    segments: { ray: Ray; label?: Ruler['labels']['children'][number] }[],\n    options?: { gridSpaces?: boolean }\n  ): number[];\n\n  /**\n   * Convert an offset coordinate (row, col) into a cube coordinate (q, r, s).\n   * See https://www.redblobgames.com/grids/hexagons/ for reference\n   * Source code available https://www.redblobgames.com/grids/hexagons/codegen/output/lib-functions.js\n   * @param row - The row number\n   * @param col - The column number\n   */\n  offsetToCube(row: number, col: number): { q: number; r: number; s: number };\n\n  /**\n   * Convert a cube coordinate (q, r, s) into an offset coordinate (row, col).\n   * See https://www.redblobgames.com/grids/hexagons/ for reference\n   * Source code available https://www.redblobgames.com/grids/hexagons/codegen/output/lib-functions.js\n   * @param q - Cube coordinate 1\n   * @param r - Cube coordinate 2\n   * @param s - Cube coordinate 3\n   */\n  cubeToOffset(q: number, r: number, s: number): { row: number; col: number };\n\n  /**\n   * Given a cursor position (x, y), obtain the cube coordinate hex (q, r, s) of the hex which contains it\n   * http://justinpombrio.net/programming/2020/04/28/pixel-to-hex.html\n   * @param x - The x-coordinate in pixels\n   * @param y - The y-coordinate in pixels\n   */\n  static pixelToCube(x: number, y: number): [number, number, number];\n\n  /**\n   * Measure the distance in hexagons between two cube coordinates\n   */\n  static cubeDistance(a: number, b: number): number;\n\n  /**\n   * @deprecated since 0.7.4\n   * @see HexagonalGrid#getPolygon\n   */\n  getFlatHexPolygon(x: number, y: number, w: number, h: number): PointArray[];\n\n  /**\n   * @deprecated since 0.7.4\n   * @see HexagonalGrid.getPolygon\n   */\n  getPointyHexPolygon(x: number, y: number, w: number, h: number): PointArray[];\n}\n"]},1306:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\baseGrids\\squareGrid.d.ts","/**\n * Construct a square grid container\n */\ndeclare class SquareGrid extends BaseGrid {\n  /** @override */\n  draw(): this;\n\n  _drawLine(points: [number, number, number, number], lineColor: number, lineAlpha: number): PIXI.Graphics;\n\n  /** @override */\n  getTopLeft(x: number, y: number): PointArray;\n\n  /** @override */\n  getCenter(x: number, y: number): PointArray;\n\n  /** @override */\n  getGridPositionFromPixels(x: number, y: number): PointArray;\n\n  /** @override */\n  getPixelsFromGridPosition(row: number, col: number): PointArray;\n\n  /** @override */\n  getSnappedPosition(x: number, y: number, interval?: number | null): { x: number; y: number };\n\n  /**\n   * Shift a pixel position [x,y] by some number of grid units dx and dy\n   * @param x  - The starting x-coordinate in pixels\n   * @param y  - The starting y-coordinate in pixels\n   * @param dx - The number of grid positions to shift horizontally\n   * @param dy - The number of grid positions to shift vertically\n   */\n  shiftPosition(x: number, y: number, dx: number, dy: number): PointArray;\n\n  protected _getNearestVertex(x: number, y: number): PointArray;\n\n  /** @override */\n  highlightGridPosition(\n    layer: GridHighlight,\n    options?: {\n      x: number;\n      y: number;\n      color: number;\n      border: number;\n      alpha: number;\n      shape: PIXI.Polygon;\n    }\n  ): void;\n\n  /** @override */\n  measureDistances(\n    segments: { ray: Ray; label?: Ruler['labels']['children'][number] }[],\n    options?: { gridSpaces?: boolean }\n  ): number[];\n\n  /** @override */\n  getNeighbors(row: number, col: number): [number, number][];\n}\n"]},31274:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\cachedContainer.d.ts","/**\n * A special type of PIXI.Container which draws its contents to a cached RenderTexture.\n * This is accomplished by overriding the Container#render method to draw to our own special RenderTexture.\n */\ndeclare class CachedContainer extends PIXI.Container {\n  constructor();\n\n  /**\n   * The RenderTexture that is the render destination for the contents of this Container\n   */\n  readonly renderTexture: PIXI.RenderTexture;\n\n  protected _onResize: () => void;\n\n  /**\n   * An object which stores a reference to the normal renderer target and source frame.\n   * We track this so we can restore them after rendering our cached texture.\n   */\n  protected _backup: {\n    renderTexture: PIXI.RenderTexture | undefined;\n    sourceFrame: PIXI.Rectangle;\n  };\n\n  /**\n   * An RGBA array used to define the clear color of the RenderTexture\n   * @defaultValue `[0, 0, 0, 1]`\n   */\n  clearColor: [r: number, g: number, b: number, a: number];\n\n  /**\n   * Should our Container also be displayed on screen, in addition to being drawn to the cached RenderTexture?\n   * @defaultValue `false`\n   */\n  displayed: boolean;\n\n  destroy(options?: Parameters<PIXI.Container['destroy']>[0]): ReturnType<PIXI.Container['destroy']>;\n\n  render(renderer: Parameters<PIXI.Container['render']>[0]): void;\n\n  /**\n   * Bind our cached RenderTexture to the Renderer, replacing the original target.\n   * @param renderer - The active canvas renderer\n   */\n  protected _bind(renderer: PIXI.Renderer): void;\n\n  /**\n   * Remove our cached RenderTexture from the Renderer, re-binding the original target.\n   * @param renderer - The active canvas renderer\n   */\n  protected _unbind(renderer: PIXI.Renderer): void;\n\n  /**\n   * Resize the cached RenderTexture when the dimensions or resolution of the Renderer have changed.\n   */\n  protected _resize(renderer: PIXI.Renderer): void;\n}\n"]},36e3:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayer.d.ts","/**\n * An abstract pattern for primary layers of the game canvas to implement\n * @typeParam Options - The type of the options in this layer.\n */\ndeclare abstract class CanvasLayer<Options extends CanvasLayerOptions = CanvasLayerOptions> extends PIXI.Container {\n  constructor();\n\n  /**\n   * Options for this layer instance.\n   * @defaultValue `this.constructor.layerOptions`\n   */\n  options: Options;\n\n  /**\n   * @defaultValue `false`\n   */\n  interactive: boolean;\n\n  /**\n   * @defaultValue `false`\n   */\n  interactiveChildren: boolean;\n\n  /**\n   * Track whether the canvas layer is currently active for interaction\n   * @defaultValue `false`\n   */\n  protected _active: boolean;\n\n  /**\n   * Customize behaviors of this CanvasLayer by modifying some behaviors at a class level.\n   */\n  static get layerOptions(): CanvasLayerOptions;\n\n  /**\n   * Return a reference to the active instance of this canvas layer\n   */\n  static get instance(): CanvasLayer | undefined;\n\n  /**\n   * The canonical name of the CanvasLayer\n   * @remarks Foundry defines this as a getter, but since CanvasLayer extends PIXI.Container, it has to be a property.\n   */\n  readonly name: string;\n\n  /**\n   * Draw the canvas layer, rendering its internal components and returning a Promise\n   * The Promise resolves to the drawn layer once its contents are successfully rendered.\n   * @remarks It returns Promise<this> but is overridden by a subclass in this way.\n   */\n  draw(): Promise<this | undefined> | this;\n\n  /**\n   * Deconstruct data used in the current layer in preparation to re-draw the canvas\n   */\n  tearDown(): Promise<this>;\n\n  /**\n   * Activate the CanvasLayer, deactivating other layers and marking this layer's children as interactive.\n   * @returns The layer instance, now activated\n   */\n  activate(): this;\n\n  /**\n   * Deactivate the CanvasLayer, removing interactivity from its children.\n   * @returns The layer instance, now inactive\n   * @remarks It returns Promise<this> but is overridden by a subclass returning void.\n   */\n  deactivate(): this | void;\n\n  /**\n   * Get the zIndex that should be used for ordering this layer vertically relative to others in the same Container.\n   */\n  getZIndex(): number;\n}\n\n/**\n * Options which configure the behavior of a Canvas Layer.\n */\ndeclare interface CanvasLayerOptions {\n  /**\n   * The layer name by which the instance is referenced within the Canvas\n   */\n  name: string;\n\n  /**\n   * The zIndex sorting of this layer relative to other layers\n   */\n  zIndex: number;\n\n  /**\n   * Should this layer be sorted to the top when it is active?\n   */\n  sortActiveTop: boolean;\n}\n\ndeclare namespace CanvasLayer {\n  /**\n   * Options which configure the behavior of a Canvas Layer.\n   * @remarks This type exists for consistency\n   */\n  type LayerOptions = CanvasLayerOptions;\n}\n"]},8199:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\controlsLayer.d.ts","/**\n * A CanvasLayer for displaying UI controls which are overlayed on top of other layers.\n *\n * We track three types of events:\n * 1) Cursor movement\n * 2) Ruler measurement\n * 3) Map pings\n */\nimport { ConfiguredDocumentClass, ConfiguredObjectClassForName } from '../../../../../types/helperTypes';\n\ndeclare global {\n  class ControlsLayer extends CanvasLayer<ControlsLayer.LayerOptions> {\n    constructor();\n\n    /**\n     * Cursor position indicators\n     * @defaultValue `null`\n     */\n    cursors: PIXI.Container | null;\n\n    /**\n     * A mapping of user IDs to Cursor instances for quick access\n     * @defaultValue `{}`\n     */\n    protected _cursors: Partial<Record<string, Cursor>>;\n\n    /**\n     * Door control icons\n     * @defaultValue `null`\n     */\n    doors: PIXI.Container | null;\n\n    /**\n     * Status effect icons\n     * @remarks Always `null`\n     */\n    effects: null;\n\n    /**\n     * Ruler tools, one per connected user\n     * @defaultValue `null`\n     */\n    rulers: PIXI.Container | null;\n\n    /**\n     * A convenience mapping of user IDs to Ruler instances for quick access\n     */\n    protected _rulers: Partial<Record<string, Ruler>>;\n\n    /**\n     * Canvas selection rectangle\n     * @defaultValue `null`\n     */\n    select: PIXI.Graphics | null;\n\n    // The controls layer is always interactive\n    interactiveChildren: true;\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): undefined;\n\n    /**\n     * @override\n     * @defaultValue `mergeObject(super.layerOptions, { zIndex: 1000 })`\n     */\n    static get layerOptions(): ControlsLayer.LayerOptions;\n\n    /**\n     * A convenience accessor to the Ruler for the active game user\n     */\n    get ruler(): ReturnType<ControlsLayer['getRulerForUser']>;\n\n    /**\n     * Get the Ruler display for a specific User ID\n     */\n    getRulerForUser(userId: string): Ruler | null;\n\n    /** @override */\n    draw(): this;\n\n    /**\n     * Draw the cursors container\n     */\n    drawCursors(): void;\n\n    /**\n     * Draw the Door controls container\n     */\n    drawDoors(): void;\n\n    /**\n     * Create a Door Control icon for a given Wall object\n     * @param wall - The Wall for which to create a DoorControl\n     * @returns The created DoorControl\n     */\n    createDoorControl(wall: InstanceType<ConfiguredObjectClassForName<'Wall'>>): ReturnType<DoorControl['draw']> | null;\n\n    /**\n     * Draw Ruler tools\n     */\n    drawRulers(): void;\n\n    /**\n     * Draw the select rectangle given an event originated within the base canvas layer\n     * @param coords - The rectangle coordinates of the form `{x, y, width, height}`\n     */\n    drawSelect({ x, y, width, height }: { x: number; y: number; width: number; height: number }): void;\n\n    /** @override */\n    deactivate(): void;\n\n    /**\n     * Handle mousemove events on the game canvas to broadcast activity of the user's cursor position\n     */\n    protected _onMoveCursor(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Create and draw the Cursor object for a given User\n     * @param user - The User entity for whom to draw the cursor Container\n     */\n    drawCursor(user: InstanceType<ConfiguredDocumentClass<typeof User>>): Cursor;\n\n    /**\n     * Update the cursor when the user moves to a new position\n     * @param user     - The User for whom to update the cursor\n     * @param position - The new cursor position\n     */\n    updateCursor(user: InstanceType<ConfiguredDocumentClass<typeof User>>, position: Point | null): void;\n\n    /**\n     * Update display of an active Ruler object for a user given provided data\n     */\n    updateRuler(\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>,\n      rulerData: Parameters<Ruler['update']>[0] | null\n    ): void;\n  }\n\n  namespace ControlsLayer {\n    interface LayerOptions extends CanvasLayer.LayerOptions {\n      name: '';\n      zIndex: 1000;\n    }\n  }\n}\n"]},70155:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\effectsLayer.d.ts","/**\n * A CanvasLayer for displaying visual effects like weather, transitions, flashes, or more\n */\ndeclare class EffectsLayer extends CanvasLayer<EffectsLayer.LayerOptions> {\n  /**\n   * The weather overlay container\n   * @defaultValue `undefined`\n   */\n  weather: PIXI.Container | undefined;\n\n  /**\n   * The currently active weather effect\n   * @defaultValue `undefined`\n   */\n  weatherEffect: SpecialEffect | undefined;\n\n  /**\n   * Track any active emitters within this Scene\n   * @defaultValue `[]`\n   */\n  emitters: PIXI.particles.Emitter[];\n\n  /**\n   * An occlusion filter that prevents weather from being displayed in certain regions\n   * @defaultValue `undefined`\n   */\n  weatherOcclusionFilter: AbstractBaseMaskFilter | undefined;\n\n  /**\n   * @remarks This is not overridden in foundry but reflects the real behavior.\n   */\n  static get instance(): Canvas['effects'];\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * foundry.utils.mergeObject(super.layerOptions, {\n   *  name: \"effects\",\n   *  zIndex: 700\n   * })\n   * ```\n   */\n  static get layerOptions(): EffectsLayer.LayerOptions;\n\n  /** @override */\n  tearDown(): Promise<this>;\n\n  /** @override */\n  draw(): Promise<undefined>;\n\n  /**\n   * Draw the weather container.\n   * @returns The weather container, or null if no effect is present\n   */\n  drawWeather(): Exclude<this['weather'], undefined> | null;\n}\n\ndeclare namespace EffectsLayer {\n  interface LayerOptions extends CanvasLayer.LayerOptions {\n    name: 'effects';\n    zIndex: 700;\n  }\n}\n"]},94217:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\gridLayer.d.ts","/**\n * A CanvasLayer responsible for drawing a square grid\n */\ndeclare class GridLayer extends CanvasLayer<GridLayer.LayerOptions> {\n  constructor();\n\n  /**\n   * The Grid container\n   * @defaultValue `undefined`\n   */\n  grid: BaseGrid | undefined;\n\n  /**\n   * The Grid Highlight container\n   * @defaultValue `undefined`\n   */\n  highlight: PIXI.Container | undefined;\n\n  /**\n   * Map named highlight layers\n   * @defaultValue `{}`\n   */\n  highlightLayers: Record<string, GridHighlight>;\n\n  /**\n   * @remarks This is not overridden in foundry but reflects the real behavior.\n   */\n  static get instance(): Canvas['grid'];\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.layerOptions, {\n   *   name: \"grid\",\n   *   zIndex: 30\n   * }\n   * ```\n   */\n  static get layerOptions(): GridLayer.LayerOptions;\n\n  /**\n   * The grid type rendered in this Scene\n   */\n  get type(): foundry.CONST.GridType;\n\n  /**\n   * A convenient reference to the pixel grid size used throughout this layer\n   */\n  get size(): number;\n\n  /**\n   * Get grid unit width\n   */\n  get w(): BaseGrid['w'];\n\n  /**\n   * Get grid unit height\n   */\n  get h(): BaseGrid['h'];\n\n  /**\n   * A boolean flag for whether the current grid is hexagonal\n   */\n  get isHex(): boolean;\n\n  /**\n   * Draw the grid\n   * @param preview - Override settings used in place of those saved to the Scene data\n   */\n  draw(preview?: DrawOptions): Promise<this>;\n\n  /**\n   * Given a pair of coordinates (x1,y1), return the grid coordinates (x2,y2) which represent the snapped position\n   * @param x        - The exact target location x\n   * @param y        - The exact target location y\n   * @param interval - An interval of grid spaces at which to snap, default is 1. If the interval is zero, no snapping occurs.\n   *                   (defaultValue: `1`)\n   */\n  getSnappedPosition(x: number, y: number, interval?: number): { x: number; y: number };\n\n  /**\n   * Given a pair of coordinates (x, y) - return the top-left of the grid square which contains that point\n   * @returns An Array [x, y] of the top-left coordinate of the square which contains (x, y)\n   */\n  getTopLeft(x: number, y: number): PointArray;\n\n  /**\n   * Given a pair of coordinates (x, y), return the center of the grid square which contains that point\n   * @returns An Array [x, y] of the central point of the square which contains (x, y)\n   */\n  getCenter(x: number, y: number): PointArray;\n\n  /**\n   * Measure the grid-wise distance between two point coordinates.\n   * @param origin - The origin point\n   * @param target - The target point\n   * @returns The measured distance between these points\n   *\n   * @example\n   * ```typescript\n   * let distance = canvas.grid.measureDistance({x: 1000, y: 1000}, {x: 2000, y: 2000});\n   * ```\n   */\n  measureDistance(\n    origin: {\n      x: number;\n      y: number;\n    },\n    target: {\n      x: number;\n      y: number;\n    }\n  ): number;\n\n  /**\n   * Measure the distance traveled over an array of distance segments.\n   * @param segments - An array of measured segments\n   * @param options  - Additional options which modify the measurement\n   */\n  measureDistances(\n    segments: { ray: Ray; label?: Ruler['labels']['children'][number] }[],\n    options?: { gridSpaces?: boolean }\n  ): number[];\n\n  /**\n   * Define a new Highlight graphic\n   * @param name - The name for the referenced highlight layer\n   */\n  addHighlightLayer(name: string): GridHighlight;\n\n  /**\n   * Clear a specific Highlight graphic\n   * @param name - The name for the referenced highlight layer\n   */\n  clearHighlightLayer(name: string): void;\n\n  /**\n   * Destroy a specific Highlight graphic\n   * @param name - The name for the referenced highlight layer\n   */\n  destroyHighlightLayer(name: string): void;\n\n  /**\n   * Obtain the highlight layer graphic by name\n   * @param name - The name for the referenced highlight layer\n   */\n  getHighlightLayer(name: string): GridHighlight | undefined;\n\n  /**\n   * Add highlighting for a specific grid position to a named highlight graphic\n   * @param name    - The name for the referenced highlight layer\n   * @param options - Options for the grid position that should be highlighted\n   */\n  highlightPosition(name: string, options?: Parameters<BaseGrid['highlightGridPosition']>[1]): false | void;\n\n  /**\n   * Test if a specific row and column position is a neighboring location to another row and column coordinate\n   * @param r0 - The original row position\n   * @param c0 - The original column position\n   * @param r1 - The candidate row position\n   * @param c1 - The candidate column position\n   */\n  isNeighbor(r0: number, c0: number, r1: number, c1: number): boolean;\n}\n\ndeclare namespace GridLayer {\n  interface LayerOptions extends CanvasLayer.LayerOptions {\n    name: 'grid';\n    zIndex: 30;\n  }\n}\n\ninterface DrawOptions {\n  /**\n   * @defaultValue `null`\n   */\n  type?: foundry.CONST.GridType | null;\n\n  /**\n   * @defaultValue `null`\n   */\n  dimensions?: Canvas['dimensions'] | null;\n\n  /**\n   * @defaultValue `null`\n   */\n  gridColor?: number | string | null;\n\n  /**\n   * @defaultValue `null`\n   */\n  gridAlpha?: number | null;\n}\n"]},32472:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\index.d.ts","import './controlsLayer';\nimport './effectsLayer';\nimport './gridLayer';\nimport './placeablesLayer';\nimport './sightLayer';\n\nimport './placeablesLayers/drawingsLayer';\nimport './placeablesLayers/lightingLayer';\nimport './placeablesLayers/mapLayer';\nimport './placeablesLayers/mapLayers/backgroundLayer';\nimport './placeablesLayers/mapLayers/foregroundLayer';\nimport './placeablesLayers/notesLayer';\nimport './placeablesLayers/soundsLayer';\nimport './placeablesLayers/templateLayer';\nimport './placeablesLayers/tilesLayer';\nimport './placeablesLayers/tokenLayer';\nimport './placeablesLayers/wallsLayer';\n"]},42620:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayer.d.ts","import {\n  DataSourceForPlaceable,\n  ConfiguredDocumentClass,\n  ConfiguredObjectClassForName,\n  ConfiguredDocumentClassForName,\n  PlaceableDocumentType\n} from '../../../../../types/helperTypes';\nimport EmbeddedCollection from '../../../../common/abstract/embedded-collection.mjs';\n\ntype ConcretePlaceableOrPlaceableObject<T> = T extends PlaceableObject ? T : PlaceableObject;\n\ndeclare global {\n  /**\n   * A subclass of Canvas Layer which is specifically designed to contain multiple PlaceableObject instances,\n   * each corresponding to an embedded Document.\n   * @typeParam DocumentName - The key of the configuration which defines the object and document class.\n   * @typeParam Options      - The type of the options in this layer.\n   */\n  abstract class PlaceablesLayer<\n    DocumentName extends PlaceableDocumentType,\n    Options extends PlaceablesLayer.LayerOptions<DocumentName> = PlaceablesLayer.LayerOptions<DocumentName>\n  > extends CanvasLayer<Options> {\n    constructor();\n\n    /**\n     * Placeable Layer Objects\n     * @defaultValue `null`\n     */\n    objects: PIXI.Container | null;\n\n    /**\n     * Preview Object Placement\n     * @defaultValue `null`\n     */\n    preview: PIXI.Container | null;\n\n    /**\n     * Keep track of history so that CTRL+Z can undo changes\n     */\n    history: Array<\n      CanvasHistory<ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>>\n    >;\n\n    /**\n     * Track the PlaceableObject on this layer which is currently being hovered upon\n     * @defaultValue `null`\n     */\n    protected _hover: ConcretePlaceableOrPlaceableObject<\n      InstanceType<ConfiguredObjectClassForName<DocumentName>>\n    > | null;\n\n    /**\n     * Track the set of PlaceableObjects on this layer which are currently controlled by their id\n     * @defaultValue `{}`\n     */\n    protected _controlled: Record<string, InstanceType<ConfiguredObjectClassForName<DocumentName>>>;\n\n    /**\n     * Keep track of an object copied with CTRL+C which can be pasted later\n     * @defaultValue `[]`\n     */\n    protected _copy: ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>[];\n\n    /**\n     * A Quadtree which partitions and organizes Walls into quadrants for efficient target identification.\n     */\n    quadtree: Quadtree<\n      ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>\n    > | null;\n\n    /** @override */\n    static get layerOptions(): PlaceablesLayer.LayerOptions<any>;\n\n    /**\n     * A reference to the named Document type which is contained within this Canvas Layer.\n     * @remarks This getter is abstract in {@link PlaceablesLayer}.\n     */\n    static documentName: PlaceableDocumentType;\n\n    /**\n     * Obtain a reference to the Collection of embedded Document instances within the currently viewed Scene\n     */\n    get documentCollection(): EmbeddedCollection<\n      ConfiguredDocumentClassForName<DocumentName>,\n      foundry.data.SceneData\n    > | null;\n\n    /**\n     * Define a Container implementation used to render placeable objects contained in this layer\n     */\n    static get placeableClass(): ConstructorOf<PlaceableObject>;\n\n    /**\n     * Return the precision relative to the Scene grid with which Placeable objects should be snapped\n     */\n    get gridPrecision(): number;\n\n    /**\n     * If objects on this PlaceableLayer have a HUD UI, provide a reference to its instance\n     * @remarks Returns `null` unless overridden\n     */\n    get hud(): BasePlaceableHUD<InstanceType<ConfiguredObjectClassForName<DocumentName>>> | null;\n\n    /**\n     * A convenience method for accessing the placeable object instances contained in this layer\n     */\n    get placeables(): InstanceType<ConfiguredObjectClassForName<DocumentName>>[];\n\n    /**\n     * An Array of placeable objects in this layer which have the _controlled attribute\n     */\n    get controlled(): InstanceType<ConfiguredObjectClassForName<DocumentName>>[];\n\n    /**\n     * Obtain an iterable of objects which should be added to this PlaceableLayer\n     */\n    getDocuments(): Exclude<this['documentCollection'], null> | [];\n\n    /**\n     * @override\n     * @remarks It returns Promise<this> but is overridden by a subclass in this way.\n     */\n    draw(): Promise<this | undefined>;\n\n    /**\n     * Draw a single placeable object\n     */\n    createObject(\n      data: InstanceType<ConfiguredDocumentClassForName<DocumentName>>\n    ): InstanceType<ConfiguredObjectClassForName<DocumentName>>;\n\n    /** @override */\n    tearDown(): Promise<this>;\n\n    /** @override */\n    activate(): this;\n\n    /** @override */\n    deactivate(): this;\n\n    /**\n     * Get a PlaceableObject contained in this layer by it's ID\n     *\n     * @param objectId - The ID of the contained object to retrieve\n     * @returns The object instance, or undefined\n     */\n    get(objectId: string): InstanceType<ConfiguredObjectClassForName<DocumentName>> | undefined;\n\n    /**\n     * Acquire control over all PlaceableObject instances which are visible and controllable within the layer.\n     *\n     * @param options - Options passed to the control method of each object\n     *                  (default: `{}`)\n     * @returns An array of objects that were controlled\n     */\n    controlAll(options?: PlaceableObject.ControlOptions): InstanceType<ConfiguredObjectClassForName<DocumentName>>[];\n\n    /**\n     * Release all controlled PlaceableObject instance from this layer.\n     *\n     * @param options - Options passed to the release method of each object\n     *                  (default: `{}`)\n     * @returns The number of PlaceableObject instances which were released\n     */\n    releaseAll(options?: PlaceableObject.ReleaseOptions): number;\n\n    /**\n     * Simultaneously rotate multiple PlaceableObjects using a provided angle or incremental.\n     * This executes a single database operation using Scene.update.\n     * If rotating only a single object, it is better to use the PlaceableObject.rotate instance method.\n     *\n     * @param options - Options which configure how multiple objects are rotated\n     *                  (default: `{}`)\n     * @returns An array of objects which were rotated\n     */\n    rotateMany(options?: RotationOptions): Promise<InstanceType<ConfiguredObjectClassForName<DocumentName>>[]>;\n\n    /**\n     * Simultaneously move multiple PlaceableObjects via keyboard movement offsets.\n     * This executes a single database operation using Scene.update.\n     * If moving only a single object, this will delegate to PlaceableObject.update for performance reasons.\n     *\n     * @param options - Options which configure how multiple objects are moved\n     *                  (default: `{}`)\n     * @returns An array of objects which were moved during the operation\n     */\n    moveMany(\n      options?: MovementOptions\n    ): Promise<InstanceType<ConfiguredObjectClassForName<DocumentName>>[]> | undefined;\n\n    /**\n     * Undo a change to the objects in this layer\n     * This method is typically activated using CTRL+Z while the layer is active\n     */\n    undoHistory(): Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[]>;\n\n    /**\n     * A helper method to prompt for deletion of all PlaceableObject instances within the Scene\n     * Renders a confirmation dialogue to confirm with the requester that all objects will be deleted\n     * @returns An array of Document objects which were deleted by the operation\n     */\n    deleteAll(): Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[] | false | null>;\n\n    /**\n     * Record a new CRUD event in the history log so that it can be undone later\n     * @param type - The event type (create, update, delete)\n     * @param data - The object data\n     */\n    storeHistory(\n      type: PlaceablesLayer.HistoryEventType,\n      data: DataSourceForPlaceable<\n        ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>\n      >\n    ): void;\n\n    /**\n     * Copy currently controlled PlaceableObjects to a temporary Array, ready to paste back into the scene later\n     * @returns The Array of copied PlaceableObject instances\n     */\n    copyObjects(): InstanceType<ConfiguredObjectClassForName<DocumentName>>[];\n\n    /**\n     * Paste currently copied PlaceableObjects back to the layer by creating new copies\n     * @param position - The destination position for the copied data.\n     * @param options  - (default: `{}`);\n     * @returns An Array of created PlaceableObject instances\n     */\n    pasteObjects(\n      position: Point,\n      options?: PasteOptions\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[]>;\n\n    /**\n     * Select all PlaceableObject instances which fall within a coordinate rectangle.\n     * @param options        - (default: `{}`)\n     * @returns A boolean for whether the controlled set was changed in the operation\n     */\n    selectObjects(options?: SelectOptions): boolean;\n\n    /**\n     * Update all objects in this layer with a provided transformation.\n     * Conditionally filter to only apply to objects which match a certain condition.\n     * @param transformation - An object of data or function to apply to all matched objects\n     * @param condition      - A function which tests whether to target each object\n     *                         (default: `null`)\n     * @param options        - Additional options passed to Entity.update\n     *                         (default: `{}`)\n     * @returns An array of updated data once the operation is complete\n     */\n    updateAll(\n      transformation:\n        | ((\n            placeable: InstanceType<ConfiguredObjectClassForName<DocumentName>>\n          ) => Partial<\n            DataSourceForPlaceable<\n              ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>\n            >\n          >)\n        | Partial<\n            DataSourceForPlaceable<\n              ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>\n            >\n          >,\n      condition?: ((placeable: InstanceType<ConfiguredObjectClassForName<DocumentName>>) => boolean) | null,\n      options?: DocumentModificationContext\n    ): Promise<Array<InstanceType<ConfiguredDocumentClassForName<DocumentName>>>>;\n\n    /**\n     * Handle left mouse-click events which originate from the Canvas stage and are dispatched to this Layer.\n     * @param event - (unused)\n     * @see {@link Canvas#_onClickLeft}\n     */\n    protected _onClickLeft(event: PIXI.InteractionEvent): number | void;\n\n    /**\n     * Handle double left-click events which originate from the Canvas stage and are dispatched to this Layer.\n     * @param event - (unused)\n     * @see {@link Canvas#_onClickLeft2}\n     */\n    protected _onClickLeft2(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Start a left-click drag workflow originating from the Canvas stage.\n     * @see {@link Canvas#_onDragLeftStart}\n     * @remarks This returns Promise<void> but is overridden by some subclasses.\n     */\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): Promise<void | PlaceableObject>;\n\n    /**\n     * Continue a left-click drag workflow originating from the Canvas stage.\n     * @see {@link Canvas#_onDragLeftMove}\n     */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Conclude a left-click drag workflow originating from the Canvas stage.\n     * @see {@link Canvas#_onDragLeftDrop}\n     * @remarks Returns always a promise but is overridden in subclasses.\n     */\n    protected _onDragLeftDrop(\n      event: PIXI.InteractionEvent\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>> | void> | void;\n\n    /**\n     * Cancel a left-click drag workflow originating from the Canvas stage.\n     * @param event - (unused)\n     * @see {@link Canvas#_onDragLeftDrop}\n     */\n    protected _onDragLeftCancel(event: PointerEvent): void;\n\n    /**\n     * Handle right mouse-click events which originate from the Canvas stage and are dispatched to this Layer.\n     * @param event - (unused)\n     * @see {@link Canvas#_onClickRight}\n     */\n    protected _onClickRight(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouse-wheel events at the PlaceableObjects layer level to rotate multiple objects at once.\n     * This handler will rotate all controlled objects by some incremental angle.\n     * @param event - The mousewheel event which originated the request\n     * @remarks This methods just returns ReturnType\\<this['rotateMany']\\>|void but is overridden by subclasses\n     */\n    protected _onMouseWheel(\n      event: WheelEvent\n    ):\n      | ReturnType<this['rotateMany']>\n      | ReturnType<InstanceType<ConfiguredObjectClassForName<DocumentName>>['rotate']>\n      | void;\n\n    /**\n     * Handle a DELETE keypress while a placeable object is hovered\n     * @param event - The delete key press event which triggered the request\n     *                (unused)\n     */\n    protected _onDeleteKey(\n      event?: any\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[] | undefined>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    static get dataArray(): string;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    createMany(\n      data: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>[1],\n      options: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>[2]\n    ): ReturnType<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    updateMany(\n      data: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['updateEmbeddedDocuments']>[1],\n      options: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['updateEmbeddedDocuments']>[2]\n    ): ReturnType<InstanceType<ConfiguredDocumentClass<typeof Scene>>['updateEmbeddedDocuments']>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    deleteMany(\n      data: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['deleteEmbeddedDocuments']>[1],\n      options: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['deleteEmbeddedDocuments']>[2]\n    ): ReturnType<InstanceType<ConfiguredDocumentClass<typeof Scene>>['deleteEmbeddedDocuments']>;\n  }\n\n  interface CanvasHistory<Placeable extends PlaceableObject> {\n    /**\n     * The type of operation stored as history (create, update, delete)\n     */\n    type: PlaceablesLayer.HistoryEventType;\n\n    /**\n     * The data corresponding to the action which may later be un-done\n     */\n    data: DataSourceForPlaceable<Placeable>[];\n  }\n\n  namespace PlaceablesLayer {\n    type HistoryEventType = 'create' | 'update' | 'delete';\n\n    /**\n     * @typeParam DocumentName - The key of the configuration which defines the object and document class.\n     */\n    interface LayerOptions<DocumentName extends PlaceableDocumentType> extends CanvasLayer.LayerOptions {\n      /**\n       * Does this layer support a mouse-drag workflow to create new objects?\n       * @defaultValue `game.user.isGM`\n       */\n      canDragCreate: boolean;\n\n      /**\n       * Can placeable objects in this layer be controlled?\n       * @defaultValue `false`\n       */\n      controllableObjects: boolean;\n\n      /**\n       * Can placeable objects in this layer be rotated?\n       * @defaultValue `false`\n       */\n      rotatableObjects: boolean;\n\n      /**\n       * Do objects in this layer snap to the grid\n       * @defaultValue `true`\n       */\n      snapToGrid: boolean;\n\n      /**\n       * The class used to represent an object on this layer.\n       * @defaultValue `getDocumentClass(this.documentName)`\n       */\n      objectClass: ConfiguredObjectClassForName<DocumentName>;\n\n      /**\n       * Does this layer use a quadtree to track object positions?\n       * @defaultValue `false`\n       */\n      quadtree: boolean;\n\n      /**\n       * The FormApplication class used to configure objects on this layer.\n       * @defaultValue `CONFIG[this.documentName].sheetClass`\n       */\n      sheetClass: ConstructorOf<FormApplication>;\n    }\n  }\n}\n\ninterface RotationOptions {\n  /**\n   * A target angle of rotation (in degrees) where zero faces \"south\"\n   */\n  angle?: number;\n\n  /**\n   * An incremental angle of rotation (in degrees)\n   */\n  delta?: number;\n\n  /**\n   * Snap the resulting angle to a multiple of some increment (in degrees)\n   */\n  snap?: number;\n\n  /**\n   * An Array of object IDs to target for rotation\n   */\n  ids?: string[];\n}\n\ninterface MovementOptions {\n  /**\n   * The number of incremental grid units in the horizontal direction\n   * @defaultValue `0`\n   */\n  dx?: number;\n\n  /**\n   * The number of incremental grid units in the vertical direction\n   * @defaultValue `0`\n   */\n  dy?: number;\n\n  /**\n   * Rotate the token to the keyboard direction instead of moving\n   * @defaultValue\n   */\n  rotate?: boolean;\n\n  /**\n   * An Array of object IDs to target for movement\n   * @defaultValue `this.controlled.filter(o => !o.data.locked).map(o => o.id)`\n   */\n  ids?: string[];\n}\n\ninterface PasteOptions {\n  /**\n   * Paste data in a hidden state, if applicable. Default is false.\n   * @defaultValue `false`\n   */\n  hidden?: boolean;\n\n  /**\n   * Snap the resulting objects to the grid. Default is true.\n   * @defaultValue `true`\n   */\n  snap?: boolean;\n}\n\ninterface SelectOptions {\n  /**\n   * The top-left x-coordinate of the selection rectangle\n   */\n  x?: number;\n\n  /**\n   * The top-left y-coordinate of the selection rectangle\n   */\n  y?: number;\n\n  /**\n   * The width of the selection rectangle\n   */\n  width?: number;\n\n  /**\n   * The height of the selection rectangle\n   */\n  height?: number;\n\n  /**\n   * Optional arguments provided to any called release() method\n   * @defaultValue `{}`\n   */\n  releaseOptions?: PlaceableObject.ReleaseOptions;\n\n  /**\n   * Optional arguments provided to any called control() method\n   * @defaultValue `{ releaseOthers: false }`\n   */\n  controlOptions?: PlaceableObject.ControlOptions;\n}\n"]},64366:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\drawingsLayer.d.ts","/**\n * The DrawingsLayer subclass of PlaceablesLayer.\n * This layer implements a container for drawings which are rendered immediately above the BackgroundLayer.\n */\ndeclare class DrawingsLayer extends PlaceablesLayer<'Drawing', DrawingsLayer.LayerOptions> {\n  /**\n   * @remarks This is not overridden in foundry but reflects the real behavior.\n   */\n  static get instance(): Canvas['drawings'];\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.layerOptions, {\n   *   name: \"drawings\"\n   *   canDragCreate: true,\n   *   controllableObjects: true,\n   *   rotatableObjects: true,\n   *   zIndex: 20\n   * })\n   * ```\n   */\n  static get layerOptions(): DrawingsLayer.LayerOptions;\n\n  /** @override */\n  static documentName: 'Drawing';\n\n  /**\n   * The named game setting which persists default drawing configuration for the User\n   */\n  static DEFAULT_CONFIG_SETTING: 'defaultDrawingConfig';\n\n  /**\n   * Use an adaptive precision depending on the size of the grid\n   */\n  get gridPrecision(): 0 | 8 | 16;\n\n  /** @override */\n  get hud(): Canvas['hud']['drawing'];\n\n  /**\n   * Render a configuration sheet to configure the default Drawing settings\n   */\n  configureDefault(): void;\n\n  /**\n   * Override the deactivation behavior of this layer.\n   * Placeables on this layer remain visible even when the layer is inactive.\n   */\n  deactivate(): this;\n\n  /**\n   * Get initial data for a new drawing.\n   * Start with some global defaults, apply user default config, then apply mandatory overrides per tool.\n   * @param origin - The initial coordinate\n   * @returns The new drawing data\n   * @remarks This is used from DrawingConfig and hence public on purpose.\n   */\n  _getNewDrawingData(origin: Point | {}): NewDrawingData;\n\n  /** @override */\n  protected _onClickLeft(event: PIXI.InteractionEvent): void;\n\n  /** @override */\n  protected _onClickLeft2(event: PIXI.InteractionEvent): void | Promise<void>;\n\n  /** @override */\n  protected _onDragLeftStart(event: PIXI.InteractionEvent): ReturnType<Drawing['draw']>;\n\n  /** @override */\n  protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handling of mouse-up events which conclude a new object creation after dragging\n   */\n  protected _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<void>;\n\n  /** @override */\n  protected _onDragLeftCancel(event: PointerEvent): void;\n\n  /** @override */\n  protected _onClickRight(event: PIXI.InteractionEvent): void;\n}\n\ndeclare namespace DrawingsLayer {\n  interface LayerOptions extends PlaceablesLayer.LayerOptions<'Drawing'> {\n    name: 'drawings';\n    canDragCreate: true;\n    controllableObjects: true;\n    rotatableObjects: true;\n    zIndex: 20;\n  }\n}\n\ntype NewDrawingData = ClientSettings.Values['core.defaultDrawingConfig'] &\n  (\n    | {\n        type: typeof foundry.CONST.DRAWING_TYPES.RECTANGLE | typeof foundry.CONST.DRAWING_TYPES.ELLIPSE;\n        points: [];\n      }\n    | {\n        type: typeof foundry.CONST.DRAWING_TYPES.POLYGON;\n        points: PointArray[];\n      }\n    | {\n        type: typeof foundry.CONST.DRAWING_TYPES.FREEHAND;\n        points: PointArray[];\n        bezierFactor: number;\n      }\n    | {\n        type: typeof foundry.CONST.DRAWING_TYPES.TEXT;\n        fillColor: string;\n        fillAlpha: number;\n        strokeColor: string;\n        text: string;\n      }\n  ) & {\n    author: string;\n    fillColor: string;\n    strokeColor: string;\n    fontFamily: typeof CONFIG.defaultFontFamily;\n    x: number | undefined;\n    y: number | undefined;\n  };\n"]},37937:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\lightingLayer.d.ts","/**\n * The Lighting Layer which displays darkness and light within the rendered Scene.\n * Lighting Layer (Container)\n *   Illumination Container [MULTIPLY]\n *     Background (Graphics)\n *     Light (Container) [LOS Mask]\n *       Source 1, ..., Source N (Container)\n *     Darkness (Container)\n *       Source 1, ..., Source N (Container)\n *   Coloration Container [ADD_NPM]\n *\n * @example <caption>The lightingRefresh hook</caption>\n * ```typescript\n * Hooks.on(\"lightingRefresh\", layer => {});\n * ```\n */\ndeclare class LightingLayer extends PlaceablesLayer<'AmbientLight', LightingLayer.LayerOptions> {\n  constructor();\n\n  /**\n   * A mapping of light sources which are active within the rendered Scene\n   */\n  sources: foundry.utils.Collection<PointSource>;\n\n  /**\n   * Increment this whenever lighting channels are re-configured.\n   * This informs lighting and vision sources whether they need to re-render.\n   * @defaultValue `0`\n   */\n  version: number;\n\n  /**\n   * The currently displayed darkness level, which may override the saved Scene value\n   * @defaultValue `0`\n   */\n  protected darknessLevel: number;\n\n  /**\n   * The current client setting for whether global illumination is used or not\n   * @defaultValue `false`\n   */\n  globalLight: boolean;\n\n  /**\n   * The coloration container which visualizes the effect of light sources\n   * @defaultValue `null`\n   */\n  coloration: PIXI.Container | null;\n\n  /**\n   * The illumination container which visualizes darkness and light\n   * @defaultValue `null`\n   */\n  illumination: PIXI.Container | null;\n\n  /**\n   * A flag for whether the darkness level is currently animating\n   * @defaultValue `false`\n   */\n  protected _animating: boolean;\n\n  /**\n   * An array of light sources which are currently animated\n   */\n  protected _animatedSources: PointSource[];\n\n  /**\n   * A mapping of different light level channels\n   * @defaultValue `undefined`\n   */\n  channels: Record<'background' | 'black' | 'bright' | 'canvas' | 'dark' | 'dim', LightChannel> | undefined;\n\n  /** @override */\n  static documentName: 'AmbientLight';\n\n  /**\n   * @remarks This is not overridden in foundry but reflects the real behavior.\n   */\n  static get instance(): Canvas['lighting'];\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * foundry.utils.mergeObject(super.layerOptions, {\n   *  name: \"lighting\",\n   *  rotatableObjects: true,\n   *  quadtree: true,\n   *  zIndex: 300\n   * })\n   * ```\n   */\n  static get layerOptions(): LightingLayer.LayerOptions;\n\n  /**\n   * Configure the lighting channels which are inputs to the ShadowMap\n   */\n  protected _configureChannels(\n    darkness?: number | null\n  ): Record<'background' | 'black' | 'bright' | 'canvas' | 'dark' | 'dim', LightChannel>;\n\n  /**\n   * @override\n   */\n  draw(): Promise<this>;\n\n  /**\n   * Draw the coloration container which is responsible for rendering the visible hue of a light source.\n   * Apply an additive blend to the entire container after each individual light source is blended via screen.\n   */\n  protected _drawColorationContainer(): PIXI.Container;\n\n  /**\n   * Draw the illumination container which is responsible for displaying darkness and light.\n   */\n  protected _drawIlluminationContainer(): PIXI.Container;\n\n  /**\n   * Does this scene currently benefit from global illumination?\n   */\n  hasGlobalIllumination(): boolean;\n\n  /**\n   * Initialize all AmbientLight sources which are present on this layer\n   */\n  initializeSources(): void;\n\n  /**\n   * Refresh the active display of the LightingLayer.\n   * Update the scene background color, light sources, and darkness sources\n   */\n  refresh(darkness?: number | undefined): void;\n\n  /** @override */\n  tearDown(): Promise<this>;\n\n  /**\n   * Activate light source animation for AmbientLight objects within this layer\n   */\n  activateAnimation(): void;\n\n  /**\n   * Deactivate light source animation for AmbientLight objects within this layer\n   */\n  deactivateAnimation(): void;\n\n  /**\n   * The ticker handler which manages animation delegation\n   * @param dt - Delta time\n   */\n  protected _animateSource(dt: number): void;\n\n  /**\n   * Animate a smooth transition of the darkness overlay to a target value.\n   * Only begin animating if another animation is not already in progress.\n   * @param target   - The target darkness level between 0 and 1\n   *                   (default: `1.0`)\n   * @param duration - The desired animation time in milliseconds. Default is 10 seconds\n   *                   (default: `10000`)\n   * @returns A Promise which resolves once the animation is complete\n   */\n  animateDarkness(target?: number, { duration }?: { duration?: number }): Promise<void>;\n\n  /**\n   * Actions to take when the darkness level of the Scene is changed\n   * @param darkness - The new darkness level\n   * @param prior    - The prior darkness level\n   */\n  protected _onDarknessChange(darkness: number, prior: number): void;\n\n  /** @override */\n  protected _onDragLeftStart(event: PIXI.InteractionEvent): Promise<AmbientLight>;\n\n  /** @override */\n  protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n  /** @override */\n  protected _onDragLeftCancel(event: PointerEvent): void;\n\n  /** @override */\n  protected _onMouseWheel(event: WheelEvent): void | ReturnType<AmbientLight['rotate']>;\n}\n\ndeclare namespace LightingLayer {\n  interface LayerOptions extends PlaceablesLayer.LayerOptions<'AmbientLight'> {\n    name: 'lighting';\n    rotatableObjects: true;\n    quadtree: true;\n    zIndex: 300;\n  }\n}\n\ndeclare interface LightChannel {\n  hex: number;\n  rgb: [number, number, number];\n}\n"]},14427:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\mapLayer.d.ts","import { ConfiguredDocumentClassForName, ConfiguredObjectClassForName } from '../../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * A PlaceablesLayer designed for rendering the visual Scene for a specific vertical cross-section.\n   * Each MapLayer contains a single background image as well as an arbitrary number of Tile objects.\n   */\n  class MapLayer<Options extends MapLayer.LayerOptions = MapLayer.LayerOptions<'background'>> extends PlaceablesLayer<\n    'Tile',\n    Options\n  > {\n    /**\n     * @param data - (default: `{}`)\n     */\n    constructor(data?: MapLayerConstructorData);\n\n    /**\n     * The numeric Scene level to which this layer belongs\n     */\n    level: number;\n\n    /**\n     * The background source path\n     */\n    bgPath: string | undefined;\n\n    /**\n     * The layer background image\n     */\n    bg: PIXI.Sprite | undefined;\n\n    static documentName: 'Tile';\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     * It returns the BackgroundLayer but ForegroundLayer has been added for subclasses.\n     */\n    static get instance(): Canvas['background'] | Canvas['foreground'];\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *   name: 'background',\n     *   zIndex: 0,\n     *   controllableObjects: true,\n     *   rotatableObjects: true\n     * })\n     * ```\n     */\n    static get layerOptions(): MapLayer.LayerOptions;\n\n    /**\n     * Return the base HTML image or video element which is used to generate the background Sprite.\n     */\n    get bgSource(): HTMLImageElement | HTMLVideoElement | null;\n\n    get hud(): TileHUD;\n\n    /**\n     * Is the background texture used in this layer a video?\n     */\n    get isVideo(): boolean;\n\n    /**\n     * An array of Tile objects which are rendered within the objects container\n     */\n    get tiles(): InstanceType<ConfiguredObjectClassForName<'Tile'>>[];\n\n    deactivate(): this;\n\n    tearDown(): Promise<this>;\n\n    /**\n     * @override\n     * @remarks It returns Promise<this> but is overridden by a subclass in this way.\n     */\n    draw(): Promise<this | undefined>;\n\n    /**\n     * Draw the background Sprite for the layer, aligning its dimensions with those configured for the canvas.\n     * @returns The rendered Sprite, or undefined if no background is present\n     */\n    protected _drawBackground(): PIXI.Sprite | undefined;\n\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): Promise<void>;\n\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    protected _onDragLeftDrop(event: PIXI.InteractionEvent): void;\n\n    protected _onDragLeftCancel(event: PointerEvent): void;\n\n    /**\n     * Handle drop events for Tile data on the Tiles Layer\n     * @param event - The concluding drag event\n     * @param data - The extracted Tile data\n     */\n    protected _onDropData(\n      event: DragEvent,\n      data:\n        | { type: 'Tile'; img: string; tileSize?: number; x: number; y: number }\n        | ({ type: string } & Partial<Record<string, unknown>>)\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<'Tile'>> | undefined>;\n\n    /**\n     * Prepare the data object when a new Tile is dropped onto the canvas\n     * @param event - The concluding drag event\n     * @param data  - The extracted Tile data\n     * @returns The prepared data to create\n     */\n    protected _getDropData(\n      event: DragEvent,\n      data: MapLayer.DropData\n    ): Promise<ConstructorParameters<typeof foundry.documents.BaseTile>[0]>;\n  }\n\n  namespace MapLayer {\n    interface LayerOptions<Name extends 'background' | 'foreground' = 'background' | 'foreground'>\n      extends PlaceablesLayer.LayerOptions<'Tile'> {\n      name: Name;\n      zIndex: 0;\n      controllableObjects: true;\n      rotatableObjects: true;\n    }\n\n    type DropData =\n      | { type: 'Tile'; img: string; tileSize?: number; x: number; y: number }\n      | ({ type: string } & Partial<Record<string, unknown>>);\n  }\n}\n\ninterface MapLayerConstructorData {\n  bgPath?: string;\n  /**\n   * @defaultValue `1`\n   */\n  level?: number;\n}\n"]},30015:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\mapLayers\\backgroundLayer.d.ts","import { ConfiguredObjectClassForName, DataSourceForPlaceable } from '../../../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * An extension of the MapLayer that displays underfoot in the background of the Scene.\n   */\n  class BackgroundLayer extends MapLayer {\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['background'];\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get layerOptions(): MapLayer.LayerOptions<'background'>;\n\n    /**\n     * The outline of the scene\n     */\n    outline: PIXI.Graphics | undefined;\n\n    draw(): Promise<this>;\n\n    /**\n     * Draw a background outline which emphasizes what portion of the canvas is playable space and what is buffer.\n     */\n    protected _drawOutline(): PIXI.Graphics | undefined;\n\n    getDocuments(): Exclude<this['documentCollection'], null>;\n\n    getZIndex(): number;\n\n    storeHistory(\n      type: PlaceablesLayer.HistoryEventType,\n      data: DataSourceForPlaceable<InstanceType<ConfiguredObjectClassForName<'Tile'>>>\n    ): void;\n  }\n}\n"]},82525:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\mapLayers\\foregroundLayer.d.ts","import { ConfiguredObjectClassForName } from '../../../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * An extension of the MapLayer that displays overhead in the foreground of the Scene.\n   */\n  class ForegroundLayer extends MapLayer<MapLayer.LayerOptions<'foreground'>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *   name: \"foreground\"\n     * })\n     * ```\n     */\n    static get layerOptions(): MapLayer.LayerOptions<'foreground'>;\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['foreground'];\n\n    /**\n     * Get an array of overhead Tile objects which are roofs\n     */\n    get roofs(): InstanceType<ConfiguredObjectClassForName<'Tile'>>[];\n\n    /**\n     * Determine whether to display roofs\n     */\n    get displayRoofs(): boolean;\n\n    draw(): Promise<undefined>;\n\n    /**\n     * Draw the container used to cache the position of Token occlusion shapes to a RenderTexture\n     */\n    protected _drawOcclusionMask(): CachedContainer;\n\n    deactivate(): this;\n\n    tearDown(): Promise<this>;\n\n    getZIndex(): number;\n\n    getDocuments(): Exclude<this['documentCollection'], null>;\n\n    /**\n     * Refresh the display of tiles on the Foreground Layer depending on Token occlusion.\n     */\n    refresh(): void;\n\n    /**\n     * Update occlusion for all tiles on the foreground layer\n     */\n    updateOcclusion(): void;\n\n    /**\n     * Draw the container which caches token-based occlusion shapes\n     * @param tokens - The set of currently observed tokens\n     */\n    protected _drawOcclusionShapes(tokens: ConfiguredObjectClassForName<'Token'>[]): void;\n\n    protected _getDropData(\n      event: DragEvent,\n      data:\n        | { type: 'Tile'; img: string; tileSize?: number; x: number; y: number }\n        | ({ type: string } & Partial<Record<string, unknown>>)\n    ): Promise<ConstructorParameters<typeof foundry.documents.BaseTile>[0]>;\n  }\n}\n"]},55500:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\notesLayer.d.ts","import { DropData } from '../../../../clientDocumentMixin';\n\ndeclare global {\n  /**\n   * The Notes Layer which contains Note canvas objects\n   */\n  class NotesLayer extends PlaceablesLayer<'Note', NotesLayer.LayerOptions> {\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['notes'];\n\n    /**\n     * @override\n     * @defaultValue\n     * ```\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *  name: 'notes',\n     *  canDragCreate: false,\n     *  sortActiveTop: true,\n     *  zIndex: 60\n     * })\n     * ```\n     */\n    static get layerOptions(): NotesLayer.LayerOptions;\n\n    /** @override */\n    static documentName: 'Note';\n\n    /**\n     * The named core setting which tracks the toggled visibility state of map notes\n     */\n    static TOGGLE_SETTING: 'notesDisplayToggle';\n\n    /** @override */\n    activate(): this;\n\n    /** @override */\n    deactivate(): this;\n\n    /**\n     * Register game settings used by the NotesLayer\n     */\n    static registerSettings(): void;\n\n    /** @override */\n    protected _onMouseDown(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle JournalEntry entity drop data\n     */\n    protected _onDropData(event: DragEvent, data: DropData<JournalEntry>): Promise<false | void>;\n  }\n\n  namespace NotesLayer {\n    interface LayerOptions extends PlaceablesLayer.LayerOptions<'Note'> {\n      name: 'notes';\n      canDragCreate: false;\n      sortActiveTop: true;\n      zIndex: 60;\n    }\n\n    type DropData = {\n      type?: 'JournalEntry';\n    } & Canvas.DropPosition &\n      DeepPartial<any>; // TODO: Update this\n  }\n}\n"]},80419:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\soundsLayer.d.ts","/**\n * This Canvas Layer provides a container for AmbientSound objects.\n * @see {@link AmbientSound}\n */\ndeclare class SoundsLayer extends PlaceablesLayer<'AmbientSound', SoundsLayer.LayerOptions> {\n  /**\n   * Track whether to actively preview ambient sounds with mouse cursor movements\n   * @defaultValue `false`\n   */\n  livePreview: boolean;\n\n  /**\n   * @remarks This is not overridden in foundry but reflects the real behavior.\n   */\n  static get instance(): Canvas['sounds'];\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * foundry.utils.mergeObject(super.layerOptions, {\n   *  name: \"sounds\",\n   *  zIndex: 300\n   * })\n   * ```\n   * */\n  static get layerOptions(): SoundsLayer.LayerOptions;\n\n  /** @override */\n  static documentName: 'AmbientSound';\n\n  /** @override */\n  tearDown(): Promise<this>;\n\n  /**\n   * Initialize all AmbientSound sources which are present on this layer\n   */\n  initializeSources(): void;\n\n  /**\n   * Update all AmbientSound effects in the layer by toggling their playback status.\n   * Sync audio for the positions of tokens which are capable of hearing.\n   * @param options - Additional options forwarded to AmbientSound synchronization\n   *                  (defaultValue: `{}`)\n   */\n  refresh(options?: { fade?: number }): number | void;\n\n  /**\n   * Preview ambient audio for a given mouse cursor position\n   * @param position - The cursor position to preview\n   */\n  previewSound(position: Point): void;\n\n  /**\n   * Terminate playback of all ambient audio sources\n   */\n  stopAll(): void;\n\n  /**\n   * Sync the playing state and volume of all AmbientSound objects based on the position of listener points\n   * @param listeners - Locations of listeners which have the capability to hear\n   * @param options   - Additional options forwarded to AmbientSound synchronization\n   *                    (defaultValue: `{}`)\n   */\n  protected _syncPositions(listeners: Point[], options?: { fade?: number }): void;\n\n  /**\n   * Define the easing function used to map radial distance to volume.\n   * Uses cosine easing which graduates from volume 1 at distance 0 to volume 0 at distance 1\n   * @returns The target volume level\n   */\n  protected _getEasingVolume(distance: number, radius: number): number;\n\n  /**\n   * Actions to take when the darkness level of the Scene is changed\n   * @param darkness - The new darkness level\n   * @param prior    - The prior darkness level\n   */\n  protected _onDarknessChange(darkness: number, prior: number): void;\n\n  /**\n   * Handle mouse cursor movements which may cause ambient audio previews to occur\n   * @param event - The initiating mouse move interaction event\n   */\n  protected _onMouseMove(event: PIXI.InteractionEvent): void;\n\n  /** @override */\n  protected _onDragLeftStart(event: PIXI.InteractionEvent): ReturnType<AmbientSound['draw']>;\n\n  /** @override */\n  protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n  /** @override */\n  protected _onDragLeftDrop(event: PIXI.InteractionEvent): void;\n\n  /** @override */\n  protected _onDragLeftCancel(event: PointerEvent): void;\n\n  /**\n   * @deprecated since 0.8.2\n   */\n  update(options?: { fade?: number }): ReturnType<this['refresh']>;\n}\n\ndeclare namespace SoundsLayer {\n  interface LayerOptions extends PlaceablesLayer.LayerOptions<'AmbientSound'> {\n    name: 'sounds';\n    zIndex: 300;\n  }\n}\n"]},76322:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\templateLayer.d.ts","/**\n * This Canvas Layer provides a container for MeasuredTemplate objects.\n * @see {@link MeasuredTemplate}\n */\ndeclare class TemplateLayer extends PlaceablesLayer<'MeasuredTemplate', TemplateLayer.LayerOptions> {\n  /**\n   * @remarks This is not overridden in foundry but reflects the real behavior.\n   */\n  static get instance(): Canvas['templates'];\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * mergeObject(super.layerOptions, {\n   *   name: \"templates\",\n   *   canDragCreate: true,\n   *   rotatableObjects: true,\n   *   sortActiveTop: true,\n   *   zIndex: 50\n   * })\n   * ```\n   */\n  static get layerOptions(): TemplateLayer.LayerOptions;\n\n  /** @override */\n  static documentName: 'MeasuredTemplate';\n\n  /** @override */\n  activate(): this;\n\n  /** @override */\n  deactivate(): this;\n\n  /**\n   * Register game settings used by the TemplatesLayer\n   */\n  static registerSettings(): void;\n\n  /** @override */\n  protected _onDragLeftStart(event: PIXI.InteractionEvent): Promise<MeasuredTemplate>;\n\n  /** @override */\n  protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n  /**\n   * @override\n   */\n  protected _onMouseWheel(event: WheelEvent): void | ReturnType<MeasuredTemplate['rotate']>;\n}\n\ndeclare namespace TemplateLayer {\n  interface LayerOptions extends PlaceablesLayer.LayerOptions<'MeasuredTemplate'> {\n    name: 'templates';\n    canDragCreate: true;\n    rotatableObjects: true;\n    sortActiveTop: true;\n    zIndex: 50;\n  }\n}\n"]},29347:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\tokenLayer.d.ts","import { ConfiguredDocumentClass, ConfiguredObjectClassForName } from '../../../../../../types/helperTypes';\nimport { SelectOptions } from '../placeablesLayer';\n\ndeclare global {\n  /**\n   * The Tokens Container\n   */\n  class TokenLayer extends PlaceablesLayer<'Token', TokenLayer.LayerOptions> {\n    constructor();\n\n    /**\n     * The current index position in the tab cycle\n     * @defaultValue `null`\n     */\n    protected _tabIndex: number | null;\n\n    /**\n     * Remember the last drawn wildcard token image to avoid repetitions\n     * @defaultValue `null`\n     */\n    protected _lastWildcard: string | null;\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['tokens'];\n\n    /**\n     * @override\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *  name: \"tokens\",\n     *  canDragCreate: false,\n     *  controllableObjects: true,\n     *  rotatableObjects: true,\n     *  zIndex: 100\n     * })\n     * ```\n     */\n    static get layerOptions(): TokenLayer.LayerOptions;\n\n    /**\n     * @override\n     */\n    static documentName: 'Token';\n\n    /** @override */\n    get gridPrecision(): 1;\n\n    /**\n     * Token objects on this layer utilize the TokenHUD\n     */\n    get hud(): TokenHUD;\n\n    /**\n     * An Array of tokens which belong to actors which are owned\n     */\n    get ownedTokens(): ReturnType<this['placeables']['filter']>;\n\n    /** @override */\n    tearDown(): Promise<this>;\n\n    /** @override */\n    activate(): this;\n\n    /** @override */\n    deactivate(): this;\n\n    /**\n     * @override\n     * @param options - (default: `{}`)\n     */\n    selectObjects(options?: SelectOptions): boolean;\n\n    /**\n     * Target all Token instances which fall within a coordinate rectangle.\n     *\n     * @param x             - The top-left x-coordinate of the selection rectangle\n     * @param y             - The top-left y-coordinate of the selection rectangle\n     * @param width         - The width of the selection rectangle\n     * @param height        - The height of the selection rectangle\n     * @param releaseOthers - Whether or not to release other targeted tokens\n     *                        (default: `true`)\n     * @returns The number of Token instances which were targeted.\n     */\n    targetObjects(\n      { x, y, width, height }: { x: number; y: number; width: number; height: number },\n      { releaseOthers }?: { releaseOthers?: boolean }\n    ): number;\n\n    /**\n     * Cycle the controlled token by rotating through the list of Owned Tokens that are available within the Scene\n     * Tokens are currently sorted in order of their TokenID\n     *\n     * @param forwards - Which direction to cycle. A truthy value cycles forward, while a false value cycles backwards.\n     * @param reset    - Restart the cycle order back at the beginning?\n     * @returns The Token object which was cycled to, or null\n     */\n    cycleTokens(forwards: boolean, reset: boolean): InstanceType<ConfiguredObjectClassForName<'Token'>> | null;\n\n    /**\n     * Add or remove the set of currently controlled Tokens from the active combat encounter\n     * @param  state  - The desired combat state which determines if each Token is added (true) or removed (false)\n     *                  (default: `true`)\n     * @param  combat - A Combat encounter from which to add or remove the Token\n     *                  (default: `null`)\n     * @param  token  - A specific Token which is the origin of the group toggle request\n     *                  (default: `null`)\n     * @returns The updated Combat encounter\n     * @remarks Returns the created Combatants or undefined if there is no combat and one can't be created\n     *          or the combat if the user is no GM and wants to remove combatants.\n     */\n    toggleCombat(\n      state?: boolean,\n      combat?: InstanceType<ConfiguredDocumentClass<typeof Combat>> | null,\n      { token }?: { token?: InstanceType<ConfiguredObjectClassForName<'Token'>> | null }\n    ): Promise<\n      | InstanceType<ConfiguredDocumentClass<typeof Combat>>\n      | InstanceType<ConfiguredDocumentClass<typeof Combatant>>[]\n      | void\n    >;\n\n    /**\n     * Get the tab cycle order for tokens by sorting observable tokens based on their distance from top-left.\n     */\n    protected _getCycleOrder(): InstanceType<ConfiguredObjectClassForName<'Token'>>[];\n\n    /**\n     * Immediately conclude the animation of any/all tokens\n     */\n    concludeAnimation(): void;\n\n    /**\n     * Handle dropping of Actor data onto the Scene canvas\n     */\n    protected _onDropActorData(\n      event: DragEvent,\n      data: TokenLayer.DropData\n    ): Promise<void | false | InstanceType<ConfiguredObjectClassForName<'Token'>>>;\n  }\n\n  namespace TokenLayer {\n    interface LayerOptions extends PlaceablesLayer.LayerOptions<'Token'> {\n      name: 'tokens';\n      canDragCreate: false;\n      controllableObjects: true;\n      rotatableObjects: true;\n      zIndex: 100;\n    }\n\n    interface DropData extends Canvas.DropPosition {\n      id?: string;\n      type?: 'Actor';\n      pack?: string;\n    }\n  }\n}\n"]},98586:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\wallsLayer.d.ts","import { ConfiguredDocumentClass, ConfiguredObjectClassForName } from '../../../../../../types/helperTypes';\nimport { PasteOptions } from '../placeablesLayer';\n\ndeclare global {\n  /**\n   * The Walls canvas layer which provides a container for Wall objects within the rendered Scene.\n   * @see {@link WallDocument}\n   * @see {@link Wall}\n   */\n  class WallsLayer extends PlaceablesLayer<'Wall', WallsLayer.LayerOptions> {\n    constructor();\n\n    /**\n     * A graphics layer used to display chained Wall selection\n     * @defaultValue `null`\n     */\n    chain: PIXI.Graphics | null;\n\n    /**\n     * An array of all the unique perception-blocking endpoints which are present in the layer\n     * We keep this array cached for faster sight polygon computations\n     * @defaultValue `[]`\n     */\n    endpoints: PointArray[];\n\n    /**\n     * Track whether we are currently within a chained placement workflow\n     * @defaultValue `false`\n     */\n    protected _chain: boolean;\n\n    /**\n     * Track whether the layer is currently toggled to snap at exact grid precision\n     * @defaultValue `false`\n     */\n    protected _forceSnap: boolean;\n\n    /**\n     * Track the most recently created or updated wall data for use with the clone tool\n     * @defaultValue `null`\n     * @remarks This is intentional `public` because it is accessed from Wall\n     */\n    _cloneType: ReturnType<foundry.documents.BaseWall['toJSON']> | null;\n\n    /**\n     * Reference the last interacted wall endpoint for the purposes of chaining\n     * @defaultValue\n     * ```\n     * {\n     *   id: null,\n     *   point: null,\n     * }\n     * ```\n     */\n    protected last: {\n      id: string | null;\n      point: PointArray | null;\n    };\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['walls'];\n\n    /**\n     * @override\n     * @defaultValue\n     * ```\n     * mergeObject(super.layerOptions, {\n     *  name: \"walls\"\n     *  controllableObjects: true,\n     *  objectClass: Wall,\n     *  quadtree: true,\n     *  sheetClass: WallConfig,\n     *  sortActiveTop: true,\n     *  zIndex: 40\n     * })\n     * ```\n     */\n    static get layerOptions(): WallsLayer.LayerOptions;\n\n    /** @override */\n    static documentName: 'Wall';\n\n    /**\n     * An Array of Wall instances in the current Scene which act as Doors.\n     */\n    get doors(): InstanceType<ConfiguredObjectClassForName<'Wall'>>[];\n\n    /**\n     * Gate the precision of wall snapping to become less precise for small scale maps.\n     * @remarks Returns `1 | 4 | 8 | 16`\n     */\n    get gridPrecision(): number;\n\n    /**\n     * @override\n     */\n    draw(): Promise<this>;\n\n    /** @override */\n    deactivate(): this;\n\n    /**\n     * Perform initialization steps for the WallsLayer whenever the composition of walls in the Scene is changed.\n     * Cache unique wall endpoints and identify interior walls using overhead roof tiles.\n     */\n    initialize(): void;\n\n    /**\n     * Identify walls which are treated as \"interior\" because they are contained fully within a roof tile.\n     */\n    identifyInteriorWalls(): void;\n\n    /**\n     * Given a point and the coordinates of a wall, determine which endpoint is closer to the point\n     * @param point - The origin point of the new Wall placement\n     * @param wall  - The existing Wall object being chained to\n     * @returns The [x,y] coordinates of the starting endpoint\n     */\n    static getClosestEndpoint(point: Point, wall: InstanceType<ConfiguredObjectClassForName<'Wall'>>): PointArray;\n\n    /**\n     * Given an array of Wall instances, identify the unique endpoints across all walls.\n     * @param walls   - An array of Wall instances\n     * @param options - Additional options which modify the set of endpoints identified\n     *                  (defaultValue: `{}`)\n     * @returns An array of endpoints\n     */\n    static getUniqueEndpoints(\n      walls:\n        | InstanceType<ConfiguredObjectClassForName<'Wall'>>[]\n        | Set<InstanceType<ConfiguredObjectClassForName<'Wall'>>>,\n      options?: EndpointOptions\n    ): PointArray[];\n\n    /**\n     * Test whether movement along a given Ray collides with a Wall.\n     * @param ray     - The attempted movement\n     * @param options - Options which customize how collision is tested\n     * @returns Does a collision occur?\n     */\n    checkCollision(ray: Ray, options: CollisionOptions & { mode: 'all' }): boolean | RayIntersection[];\n    checkCollision(ray: Ray, options: CollisionOptions & { mode: 'closest' }): boolean | RayIntersection | null;\n    checkCollision(ray: Ray, options: CollisionOptions & { mode: 'any' }): boolean;\n    checkCollision(ray: Ray, options: Omit<CollisionOptions, 'mode'>): boolean;\n    checkCollision(ray: Ray, options: CollisionOptions): boolean | RayIntersection | null;\n    checkCollision(ray: Ray, options?: CollisionOptions): boolean;\n\n    /**\n     * Highlight the endpoints of Wall segments which are currently group-controlled on the Walls layer\n     */\n    highlightControlledSegments(): void;\n\n    /** @override */\n    releaseAll(options?: PlaceableObject.ReleaseOptions): number;\n\n    /**\n     * @override\n     * @param options - (unused)\n     */\n    pasteObjects(\n      position: Point,\n      options?: PasteOptions\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseWall>>[]>;\n\n    /**\n     * Pan the canvas view when the cursor position gets close to the edge of the frame\n     * @param event - The originating mouse movement event\n     * @param x     - The x-coordinate\n     * @param y     - The y-coordinate\n     */\n    protected _panCanvasEdge(event: MouseEvent, x: number, y: number): void | ReturnType<Canvas['animatePan']>;\n\n    /**\n     * Get the endpoint coordinates for a wall placement, snapping to grid at a specified precision\n     * Require snap-to-grid until a redesign of the wall chaining system can occur.\n     * @param  point - The initial candidate point\n     * @param  snap  - Whether to snap to grid\n     *                 (default: `true`)\n     * @returns The endpoint coordinates [x,y]\n     */\n    protected _getWallEndpointCoordinates(point: Point, { snap }?: { snap?: boolean }): PointArray;\n\n    /**\n     * The Scene Controls tools provide several different types of prototypical Walls to choose from\n     * This method helps to translate each tool into a default wall data configuration for that type\n     * @param tool - The active canvas tool\n     */\n    protected _getWallDataFromActiveTool(tool: string):\n      | {\n          move: foundry.CONST.WallMovementType;\n          sense: foundry.CONST.WallSenseType;\n          door?: foundry.CONST.WallDoorType;\n        }\n      | this['_cloneType'];\n\n    /** @override */\n    protected _onClickLeft(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): Promise<Wall>;\n\n    /** @override */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftDrop(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftCancel(event: PointerEvent): void;\n\n    /** @override */\n    protected _onClickRight(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Compute source polygons of a requested type for a given origin position and maximum radius.\n     * This method returns two polygons, one which is unrestricted by the provided radius, and one that is constrained\n     * by the maximum radius.\n     *\n     * @param origin  - An point with coordinates x and y representing the origin of the test\n     * @param radius  - A distance in canvas pixels which reflects the visible range\n     * @param options - Additional options which modify the sight computation\n     *                  (default: `{}`)\n     * @returns The computed rays and polygons\n     */\n    computePolygon(\n      origin: Point,\n      radius: number,\n      options?: ComputePolygonOptions\n    ): { rays: Ray[]; los: PIXI.Polygon; fov: PIXI.Polygon };\n\n    /**\n     * Get the set of wall collisions for a given Ray\n     * @param ray     - The Ray being tested\n     * @param options - Options which customize how collision is tested\n     *                  (default: `{}`)\n     * @returns An array of collisions, if mode is \"all\"\n     *          The closest collision, if mode is \"closest\"\n     *          Whether any collision occurred if mode is \"any\"\n     */\n    getRayCollisions(ray: Ray, options: RayCollisionsOptions & { mode: 'all' }): RayIntersection[];\n    getRayCollisions(ray: Ray, options: RayCollisionsOptions & { mode: 'closest' }): RayIntersection | null;\n    getRayCollisions(ray: Ray, options: RayCollisionsOptions & { mode: 'any' }): boolean;\n    getRayCollisions(ray: Ray, options?: Partial<Omit<RayCollisionsOptions, 'mode'>>): RayIntersection[];\n    getRayCollisions(ray: Ray, options?: RayCollisionsOptions): RayIntersection[] | RayIntersection | boolean | null;\n\n    /**\n     * A helper method responsible for casting rays at wall endpoints.\n     * Rays are restricted by limiting angles.\n     *\n     * @param x          - The origin x-coordinate\n     * @param y          - The origin y-coordinate\n     * @param distance   - The ray distance\n     * @param density    - The desired radial density\n     *                     (default: `4`)\n     * @param endpoints  - An array of endpoints to target\n     * @param limitAngle - Whether the rays should be cast subject to a limited angle of emission\n     *                     (default: `false`)\n     * @param aMin       - The minimum bounding angle\n     * @param aMax       - The maximum bounding angle\n     *\n     * @returns An array of Ray objects\n     */\n    static castRays(\n      x: number,\n      y: number,\n      distance: number,\n      {\n        density,\n        endpoints,\n        limitAngle,\n        aMin,\n        aMax\n      }?: { density?: number; endpoints?: PointArray[]; limitAngle?: boolean; aMin?: number; aMax?: number }\n    ): Ray[];\n\n    /**\n     * Test a single Ray against a single Wall\n     * @param ray  - The Ray being tested\n     * @param wall - The Wall against which to test\n     * @returns A RayIntersection if a collision occurred, or null\n     */\n    static testWall(ray: Ray, wall: InstanceType<ConfiguredObjectClassForName<'Wall'>>): RayIntersection | null;\n\n    /**\n     * Identify the closest collision point from an array of collisions\n     * @param collisions - An array of intersection points\n     * @returns The closest blocking intersection or null if no collision occurred\n     */\n    static getClosestCollision(collisions: RayIntersection[]): RayIntersection | null;\n\n    /**\n     * Normalize an angle to ensure it is baselined to be the smallest angle that is greater than a minimum.\n     * @param aMin  - The lower-bound minimum angle\n     * @param angle - The angle to adjust\n     * @returns The adjusted angle which is greater than or equal to aMin.\n     */\n    protected static _normalizeAngle(aMin: number, angle: number): number;\n\n    /**\n     * Map source types to wall collision types\n     * @param type - The source polygon type\n     * @returns The wall collision attribute\n     */\n    protected static _mapCollisionType(type: 'movement'): 'move';\n    protected static _mapCollisionType(type: 'light'): 'sense';\n    protected static _mapCollisionType(type: 'sight'): 'sense';\n    protected static _mapCollisionType(type: 'sound'): 'sound';\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    get blockVision(): InstanceType<ConfiguredObjectClassForName<'Wall'>>[];\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    get blockMovement(): InstanceType<ConfiguredObjectClassForName<'Wall'>>[];\n  }\n\n  namespace WallsLayer {\n    interface LayerOptions extends PlaceablesLayer.LayerOptions<'Wall'> {\n      name: 'walls';\n      controllableObjects: true;\n      objectClass: ConstructorOf<Wall>;\n      quadtree: true;\n      sheetClass: ConstructorOf<FormApplication>;\n      sortActiveTop: boolean;\n      zIndex: number;\n    }\n  }\n}\n\ninterface EndpointOptions {\n  /**\n   * An optional bounding rectangle within which the endpoint must lie.\n   */\n  bounds?: NormalizedRectangle;\n\n  /**\n   * The type of polygon being computed: \"movement\", \"sight\", or \"sound\"\n   * @defaultValue `'movement'`\n   */\n  type?: 'movement' | 'sight' | 'sound';\n}\n\ninterface CollisionOptions {\n  /**\n   * Which collision type to check: movement, sight, sound\n   * @defaultValue `'movement'`\n   */\n  type?: 'movement' | 'sight' | 'sound';\n\n  /**\n   * Which type of collisions are returned: any, closest, all\n   * @defaultValue `'any'`\n   */\n  mode?: 'any' | 'closest' | 'all';\n}\n\ninterface ComputePolygonOptions {\n  /**\n   * The type of polygon being computed: \"movement\", \"sight\", or \"sound\"\n   * @defaultValue `'sight'`\n   */\n  type?: 'movement' | 'sight' | 'sound';\n\n  /**\n   * An optional limited angle of emission with which to restrict polygons\n   * @defaultValue `360`\n   */\n  angle?: number;\n\n  /**\n   * The desired radial density of emission for rays, in degrees\n   * @defaultValue `6`\n   */\n  density?: number;\n\n  /**\n   * The current angle of rotation, used when the angle is limited\n   * @defaultValue `0`\n   */\n  rotation?: number;\n\n  /**\n   * Compute sight that is fully unrestricted by walls\n   * @defaultValue `false`\n   */\n  unrestricted?: boolean;\n}\n\ninterface RayCollisionsOptions {\n  /**\n   * Which collision type to check: movement, sight, sound\n   * @defaultValue `'movement'`\n   */\n  type?: 'movement' | 'sight' | 'sound';\n\n  /**\n   * Which type of collisions are returned: any, closest, all\n   * @defaultValue `'all'`\n   */\n  mode?: `any` | `closest` | `all`;\n\n  /**\n   * Internal performance tracking\n   */\n  _performance?: { tests: number };\n}\n"]},67628:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\sightLayer.d.ts","/**\n * The Sight Layer which implements dynamic vision, lighting, and fog of war\n * This layer uses an event-driven workflow to perform the minimal required calculation in response to changes.\n * @see PointSource\n *\n * The container structure of this layer is as follows:\n * sight: SightLayer              The SightLayer itself\n *   msk: PIXI.Graphics           A masking rectangle that restricts exploration to the scene background\n *   unexplored: PIXI.Graphics    An unexplored background that spans the entire scene canvas\n *   explored: PIXI.Container     The exploration container\n *      revealed: PIXI.Container  The container of areas which have been previously revealed\n *        saved: PIXI.Sprite      The saved FOW exploration texture from the database\n *        pending: PIXI.Container A container of pending exploration polygons that have not yet been saved\n *        roofs: PIXI.Container   A container of occluded roof sprites which should not be marked as explored\n *      current: PIXI.Container   The current vision container\n *        los: PIXI.Graphics      The current line-of-sight polygon\n *        fov: PIXI.Graphics      The current filed-of-view polygon\n *      msk: PIXI.Graphics        The masking rectangle that limits exploration to the Scene background\n *\n * @example <caption>The sightRefresh hook</caption>\n * ```typescript\n * Hooks.on(\"sightRefresh\", layer => {});\n * ```\n */\nimport { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  class SightLayer extends CanvasLayer<SightLayer.LayerOptions> {\n    constructor();\n\n    /**\n     * The FogExploration document which applies to this canvas view\n     * @defaultValue `null`\n     */\n    exploration: InstanceType<ConfiguredDocumentClass<typeof FogExploration>> | null;\n\n    /**\n     * A Collection of vision sources which are currently active within the rendered Scene.\n     */\n    sources: foundry.utils.Collection<PointSource>;\n\n    /**\n     * The canonical line-of-sight polygon which defines current Token visibility.\n     */\n    los: PIXI.Graphics;\n\n    /**\n     * A status flag for whether the layer initialization workflow has succeeded\n     * @defaultValue `false`\n     */\n    protected _initialized: boolean;\n\n    /**\n     * A pool of fog of war exploration containers that can be recycled\n     * @defaultValue `[]`\n     */\n    protected _visionPool: PIXI.Container[];\n\n    /**\n     * Track whether fog of war exploration has been updated and required saving\n     * @defaultValue `false`\n     */\n    protected _fogUpdated: boolean;\n\n    /**\n     * Track the number of moves which have updated fog of war\n     * @defaultValue `0`\n     */\n    protected _fogUpdates: number;\n\n    /**\n     * A debounced function to save fog of war exploration once a stream of updates have stopped\n     */\n    debounceSaveFog: (...args: Parameters<this['saveFog']>) => void;\n\n    /**\n     * The configured resolution used for the saved fog-of-war texture\n     * @defaultValue `undefined`\n     */\n    protected _fogResolution: { resolution: number; width: number; height: number } | undefined;\n\n    /**\n     * Define the threshold value for the number of distinct Wall endpoints.\n     * Below this threshold, exact vision computation is used by casting a Ray at every endpoint.\n     * Above this threshold, approximate vision computation is used by culling to only nearby endpoints.\n     * @defaultValue `200`\n     */\n    static EXACT_VISION_THRESHOLD: number;\n\n    /**\n     * Define the number of positions that are explored before a set of fog updates are pushed to the server.\n     * @defaultValue `10`\n     */\n    static FOG_COMMIT_THRESHOLD: number;\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['sight'];\n\n    /**\n     * @override\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *  name: 'sight',\n     *  zIndex: 400\n     * })\n     * ```\n     */\n    static get layerOptions(): SightLayer.LayerOptions;\n\n    /**\n     * Does the currently viewed Scene support Token field of vision?\n     */\n    get tokenVision(): boolean;\n\n    /**\n     * Does the currently viewed Scene support fog of war exploration?\n     */\n    get fogExploration(): boolean;\n\n    /** @override */\n    tearDown(): Promise<this>;\n\n    /**\n     * Initialize the Sight Layer. Initialization has the following hierarchical workflow:\n     *\n     * Initialize Layer (reset entire layer)\n     *  InitializeLights (used to reset all lights)\n     *    UpdateLight (update a single light)\n     *  InitializeTokens (reset all tokens)\n     *    UpdateToken (update a single token)\n     *  Initialize Fog (reset FOW state)\n     */\n    initialize(): Promise<void>;\n\n    /**\n     * Initialize fog of war - resetting it when switching scenes or re-drawing the canvas\n     */\n    initializeFog(): Promise<void>;\n\n    /**\n     * Initialize all Token sight sources which are present on this layer\n     */\n    initializeSources(): Promise<void>;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    /**\n     * Construct a vision container that is used to render a single view position.\n     * These containers are placed into the _visionPool and recycled as needed.\n     */\n    protected _createVisionContainer(): PIXI.Container;\n\n    /**\n     * Obtain a vision container from the recycling pool, or create one if no container exists.\n     * Assign the container as the current fog exploration and the current LOS polygon.\n     */\n    protected _getVisionContainer(): PIXI.Container;\n\n    /**\n     * Return a vision container back to the pool, recycling it for future use.\n     * @param c - The container to recycle\n     */\n    protected _recycleVisionContainer(c: PIXI.Container): void;\n\n    /**\n     * Update the display of the sight layer.\n     * Organize sources into rendering queues and draw lighting containers for each source\n     *\n     * @param forceUpdateFog - Always update the Fog exploration progress for this update\n     *                         (default: `false`)\n     * @param noUpdateFog    - Never update the Fog exploration progress for this update\n     *                         (default: `false`)\n     */\n    refresh({\n      forceUpdateFog,\n      noUpdateFog\n    }?: {\n      forceUpdateFog?: boolean;\n      noUpdateFog?: boolean;\n    }): void | ReturnType<this['restrictVisibility']>;\n\n    /**\n     * Restrict the visibility of certain canvas assets (like Tokens or DoorControls) based on the visibility polygon\n     * These assets should only be displayed if they are visible given the current player's field of view\n     */\n    restrictVisibility(): void;\n\n    /**\n     * Test whether a point on the Canvas is visible based on the current vision and LOS polygons\n     *\n     * @param point     - The point in space to test, an object with coordinates x and y.\n     * @param tolerance - A numeric radial offset which allows for a non-exact match. For example, if\n     *                    tolerance is 2 then the test will pass if the point is within 2px of a vision\n     *                    polygon.\n     *                    (defaultValue: `2`)\n     * @param object    - An optional reference to the object whose visibility is being tested\n     *                    (defaultValue: `null`)\n     *\n     * @returns Whether the point is currently visible.\n     */\n    testVisibility(\n      point: Point,\n      { tolerance, object }?: { tolerance?: number; object?: PIXI.DisplayObject | null }\n    ): boolean;\n\n    /**\n     * Once a new Fog of War location is explored, composite the explored container with the current staging sprite\n     * Save that staging Sprite as the rendered fog exploration and swap it out for a fresh staging texture\n     * Do all this asynchronously, so it doesn't block token movement animation since this takes some extra time\n     */\n    commitFog(): void;\n\n    /**\n     * Load existing fog of war data from local storage and populate the initial exploration sprite\n     */\n    loadFog(): Promise<PIXI.Texture | void>;\n\n    /**\n     * Dispatch a request to reset the fog of war exploration status for all users within this Scene.\n     * Once the server has deleted existing FogExploration documents, the _onResetFog handler will re-draw the canvas.\n     */\n    resetFog(): Promise<void>;\n\n    /**\n     * Save Fog of War exploration data to a base64 string to the FogExploration document in the database.\n     * Assumes that the fog exploration has already been rendered as fog.rendered.texture.\n     */\n    saveFog(): Promise<void>;\n\n    /**\n     * Update the fog layer when a player token reaches a board position which was not previously explored\n     * @param source - The vision source for which the fog layer should update\n     * @param force  - Force fog to be updated even if the location is already explored\n     *                 (default: `false`)\n     */\n    updateFog(source: PointSource, force?: boolean): void;\n\n    /**\n     * Choose an adaptive fog rendering resolution which downscales the saved fog textures for larger dimension Scenes.\n     * It is important that the width and height of the fog texture is evenly divisible by the downscaling resolution.\n     */\n    protected _configureFogResolution(): { resolution: number; width: number; height: number };\n\n    /**\n     * If fog of war data is reset from the server, re-draw the canvas\n     */\n    protected _handleResetFog(): Promise<void>;\n\n    /**\n     * Visualize the sight layer to understand algorithm performance.\n     * @param bounds    - The initial rectangular bounds of the vision check\n     * @param endpoints - The wall endpoints being tested\n     * @param rays      - The array of cast vision Rays\n     * @param los       - The resulting line-of-sight polygon\n     * @param fov       - The resulting field-of-vision polygon\n     */\n    protected static _visualizeSight(\n      bounds: Rectangle,\n      endpoints: PointArray[],\n      rays: Ray[],\n      los: PIXI.Polygon,\n      fov: PIXI.Polygon\n    ): void;\n\n    /**\n     * @deprecated since 0.8.2\n     * @see WallsLayer#computePolygon\n     * Compute line-of-sight and field-of-vision polygons for a given origin position and visibility radius.\n     * The line-of-sight polygon defines the unrestricted area of visibility for the source.\n     * The field-of-vision polygon defines the restricted area of visibility for the source.\n     * @param angle        - (default: `360`)\n     * @param density      - (default: `6`)\n     * @param rotation     - (default: `0`)\n     * @param unrestricted - (default: `false`)\n     */\n    static computeSight(\n      origin: Point,\n      radius: number,\n      {\n        angle,\n        density,\n        rotation,\n        unrestricted\n      }?: { angle?: number; density?: number; rotation?: number; unrestricted?: boolean }\n    ): { rays: Ray[]; los: PIXI.Polygon; fov: PIXI.Polygon };\n  }\n\n  namespace SightLayer {\n    interface LayerOptions extends CanvasLayer.LayerOptions {\n      name: 'sight';\n      zIndex: 400;\n    }\n  }\n}\n"]},32013:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\controlIcon.d.ts","/**\n * A generic helper for drawing a standard Control Icon\n */\ndeclare class ControlIcon extends PIXI.Container {\n  /**\n   * @param size        - (default: `40`)\n   * @param borderColor - (default: `0xFF5500`)\n   * @param tint        - (default: `null`)\n   */\n  constructor({\n    texture,\n    size,\n    borderColor,\n    tint\n  }: {\n    texture: string;\n    size?: number;\n    borderColor?: number;\n    tint?: number | null;\n  });\n\n  iconSrc: string;\n\n  size: number;\n\n  rect: [number, number, number, number];\n\n  borderColor: number;\n\n  tintColor: number | null;\n\n  /**\n   * @defaultValue `true`\n   */\n  interactive: boolean;\n\n  /**\n   * @defaultValue `false`\n   */\n  interactiveChildren: boolean;\n\n  hitArea: PIXI.Rectangle;\n\n  bg: PIXI.Graphics;\n\n  icon: PIXI.Sprite;\n\n  border: PIXI.Graphics;\n\n  draw(): Promise<this>;\n\n  protected _onHoverIn(event: PIXI.InteractionEvent): void;\n\n  protected _onHoverOut(event: PIXI.InteractionEvent): void;\n}\n"]},65002:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\cursor.d.ts","/**\n * A single Mouse Cursor\n */\ndeclare class Cursor extends PIXI.Container {\n  constructor(user: User);\n\n  target: { x: number; y: number };\n\n  /**\n   * Draw the user's cursor as a small dot with their user name attached as text\n   */\n  draw(user: User): void;\n\n  /**\n   * Move an existing cursor to a new position smoothly along the animation loop\n   */\n  protected _animate(): void;\n\n  /**\n   * Remove the cursor update from the animation loop and destroy the container.\n   * @param options - Additional options passed to the parent `PIXI.Container.destroy()` method\n   */\n  destroy(options?: { children?: boolean; texture?: boolean; baseTexture?: boolean }): void;\n}\n"]},88729:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\doorControl.d.ts","/**\n * An icon representing a Door Control\n */\ndeclare class DoorControl extends PIXI.Container {\n  constructor(wall: Wall);\n\n  wall: Wall;\n\n  /**\n   * Draw the DoorControl icon, displaying it's icon texture and border\n   */\n  draw(): Promise<this>;\n\n  icon?: PIXI.Sprite;\n\n  bg?: PIXI.Graphics;\n\n  border?: PIXI.Graphics;\n\n  /**\n   * Get the icon texture to use for the Door Control icon based on the door state\n   */\n  protected _getTexture(): Promise<ReturnType<typeof getTexture>>;\n\n  reposition(): void;\n\n  /**\n   * Determine whether the DoorControl is visible to the calling user's perspective.\n   * The control is always visible if the user is a GM and no Tokens are controlled.\n   * @see {@link SightLayer#testVisibility}\n   */\n  get isVisible(): boolean;\n\n  protected _onMouseOver(ev: PIXI.InteractionEvent): void;\n\n  protected _onMouseOut(ev: JQuery.Event | PIXI.InteractionEvent): void;\n\n  /**\n   * Handle left mouse down events on the door control icon.\n   * This should only toggle between the OPEN and CLOSED states.\n   */\n  protected _onMouseDown(event: PIXI.InteractionEvent): false | void;\n\n  /**\n   * Handle right mouse down events on the door control icon\n   * This should toggle whether the door is LOCKED or CLOSED\n   */\n  protected _onRightDown(event: PIXI.InteractionEvent): void;\n}\n"]},54378:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObject.d.ts","import { ConfiguredDocumentClass } from '../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../common/abstract/document.mjs';\nimport { Document } from '../../../common/abstract/module.mjs';\n\ndeclare global {\n  /**\n   * An Abstract Base Class which defines a Placeable Object which represents an Entity placed on the Canvas\n   */\n  abstract class PlaceableObject<\n    D extends Document<any, InstanceType<ConfiguredDocumentClass<typeof Scene>>> = Document<\n      any,\n      InstanceType<ConfiguredDocumentClass<typeof Scene>>\n    >\n  > extends PIXI.Container {\n    /**\n     * @param document - The Document instance which is represented by this object\n     */\n    constructor(document: D);\n\n    /**\n     * Retain a reference to the Scene within which this Placeable Object resides\n     */\n    scene: InstanceType<ConfiguredDocumentClass<typeof Scene>>;\n\n    /**\n     * A reference to the Scene embedded Document instance which this object represents\n     */\n    document: D;\n\n    /**\n     * The underlying data object which provides the basis for this placeable object\n     */\n    data: D['data'];\n\n    /**\n     * Track the field of vision for the placeable object.\n     * This is necessary to determine whether a player has line-of-sight towards a placeable object or vice-versa\n     * @defaultValue `{ fov: undefined, los: undefined }`\n     */\n    vision: Vision;\n\n    /**\n     * A control icon for interacting with the object\n     * @defaultValue `null`\n     */\n    controlIcon: ControlIcon | null;\n\n    /**\n     * A mouse interaction manager instance which handles mouse workflows related to this object.\n     * @defaultValue `null`\n     */\n    mouseInteractionManager: MouseInteractionManager<this, ControlIcon | this> | null;\n\n    /**\n     * An indicator for whether the object is currently controlled\n     * @defaultValue `false`\n     */\n    protected _controlled: boolean;\n\n    /**\n     * An indicator for whether the object is currently a hover target\n     * @defaultValue `false`\n     */\n    protected _hover: boolean;\n\n    /**\n     * Identify the official EmbeddedEntity name for this PlaceableObject class\n     * @remarks This getter is abstract in {@link PlaceableObject}.\n     */\n    static embeddedName: string;\n\n    /**\n     * The bounding box for this PlaceableObject.\n     * This is required if the layer uses a Quadtree, otherwise it is optional\n     */\n    get bounds(): Rectangle;\n\n    /**\n     * The central coordinate pair of the placeable object based on it's own width and height\n     * @remarks `{ x: number, y: number }` has been added because of `Token.center`\n     */\n    get center(): PIXI.Point | { x: number; y: number };\n\n    /**\n     * The id of the corresponding Document which this PlaceableObject represents.\n     */\n    get id(): string;\n\n    /**\n     * The field-of-vision polygon for the object, if it has been computed\n     */\n    get fov(): this['vision']['fov'];\n\n    /**\n     * Provide a reference to the CanvasLayer which contains this PlaceableObject.\n     */\n    get layer(): 'layer' extends keyof D ? D['layer'] : PIXI.Container;\n\n    /**\n     * The line-of-sight polygon for the object, if it has been computed\n     */\n    get los(): this['vision']['los'];\n\n    /**\n     * A Form Application which is used to configure the properties of this Placeable Object or the EmbeddedEntity\n     * it represents.\n     */\n    get sheet(): 'sheet' extends keyof D ? D['sheet'] : FormApplication | null;\n\n    /**\n     * Test whether a user can perform a certain interaction with regards to a Placeable Object\n     * @param user   - The User performing the action\n     * @param action - The named action being attempted\n     * @returns Does the User have rights to perform the action?\n     */\n    can(\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>,\n      action: 'HUD' | 'configure' | 'control' | 'view' | 'create' | 'drag' | 'hover' | 'update' | 'delete' | string\n    ): boolean;\n\n    /**\n     * Can the User access the HUD for this Placeable Object?\n     * @param user  - (unused)\n     * @param event - (unused)\n     */\n    protected _canHUD(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /**\n     * Does the User have permission to configure the Placeable Object?\n     * @param user  - (unused)\n     * @param event - (unused)\n     */\n    protected _canConfigure(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /**\n     * Does the User have permission to control the Placeable Object?\n     * @param user  - (unused)\n     * @param event - (unused)\n     */\n    protected _canControl(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /**\n     * Does the User have permission to view details of the Placeable Object?\n     * @param user  - (unused)\n     * @param event - (unused)\n     */\n    protected _canView(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /**\n     * Does the User have permission to create the underlying Embedded Entity?\n     * @param event - (unused)\n     */\n    protected _canCreate(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /**\n     * Does the User have permission to drag this Placeable Object?\n     * @param event - (unused)\n     */\n    protected _canDrag(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /**\n     * Does the User have permission to hover on this Placeable Object?\n     * @param event - (unused)\n     */\n    protected _canHover(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /**\n     * Does the User have permission to update the underlying Embedded Entity?\n     * @param event - (unused)\n     */\n    protected _canUpdate(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /**\n     * Does the User have permission to delete the underlying Embedded Entity?\n     * @param event - (unused)\n     */\n    protected _canDelete(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /**\n     * Clear the display of the existing object\n     * @returns The cleared object\n     */\n    clear(): this;\n\n    /**\n     * Clone the placeable object, returning a new object with identical attributes\n     * The returned object is non-interactive, and has no assigned ID\n     * If you plan to use it permanently you should call the create method\n     *\n     * @returns A new object with identical data\n     */\n    clone(): this;\n\n    /** @override */\n    destroy(options?: Parameters<PIXI.Container['destroy']>[0]): void;\n\n    /**\n     * Draw the placeable object into its parent container\n     * @returns The drawn object\n     */\n    abstract draw(): Promise<this>;\n\n    /**\n     * Refresh the current display state of the Placeable Object\n     * @returns The refreshed object\n     * @remarks `void` has been added because of `Drawing.refresh`\n     */\n    abstract refresh(): this | void;\n\n    /**\n     * Register pending canvas operations which should occur after a new PlaceableObject of this type is created\n     * @param data    - (unused)\n     * @param options - (unused)\n     * @param userId  - (unused)\n     * @remarks Second variant has been added because of `Token._onCreate()`\n     */\n    protected _onCreate(data: D['data']['_source'], options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * Define additional steps taken when an existing placeable object of this type is updated with new data\n     * @param options - (unused)\n     * @param userId  - (unused)\n     * @remarks Called without options and userId in Drowing._onUpdate\n     */\n    protected _onUpdate(\n      changed: DeepPartial<D['data']['_source']>,\n      options?: DocumentModificationOptions,\n      userId?: string\n    ): void;\n\n    /**\n     * Define additional steps taken when an existing placeable object of this type is deleted\n     * @param options - (unused)\n     * @param userId  - (unused)\n     */\n    protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * Assume control over a PlaceableObject, flagging it as controlled and enabling downstream behaviors\n     * @param options - Additional options which modify the control request\n     *                  (default: `{}`)\n     * @returns A flag denoting whether or not control was successful\n     */\n    control(options?: PlaceableObject.ControlOptions): boolean;\n\n    /**\n     * Additional events which trigger once control of the object is established\n     * @param options - Optional parameters which apply for specific implementations\n     *                  (unused)\n     */\n    protected _onControl(options?: PlaceableObject.ControlOptions): void;\n\n    /**\n     * Release control over a PlaceableObject, removing it from the controlled set\n     * @param options - Options which modify the releasing workflow\n     *                  (default: `{}`)\n     * @returns A Boolean flag confirming the object was released.\n     */\n    release(options?: PlaceableObject.ReleaseOptions): boolean;\n\n    /**\n     * Additional events which trigger once control of the object is released\n     * @param options - Options which modify the releasing workflow\n     *                  (unused)\n     */\n    protected _onRelease(options?: PlaceableObject.ReleaseOptions): void;\n\n    /**\n     * Rotate the PlaceableObject to a certain angle of facing\n     * @param angle - The desired angle of rotation\n     * @param snap  - Snap the angle of rotation to a certain target degree increment\n     * @returns A Promise which resolves once the rotation has completed\n     */\n    rotate(angle: number, snap: number): Promise<this>;\n\n    /**\n     * Determine a new angle of rotation for a PlaceableObject either from an explicit angle or from a delta offset.\n     * @param options - An object which defines the rotation update parameters\n     * @param angle - An explicit angle, either this or delta must be provided\n     *                (default: `null`)\n     * @param delta - A relative angle delta, either this or the angle must be provided\n     *                (default: `0`)\n     * @param snap  - A precision (in degrees) to which the resulting angle should snap.\n     *                (default: `0`)\n     * @returns The new rotation angle for the object\n     */\n    protected _updateRotation({ angle, delta, snap }?: RotationOptions): number;\n\n    /**\n     * Obtain a shifted position for the Placeable Object\n     * @param dx - The number of grid units to shift along the X-axis\n     * @param dy - The number of grid units to shift along the Y-axis\n     * @returns The shifted target coordinates\n     */\n    protected _getShiftedPosition(dx: number, dy: number): { x: number; y: number };\n\n    /**\n     * Activate interactivity for the Placeable Object\n     */\n    activateListeners(): void;\n\n    /**\n     * Create a standard MouseInteractionManager for the PlaceableObject\n     */\n    protected _createInteractionManager(): NonNullable<this['mouseInteractionManager']>;\n\n    /**\n     * Actions that should be taken for this Placeable Object when a mouseover event occurs\n     * @see MouseInteractionManager#_handleMouseOver\n     * @param event   - The triggering canvas interaction event\n     * @param options - Options which customize event handling\n     *                  (default: `{}`)\n     */\n    protected _onHoverIn(event: PIXI.InteractionEvent, options?: HoverInOptions): false | void;\n\n    /**\n     * Actions that should be taken for this Placeable Object when a mouseout event occurs\n     * @param event - The triggering canvas interaction event\n     */\n    protected _onHoverOut(event: PIXI.InteractionEvent): false | void;\n\n    /**\n     * Callback actions which occur on a single left-click event to assume control of the object\n     * @see MouseInteractionManager#_handleClickLeft\n     * @param event - The triggering canvas interaction event\n     */\n    protected _onClickLeft(event: PIXI.InteractionEvent): boolean | void;\n\n    /**\n     * Callback actions which occur on a double left-click event to activate\n     * @see MouseInteractionManager#_handleClickLeft2\n     * @param event - The triggering canvas interaction event\n     */\n    protected _onClickLeft2(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Callback actions which occur on a single right-click event to configure properties of the object\n     * @see MouseInteractionManager#_handleClickRight\n     * @param event - The triggering canvas interaction event\n     */\n    protected _onClickRight(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Callback actions which occur on a double right-click event to configure properties of the object\n     * @see MouseInteractionManager#_handleClickRight2\n     * @param event - The triggering canvas interaction event\n     */\n    protected _onClickRight2(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Callback actions which occur when a mouse-drag action is first begun.\n     * @see MouseInteractionManager#_handleDragStart\n     * @param event - The triggering canvas interaction event\n     */\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Callback actions which occur on a mouse-move operation.\n     * @see MouseInteractionManager#_handleDragMove\n     * @param event - The triggering canvas interaction event\n     */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Callback actions which occur on a mouse-move operation.\n     * @see MouseInteractionManager#_handleDragDrop\n     * @param event - The triggering canvas interaction event\n     * @remarks `ReturnType<D['update']>` is just returned by subclasses.\n     */\n    protected _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<false | this | D[] | ReturnType<D['update']>>;\n\n    /**\n     * Callback actions which occur on a mouse-move operation.\n     * @see MouseInteractionManager#_handleDragCancel\n     * @param event - The triggering mouse click event\n     */\n    protected _onDragLeftCancel(event: MouseEvent): void;\n\n    /**\n     * @deprecated since 0.8.0\n     * @param options - (default: `{}`)\n     */\n    static create(\n      data:\n        | Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>[1]\n        | Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>[1][],\n      options?: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>[1]\n    ): ReturnType<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    update(data: Parameters<D['update']>[0], options: Parameters<D['update']>[1]): ReturnType<D['update']>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    delete(options: Parameters<D['delete']>[0]): ReturnType<D['delete']>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    getFlag(scope: string, key: string): ReturnType<D['getFlag']>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    setFlag(scope: string, key: string, value: unknown): ReturnType<D['setFlag']>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    unsetFlag(scope: string, key: string): ReturnType<D['unsetFlag']>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    get uuid(): string;\n\n    /**\n     * @deprecated since 0.8.2\n     */\n    static get layer(): PlaceablesLayer<any>;\n  }\n\n  namespace PlaceableObject {\n    interface ControlOptions {\n      /**\n       * Release any other controlled objects first\n       */\n      releaseOthers?: boolean;\n    }\n\n    interface ReleaseOptions {\n      trigger?: boolean;\n    }\n  }\n}\n\ninterface Vision {\n  /**\n   * @remarks\n   * This is required but has been set to optional because of PointSource\n   */\n  fov?: PIXI.Polygon | null;\n\n  /**\n   * @remarks\n   * This is required but has been set to optional because of PointSource\n   */\n  los?: PIXI.Polygon | null;\n}\n\ninterface RotationOptions {\n  /**\n   * An explicit angle, either this or delta must be provided\n   * @defaultValue `undefined`\n   */\n  angle?: number;\n\n  /**\n   * A relative angle delta, either this or the angle must be provided\n   * @defaultValue `0`\n   */\n  delta?: number;\n\n  /**\n   * A precision (in degrees) to which the resulting angle should snap. Default is 0.\n   * @defaultValue `0`\n   */\n  snap?: number;\n}\n\ninterface HoverInOptions {\n  /**\n   * Trigger hover-out behavior on sibling objects\n   *\n   * @defaultValue `true`\n   */\n  hoverOutOthers: boolean;\n}\n"]},29383:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\ambientLight.d.ts","import { BaseAmbientLight } from '../../../../common/documents.mjs';\n\ndeclare global {\n  /**\n   * An AmbientLight is an implementation of PlaceableObject which represents a dynamic light source within the Scene.\n   *\n   * @example\n   * ```typescript\n   * AmbientLight.create<AmbientLight>({\n   *   t: \"l\",\n   *   x: 1000,\n   *   y: 1000,\n   *   rotation: 0,\n   *   dim: 30,\n   *   bright: 15,\n   *   angle: 360,\n   *   tintColor: \"#FF0000\",\n   *   tintAlpha: 0.05\n   * });\n   * ```\n   */\n  class AmbientLight extends PlaceableObject<BaseAmbientLight> {\n    /**\n     * A reference to the PointSource object which defines this light source area of effect\n     */\n    source: PointSource;\n\n    /** @override */\n    static embeddedName: 'AmbientLight';\n\n    /** @override */\n    get bounds(): NormalizedRectangle;\n\n    /**\n     * Test whether a specific AmbientLight source provides global illumination\n     */\n    get global(): boolean;\n\n    /**\n     * Get the pixel radius of dim light emitted by this light source\n     */\n    get dimRadius(): number;\n\n    /**\n     * Get the pixel radius of bright light emitted by this light source\n     */\n    get brightRadius(): number;\n\n    /**\n     * Return whether the light source is currently visible in the scene\n     */\n    get isVisible(): boolean;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    /**\n     * Draw the ControlIcon for the AmbientLight\n     */\n    protected _drawControlIcon(): ControlIcon;\n\n    /** @override */\n    refresh(): this;\n\n    /**\n     * The named identified for the source object associated with this light\n     */\n    get sourceId(): string;\n\n    /**\n     * Update the source object associated with this light\n     * @param defer   - Defer refreshing the LightingLayer to manually call that refresh later.\n     * @param deleted - Indicate that this light source has been deleted.\n     */\n    updateSource({ defer, deleted }?: { defer: boolean; deleted: boolean }): boolean | null | void;\n\n    /** @override */\n    protected _onCreate(): void;\n\n    /** @override */\n    protected _onUpdate(data: AmbientLight.Data): void;\n\n    /** @override */\n    protected _onDelete(): void;\n\n    /** @override */\n    protected _canHUD(user: User, event?: any): boolean;\n\n    /** @override */\n    protected _canConfigure(user: User, event?: any): boolean;\n\n    /** @override */\n    protected _onClickRight(event: PIXI.InteractionEvent): Promise<this>;\n\n    /** @override */\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftCancel(event: MouseEvent): void;\n  }\n\n  namespace AmbientLight {\n    interface Data {\n      angle: number;\n      bright: number;\n      darknessThreshold: number;\n      dim: number;\n      hidden: boolean;\n      lightAnimation: { speed: number; intensity: number; type?: keyof typeof CONFIG['Canvas']['lightAnimations'] };\n      locked: boolean;\n      rotation: number;\n      t: foundry.CONST.SourceType;\n      tintAlpha: number;\n      x: number;\n      y: number;\n    }\n  }\n}\n"]},17913:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\ambientSound.d.ts","import { BaseAmbientSound } from '../../../../common/documents.mjs';\n\ndeclare global {\n  /**\n   * An AmbientSound is an implementation of PlaceableObject which represents a dynamic audio source within the Scene.\n   *\n   * @example\n   * ```typescript\n   * AmbientSound.create({\n   *   t: \"l\",\n   *   x: 1000,\n   *   y: 1000,\n   *   radius: 60,\n   *   easing: true,\n   *   path: \"sounds/audio-file.mp3\",\n   *   repeat: true,\n   *   volume: 0.4\n   * });\n   * ```\n   */\n  class AmbientSound extends PlaceableObject<BaseAmbientSound> {\n    /**\n     * The Howl instance used to play this AmbientSound effect\n     */\n    howl: any;\n\n    /**\n     * The Howl sound ID of the playing instance of this sound\n     */\n    howlId?: number;\n\n    /**\n     * Create an audio helper instance to use for the Ambient Sound\n     */\n    protected _createHowl(): any;\n\n    /** @override */\n    static get embeddedName(): 'AmbientSound';\n\n    /**\n     * @remarks\n     * Not implemented for AmbientSound\n     */\n    get bounds(): never;\n\n    /**\n     * A convenience accessor for the sound type\n     */\n    get type(): 'l' | 'g';\n\n    /**\n     * A convenience accessor for the sound radius in pixels\n     */\n    get radius(): number;\n\n    /**\n     * Toggle playback of the sound depending on whether or not it is audible\n     * @param isAudible - Is the sound audible?\n     * @param volume    - The target playback volume\n     * @param fade      - Whether to fade the volume from its previous level\n     */\n    play(isAudible: boolean, volume?: number, { fade }?: { fade?: boolean }): void | number;\n\n    /**\n     * @override\n     * @remarks\n     * Returns void\n     */\n    clear(): any;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    /**\n     * Draw the graphical preview of the audio source area of effect\n     */\n    protected drawField(): PIXI.Container;\n\n    /**\n     * Draw the ControlIcon for the AmbientLight\n     */\n    protected _drawControlIcon(): ControlIcon;\n\n    /** @override */\n    refresh(): this;\n\n    /**\n     * Compute the field-of-vision for an object, determining its effective line-of-sight and field-of-vision polygons\n     * @returns An object containing the rays, LOS polygon, and FOV polygon for the light\n     */\n    computeFOV(): {\n      fov: PIXI.Polygon | null;\n      los: PIXI.Polygon | null;\n      rays: Array<Ray> | null;\n    };\n\n    /** @override */\n    protected _onCreate(): void;\n\n    /** @override */\n    protected _onUpdate(data: AmbientSound.Data): void;\n\n    /** @override */\n    protected _onDelete(): void;\n  }\n\n  namespace AmbientSound {\n    interface Data {\n      easing: boolean;\n      path: string;\n      radius: number;\n      repeat: boolean;\n      type: 'l' | 'g';\n      volume: number;\n      x: number;\n      y: number;\n    }\n  }\n}\n"]},51018:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\drawing.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * The Drawing object is an implementation of the PlaceableObject container.\n   * Each Drawing is a placeable object in the DrawingsLayer.\n   */\n  class Drawing extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>> {\n    constructor(document: InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>);\n    /**\n     * @remarks Not used for `Drawing`\n     */\n    controlIcon: null;\n\n    /**\n     * The inner drawing container\n     * @defaultValue `null`\n     */\n    drawing: PIXI.Container | null;\n\n    /**\n     * The primary drawing shape\n     * @defaultValue `null`\n     */\n    shape: PIXI.Graphics | null;\n\n    /**\n     * Text content, if included\n     * @defaultValue `null`\n     */\n    text: PIXI.Text | null;\n\n    /**\n     * The Graphics outer frame and handles\n     * @defaultValue `null`\n     */\n    frame: PIXI.Container | null;\n\n    /**\n     * Internal timestamp for the previous freehand draw time, to limit sampling\n     * @defaultValue `0`\n     */\n    protected _drawTime: number;\n    protected _sampleTime: number;\n\n    /**\n     * Internal flag for the permanent points of the polygon\n     * @defaultValue `foundry.utils.deepClone(this.data.points || [])`\n     */\n    protected _fixedPoints: Array<[x: number, y: number]>;\n\n    /** @override */\n    static get embeddedName(): 'Drawing';\n\n    /**\n     * The rate at which points are sampled (in milliseconds) during a freehand drawing workflow\n     * @defaultValue `75`\n     */\n    static FREEHAND_SAMPLE_RATE: number;\n\n    /**\n     * A Boolean flag for whether or not the Drawing utilizes a tiled texture background\n     */\n    get isTiled(): boolean;\n\n    /**\n     * A Boolean flag for whether or not the Drawing is a Polygon type (either linear or freehand)\n     */\n    get isPolygon(): boolean;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    /**\n     * Clean the drawing data to constrain its allowed position\n     */\n    protected _cleanData(): void;\n\n    /**\n     * Create the components of the drawing element, the drawing container, the drawn shape, and the overlay text\n     */\n    protected _createDrawing(): void;\n\n    /**\n     * Create elements for the foreground text\n     */\n    protected _createText(): PreciseText;\n\n    /**\n     * Create elements for the Drawing border and handles\n     */\n    protected _createFrame(): void;\n\n    /** @override */\n    refresh(): void;\n\n    /**\n     * Draw rectangular shapes\n     */\n    protected _drawRectangle(): void;\n\n    /**\n     * Draw ellipsoid shapes\n     */\n    protected _drawEllipse(): void;\n\n    /**\n     * Draw polygonal shapes\n     */\n    protected _drawPolygon(): void;\n\n    /**\n     * Draw freehand shapes with bezier spline smoothing\n     */\n    protected _drawFreehand(): void;\n\n    /**\n     * Attribution: The equations for how to calculate the bezier control points are derived from Rob Spencer's article:\n     * http://scaledinnovation.com/analytics/splines/aboutSplines.html\n     * @param factor   - The smoothing factor\n     * @param previous - The prior point\n     * @param point    - The current point\n     * @param next     - The next point\n     */\n    protected _getBezierControlPoints(\n      factor: number,\n      previous: [number, number],\n      point: [number, number],\n      next: [number, number]\n    ): {\n      cp1: {\n        x: number;\n        y: number;\n      };\n      next_cp0: {\n        x: number;\n        y: number;\n      };\n    };\n\n    /**\n     * Refresh the boundary frame which outlines the Drawing shape\n     */\n    protected _refreshFrame({ x, y, width, height }: Rectangle): void;\n\n    /**\n     * Add a new polygon point to the drawing, ensuring it differs from the last one\n     * @param temporary - (default: `true`)\n     */\n    protected _addPoint(position: Point, temporary?: boolean): void;\n\n    /**\n     * Remove the last fixed point from the polygon\n     */\n    protected _removePoint(): void;\n\n    /** @override */\n    protected _onControl(options: PlaceableObject.ControlOptions & { isNew?: boolean }): void;\n\n    /** @override */\n    protected _onRelease(options: PlaceableObject.ReleaseOptions): void;\n\n    /** @override */\n    protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * Handle text entry in an active text tool\n     */\n    protected _onDrawingTextKeydown(\n      event: KeyboardEvent\n    ):\n      | ReturnType<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>['update']>\n      | ReturnType<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>['delete']>\n      | void;\n\n    /** @override */\n    protected _onUpdate(data: DeepPartial<foundry.data.DrawingData['_source']>): void;\n\n    /**\n     * @override\n     * @param event - unused\n     */\n    protected _canControl(user: User, event?: any): boolean;\n\n    /**\n     * @override\n     * @param user  - unused\n     * @param event - unused\n     */\n    protected _canConfigure(user: User, event?: any): boolean;\n\n    /** @override */\n    activateListeners(): void;\n\n    /**\n     * Handle mouse movement which modifies the dimensions of the drawn shape\n     */\n    protected _onMouseDraw(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftDrop(\n      event: PIXI.InteractionEvent\n    ): Promise<\n      | ReturnType<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>['update']>\n      | InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>[]\n    >;\n\n    /** @override */\n    protected _onDragLeftCancel(event: MouseEvent): void;\n\n    /**\n     * Handle mouse-over event on a control handle\n     * @param event - The mouseover event\n     */\n    protected _onHandleHoverIn(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouse-out event on a control handle\n     * @param event - The mouseout event\n     */\n    protected _onHandleHoverOut(event: PIXI.InteractionEvent): void;\n\n    /**\n     * When we start a drag event - create a preview copy of the Tile for re-positioning\n     * @param event - The mousedown event\n     */\n    protected _onHandleMouseDown(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle the beginning of a drag event on a resize handle\n     */\n    protected _onHandleDragStart(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mousemove while dragging a tile scale handler\n     * @param event - The mousemove event\n     */\n    protected _onHandleDragMove(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouseup after dragging a tile scale handler\n     * @param event - The mouseup event\n     */\n    protected _onHandleDragDrop(\n      event: PIXI.InteractionEvent\n    ): ReturnType<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>['update']>;\n\n    /**\n     * Handle cancellation of a drag event for one of the resizing handles\n     */\n    protected _onHandleDragCancel(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Apply a vectorized rescaling transformation for the drawing data\n     * @param original - The original drawing data\n     * @param dx       - The pixel distance dragged in the horizontal direction\n     * @param dy       - The pixel distance dragged in the vertical direction\n     */\n    protected _rescaleDimensions(\n      original: Pick<foundry.data.DrawingData['_source'], 'x' | 'y' | 'points' | 'width' | 'height'>,\n      dx: number,\n      dy: number\n    ): Pick<foundry.data.DrawingData['_source'], 'x' | 'y' | 'width' | 'height' | 'points'>;\n\n    /**\n     * Adjust the location, dimensions, and points of the Drawing before committing the change\n     * @param data - The Drawing data pending update\n     * @returns The adjusted data\n     * @remarks This is intentionally public because it is called by the DrawingsLayer\n     */\n    static normalizeShape(\n      data: Pick<foundry.data.DrawingData['_source'], 'x' | 'y' | 'width' | 'height' | 'points'>\n    ): Pick<foundry.data.DrawingData['_source'], 'x' | 'y' | 'width' | 'height' | 'points'>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    get author(): InstanceType<ConfiguredDocumentClass<typeof User>>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    get owner(): boolean;\n  }\n}\n"]},1059:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\measuredTemplate.d.ts","import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * A MeasuredTemplate is an implementation of PlaceableObject which represents an area of the canvas grid which is\n   * covered by some effect.\n   */\n  class MeasuredTemplate extends PlaceableObject<\n    InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>\n  > {\n    constructor(document: InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>);\n\n    controlIcon: ControlIcon | null;\n    template: PIXI.Graphics | null;\n    ruler: PreciseText | null;\n\n    /**\n     * The tiling texture used for this template, if any\n     */\n    texture: PIXI.Texture | null;\n\n    /**\n     * The template shape used for testing point intersection\n     */\n    shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle;\n\n    /**\n     * Internal property used to configure the control border thickness\n     */\n    protected _borderThickness: number;\n\n    /** @override */\n    static embeddedName: 'MeasuredTemplate';\n\n    /**\n     * A convenience accessor for the border color as a numeric hex code\n     */\n    get borderColor(): string | number;\n\n    /**\n     * A convenience accessor for the fill color as a numeric hex code\n     */\n    get fillColor(): string | number;\n\n    /**\n     * A flag for whether the current User has full ownership over the MeasuredTemplate document.\n     */\n    get owner(): boolean;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    /**\n     * Draw the ControlIcon for the MeasuredTemplate\n     */\n    protected _drawControlIcon(): ControlIcon;\n\n    /**\n     * Draw the Text label used for the MeasuredTemplate\n     */\n    protected _drawRulerText(): PreciseText;\n\n    /** @override */\n    refresh(): this;\n\n    /**\n     * Get a Circular area of effect given a radius of effect\n     */\n    protected _getCircleShape(distance: number): PIXI.Circle;\n\n    /**\n     * Get a Conical area of effect given a direction, angle, and distance\n     */\n    protected _getConeShape(direction: number, angle: number, distance: number): PIXI.Polygon;\n\n    /**\n     * Get a Rectangular area of effect given a width and height\n     */\n    protected _getRectShape(direction: number, distance: number): NormalizedRectangle;\n\n    /**\n     * Get a rotated Rectangular area of effect given a width, height, and direction\n     */\n    protected _getRayShape(direction: number, distance: number, width: number): PIXI.Polygon;\n\n    /**\n     * Draw the rotation control handle and assign event listeners\n     */\n    protected _drawRotationHandle(radius: number): void;\n\n    /**\n     * Update the displayed ruler tooltip text\n     */\n    protected _refreshRulerText(): void;\n\n    /**\n     * Highlight the grid squares which should be shown under the area of effect\n     */\n    highlightGrid(): void;\n\n    /** @override */\n    rotate(angle: number, snap: number): Promise<this>;\n\n    /** @override */\n    protected _canControl(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /** @override */\n    protected _canConfigure(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /** @override */\n    protected _canView(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /** @override */\n    protected _onUpdate(\n      data: DeepPartial<InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>['data']['_source']>,\n      options?: DocumentModificationOptions,\n      userId?: string\n    ): void;\n\n    /** @override */\n    protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n  }\n}\n"]},54408:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\note.d.ts",'import { BaseNote } from \'../../../../common/documents.mjs\';\n\ndeclare global {\n  /**\n   * A Note is an implementation of PlaceableObject which represents an annotated location within the Scene.\n   * Each Note links to a JournalEntry entity and represents it\'s location on the map.\n   *\n   * @example\n   * ```typescript\n   * Note.create<Note>({\n   *   entryId: journalEntry.id,\n   *   x: 1000,\n   *   y: 1000,\n   *   icon: "icons/my-journal-icon.svg",\n   *   iconSize: 40,\n   *   iconTint: "#00FF000",\n   *   text: "A custom label",\n   *   fontSize: 48,\n   *   textAnchor: CONST.TEXT_ANCHOR_POINTS.CENTER,\n   *   textColor: "#00FFFF"\n   * });\n   * ```\n   */\n  class Note extends PlaceableObject<BaseNote> {\n    /**\n     * The associated JournalEntry which is described by this note\n     */\n    entry: JournalEntry;\n\n    /** @override */\n    static get embeddedName(): \'Note\';\n\n    /**\n     * @remarks\n     * Not implemented for Note\n     */\n    get bounds(): never;\n\n    /**\n     * Return the text label which describes the Note\n     * Use a manually specified label with a fallback to the JournalEntry name\n     */\n    get text(): string;\n\n    /**\n     * The Map Note icon size\n     */\n    get size(): number;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    /**\n     * Draw the ControlIcon for the Map Note\n     */\n    protected _drawControlIcon(): ControlIcon;\n\n    /**\n     * Draw the map note Tooltip as a Text object\n     */\n    protected _drawTooltip(): PreciseText;\n\n    /**\n     * Define a PIXI TextStyle object which is used for the tooltip displayed for this Note\n     */\n    protected _getTextStyle(): PIXI.TextStyle;\n\n    /** @override */\n    refresh(): this;\n\n    /** @override */\n    protected _onUpdate(data: Note.Data): Promise<this>;\n\n    /** @override */\n    protected _canHover(user: User): true;\n\n    /** @override */\n    protected _canView(user: User): boolean;\n\n    /** @override */\n    protected _onHoverIn(\n      event: PIXI.InteractionEvent,\n      options?: Parameters<PlaceableObject<BaseNote>[\'_onHoverIn\']>[1]\n    ): false | void;\n\n    /** @override */\n    protected _onHoverOut(event: PIXI.InteractionEvent): false | void;\n\n    /** @override */\n    protected _onClickLeft2(event: PIXI.InteractionEvent): void;\n  }\n}\n\ndeclare namespace Note {\n  interface Data {\n    entryId: string;\n    fontFamily: string;\n    fontSize: number;\n    icon: string;\n    iconSize: number;\n    iconTint: string;\n    text: string;\n    textAnchor: foundry.CONST.TextAnchorPoint;\n    textColor: string;\n    x: number;\n    y: number;\n  }\n}\n']},2919:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\tile.d.ts","import { BaseTile } from '../../../../common/documents.mjs';\n\ndeclare global {\n  /**\n   * A Tile is an implementation of PlaceableObject which represents a static piece of artwork or prop within the Scene.\n   * Tiles are drawn above the {@link BackroundLayer} but below the {@link TokenLayer}.\n   *\n   * @example\n   * ```typescript\n   * Tile.create<Tile>({\n   *   img: \"path/to/tile-artwork.png\",\n   *   width: 300,\n   *   height: 300,\n   *   scale: 1,\n   *   x: 1000,\n   *   y: 1000,\n   *   z: 370,\n   *   rotation: 45,\n   *   hidden: false,\n   *   locked: true\n   * });\n   * ```\n   *\n   * @see {@link TilesLayer}\n   * @see {@link TileSheet}\n   * @see {@link TileHUD}\n   */\n  class Tile extends PlaceableObject<BaseTile> {\n    /**\n     * @remarks Not used for `Tile`\n     */\n    controlIcon: null;\n\n    /**\n     * The Tile border frame\n     */\n    frame: PIXI.Container | null;\n\n    /**\n     * The Tile image container\n     */\n    tile: PIXI.Container | null;\n\n    /**\n     * The primary tile image texture\n     */\n    texture: PIXI.Texture | null;\n\n    /** @override */\n    static get embeddedName(): 'Tile';\n\n    /**\n     * Apply initial sanitizations to the provided input data to ensure that a Tile has valid required attributes.\n     */\n    protected _cleanData(): void;\n\n    /**\n     * @remarks\n     * Not implemented by Tile\n     */\n    get bounds(): never;\n\n    /**\n     * Get the native aspect ratio of the base texture for the Tile sprite\n     */\n    get aspectRatio(): number;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    /** @override */\n    refresh(): this;\n\n    /**\n     * Refresh the display of the Tile border\n     */\n    protected _refreshBorder(b: Rectangle): void;\n\n    /**\n     * Refresh the display of the Tile resizing handle\n     */\n    protected _refreshHandle(b: Rectangle): void;\n\n    /** @override */\n    activateListeners(): void;\n\n    /** @override */\n    protected _onUpdate(data: Tile.Data): void;\n\n    /** @override */\n    protected _canHUD(user?: User, event?: any): boolean;\n\n    /** @override */\n    protected _canConfigure(user: User, event?: any): boolean;\n\n    /** @override */\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<false | this | BaseTile[]>;\n\n    /** @override */\n    protected _onDragLeftCancel(event: MouseEvent): void;\n\n    /**\n     * Handle mouse-over event on a control handle\n     * @param event - The mouseover event\n     */\n    protected _onHandleHoverIn(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouse-out event on a control handle\n     * @param event - The mouseout event\n     */\n    protected _onHandleHoverOut(event: PIXI.InteractionEvent): void;\n\n    /**\n     * When we start a drag event - create a preview copy of the Tile for re-positioning\n     * @param event - The mousedown event\n     */\n    protected _onHandleMouseDown(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle the beginning of a drag event on a resize handle\n     */\n    protected _onHandleDragStart(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mousemove while dragging a tile scale handler\n     * @param event - The mousemove event\n     */\n    protected _onHandleDragMove(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouseup after dragging a tile scale handler\n     * @param event - The mouseup event\n     */\n    protected _onHandleDragDrop(event: PIXI.InteractionEvent): Promise<this>;\n\n    /**\n     * Handle cancellation of a drag event for one of the resizing handles\n     */\n    protected _onHandleDragCancel(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Create a preview tile with a background texture instead of an image\n     */\n    static createPreview(data: Tile.Data): Tile;\n  }\n\n  namespace Tile {\n    interface Data {\n      height: number;\n      hidden: boolean;\n      img: string;\n      locked: boolean;\n      rotation: number;\n      scale: number;\n      width: number;\n      x: number;\n      y: number;\n      z: number;\n    }\n  }\n}\n"]},81321:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\token.d.ts","import { ConfiguredDocumentClass, ConfiguredDocumentClassForName } from '../../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * A Token is an implementation of PlaceableObject which represents an Actor within a viewed Scene on the game canvas.\n   * @see TokenDocument\n   * @see TokenLayer\n   */\n  class Token extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>> {\n    /**\n     * A Ray which represents the Token's current movement path\n     */\n    protected _movement: Ray | null;\n\n    /**\n     * An Object which records the Token's prior velocity dx and dy\n     * This can be used to determine which direction a Token was previously moving\n     */\n    protected _velocity: Token.Velocity;\n\n    /**\n     * The Token's most recent valid position\n     */\n    protected _validPosition: { x: number; y: number };\n\n    /**\n     * Track the set of User entities which are currently targeting this Token\n     */\n    targeted: Set<User>;\n\n    /**\n     * A reference to the PointSource object which defines this vision source area of effect\n     */\n    vision: PointSource;\n\n    /**\n     * A reference to the PointSource object which defines this light source area of effect\n     */\n    light: PointSource;\n\n    /** @override */\n    static get embeddedName(): 'Token';\n\n    /**\n     * Establish an initial velocity of the token based on it's direction of facing.\n     * Assume the Token made some prior movement towards the direction that it is currently facing.\n     */\n    protected _getInitialVelocity(): Token.Velocity;\n\n    /**\n     * A convenient reference to the Actor object associated with the Token embedded document.\n     */\n    get actor(): this['document']['actor'];\n\n    /**\n     * A convenient reference for whether the current User has full control over the Token document.\n     */\n    get owner(): boolean;\n\n    get isOwner(): boolean;\n\n    /**\n     * A boolean flag for whether the current game User has observer permission for the Token\n     */\n    get observer(): boolean;\n\n    /**\n     * Is the HUD display active for this token?\n     */\n    get hasActiveHUD(): boolean;\n\n    /**\n     * Convenience access to the token's nameplate string\n     * @remarks\n     * This is actually a getter that returns data.name\n     */\n    readonly name: string;\n\n    /**\n     * Translate the token's grid width into a pixel width based on the canvas size\n     */\n    get w(): number;\n\n    /**\n     * Translate the token's grid height into a pixel height based on the canvas size\n     */\n    get h(): number;\n\n    /**\n     * The Token's current central position\n     */\n    get center(): ReturnType<this['getCenter']>;\n\n    /**\n     * An indicator for whether or not this token is currently involved in the active combat encounter.\n     */\n    get inCombat(): boolean;\n\n    /**\n     * Return a reference to a Combatant that represents this Token, if one is present in the current encounter.\n     */\n    get combatant(): InstanceType<ConfiguredDocumentClass<typeof Combatant>> | null;\n\n    /**\n     * An indicator for whether the Token is currently targeted by the active game User\n     */\n    get isTargeted(): boolean;\n\n    /**\n     * Determine whether the Token is visible to the calling user's perspective.\n     * Hidden Tokens are only displayed to GM Users.\n     * Non-hidden Tokens are always visible if Token Vision is not required.\n     * Controlled tokens are always visible.\n     * All Tokens are visible to a GM user if no Token is controlled.\n     *\n     * @see {@link SightLayer#testVisibility}\n     */\n    get isVisible(): boolean;\n\n    /**\n     * Test whether the Token has sight (or blindness) at any radius\n     */\n    get hasSight(): boolean;\n\n    /**\n     * Test whether the Token emits light (or darkness) at any radius\n     */\n    get emitsLight(): boolean;\n\n    /**\n     * Test whether the Token has a limited angle of vision or light emission which would require sight to update on Token rotation\n     */\n    get hasLimitedVisionAngle(): boolean;\n\n    /**\n     * Translate the token's sight distance in units into a radius in pixels.\n     * @returns The sight radius in pixels\n     */\n    get dimRadius(): number;\n\n    /**\n     * Translate the token's bright light distance in units into a radius in pixels.\n     * @returns The bright radius in pixels\n     */\n    get brightRadius(): number;\n\n    /**\n     * The named identified for the source object associated with this Token\n     */\n    get sourceId(): string;\n\n    /**\n     * Update the light and vision source objects associated with this Token\n     * @param defer       - Defer refreshing the SightLayer to manually call that refresh later.\n     *                      (default: `false`)\n     * @param deleted     - Indicate that this light source has been deleted.\n     *                      (default: `false`)\n     * @param noUpdateFog - Never update the Fog exploration progress for this update.\n     *                      (default: `false`)\n     */\n    updateSource({ defer, deleted, noUpdateFog }?: { defer?: boolean; deleted?: boolean; noUpdateFog?: boolean }): void;\n\n    /**\n     * Test whether this Token is a viable vision source for the current User\n     */\n    protected _isVisionSource(): boolean;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    /**\n     * Apply initial sanitizations to the provided input data to ensure that a Token has valid required attributes.\n     */\n    protected _cleanData(): void;\n\n    /**\n     * Draw resource bars for the Token\n     */\n    protected _drawAttributeBars(): PIXI.Container;\n\n    /**\n     * Draw the Sprite icon for the Token\n     */\n    protected _drawIcon(): Promise<PIXI.Sprite>;\n\n    /**\n     * Update display of the Token, pulling latest data and re-rendering the display of Token components\n     */\n    refresh(): this;\n\n    /**\n     * Draw the Token border, taking into consideration the grid type and border color\n     */\n    protected _refreshBorder(): void;\n\n    /**\n     * Get the hex color that should be used to render the Token border\n     * @returns The hex color used to depict the border color\n     */\n    protected _getBorderColor(): number | null;\n\n    /**\n     * Refresh the target indicators for the Token.\n     * Draw both target arrows for the primary User as well as indicator pips for other Users targeting the same Token.\n     */\n    protected _refreshTarget(): void;\n\n    /**\n     * Refresh the display of Token attribute bars, rendering latest resource data\n     * If the bar attribute is valid (has a value and max), draw the bar. Otherwise hide it.\n     */\n    drawBars(): void;\n\n    /**\n     * Draw a single resource bar, given provided data\n     * @param number - The Bar number\n     * @param bar    - The Bar container\n     * @param data   - Resource data for this bar\n     */\n    protected _drawBar(number: number, bar: PIXI.Graphics, data: ReturnType<Token['getBarAttribute']>): void;\n\n    /**\n     * Draw the token's nameplate as a text object\n     * @returns The Text object for the Token nameplate\n     */\n    protected _drawNameplate(): PreciseText;\n\n    /**\n     * Draw a text tooltip for the token which can be used to display Elevation or a resource value\n     */\n    drawTooltip(): void;\n\n    /**\n     * Return the text which should be displayed in a token's tooltip field\n     */\n    protected _getTooltipText(): string;\n\n    protected _getTextStyle(): PIXI.TextStyle;\n\n    /**\n     * Draw the active effects and overlay effect icons which are present upon the Token\n     */\n    drawEffects(): Promise<void>;\n\n    /**\n     * Draw the overlay effect icon\n     */\n    protected _drawOverlay({ src, tint }?: { src?: string; tint?: number }): Promise<void>;\n\n    /**\n     * Draw a status effect icon\n     */\n    protected _drawEffect(src: string, i: number, bg: PIXI.Graphics, w: number, tint: number): Promise<void>;\n\n    /**\n     * Helper method to determine whether a token attribute is viewable under a certain mode\n     * @param mode - The mode from CONST.TOKEN_DISPLAY_MODES\n     * @returns Is the attribute viewable?\n     */\n    protected _canViewMode(mode: foundry.CONST.TokenDisplayMode): boolean;\n\n    /**\n     * Animate Token movement along a certain path which is defined by a Ray object\n     * @param ray - The path along which to animate Token movement\n     */\n    animateMovement(ray: Ray): Promise<void>;\n\n    /**\n     * Animate the continual revealing of Token vision during a movement animation\n     */\n    protected _onMovementFrame(\n      dt: number,\n      anim: Array<{\n        context: unknown;\n        name: string | null;\n        duration: number;\n        ontick: (dt: number, attributes: CanvasAnimation.Attribute[]) => void;\n      }>,\n      config: { fog?: boolean; sound?: boolean; source?: boolean }\n    ): void;\n\n    /**\n     * Update perception each frame depending on the animation configuration\n     * @param source - (default: `false`)\n     * @param sound  - (default: `false`)\n     * @param fog    - (default: `false`)\n     */\n    protected _animatePerceptionFrame({\n      source,\n      sound,\n      fog\n    }?: {\n      source?: boolean;\n      sound?: boolean;\n      fog?: boolean;\n    }): void;\n\n    /**\n     * Terminate animation of this particular Token\n     */\n    stopAnimation(): void;\n\n    /**\n     * Check for collision when attempting a move to a new position\n     * @param destination - The destination point of the attempted movement\n     * @returns A true/false indicator for whether the attempted movement caused a collision\n     */\n    checkCollision(destination: Point): boolean;\n\n    /**\n     * @param releaseOthers - (default: `true`)\n     * @param pan           - (default: `false`)\n     */\n    protected _onControl({ releaseOthers, pan }?: { releaseOthers?: boolean; pan?: boolean }): void;\n\n    /** @override */\n    protected _onRelease(\n      options: PlaceableObject.ReleaseOptions\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>> | undefined;\n\n    /**\n     * Get the center-point coordinate for a given grid position\n     * @param x - The grid x-coordinate that represents the top-left of the Token\n     * @param y - The grid y-coordinate that represents the top-left of the Token\n     * @returns The coordinate pair which represents the Token's center at position (x, y)\n     */\n    getCenter(\n      x: number,\n      y: number\n    ): {\n      x: number;\n      y: number;\n    };\n\n    /**\n     * Set the token's position by comparing its center position vs the nearest grid vertex\n     * Return a Promise that resolves to the Token once the animation for the movement has been completed\n     * @param x       - The x-coordinate of the token center\n     * @param y       - The y-coordinate of the token center\n     * @param options - Additional options which configure the token movement\n     *                  (defaultValue: `{}`)\n     * @returns The Token after animation has completed\n     */\n    setPosition(x: number, y: number, options?: PositionOptions): Promise<this>;\n\n    /**\n     * Update the Token velocity auto-regressively, shifting increasing weight towards more recent movement\n     * Employ a magic constant chosen to minimize (effectively zero) the likelihood of trigonometric edge cases\n     * @param ray - The proposed movement ray\n     * @returns An updated velocity with directional memory\n     */\n    protected _updateVelocity(ray: Ray): Token.Velocity;\n\n    /**\n     * Set this Token as an active target for the current game User\n     * @param targeted       - Is the Token now targeted?\n     *                         (default: `true`)\n     * @param user           - Assign the token as a target for a specific User\n     *                         (default: `null` which will use the current user)\n     * @param releaseOthers  - Release other active targets for the same player?\n     *                         (default: `true`)\n     * @param groupSelection - Is this target being set as part of a group selection workflow?\n     *                         (default: `false`)\n     */\n    setTarget(\n      targeted?: boolean,\n      {\n        user,\n        releaseOthers,\n        groupSelection\n      }?: {\n        user?: InstanceType<ConfiguredDocumentClass<typeof User>> | null;\n        releaseOthers?: boolean;\n        groupSelection?: boolean;\n      }\n    ): void;\n\n    /**\n     * Add or remove the currently controlled Tokens from the active combat encounter\n     * @param combat - A specific combat encounter to which this Token should be added\n     * @returns The Token which initiated the toggle\n     */\n    toggleCombat(combat?: InstanceType<ConfiguredDocumentClass<typeof Combat>>): Promise<this>;\n\n    /**\n     * Toggle an active effect by it's texture path.\n     * Copy the existing Array in order to ensure the update method detects the data as changed.\n     *\n     * @param effect  - The texture file-path of the effect icon to toggle on the Token.\n     * @param options - Additional optional arguments which configure how the effect is handled.\n     *                  (defaultValue: `{}`)\n     * @returns Was the texture applied (true) or removed (false)\n     */\n    toggleEffect(\n      effect: string | ConstructorParameters<ConfiguredDocumentClassForName<'ActiveEffect'>>[0],\n      options?: EffectToggleOptions\n    ): Promise<boolean>;\n\n    /**\n     * A helper function to toggle a status effect which includes an Active Effect template\n     */\n    protected _toggleActiveEffect(\n      effectData: ConstructorParameters<ConfiguredDocumentClassForName<'ActiveEffect'>>[0],\n      { overlay }?: { overlay?: boolean }\n    ): Promise<boolean>;\n\n    /**\n     * A helper function to toggle the overlay status icon on the Token\n     */\n    protected _toggleOverlayEffect(texture: string, { active }?: { active: boolean }): Promise<this>;\n\n    /**\n     * Toggle the visibility state of any Tokens in the currently selected set\n     * @returns A Promise which resolves to the updated Token documents\n     */\n    toggleVisibility(): Promise<InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>[]>;\n\n    /**\n     * Return the token's sight origin, tailored for the direction of their movement velocity to break ties with walls\n     */\n    getSightOrigin(): {\n      x: number;\n      y: number;\n    };\n\n    /**\n     * A generic transformation to turn a certain number of grid units into a radius in canvas pixels.\n     * This function adds additional padding to the light radius equal to half the token width.\n     * This causes light to be measured from the outer token edge, rather than from the center-point.\n     * @param units - The radius in grid units\n     * @returns The radius in canvas units\n     */\n    getLightRadius(units: number): number;\n\n    /** @override */\n    protected _getShiftedPosition(dx: number, dy: number): { x: number; y: number };\n\n    /**\n     * Extend the PlaceableObject.rotate method to prevent rotation if the Token is in the midst of a movement animation\n     * @returns Actually a Promise<void>\n     */\n    rotate(angle: number, snap: number): Promise<this>;\n\n    /** @override */\n    protected _onCreate(\n      options: InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>['data']['_source'],\n      userId: DocumentModificationOptions\n    ): void;\n\n    /** @override */\n    protected _onUpdate(\n      data?: DeepPartial<InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>['data']['_source']>,\n      options?: DocumentModificationOptions & { animate?: boolean },\n      userId?: string\n    ): void;\n\n    /** @override */\n    protected _onDelete(options?: DocumentModificationOptions, userId?: string): void;\n\n    /** @override */\n    protected _canControl(\n      user?: InstanceType<ConfiguredDocumentClass<typeof User>>,\n      event?: PIXI.InteractionEvent\n    ): boolean;\n\n    /** @override */\n    protected _canHUD(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: PIXI.InteractionEvent): boolean;\n\n    /** @override */\n    protected _canConfigure(\n      user?: InstanceType<ConfiguredDocumentClass<typeof User>>,\n      event?: PIXI.InteractionEvent\n    ): true;\n\n    /** @override */\n    protected _canHover(user?: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: PIXI.InteractionEvent): true;\n\n    /** @override */\n    protected _canView(\n      user?: InstanceType<ConfiguredDocumentClass<typeof User>>,\n      event?: PIXI.InteractionEvent\n    ): boolean;\n\n    /** @override */\n    protected _canDrag(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event: PIXI.InteractionEvent): boolean;\n\n    /** @override */\n    protected _onHoverIn(event: PIXI.InteractionEvent, options?: { hoverOutOthers?: boolean }): void;\n\n    /** @override */\n    protected _onHoverOut(event: PIXI.InteractionEvent): false | void;\n\n    /** @override */\n    protected _onClickLeft(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onClickLeft2(event?: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onClickRight2(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<any>;\n\n    /** @override */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    static fromActor(\n      actor: InstanceType<ConfiguredDocumentClass<typeof Actor>>,\n      tokenData?: InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>['data']['_source']\n    ): never;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    getBarAttribute(\n      barName: string,\n      { alternative }?: { alternative?: string }\n    ): ReturnType<this['document']['getBarAttribute']>;\n\n    /**\n     * @remarks This does not exist in foundry. It marks the controlIcon as not used because `Token` does never store a value here.\n     */\n    controlIcon: null;\n  }\n\n  namespace Token {\n    interface Bar {\n      attribute: string;\n    }\n\n    interface Velocity {\n      dx: number;\n      sx: number;\n      dy: number;\n      sy: number;\n    }\n  }\n}\n\ninterface PositionOptions {\n  /**\n   * Animate the movement path\n   * @defaultValue `true`\n   */\n  animate?: boolean;\n}\n\ninterface EffectToggleOptions {\n  /**\n   * Force a certain active state for the effect\n   * @defaultValue `false`\n   */\n  active?: boolean;\n\n  /**\n   * Whether to set the effect as the overlay effect?\n   * @defaultValue `false`\n   */\n  overlay?: boolean;\n}\n"]},49038:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\wall.d.ts","import { BaseWall } from '../../../../common/documents.mjs';\n\ndeclare global {\n  /**\n   * A Wall is an implementation of PlaceableObject which represents a physical or visual barrier within the Scene.\n   * Walls are used to restrict Token movement or visibility as well as to define the areas of effect for ambient lights\n   * and sounds.\n   *\n   * @see {@link WallsLayer}\n   * @see {@link WallConfig}\n   *\n   * @example\n   * ```typescript\n   * Wall.create<Wall>({\n   *  c = [100, 200, 400, 600],\n   *  move: CONST.WALL_MOVEMENT_TYPES.NORMAL,\n   *  sense: CONST.WALL_SENSE_TYPES.NORMAL,\n   *  dir: CONST.WALL_DIRECTIONS.BOTH,\n   *  door: CONST.WALL_DOOR_TYPES.DOOR,\n   *  ds: CONST.WALL_DOOR_STATES.CLOSED\n   * });\n   * ```\n   */\n  class Wall extends PlaceableObject<BaseWall> {\n    /**\n     * @remarks Not used for `Wall`\n     */\n    controlIcon: null;\n    /**\n     * @remarks Type is `MouseInteractionManager<this, this['endpoints']>`\n     */\n    mouseInteractionManager: MouseInteractionManager<this, any> | null;\n\n    /**\n     * An reference the Door Control icon associated with this Wall, if any\n     */\n    protected doorControl: DoorControl | null;\n\n    /** @override */\n    static get embeddedName(): 'Wall';\n\n    /**\n     * A convenience reference to the coordinates Array for the Wall endpoints, [x0,y0,x1,y1].\n     */\n    get coords(): Wall.Data['c'];\n\n    /** @override */\n    get bounds(): NormalizedRectangle;\n\n    /**\n     * Return the coordinates [x,y] at the midpoint of the wall segment\n     */\n    get midpoint(): [number, number];\n\n    /** @override */\n    get center(): PIXI.Point;\n\n    /**\n     * Get the direction of effect for a directional Wall\n     * @returns The angle of wall effect\n     */\n    get direction(): number | null;\n\n    /**\n     * This helper converts the wall segment to a Ray\n     * @returns The wall in Ray representation\n     */\n    toRay(): Ray;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    endpoints: PIXI.Graphics;\n\n    /** @override */\n    protected _createInteractionManager(): NonNullable<this['mouseInteractionManager']>;\n\n    /** @override */\n    activateListeners(): void;\n\n    /**\n     * Draw a directional prompt icon for one-way walls to illustrate their direction of effect.\n     * @returns The drawn icon\n     */\n    protected _drawDirection(): PIXI.Sprite | void; // TODO: returning void may be unreachable\n\n    /** @override */\n    refresh(): this;\n\n    /**\n     * Compute an approximate Polygon which encloses the line segment providing a specific hitArea for the line\n     * @param coords - The original wall coordinates\n     * @param pad    - The amount of padding to apply\n     * @returns A constructed Polygon for the line\n     */\n    protected _getWallHitPolygon(coords: [number, number, number, number], pad: number): PIXI.Polygon;\n\n    /**\n     * Given the properties of the wall - decide upon a color to render the wall for display on the WallsLayer\n     */\n    protected _getWallColor(): number;\n\n    /** @override */\n    protected _onControl({ chain }?: PlaceableObject.ControlOptions & { chain?: boolean }): void;\n\n    /** @override */\n    protected _onRelease(): void;\n\n    /** @override */\n    destroy(options?: { children?: boolean; texture?: boolean; baseTexture?: boolean }): void;\n\n    /**\n     * Test whether the Wall direction lies between two provided angles\n     * This test is used for collision and vision checks against one-directional walls\n     */\n    isDirectionBetweenAngles(lower: number, upper: number): boolean;\n\n    /**\n     * A simple test for whether a Ray can intersect a directional wall\n     * @param ray - The ray to test\n     * @returns Can an intersection occur?\n     */\n    canRayIntersect(ray: Ray): boolean;\n\n    /**\n     * Get an Array of Wall objects which are linked by a common coordinate\n     * @returns An object reporting ids and endpoints of the linked segments\n     */\n    getLinkedSegments(): {\n      ids: string;\n      walls: Wall[];\n      endpoints: Array<[number, number]>;\n    };\n\n    /** @override */\n    protected _onCreate(): void;\n\n    /** @override */\n    protected _onUpdate(changed: DeepPartial<BaseWall['data']>, options?: any, userId?: string): void;\n\n    /** @override */\n    protected _onDelete(): void;\n\n    /**\n     * Callback actions when a wall that contains a door is moved or its state is changed\n     * @param doorChange - Update vision and sound restrictions\n     */\n    protected _onModifyWall(doorChange?: boolean): Promise<void>;\n\n    /** @override */\n    protected _canControl(user?: User, event?: PIXI.InteractionEvent): boolean;\n\n    /** @override */\n    protected _onHoverIn(event: PIXI.InteractionEvent, options?: { hoverOutOthers: boolean }): void;\n\n    /** @override */\n    protected _onHoverOut(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouse-hover events on the line segment itself, pulling the Wall to the front of the container stack\n     */\n    protected _onMouseOverLine(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onClickLeft(event: PIXI.InteractionEvent): boolean;\n\n    /** @override */\n    protected _onClickLeft2(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onClickRight2(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<any>;\n  }\n\n  namespace Wall {\n    interface Data {\n      /**\n       * Coordinates of the endpoints\n       */\n      c: [number, number, number, number];\n      /**\n       * 0 - both\n       * 1 - left\n       * 2 - right\n       */\n      dir?: foundry.CONST.WallDirection;\n      /**\n       * 0 - wall\n       * 1 - door\n       * 2 - secret\n       */\n      door: foundry.CONST.WallDoorType;\n      /**\n       * 0 - closed\n       * 1 - open\n       * 2 - locked\n       */\n      ds: foundry.CONST.WallDoorState;\n      /**\n       * 0 - blocked\n       * 1 - allowed\n       */\n      move: foundry.CONST.WallMovementType;\n      /**\n       * 0 - opaque\n       * 1 - transparent\n       * 2 - terrain\n       */\n      sense: foundry.CONST.WallSenseType;\n    }\n  }\n}\n"]},80658:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\ruler.d.ts","/**\n * The Ruler - used to measure distances and trigger movements\n */\ndeclare class Ruler extends PIXI.Container {\n  /*\n   * @param user  - The User for whom to construct the Ruler instance\n   * @param color - The color for the ruler\n   *                (Default value: The user's color or `0x42f4e2`)\n   */\n  constructor(user?: User, { color }?: { color?: number | null });\n\n  /**\n   * Record the User which this Ruler references\n   */\n  user: User;\n\n  /**\n   * The ruler name - used to differentiate between players\n   */\n  name: string;\n\n  /**\n   * The ruler color - by default the color of the active user\n   */\n  color: number;\n\n  /**\n   * This Array tracks individual waypoints along the ruler's measured path.\n   * The first waypoint is always the origin of the route.\n   */\n  waypoints: PIXI.Point[];\n\n  /**\n   * The current destination point at the end of the measurement\n   */\n  destination: PIXI.Point | null;\n\n  /**\n   * The Ruler element is a Graphics instance which draws the line and points of the measured path\n   */\n  ruler: PIXI.Graphics;\n\n  /**\n   * The Labels element is a Container of Text elements which label the measured path\n   */\n  labels: PIXI.Container;\n\n  /**\n   * Track the current measurement state\n   * @see Ruler.STATES\n   */\n  protected _state: ValueOf<typeof Ruler['STATES']>;\n\n  /**\n   * Is the Ruler being actively used to measure distance?\n   */\n  get active(): boolean;\n\n  /**\n   * Measure the distance between two points and render the ruler UI to illustrate it\n   * @param destination - The destination point to which to measure\n   * @param gridSpaces  - Restrict measurement only to grid spaces\n   *                      (default: `true`)\n   */\n  measure(\n    destination: Point,\n    { gridSpaces }?: { gridSpaces?: boolean }\n  ): {\n    ray: Ray;\n    label: PIXI.DisplayObject;\n  }[];\n\n  /**\n   * Get the text label for a segment of the measured path\n   * @param isTotal - (unused)\n   */\n  protected _getSegmentLabel(segmentDistance: number, totalDistance: number, isTotal?: boolean): string;\n\n  /**\n   * Highlight the measurement required to complete the move in the minimum number of discrete spaces\n   */\n  protected _highlightMeasurement(ray: Ray): void;\n\n  /**\n   * Determine whether a SPACE keypress event entails a legal token movement along a measured ruler\n   *\n   * @returns An indicator for whether a token was successfully moved or not. If True the event should be\n   *          prevented from propagating further, if False it should move on to other handlers.\n   * @remarks This will never actually return `true`\n   */\n  moveToken(): Promise<boolean | undefined>;\n\n  /**\n   * Acquire a Token, if any, which is eligible to perform a movement based on the starting point of the Ruler\n   */\n  protected _getMovementToken(): Token | null | undefined;\n\n  /**\n   * A helper method to return an Array of Ray objects constructed from the waypoints of the measurement\n   * @param waypoints   - An Array of waypoint `{x, y}` Objects\n   * @param destination - An optional destination point to append to the existing waypoints\n   * @returns An Array of Ray objects which represent the segemnts of the waypoint path\n   */\n  protected _getRaysFromWaypoints(waypoints: Point[], destination?: Point): Ray[];\n\n  /**\n   * Clear display of the current Ruler\n   */\n  clear(): void;\n\n  /**\n   * Handle the beginning of a new Ruler measurement workflow\n   * @see Canvas._onDragLeftStart\n   */\n  protected _onDragStart(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle left-click events on the Canvas during Ruler measurement.\n   * @see Canvas._onClickLeft\n   */\n  protected _onClickLeft(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle right-click events on the Canvas during Ruler measurement.\n   * @see Canvas._onClickRight\n   */\n  protected _onClickRight(event: PIXI.InteractionEvent): boolean | void;\n\n  /**\n   * Continue a Ruler measurement workflow for left-mouse movements on the Canvas.\n   * @see Canvas._onDragLeftMove\n   */\n  protected _onMouseMove(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Conclude a Ruler measurement workflow by releasing the left-mouse button.\n   * @see Canvas._onDragLeftDrop\n   */\n  protected _onMouseUp(event: PIXI.InteractionEvent): void;\n\n  /**\n   * Handle the addition of a new waypoint in the Ruler measurement path\n   */\n  protected _addWaypoint(point: Point): void;\n\n  /**\n   * Handle the removal of a waypoint in the Ruler measurement path\n   * @param point - The current cursor position to snap to\n   * @param snap  - Snap exactly to grid spaces?\n   *                (default: `true`)\n   */\n  protected _removeWaypoint(point: Point, { snap }?: { snap?: boolean }): void;\n\n  /**\n   * Handle the conclusion of a Ruler measurement workflow\n   */\n  protected _endMeasurement(): void;\n\n  toJSON(): {\n    class: 'Ruler';\n    name: string;\n    waypoints: Ruler['waypoints'];\n    destination: Ruler['destination'];\n    _state: Ruler['_state'];\n  };\n\n  /**\n   * Update a Ruler instance using data provided through the cursor activity socket\n   * @param data - Ruler data with which to update the display\n   */\n  update(data: {\n    class: 'Ruler';\n    waypoints: Ruler['waypoints'];\n    destination: Ruler['destination'];\n    _state: Ruler['_state'];\n  }): void;\n\n  /**\n   * The possible Ruler measurement states which can occur\n   */\n  static STATES: {\n    INACTIVE: 0;\n    STARTING: 1;\n    MEASURING: 2;\n    MOVING: 3;\n  };\n}\n"]},50935:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\filters\\abstractBaseMaskFilter.d.ts","/**\n * This class defines an interface for masked custom filters\n */\ndeclare abstract class AbstractBaseMaskFilter extends PIXI.Filter {\n  /**\n   * The default vertex shader used by all instances of AbstractBaseMaskFilter\n   */\n  static vertexShader: string;\n\n  /**\n   * The fragment shader which renders this filter.\n   * A subclass of AbstractBaseMaskFilter must implement the fragmentShader(channel) static field.\n   */\n  static fragmentShader: ((channel: 'r' | 'g' | 'b') => string) | null;\n\n  /**\n   * A factory method for creating the filter using its defined default values\n   * @param defaultUniforms - Initial uniforms provided to the filter\n   *                          (default: `{}`)\n   * @param channel         - A color channel to target for masking.\n   *                          (default: `r`)\n   */\n  static create(\n    defaultUniforms?: ConstructorParameters<typeof PIXI.Filter>[2],\n    channel?: 'r' | 'g' | 'b'\n  ): AbstractBaseMaskFilter;\n\n  /**\n   * @override\n   * @param currentState - (unused)\n   */\n  apply(\n    filterManager: PIXI.systems.FilterSystem,\n    input: PIXI.RenderTexture,\n    output: PIXI.RenderTexture,\n    clear: PIXI.CLEAR_MODES,\n    currentState: any\n  ): void;\n}\n"]},35596:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\graphics\\gridHighlight.d.ts","/**\n * A special Graphics class which handles Grid layer highlighting\n */\ndeclare class GridHighlight extends PIXI.Graphics {\n  constructor(name: string, ...args: ConstructorParameters<typeof PIXI.Graphics>);\n\n  /**\n   * Track the Grid Highlight name\n   */\n  name: string;\n\n  /**\n   * Track distinct positions which have already been highlighted\n   */\n  positions: Set<string>;\n\n  /**\n   * Record a position that is highlighted and return whether or not it should be rendered\n   * @param x - The x-coordinate to highlight\n   * @param y - The y-coordinate to highlight\n   * @returns Whether or not to draw the highlight for this location\n   */\n  highlight(x: number, y: number): boolean;\n\n  /**\n   * Extend the Graphics clear logic to also reset the highlighted positions\n   * @remarks Returns `void`, see https://gitlab.com/foundrynet/foundryvtt/-/issues/4732\n   */\n  clear(): any;\n\n  /**\n   * Extend how this Graphics container is destroyed to also remove parent layer references\n   */\n  destroy(options?: { children?: boolean; texture?: boolean; baseTexture?: boolean }): void;\n}\n"]},64209:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\graphics\\resizeHandle.d.ts","declare class ResizeHandle extends PIXI.Graphics {\n  constructor(offset: ResizeHandle['offset'], ...args: ConstructorParameters<typeof PIXI.Graphics>);\n\n  offset: [widthOffset: number, heightOffset: number];\n\n  refresh(bounds: Rectangle): void;\n\n  updateDimensions(\n    current: Rectangle,\n    origin: Rectangle,\n    destination: Rectangle,\n    { aspectRatio }?: { aspectRatio?: number | null }\n  ): Rectangle;\n}\n"]},98066:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\rectangles\\normalizedRectangle.d.ts","/**\n * A PIXI.Rectangle where the width and height are always positive and the x and y are always the top-left\n */\ndeclare class NormalizedRectangle extends PIXI.Rectangle {\n  constructor(x: number, y: number, width: number, height: number);\n}\n"]},98964:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShader.d.ts",'/**\n * This class defines an interface which all shaders utilize\n */\ndeclare abstract class AbstractBaseShader extends PIXI.Shader {\n  constructor(program: PIXI.Program, uniforms: AbstractBaseShader.Uniforms);\n\n  /**\n   * The initial default values of shader uniforms\n   */\n  protected _defaults: AbstractBaseShader.Uniforms;\n\n  /**\n   * The default vertex shader used by all instances of AbstractBaseShader\n   */\n  static vertexShader: string;\n\n  /**\n   * The fragment shader which renders this source.\n   * A subclass of AbstractBaseShader must implement the fragmentShader static field.\n   *\n   * @remarks\n   * This is abstract, subclasses must implement it.\n   */\n  static fragmentShader: string;\n\n  /**\n   * The default uniform values for the shader.\n   * A subclass of AbstractBaseShader must implement the defaultUniforms static field.\n   * @defaultValue `{}`\n   *\n   * @remarks\n   * This is abstract, subclasses must implement it.\n   */\n  static defaultUniforms: AbstractBaseShader.Uniforms;\n\n  /**\n   * A factory method for creating the shader using its defined default values\n   */\n  static create<T extends AbstractBaseShader>(this: ConstructorOf<T>, defaultUniforms?: AbstractBaseShader.Uniforms): T;\n\n  /**\n   * Reset the shader uniforms back to their provided default values\n   */\n  protected reset(): void;\n\n  /**\n   * A Vec3 pseudo-random generator, based on uv position\n   */\n  static PRNG3D: string;\n\n  /**\n   * A conventional pseudo-random number generator with the "golden" numbers, based on uv position\n   */\n  static PRNG: string;\n\n  /**\n   * A conventional noise generator\n   */\n  static NOISE: string;\n\n  /**\n   * Fractional Brownian Motion for a given number of octaves\n   * @param octaves - (default: `4`)\n   * @param amp     - (default: `1.0`)\n   */\n  static FBM(octaves?: number, amp?: number): string;\n\n  /**\n   * Fade easing to use with distance in interval [0,1]\n   * @param amp  - (default: `3`)\n   * @param coef - (default: `0.80`)\n   */\n  static FADE(amp?: number, coef?: number): string;\n\n  /**\n   * TODO: FOR TESTING\n   * An alternative easing function which is partially linear followed by exponential falloff\n   * @param slope - The slope of linear falloff\n   *                (default: `0.2`)\n   * @param order - The order of polynomial falloff\n   *                (default: `4`)\n   */\n  static FADE2(slope?: number, order?: number): string;\n\n  /**\n   * Convert a Hue-Saturation-Brightness color to RGB - useful to convert polar coordinates to RGB\n   */\n  static HSB2RGB: string;\n}\n\ndeclare namespace AbstractBaseShader {\n  type UniformValue =\n    | boolean\n    | number\n    | Int32List\n    | Float32List\n    | { x: number; y: number }\n    | { x: number; y: number; z: number }\n    | { x: number; y: number; z: number; w: number }\n    | { x: number; y: number }[]\n    | { x: number; y: number; z: number }[]\n    | { x: number; y: number; z: number; w: number }[]\n    | PIXI.Texture;\n\n  type Uniforms = Partial<Record<string, AbstractBaseShader.UniformValue>>;\n}\n']},30810:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShader.d.ts","/**\n * The default coloration shader used by standard rendering and animations.\n * A fragment shader which creates a light source.\n */\ndeclare class StandardColorationShader extends AbstractBaseShader {\n  static fragmentShader: string;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   alpha: 1.0,\n   *   color: [1.0, 1.0, 1.0],\n   *   time: 0,\n   *   intensity: 5,\n   *   darkness: false,\n   * }\n   * ```\n   */\n  static defaultUniforms: AbstractBaseShader.Uniforms;\n}\n"]},50045:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\chromaColorationShader.d.ts","/**\n * Chroma animation coloration shader\n */\ndeclare class ChromaColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n}\n"]},21534:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\emanationColorationShader.d.ts","/**\n * Emanation animation coloration shader\n */\ndeclare class EmanationColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n}\n"]},73755:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\energyFieldColorationShader.d.ts","/**\n * Energy field animation coloration shader\n */\ndeclare class EnergyFieldColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n}\n"]},34779:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\fogColorationShader.d.ts","/**\n * Fog animation coloration shader\n */\ndeclare class FogColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n}\n"]},37484:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\ghostLightColorationShader.d.ts","/**\n * Ghost light animation coloration shader\n */\ndeclare class GhostLightColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n}\n"]},52033:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\hexaDomeColorationShader.d.ts","/**\n * Hexagonal dome animation coloration shader\n */\ndeclare class HexaDomeColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n}\n"]},78249:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\lightDomeColorationShader.d.ts","/**\n * Light dome animation coloration shader\n */\ndeclare class LightDomeColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n}\n"]},48794:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\pulseColorationShader.d.ts","/**\n * Pulse animation coloration shader\n */\ndeclare class PulseColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   alpha: 1.0,\n   *   color: [1.0, 1.0, 1.0],\n   *   time: 0,\n   *   intensity: 5,\n   *   darkness: false,\n   *   pulse: 0,\n   * }\n   * ```\n   */\n  static defaultUniforms: AbstractBaseShader.Uniforms;\n}\n"]},26469:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\sunburstColorationShader.d.ts","/**\n * Sunburst animation coloration shader\n */\ndeclare class SunburstColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n}\n"]},10801:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\torchColorationShader.d.ts","/**\n * Torch animation coloration shader\n */\ndeclare class TorchColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   alpha: 1.0,\n   *   color: [1.0, 1.0, 1.0],\n   *   time: 0,\n   *   intensity: 5,\n   *   darkness: false,\n   *   ratio: 0,\n   * }\n   * ```\n   */\n  static defaultUniforms: AbstractBaseShader.Uniforms;\n}\n"]},79317:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardColorationShaders\\waveColorationShader.d.ts","/**\n * Wave animation coloration shader\n\n */\ndeclare class WaveColorationShader extends StandardColorationShader {\n  static fragmentShader: string;\n}\n"]},73924:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardIlluminationShader.d.ts","/**\n * The default coloration shader used by standard rendering and animations\n * A fragment shader which creates a solid light source.\n */\ndeclare class StandardIlluminationShader extends AbstractBaseShader {\n  static fragmentShader: string;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   alpha: 1.0,\n   *   ratio: 0.5,\n   *   colorDim: [0.5, 0.5, 0.5],\n   *   colorBright: [1.0, 1.0, 1.0],\n   *   time: 0,\n   *   intensity: 5\n   * }\n   * ```\n   */\n  static defaultUniforms: AbstractBaseShader.Uniforms;\n}\n"]},90264:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardIlluminationShaders\\blackHoleIlluminationShader.d.ts","/**\n * Black Hole animation illumination shader\n */\ndeclare class BlackHoleIlluminationShader extends StandardIlluminationShader {\n  static fragmentShader: string;\n}\n"]},97496:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardIlluminationShaders\\ghostLightIlluminationShader.d.ts","/**\n * Ghost light animation illumination shader\n */\ndeclare class GhostLightIlluminationShader extends StandardIlluminationShader {\n  static fragmentShader: string;\n}\n"]},10595:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardIlluminationShaders\\pulseIlluminationShader.d.ts","/**\n * Pulse animation illumination shader\n */\ndeclare class PulseIlluminationShader extends StandardIlluminationShader {\n  static fragmentShader: string;\n}\n"]},52113:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardIlluminationShaders\\roilingIlluminationShader.d.ts","/**\n * Roiling mass illumination shader - intended primarily for darkness\n */\ndeclare class RoilingIlluminationShader extends StandardIlluminationShader {\n  static fragmentShader: string;\n}\n"]},95777:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardIlluminationShaders\\sunburstIlluminationShader.d.ts","/**\n * Sunburst animation illumination shader\n\n */\ndeclare class SunburstIlluminationShader extends StandardIlluminationShader {\n  static fragmentShader: string;\n}\n"]},73985:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardIlluminationShaders\\torchIlluminationShader.d.ts","/**\n * Allow coloring of illumination\n */\ndeclare class TorchIlluminationShader extends StandardIlluminationShader {\n  static fragmentShader: string;\n}\n"]},18553:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShaders\\standardIlluminationShaders\\waveIlluminationShader.d.ts","/**\n * Wave animation illumination shader\n */\ndeclare class WaveIlluminationShader extends StandardIlluminationShader {\n  static fragmentShader: string;\n}\n"]},62205:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\texts\\preciseText.d.ts","/**\n * An extension of the default PIXI.Text object which forces double resolution.\n * At default resolution Text often looks blurry or fuzzy.\n */\ndeclare class PreciseText extends PIXI.Text {\n  _autoResolution: false;\n  _resolution: 2;\n}\n"]},94224:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pointSource.d.ts",'/**\n * A helper class used by the Sight Layer to represent a source of vision or illumination.\n */\ndeclare class PointSource {\n  constructor();\n\n  /**\n   * The light or darkness container for this source\n   */\n  illumination: PIXI.Container;\n\n  /**\n   * This visible color container for this source\n   */\n  coloration: PIXI.Container;\n\n  /**\n   * A flag for whether this source is currently active (rendered) or not\n   * @defaultValue `false`\n   */\n  active: boolean;\n\n  /**\n   * Internal flag for whether this is a darkness source\n   * @defaultValue `false`\n   */\n  darkness: boolean;\n\n  /**\n   * Is the light source limited by an angle of emission?\n   * @defaultValue `false`\n   */\n  limited: boolean;\n\n  /**\n   * The maximum radius of emission for this source\n   * @defaultValue `0`\n   */\n  radius: number;\n\n  /**\n   * Internal flag for animation throttling time\n   * @defaultValue `0`\n   */\n  protected _animateTime: number;\n\n  /**\n   * An integer seed which de-synchronizes otherwise similar animations\n   * @defaultValue `null`\n   */\n  protected _animateSeed: number | null;\n\n  /**\n   * A flag for whether to re-initialize illumination shader uniforms the next time the light is rendered.\n   * @defaultValue `true`\n   */\n  protected _resetIlluminationUniforms: boolean;\n\n  /**\n   * A flag for whether to re-initialize coloration shader uniforms the next time the light is rendered.\n   * @defaultValue `true`\n   */\n  protected _resetColorationUniforms: boolean;\n\n  /**\n   * The x-coordinate of the source location\n   * @defaultValue `undefined`\n   */\n  x?: number;\n\n  /**\n   * The y-coordinate of the source location\n   * @defaultValue `undefined`\n   */\n  y?: number;\n\n  /**\n   * An optional z-index sorting for the source\n   * @defaultValue `undefined`\n   */\n  z?: number | null;\n\n  /**\n   * The allowed radius of dim vision or illumination\n   * @defaultValue `undefined`\n   */\n  dim?: number;\n\n  /**\n   * The allowed radius of bright vision or illumination\n   * @defaultValue `undefined`\n   */\n  bright?: number;\n\n  /**\n   * The angle of emission for this point source\n   * @defaultValue `undefined`\n   */\n  angle?: number;\n\n  /**\n   * The angle of rotation for this point source\n   * @defaultValue `undefined`\n   */\n  rotation?: number;\n\n  /**\n   * A tint color for the emitted light, if any\n   * @defaultValue `undefined`\n   */\n  color?: number | null;\n\n  /**\n   * An opacity for the emitted light, if any\n   * @defaultValue `undefined`\n   */\n  alpha?: number;\n\n  /**\n   * A level of darkness beyond which this light is active\n   * @defaultValue `undefined`\n   */\n  darknessThreshold?: number;\n\n  /**\n   * The source type from {@link SOURCE_TYPES}\n   * @defaultValue `undefined`\n   */\n  type?: foundry.CONST.SourceType;\n\n  /**\n   * An animation configuration for the source\n   * @defaultValue `undefined`\n   */\n  animation?: PointSource.Animation;\n\n  /**\n   * An integer seed to synchronize (or de-synchronize) animations\n   * @defaultValue `undefined`\n   */\n  seed?: number;\n\n  /**\n   * @defaultValue `undefined`\n   */\n  colorRGB?: [number, number, number];\n\n  /**\n   * @defaultValue `undefined`\n   */\n  ratio?: number;\n\n  /**\n   * @defaultValue `undefined`\n   */\n  fov?: PIXI.Polygon;\n\n  /**\n   * @defaultValue `undefined`\n   */\n  los?: PIXI.Polygon;\n\n  /**\n   * Create the structure of a source Container which can be rendered to the sight layer shadow-map\n   * @returns The constructed light source container\n   */\n  protected _createContainer(shaderCls: ConstructorOf<AbstractBaseShader>): PIXI.Container;\n\n  /**\n   * Initialize the source with provided object data.\n   *\n   * @param x                 - The x-coordinate of the source location\n   *                            (default: `0`)\n   * @param y                 - The y-coordinate of the source location\n   *                            (default: `0`)\n   * @param z                 - An optional z-index sorting for the source\n   *                            (default: `null`)\n   * @param dim               - The allowed radius of dim vision or illumination\n   *                            (default: `0`)\n   * @param bright            - The allowed radius of bright vision or illumination\n   *                            (default: `0`)\n   * @param angle             - The angle of emission for this point source\n   *                            (default: `360`)\n   * @param rotation          - The angle of rotation for this point source\n   *                            (default: `0`)\n   * @param color             - A tint color for the emitted light, if any\n   *                            (default: `null`)\n   * @param alpha             - An opacity for the emitted light, if any\n   *                            (default: `0.5`)\n   * @param darknessThreshold - A level of darkness beyond which this light is active\n   *                            (default: `0`)\n   * @param type              - The source type from SOURCE_TYPES\n   *                            (default: `SOURCE_TYPES.LOCAL`)\n   * @param animation         - An animation configuration for the source\n   *                            (default: `{type: null}`)\n   * @param seed              - An integer seed to synchronize (or de-synchronize) animations\n   *                            (default: `undefined`)\n   *\n   * @returns A reference to the initialized source\n   */\n  initialize({\n    x,\n    y,\n    z,\n    dim,\n    bright,\n    angle,\n    rotation,\n    color,\n    alpha,\n    darknessThreshold,\n    type,\n    animation,\n    seed\n  }?: {\n    x?: number;\n    y?: number;\n    z?: number | null;\n    dim?: number;\n    bright?: number;\n    angle?: number;\n    rotation?: number;\n    color?: number | string | null;\n    alpha?: number;\n    darknessThreshold?: number;\n    type?: string;\n    animation?: PointSource.Animation;\n    seed?: number;\n  }): this;\n\n  /**\n   * Initialize the shaders used for this animation.\n   * Reset the current shader values back to defaults.\n   * Swap to a different Shader instance if necessary.\n   */\n  protected _initializeShaders(): void;\n\n  /**\n   * Initialize the blend mode and vertical sorting of this source relative to others in the container.\n   */\n  protected _initializeBlending(): void;\n\n  /**\n   * Draw the display of this source for the darkness/light container of the SightLayer.\n   * @param updateChannels - Is this drawing initiated because lighting channels have changed?\n   * @returns The rendered light container\n   */\n  drawLight({ updateChannels }?: { updateChannels?: boolean }): PIXI.Container;\n\n  /**\n   * Draw and return a container used to depict the visible color tint of the light source on the LightingLayer\n   * @returns An updated color container for the source\n   */\n  drawColor(): PIXI.Container;\n\n  /**\n   * A common helper function for updating the display of a source container.\n   * Assign the container position, dimensions, and polygons.\n   */\n  protected _drawContainer(c: PIXI.Container): PIXI.Container;\n\n  /**\n   * Animate the PointSource, if an animation is enabled and if it currently has rendered containers.\n   * @param dt - Delta time\n   */\n  animate(dt: number): void;\n\n  /**\n   * A torch animation where the luminosity and coloration decays each frame and is revitalized by flashes\n   * @param dt        - Delta time\n   * @param speed     - The animation speed, from 1 to 10\n   * @param intensity - The animation intensity, from 1 to 10\n   */\n  animateTorch: PointSource.AnimationFunction;\n\n  /**\n   * A basic "pulse" animation which expands and contracts.\n   * @param dt        - Delta time\n   * @param speed     - The animation speed, from 1 to 10\n   * @param intensity - The animation intensity, from 1 to 10\n   */\n  animatePulse: PointSource.AnimationFunction;\n\n  /**\n   * Emanate waves of light from the source origin point\n   * @param dt        - Delta time\n   * @param speed     - The animation speed, from 1 to 10\n   * @param intensity - The animation intensity, from 1 to 10\n   */\n  animateTime: PointSource.AnimationFunction;\n\n  /**\n   * Evolve a value using a stochastic AR(1) process\n   * @param y      - The current value\n   * @param phi    - The decay rate of prior values\n   * @param center - The stationary mean of the series\n   * @param sigma  - The volatility of the process - standard deviation of the error term\n   * @param max    - The maximum allowed outcome, or null\n   * @param min    - The minimum allowed outcome, or null\n   * @returns The new value of the process\n   */\n  protected _ar1(\n    y: number,\n    {\n      phi,\n      center,\n      sigma,\n      max,\n      min\n    }: { phi?: number; center?: number; sigma?: number; max?: number | null; min?: number | null }\n  ): number;\n\n  static GEOMETRY: PIXI.Geometry;\n}\n\ndeclare namespace PointSource {\n  interface AnimationProperties {\n    speed?: number;\n    intensity?: number;\n  }\n  interface Animation extends AnimationProperties {\n    type: null | keyof typeof CONFIG.Canvas.lightAnimations;\n  }\n\n  type AnimationFunction = (this: PointSource, dt: number, { speed, intensity }?: AnimationProperties) => void;\n}\n']},99248:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\prototypes.d.ts",""]},99809:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\quadtree.d.ts","declare interface QuadTreeObject<T> {\n  /**\n   * Rectangle of this object\n   */\n  r: Rectangle;\n  /**\n   * The stored data\n   */\n  t: T;\n  /**\n   * Set of quadtrees that hold this object\n   */\n  n: Set<Quadtree<T>>;\n}\n\n/**\n * A Quadtree implementation that supports collision detection for rectangles.\n */\ndeclare class Quadtree<T> {\n  /**\n   * @param bounds  - The outer bounds of the region\n   * @param options - Additional options which configure the Quadtree\n   */\n  constructor(bounds: Rectangle, { maxObjects, maxDepth, _depth }?: Quadtree.Options);\n\n  /**\n   * The bounding rectangle of the region\n   */\n  bounds: Rectangle;\n\n  /**\n   * The maximum number of objects allowed within this node before it must split\n   * @defaultValue `20`\n   */\n  maxObjects: number;\n\n  /**\n   * The maximum number of levels that the base quadtree is allowed\n   * @defaultValue `4`\n   */\n  maxDepth: number;\n\n  /**\n   * The depth of this node within the root Quadtree\n   * @defaultValue `0`\n   */\n  depth: number;\n\n  /**\n   * The objects contained at this level of the tree\n   * @defaultValue `[]`\n   */\n  objects: QuadTreeObject<T>[];\n\n  /**\n   * Children of this node\n   * @defaultValue `[]`\n   */\n  nodes: Quadtree<T>[];\n\n  /**\n   * Return an array of all the objects in the Quadtree (recursive)\n   */\n  get all(): QuadTreeObject<T>[];\n\n  /**\n   * Clear the quadtree of all existing contents\n   * @returns The cleared Quadtree\n   */\n  clear(): this;\n\n  /**\n   * Add a rectangle object to the tree\n   * @param obj - The object being inserted\n   * @returns The Quadtree nodes the object was added to.\n   */\n  insert(obj: QuadTreeObject<T>): Quadtree<T>[];\n\n  /**\n   * Remove an object from the quadtree\n   * @param target - The quadtree target being removed\n   * @returns The Quadtree for method chaining\n   */\n  remove(target: T): this;\n\n  /**\n   * Split this node into 4 sub-nodes.\n   * @returns The split Quadtree\n   */\n  split(): this;\n\n  /**\n   * Get all the objects which could collide with the provided rectangle\n   * @param rect - The target rectangle\n   * @param _s   - The existing result set, for internal use.\n   * @returns The objects in the Quadtree which represent potential collisions\n   */\n  getObjects(rect: Rectangle, _s: Set<T>): Set<T>;\n\n  /**\n   * Obtain the leaf nodes to which a target rectangle belongs.\n   * This traverses the quadtree recursively obtaining the final nodes which have no children.\n   * @param rect - The target rectangle.\n   * @returns The Quadtree nodes to which the target rectangle belongs\n   */\n  getLeafNodes(rect: Rectangle): Quadtree<T>[];\n\n  /**\n   * Obtain the child nodes within the current node which a rectangle belongs to.\n   * Note that this function is not recursive, it only returns nodes at the current or child level.\n   * @param rect - The target rectangle.\n   * @returns The Quadtree nodes to which the target rectangle belongs\n   */\n  getChildNodes(rect: Rectangle): Quadtree<T>[];\n\n  /**\n   * Visualize the nodes and objects in the quadtree\n   * @param objects - Visualize the rectangular bounds of objects in the Quadtree. Default is false.\n   */\n  visualize({ objects }?: { objects?: boolean }): void;\n\n  /**\n   * A constant that enumerates the index order of the quadtree nodes from top-left to bottom-right.\n   */\n  static readonly INDICES: {\n    tl: 0;\n    tr: 1;\n    bl: 2;\n    br: 3;\n  };\n}\n\ndeclare namespace Quadtree {\n  /**\n   * Additional options which configure the Quadtree\n   */\n  interface Options {\n    /**\n     * The maximum number of objects per node\n     */\n    maxObjects?: number;\n    /**\n     * The maximum number of levels within the root Quadtree\n     */\n    maxDepth?: number;\n    /**\n     * The depth level of the sub-tree. For internal use only\n     * @internal\n     */\n    _depth?: number;\n  }\n}\n"]},66024:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\ray.d.ts","/**\n * A ray for the purposes of computing sight and collision\n * Given points A[x,y] and B[x,y]\n *\n * Slope-Intercept form:\n * y = a + bx\n * y = A.y + ((B.y - A.Y) / (B.x - A.x))x\n *\n * Parametric form:\n * R(t) = (1-t)A + tB\n */\ndeclare class Ray {\n  /**\n   * @param A - The origin of the Ray\n   * @param B - The destination of the Ray\n   */\n  constructor(A: Point, B: Point);\n\n  // Points\n  A: Point;\n  B: Point;\n\n  // Origins\n  x0: number;\n  y0: number;\n\n  // Slopes\n  dx: number;\n  dy: number;\n\n  /**\n   * The slope of the ray, dy over dx\n   */\n  slope: number;\n\n  /**\n   * The normalized angle of the ray in radians on the range (-PI, PI)\n   */\n  angle: number;\n\n  /**\n   * The distance of the ray\n   */\n  distance: number;\n\n  /**\n   * A bounding rectangle that encompasses the Ray\n   */\n  get bounds(): NormalizedRectangle;\n\n  /**\n   * Return the value of the angle normalized to the range (0, 2*PI)\n   * This is useful for testing whether an angle falls between two others\n   */\n  get normAngle(): number;\n\n  /**\n   * A factory method to construct a Ray from an origin point, an angle, and a distance\n   * @param x        - The origin x-coordinate\n   * @param y        - The origin y-coordinate\n   * @param radians  - The ray angle in radians\n   * @param distance - The distance of the ray in pixels\n   * @returns The constructed Ray instance\n   */\n  static fromAngle(x: number, y: number, radians: number, distance: number): Ray;\n\n  /**\n   * A factory method to construct a Ray from points in array format.\n   * @param A - The origin point [x,y]\n   * @param B - The destination point [x,y]\n   * @returns The constructed Ray instance\n   */\n  static fromArrays(A: [x: number, y: number], B: [x: number, y: number]): Ray;\n\n  /**\n   * Project the Array by some proportion of it's initial distance.\n   * Return the coordinates of that point along the path.\n   * @param t - The distance along the Ray\n   * @returns The coordinates of the projected point\n   */\n  project(t: number): Point;\n\n  /**\n   * Create a new ray which uses the same origin point, but a slightly offset angle and distance\n   * @param offset   - An offset in radians which modifies the angle of the original Ray\n   * @param distance - A distance the new ray should project, otherwise uses the same distance.\n   * @returns A new Ray with an offset angle\n   */\n  shiftAngle(angleOffset: number, distance?: number): Ray;\n\n  /**\n   * Find the point I[x,y] and distance t* on ray R(t) which intersects another ray\n   * http://paulbourke.net/geometry/pointlineplane/\n   *\n   * @param coords - An array of coordinates [x0, y0, x1, y1] which defines a line segment to test\n   *\n   * @returns\n   *    The point of collision [x,y] the position of that collision point along the Ray (t0) an the tested\n   *    segment (t1). Returns false if no collision occurs.\n   */\n  intersectSegment(coords: [x0: number, y0: number, x1: number, y1: number]): Ray.CollisionPoint | false;\n\n  /**\n   * An internal helper method for computing the intersection between two lines.\n   * @internal\n   */\n  static _getIntersection(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    x3: number,\n    y3: number,\n    x4: number,\n    y4: number\n  ): Ray.CollisionPoint | false;\n}\n\ndeclare namespace Ray {\n  /**\n   * A representation of a the computed collision between a Ray and a segment\n   */\n  interface CollisionPoint {\n    /**\n     * Distance of collision along the Ray\n     */\n    t0: number;\n\n    /**\n     * Distance of collision along the Segment\n     */\n    t1: number;\n\n    /**\n     * Point of collision x\n     */\n    x: number;\n\n    /**\n     * Point of collision y\n     */\n    y: number;\n  }\n}\n"]},10598:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\roll.d.ts","import { ConfiguredDocumentClass } from '../../types/helperTypes';\n\ndeclare global {\n  /**\n   * An interface and API for constructing and evaluating dice rolls.\n   * The basic structure for a dice roll is a string formula and an object of data against which to parse it.\n   *\n   * @typeParam D - the type of data object against which to parse attributes within the formula\n   *\n   * @example\n   * ```typescript\n   * // Attack with advantage!\n   * let r = new Roll(\"2d20kh + @prof + @strMod\", {prof: 2, strMod: 4});\n   *\n   * // The parsed terms of the roll formula\n   * console.log(r.terms);    // [Die, OperatorTerm, NumericTerm, OperatorTerm, NumericTerm]\n   *\n   * // Execute the roll\n   * r.evaluate();\n   *\n   * // The resulting equation after it was rolled\n   * console.log(r.result);   // 16 + 2 + 4\n   *\n   * // The total resulting from the roll\n   * console.log(r.total);    // 22\n   * ```\n   */\n  class Roll<D extends object = {}> {\n    /**\n     * @param formula - The string formula to parse\n     * @param data    - The data object against which to parse attributes within the formula\n     *                  (default: `{}`)\n     * @param options - (default: `{}`)\n     */\n    constructor(formula: string, data?: D, options?: Roll['options']);\n\n    /**\n     * The original provided data object which substitutes into attributes of the roll formula\n     */\n    data: D;\n\n    /**\n     * Options which modify or describe the Roll\n     */\n    options: Partial<Options>;\n\n    /**\n     * The identified terms of the Roll\n     */\n    terms: RollTerm[];\n\n    /**\n     * An array of inner DiceTerms which were evaluated as part of the Roll evaluation\n     * @defaultValue `[]`\n     */\n    protected _dice: DiceTerm[];\n\n    /**\n     * Store the original cleaned formula for the Roll, prior to any internal evaluation or simplification\n     */\n    protected _formula: string;\n\n    /**\n     * Track whether this Roll instance has been evaluated or not. Once evaluated the Roll is immutable.\n     * @defaultValue `false`\n     */\n    protected _evaluated: boolean;\n\n    /**\n     * Cache the numeric total generated through evaluation of the Roll.\n     * @defaultValue `undefined`\n     */\n    protected _total: number | undefined;\n\n    /**\n     * A Proxy environment for safely evaluating a string using only available Math functions\n     */\n    static MATH_PROXY: MathProxy;\n\n    /**\n     * The HTML template path used to render a complete Roll object to the chat log\n     * @defaultValue `'templates/dice/roll.html'`\n     */\n    static CHAT_TEMPLATE: string;\n\n    /**\n     * The HTML template used to render an expanded Roll tooltip to the chat log\n     * @defaultValue `'templates/dice/tooltip.html'`\n     */\n    static TOOLTIP_TEMPLATE: string;\n\n    /**\n     * Prepare the data structure used for the Roll.\n     * This is factored out to allow for custom Roll classes to do special data preparation using provided input.\n     * @param data - Provided roll data\n     * @returns The prepared data object\n     */\n    protected _prepareData(data: D): D;\n\n    /**\n     * Return an Array of the individual DiceTerm instances contained within this Roll.\n     */\n    get dice(): DiceTerm[];\n\n    /**\n     * Return a standardized representation for the displayed formula associated with this Roll.\n     */\n    get formula(): string;\n\n    /**\n     * The resulting arithmetic expression after rolls have been evaluated\n     */\n    get result(): string;\n\n    /**\n     * Return the total result of the Roll expression if it has been evaluated.\n     */\n    get total(): number | undefined;\n\n    /**\n     * Alter the Roll expression by adding or multiplying the number of dice which are rolled\n     * @param multiply        - A factor to multiply. Dice are multiplied before any additions.\n     * @param add             - A number of dice to add. Dice are added after multiplication.\n     * @param multiplyNumeric - Apply multiplication factor to numeric scalar terms\n     *                          (default: `false`)\n     * @returns The altered Roll expression\n     */\n    alter(multiply: number, add: number, { multiplyNumeric }?: { multiplyNumeric: boolean }): this;\n\n    /**\n     * Clone the Roll instance, returning a new Roll instance that has not yet been evaluated.\n     */\n    clone(): this;\n\n    /**\n     * Execute the Roll, replacing dice and evaluating the total result\n     * @param options - Options which inform how the Roll is evaluated\n     *                  (default: `{}`)\n     * @returns The evaluated Roll instance\n     *\n     * @example\n     * ```typescript\n     * let r = new Roll(\"2d6 + 4 + 1d4\");\n     * r.evaluate();\n     * console.log(r.result); // 5 + 4 + 2\n     * console.log(r.total);  // 11\n     * ```\n     */\n    evaluate(options?: Partial<Options & { async: false }>): this;\n    evaluate(options: Partial<Options> & { async: true }): Promise<this>;\n    evaluate(options?: Partial<Options>): this | Promise<this>;\n\n    /**\n     * Evaluate the roll asynchronously.\n     * A temporary helper method used to migrate behavior from 0.7.x (sync by default) to 0.9.x (async by default).\n     */\n    protected _evaluate(options?: Partial<Omit<Options, 'async'>>): Promise<this>;\n\n    /**\n     * Evaluate the roll synchronously.\n     * A temporary helper method used to migrate behavior from 0.7.x (sync by default) to 0.9.x (async by default).\n     */\n    protected _evaluateSync(options?: Partial<Omit<Options, 'async'>>): this;\n\n    /**\n     * Safely evaluate the final total result for the Roll using its component terms.\n     * @returns The evaluated total\n     */\n    protected _evaluateTotal(): number;\n\n    /**\n     * Alias for evaluate.\n     * @see Roll#evaluate\n     */\n    roll(options?: Partial<Options & { async: false }>): this;\n    roll(options: Partial<Options> & { async: true }): Promise<this>;\n    roll(options?: Partial<Options>): this | Promise<this>;\n\n    /**\n     * Create a new Roll object using the original provided formula and data.\n     * Each roll is immutable, so this method returns a new Roll instance using the same data.\n     * @param options - Evaluation options passed to Roll#evaluate\n     * @returns A new Roll object, rolled using the same formula and data\n     */\n    reroll(options?: Partial<Options & { async: false }>): this;\n    reroll(options: Partial<Options> & { async: true }): Promise<this>;\n    reroll(options?: Partial<Options>): this | Promise<this>;\n\n    /**\n     * A factory method which constructs a Roll instance using the default configured Roll class.\n     * @typeParam D - the type of data object against which to parse attributes within the formula\n     * @param formula - The formula used to create the Roll instance\n     * @param data    - The data object which provides component data for the formula\n     * @param options - Additional options which modify or describe this Roll\n     * @returns The constructed Roll instance\n     */\n    static create<D extends Record<string, unknown> = {}>(\n      formula: string,\n      data?: D,\n      options?: Partial<Options>\n    ): typeof CONFIG.Dice.rolls extends [infer T] ? T : Roll<D>;\n\n    /**\n     * Transform an array of RollTerm objects into a cleaned string formula representation.\n     * @param terms - An array of terms to represent as a formula\n     * @returns The string representation of the formula\n     */\n    static getFormula(terms: RollTerm[]): string;\n\n    /**\n     * A sandbox-safe evaluation function to execute user-input code with access to scoped Math methods.\n     * @param expression - The input string expression\n     * @returns The numeric evaluated result\n     */\n    static safeEval(expression: string): number;\n\n    /**\n     * After parenthetical and arithmetic terms have been resolved, we need to simplify the remaining expression.\n     * Any remaining string terms need to be combined with adjacent non-operators in order to construct parsable terms.\n     * @param terms - An array of terms which is eligible for simplification\n     * @returns An array of simplified terms\n     */\n    static simplifyTerms(terms: RollTerm[]): RollTerm[];\n\n    /**\n     * Simulate a roll and evaluate the distribution of returned results\n     * @param formula - The Roll expression to simulate\n     * @param n       - The number of simulations\n     *                  (default: `10000`)\n     * @returns The rolled totals\n     */\n    static simulate(formula: string, n?: number): number[];\n\n    /**\n     * Parse a formula by following an order of operations:\n     *\n     * Step 1: Replace formula data\n     * Step 2: Split outer-most parenthetical groups\n     * Step 3: Further split outer-most dice pool groups\n     * Step 4: Further split string terms on arithmetic operators\n     * Step 5: Classify all remaining strings\n     *\n     * @param formula - The original string expression to parse\n     * @param data    - A data object used to substitute for attributes in the formula\n     * @returns A parsed array of RollTerm instances\n     */\n    static parse(formula: string, data: object): RollTerm[];\n\n    /**\n     * Replace referenced data attributes in the roll formula with values from the provided data.\n     * Data references in the formula use the \\@attr syntax and would reference the corresponding attr key.\n     *\n     * @param formula - The original formula within which to replace\n     * @param data    - The data object which provides replacements\n     * @param missing - The value that should be assigned to any unmatched keys.\n     *                  If null, the unmatched key is left as-is.\n     * @param warn    - Display a warning notification when encountering an un-matched key.\n     *                  (default: `false`)\n     */\n    static replaceFormulaData<D>(\n      formula: string,\n      data: D,\n      {\n        missing,\n        warn\n      }?: {\n        missing?: string;\n        warn?: boolean;\n      }\n    ): string;\n\n    /**\n     * Validate that a provided roll formula can represent a valid\n     * @param formula - A candidate formula to validate\n     * @returns Is the provided input a valid dice formula?\n     */\n    static validate(formula: string): boolean;\n\n    /**\n     * Split a formula by identifying its outer-most parenthetical and math terms\n     * @param _formula - The raw formula to split\n     * @returns An array of terms, split on parenthetical terms\n     */\n    protected static _splitParentheses(_formula: string): string[];\n\n    /**\n     * Handle closing of a parenthetical term to create a MathTerm expression with a function and arguments\n     */\n    protected static _splitMathArgs(expression: string): MathTerm[];\n\n    /**\n     * Split a formula by identifying its outer-most dice pool terms\n     * @param _formula - The raw formula to split\n     * @returns An array of terms, split on parenthetical terms\n     */\n    protected _splitPools(_formula: string): string[];\n\n    /**\n     * Split a formula by identifying its outer-most groups using a certain group symbol like parentheses or brackets.\n     * @param _formula - The raw formula to split\n     * @param options  - Options that configure how groups are split\n     *                   (default: `{}`)\n     * @returns An array of terms, split on dice pool terms\n     */\n    protected _splitGroup(_formula: string, options?: Partial<SplitGroupOptions>): string[];\n\n    /**\n     * Split a formula by identifying arithmetic terms\n     * @param _formula - The raw formula to split\n     * @returns An array of terms, split on arithmetic operators\n     */\n    protected _splitOperators(_formula: string): (string | OperatorTerm)[];\n\n    /**\n     * Temporarily remove flavor text from a string formula allowing it to be accurately parsed.\n     * @param formula - The formula to extract\n     * @returns The cleaned formula and extracted flavor mapping\n     */\n    protected static _extractFlavors(formula: string): { formula: string; flavors: Flavor };\n\n    /**\n     * Restore flavor text to a string term\n     * @param term    - The string term possibly containing flavor symbols\n     * @param flavors - The extracted flavors object\n     * @returns The restored term containing flavor text\n     */\n    protected static _restoreFlavor(term: string, flavors: Flavor): string;\n\n    /**\n     * Classify a remaining string term into a recognized RollTerm class\n     * @param term         - A remaining un-classified string\n     * @param options      - Options which customize classification\n     *                       (default: `{}`)\n     * @param intermediate - Allow intermediate terms\n     *                       (default: `false`)\n     * @param prior        - The prior classified term\n     * @param next         - The next term to classify\n     * @returns A classified RollTerm instance\n     */\n    protected static _classifyStringTerm(\n      term: string,\n      { intermediate, prior, next }?: { intermediate?: boolean; prior?: RollTerm | string; next?: RollTerm | string }\n    ): RollTerm;\n\n    /**\n     * Render the tooltip HTML for a Roll instance\n     * @returns The rendered HTML tooltip as a string\n     */\n    getTooltip(): Promise<string>;\n\n    /**\n     * Render a Roll instance to HTML\n     * @param chatOptions - An object configuring the behavior of the resulting chat message.\n     *                      (default: `{}`)\n     * @returns The rendered HTML template as a string\n     */\n    render(chatOptions?: ChatOptions): Promise<string>;\n\n    /**\n     * Transform a Roll instance into a ChatMessage, displaying the roll result.\n     * This function can either create the ChatMessage directly, or return the data object that will be used to create.\n     *\n     * @param messageData - The data object to use when creating the message\n     *                      (default: `{}`)\n     * @param options     - Additional options which modify the created message.\n     *                      (default: `{}`)\n     * @param rollMode    - The template roll mode to use for the message from CONFIG.Dice.rollModes\n     * @param create      - Whether to automatically create the chat message, or only return the\n     *                      prepared chatData object.\n     *                      (default: `true`)\n     * @returns A promise which resolves to the created ChatMessage entity, if create is true\n     *          or the Object of prepared chatData otherwise.\n     */\n    toMessage<T extends DeepPartial<ConstructorParameters<ConfiguredDocumentClass<typeof ChatMessage>>[0]> = {}>(\n      messageData?: T,\n      { rollMode, create }?: { rollMode?: foundry.CONST.DiceRollMode; create?: true }\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof ChatMessage>> | undefined>;\n    toMessage<T extends DeepPartial<ConstructorParameters<ConfiguredDocumentClass<typeof ChatMessage>>[0]> = {}>(\n      messageData: T,\n      { rollMode, create }: { rollMode?: foundry.CONST.DiceRollMode; create: false }\n    ): MessageData<T>;\n    toMessage<T extends DeepPartial<ConstructorParameters<ConfiguredDocumentClass<typeof ChatMessage>>[0]> = {}>(\n      messageData: T,\n      { rollMode, create }: { rollMode?: foundry.CONST.DiceRollMode; create: boolean }\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof ChatMessage>> | undefined> | MessageData<T>;\n\n    /**\n     * Expand an inline roll element to display it's contained dice result as a tooltip\n     * @param a - The inline-roll button\n     */\n    static expandInlineResult(a: HTMLAnchorElement): Promise<void>;\n\n    /**\n     * Collapse an expanded inline roll to conceal it's tooltip\n     * @param a - The inline-roll button\n     */\n    static collapseInlineResult(a: HTMLAnchorElement): void;\n\n    /**\n     * Represent the data of the Roll as an object suitable for JSON serialization.\n     * @returns Structured data which can be serialized into JSON\n     */\n    toJSON(): {\n      class: string;\n      options: Options;\n      dice: DiceTerm[];\n      formula: string;\n      terms: RollTerm[];\n      total: number | undefined;\n      evaluated: boolean;\n    };\n\n    /**\n     * Recreate a Roll instance using a provided data object\n     * @param data - Unpacked data representing the Roll\n     * @returns A reconstructed Roll instance\n     */\n    static fromData<T extends Roll>(this: ConstructorOf<T>, data: Data): T;\n\n    /**\n     * Recreate a Roll instance using a provided JSON string\n     * @param json - Serialized JSON data representing the Roll\n     * @returns A reconstructed Roll instance\n     */\n    static fromJSON(json: string): Roll;\n\n    /**\n     * Manually construct a Roll object by providing an explicit set of input terms\n     * @param terms -The array of terms to use as the basis for the Roll\n     * @param options - Additional options passed to the Roll constructor\n     * @returns The constructed Roll instance\n     *\n     * @example\n     * ```typescript\n     * const t1 = new Die({number: 4, faces: 8};\n     * const plus = new OperatorTerm({operator: \"+\"});\n     * const t2 = new NumericTerm({number: 8});\n     * const roll = Roll.fromTerms([t1, plus, t2]);\n     * roll.formula; // 4d8 + 8\n     * ```\n     */\n    static fromTerms(\n      terms: RollTerm[],\n      options?: Partial<Options>\n    ): typeof CONFIG.Dice.rolls extends [infer T] ? T : Roll<{}>;\n\n    /**\n     * @deprecated since 0.8.1\n     */\n    get _rolled(): boolean;\n  }\n}\n\ninterface ChatOptions {\n  /**\n   * @defaultValue `false`\n   */\n  blind?: boolean;\n\n  /**\n   * @defaultValue `null`\n   */\n  flavor?: any;\n\n  /**\n   * @defaultValue `false`\n   */\n  isPrivate?: boolean;\n\n  template?: string;\n\n  /**\n   * @defaultValue The id of the current user\n   */\n  user?: string;\n}\n\ntype Options = RollTerm.EvaluationOptions;\n\ninterface SplitGroupOptions {\n  openRegexp: RegExp | string;\n  closeRegexp: RegExp | string;\n  openSymbol: string;\n  closeSymbol: string;\n  onClose: (group: { open: string; terms: string[]; close: string }) => string[];\n}\n\ninterface Data {\n  formula: string;\n  results: Array<number | string>;\n  terms: Array<(PoolTerm.TermData & { class: 'DicePool' }) | DiceTerm.Data>;\n  total: number | null;\n}\n\ntype Flavor = Record<`%F${number}%`, string>;\n\n/**\n * @deprecated since 0.8.1\n */\ninterface MathProxy extends Math {\n  safeEval: (arg: Parameters<typeof Roll['safeEval']>) => ReturnType<typeof Roll['safeEval']>;\n}\n\ntype MessageData<T extends DeepPartial<ConstructorParameters<typeof ChatMessage>[0]>> = {\n  user: string;\n  type: typeof foundry.CONST.CHAT_MESSAGE_TYPES['ROLL'];\n  content: number;\n  sound: typeof CONFIG.sounds.dice;\n} & T;\n"]},1985:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerm.d.ts","/**\n * An abstract class which represents a single token that can be used as part of a Roll formula.\n * Every portion of a Roll formula is parsed into a subclass of RollTerm in order for the Roll to be fully evaluated.\n */\ndeclare abstract class RollTerm {\n  constructor({ options }?: { options?: RollTerm.Options });\n\n  /** An object of additional options which describes and modifies the term. */\n  options: RollTerm.Options;\n\n  /** An internal flag for whether the term has been evaluated */\n  protected _evaluated: boolean;\n\n  /**\n   * Is this term intermediate, and should be evaluated first as part of the simplification process?\n   * @defaultValue `false`\n   */\n  isIntermediate: boolean;\n\n  /** A regular expression pattern which identifies optional term-level flavor text */\n  static FLAVOR_REGEXP_STRING: string;\n\n  /** A regular expression which identifies term-level flavor text */\n  static FLAVOR_REGEXP: RegExp;\n\n  /** A regular expression used to match a term of this type */\n  static REGEXP: RegExp;\n\n  /** An array of additional attributes which should be retained when the term is serialized */\n  static SERIALIZE_ATTRIBUTES: string[];\n\n  /** A string representation of the formula expression for this RollTerm, prior to evaluation */\n  get expression(): string;\n\n  /** A string representation of the formula, including optional flavor text. */\n  get formula(): string;\n\n  /** A string or numeric representation of the final output for this term, after evaluation. */\n  get total(): number | string | null | undefined;\n\n  /** Optional flavor text which modifies and describes this term. */\n  get flavor(): string;\n\n  /**\n   * Evaluate the roll term, populating the results Array.\n   * @param options - (default: `{}`)\n   * @returns The evaluated dice term\n   */\n  evaluate(options?: Partial<RollTerm.EvaluationOptions & { async: false }>): this;\n  evaluate(options: Partial<RollTerm.EvaluationOptions> & { async: true }): Promise<this>;\n  evaluate(options?: Partial<RollTerm.EvaluationOptions>): this | Promise<this>;\n\n  protected _evaluate({ minimize, maximize }?: { minimize?: boolean; maximize?: boolean }): Promise<this>;\n\n  protected _evaluateSync({ minimize, maximize }?: { minimize?: boolean; maximize?: boolean }): this;\n\n  /* -------------------------------------------- */\n  /*  Serialization and Loading                   */\n  /* -------------------------------------------- */\n\n  /**\n   * Construct a RollTerm from a provided data object\n   * @param data - Provided data from an un-serialized term\n   * @returns The constructed RollTerm\n   */\n  static fromData(data: object): RollTerm;\n\n  /**\n   * * Define term-specific logic for how a de-serialized data object is restored as a functional RollTerm\n   * @param data - The de-serialized term data\n   * @returns The re-constructed RollTerm object\n   */\n  protected static _fromData<T extends RollTerm>(this: ConstructorOf<T>, data: object): T;\n\n  /**\n   * Reconstruct a RollTerm instance from a provided JSON string\n   * @param json - A serialized JSON representation of a DiceTerm\n   * @returns A reconstructed RollTerm from the provided JSON\n   */\n  static fromJSON(json: string): RollTerm;\n\n  /**\n   * Serialize the RollTerm to a JSON string which allows it to be saved in the database or embedded in text.\n   * This method should return an object suitable for passing to the JSON.stringify function.\n   */\n  toJSON(): object;\n}\n\ndeclare namespace RollTerm {\n  interface Options {\n    flavor?: string;\n  }\n\n  interface EvaluationOptions {\n    /**\n     * Maximize the result, obtaining the largest possible value.\n     * @defaultValue `false`\n     * */\n    maximize: boolean;\n\n    /**\n     * Minimize the result, obtaining the smallest possible value\n     * @defaultValue `false`\n     */\n    minimize: boolean;\n\n    /**\n     * Evaluate the roll asynchronously, receiving a Promise as the returned value.\n     * This will become the default behavior in version 10.x\n     * @defaultValue `false`\n     */\n    async: boolean;\n  }\n\n  interface Data {\n    class: string;\n    evaluated: boolean;\n    options: Options;\n  }\n}\n"]},65760:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\diceTerm.d.ts","/**\n * An abstract base class for any type of RollTerm which involves randomized input from dice, coins, or other devices.\n */\ndeclare abstract class DiceTerm extends RollTerm {\n  /**\n   * @param termData  - Data used to create the Dice Term, including the following:\n   *                    (default: `{}`)\n   * @param number    - The number of dice of this term to roll, before modifiers are applied\n   *                    (default: `1`)\n   * @param faces     - The number of faces on each die of this type\n   *                    (default: `6`)\n   * @param modifiers - An array of modifiers applied to the results\n   *                    (default: `[]`)\n   * @param results   - An optional array of pre-cast results for the term\n   *                    (default: `[]`)\n   * @param options   - Additional options that modify the term\n   *                    (default: `{}`)\n   */\n  constructor(termData?: Partial<DiceTerm.TermData>);\n\n  /**\n   * The number of dice of this term to roll, before modifiers are applied\n   */\n  number: DiceTerm.TermData['number'];\n\n  /**\n   * The number of faces on the die\n   */\n  faces: DiceTerm.TermData['faces'];\n\n  /**\n   * An Array of dice term modifiers which are applied\n   */\n  modifiers: DiceTerm.TermData['modifiers'];\n\n  /**\n   * The array of dice term results which have been rolled\n   */\n  results: DiceTerm.Result[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * Define the denomination string used to register this DiceTerm type in CONFIG.Dice.terms\n   * @defaultValue \"\"\n   */\n  static DENOMINATION: string;\n\n  /**\n   * Define the named modifiers that can be applied for this particular DiceTerm type.\n   * @defaultValue `{}`\n   */\n  static MODIFIERS: DiceTerm.Modifiers;\n\n  /**\n   * A regular expression pattern which captures the full set of term modifiers\n   * Anything until a space, group symbol, or arithmetic operator\n   */\n  static MODIFIERS_REGEXP_STRING: string;\n\n  /** A regular expression used to separate individual modifiers */\n  static MODIFIER_REGEXP: RegExp;\n\n  /* -------------------------------------------- */\n  /*  Dice Term Attributes                        */\n  /* -------------------------------------------- */\n\n  /**\n   * Return an array of rolled values which are still active within this term\n   */\n  get values(): number[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * Alter the DiceTerm by adding or multiplying the number of dice which are rolled\n   * @param multiply - A factor to multiply. Dice are multiplied before any additions.\n   * @param add      - A number of dice to add. Dice are added after multiplication.\n   * @returns The altered term\n   */\n  alter(multiply: number, add: number): this;\n\n  /* -------------------------------------------- */\n\n  protected _evaluateSync({ minimize, maximize }?: { minimize?: boolean; maximize?: boolean }): this;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Roll the DiceTerm by mapping a random uniform draw against the faces of the dice term.\n   * @param minimize - Minimize the result, obtaining the smallest possible value.\n   * @param maximize - Maximize the result, obtaining the largest possible value.\n   * @returns The produced result\n   */\n  roll({ minimize, maximize }?: { minimize: boolean; maximize: boolean }): DiceTerm.Result;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return a string used as the label for each rolled result\n   * @param result - The rolled result\n   * @returns The result label\n   */\n  getResultLabel(result: DiceTerm.Result): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get the CSS classes that should be used to display each rolled result\n   * @param result - The rolled result\n   * @returns The desired classes\n   */\n  getResultCSS(result: DiceTerm.Result): (string | null)[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * Render the tooltip HTML for a Roll instance\n   * @returns The data object used to render the default tooltip template for this DiceTerm\n   */\n  getTooltipData(): DiceTerm.ToolTipData;\n\n  /* -------------------------------------------- */\n  /*  Modifier Helpers                            */\n  /* -------------------------------------------- */\n\n  /**\n   * Sequentially evaluate each dice roll modifier by passing the term to its evaluation function\n   * Augment or modify the results array.\n   */\n  protected _evaluateModifiers(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Evaluate a single modifier command, recording it in the array of evaluated modifiers\n   * @param command - The parsed modifier command\n   * @param modifier -  The full modifier request\n   */\n  protected _evaluateModifier(command: string, modifier: string): void;\n  /* -------------------------------------------- */\n\n  /**\n   * A helper comparison function.\n   * Returns a boolean depending on whether the result compares favorably against the target.\n   * @param result     - The result being compared\n   * @param comparison - The comparison operator in [=,&lt;,&lt;=,\\>,\\>=]\n   * @param target     - The target value\n   * @returns Is the comparison true?\n   */\n  static compareResult(result: number, comparison: string, target: number): boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A helper method to modify the results array of a dice term by flagging certain results are kept or dropped.\n   * @param results - The results array\n   * @param number  - The number to keep or drop\n   * @param keep    - Keep results?\n   *                  (default: `true`)\n   * @param highest - Keep the highest?\n   *                  (default: `true`)\n   * @returns The modified results array\n   */\n  protected static _keepOrDrop(\n    results: DiceTerm.Result[],\n    number: number,\n    {\n      keep,\n      highest\n    }?: {\n      keep: boolean;\n      highest: boolean;\n    }\n  ): DiceTerm.Result;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A reusable helper function to handle the identification and deduction of failures\n   * @param flagFailure - (default: `false`)\n   * @param flagSuccess - (default: `false`)\n   */\n  protected static _applyCount(\n    results: DiceTerm.Result[],\n    comparison: string,\n    target: number,\n    {\n      flagSuccess,\n      flagFailure\n    }?: {\n      flagSuccess: boolean;\n      flagFailure: boolean;\n    }\n  ): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A reusable helper function to handle the identification and deduction of failures\n   * @param deductFailure - (default: `false`)\n   * @param invertFailure - (default: `false`)\n   */\n  protected static _applyDeduct(\n    results: DiceTerm.Result[],\n    comparison: string,\n    target: number,\n    {\n      deductFailure,\n      invertFailure\n    }?: {\n      deductFailure: boolean;\n      invertFailure: boolean;\n    }\n  ): void;\n\n  /* -------------------------------------------- */\n  /*  Factory Methods                             */\n  /* -------------------------------------------- */\n\n  /**\n   * @deprecated since 0.8.1\n   */\n  static fromExpression(expression: string, options: DiceTerm.Options): DiceTerm | null;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Determine whether a string expression matches this type of term\n   * @param expression - The expression to parse\n   * @param options - Additional options which customize the match\n   * @param imputeNumber - Allow the number of dice to be optional, i.e. \"d6\"\n   *                       (default: `true`)\n   */\n  static matchTerm(expression: string, { imputeNumber }?: { imputeNumber: boolean }): RegExpMatchArray | null;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Construct a term of this type given a matched regular expression array.\n   * @param match - The matched regular expression array\n   * @returns The constructed term\n   */\n  static fromMatch(match: RegExpMatchArray): DiceTerm;\n\n  /* -------------------------------------------- */\n\n  /**\n   * @deprecated since 0.8.1\n   */\n  static fromResults(options: Partial<DiceTerm.TermData>, results: DiceTerm.Result[]): DiceTerm;\n\n  /**\n   * @deprecated since 0.8.1\n   */\n  static getResultLabel(): string;\n}\n\ndeclare namespace DiceTerm {\n  interface Data extends Partial<TermData> {\n    class?: string;\n    results: DiceTerm.Result[];\n  }\n\n  interface TermData {\n    number: number;\n    faces: number;\n    modifiers: string[];\n    results: Result[];\n    options: DiceTerm.Options;\n  }\n\n  type Options = RollTerm.Options;\n\n  interface Result {\n    result: number;\n    active?: boolean;\n    count?: number;\n    success?: boolean;\n    failure?: boolean;\n    discarded?: boolean;\n    rerolled?: boolean;\n    exploded?: boolean;\n  }\n\n  interface ToolTipData {\n    formula: string;\n    total: number;\n    faces: number;\n    flavor: string;\n    rolls: { result: string; classes: string }[];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface Modifiers {}\n}\n"]},7686:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\diceTerms\\coin.d.ts",'/**\n * A type of DiceTerm used to represent flipping a two-sided coin.\n */\ndeclare class Coin extends DiceTerm {\n  constructor(termData?: Partial<Coin.TermData>);\n\n  faces: 2;\n\n  /**\n   * @defaultValue `c`\n   */\n  static DENOMINATION: string;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   *  {\n   *    c: "call"\n   *  }\n   * ```\n   */\n  static MODIFIERS: Coin.Modifiers;\n\n  /**\n   * @override\n   */\n  roll(options?: { maximize: boolean; minimize: boolean }): DiceTerm.Result;\n\n  /**\n   * @override\n   */\n  getResultLabel(result: DiceTerm.Result): string;\n\n  /**\n   * @override\n   */\n  getResultCSS(result: DiceTerm.Result): (string | null)[];\n\n  /**\n   * Call the result of the coin flip, marking any coins that matched the called target as a success\n   *\n   * 3dcc1      Flip 3 coins and treat "heads" as successes\n   * 2dcc0      Flip 2 coins and treat "tails" as successes\n   *\n   * @param modifier - The matched modifier query\n   */\n  call(modifier: string): string;\n}\n\ndeclare namespace Coin {\n  interface TermData extends DiceTerm.TermData {\n    modifiers: Array<keyof Modifiers>;\n  }\n\n  interface Modifiers {\n    c: \'call\';\n  }\n}\n']},24459:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\diceTerms\\die.d.ts","/**\n * A type of DiceTerm used to represent rolling a fair n-sided die.\n *\n * @example\n * ```typescript\n * // Roll 4 six-sided dice\n * let die = new Die({faces: 6, number: 4}).evaluate();\n * ```\n */\ndeclare class Die extends DiceTerm {\n  constructor(termData?: Partial<Die.TermData>);\n\n  /**\n   * @override\n   * @defaultValue `\"d\"`\n   */\n  static DENOMINATION: string;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * {\n   *   r: 'reroll';\n   *   rr: 'rerollRecursive';\n   *   x: 'explode';\n   *   xo: 'explodeOnce';\n   *   k: 'keep';\n   *   kh: 'keep';\n   *   kl: 'keep';\n   *   d: 'drop';\n   *   dh: 'drop';\n   *   dl: 'drop';\n   *   min: 'minimum';\n   *   max: 'maximum';\n   *   even: 'countEven';\n   *   odd: 'countOdd';\n   *   cs: 'countSuccess';\n   *   cf: 'countFailures';\n   *   df: 'deductFailures';\n   *   sf: 'subtractFailures';\n   *   ms: 'marginSuccess';\n   * }\n   * ```\n   */\n  static MODIFIERS: Die.Modifiers;\n\n  /**\n   * @override\n   */\n  get total(): number | null;\n\n  /**\n   * Re-roll the Die, rolling additional results for any values which fall within a target set.\n   * If no target number is specified, re-roll the lowest possible result.\n   *\n   * 20d20r         reroll all 1s\n   * 20d20r1        reroll all 1s\n   * 20d20r=1       reroll all 1s\n   * 20d20r1=1      reroll a single 1\n   *\n   * @param modifier - The matched modifier query\n   * @param recursive - Reroll recursively, continuing to reroll until the condition is no longer met\n   * @returns False if the modifier was unmatched\n   */\n  reroll(modifier: string, { recursive }?: { recursive?: boolean }): boolean | void;\n\n  /**\n   * @see {@link Die#reroll}\n   */\n  rerollRecursive(modifier: string): boolean | void;\n\n  /**\n   * Explode the Die, rolling additional results for any values which match the target set.\n   * If no target number is specified, explode the highest possible result.\n   * Explosion can be a \"small explode\" using a lower-case x or a \"big explode\" using an upper-case \"X\"\n   *\n   * @param modifier  - The matched modifier query\n   * @param recursive - Explode recursively, such that new rolls can also explode?\n   *                    (default: `true`)\n   */\n  explode(modifier: string, { recursive }?: { recursive: boolean }): boolean | void;\n\n  /**\n   * @see {@link Die#explode}\n   */\n  explodeOnce(modifier: string): boolean | void;\n\n  /**\n   * Keep a certain number of highest or lowest dice rolls from the result set.\n   *\n   * 20d20k       Keep the 1 highest die\n   * 20d20kh      Keep the 1 highest die\n   * 20d20kh10    Keep the 10 highest die\n   * 20d20kl      Keep the 1 lowest die\n   * 20d20kl10    Keep the 10 lowest die\n   *\n   * @param modifier - The matched modifier query\n   */\n  keep(modifier: string): boolean | void;\n\n  /**\n   * Drop a certain number of highest or lowest dice rolls from the result set.\n   *\n   * 20d20d       Drop the 1 lowest die\n   * 20d20dh      Drop the 1 highest die\n   * 20d20dl      Drop the 1 lowest die\n   * 20d20dh10    Drop the 10 highest die\n   * 20d20dl10    Drop the 10 lowest die\n   *\n   * @param modifier - The matched modifier query\n   */\n  drop(modifier: string): boolean | void;\n\n  /**\n   * Count the number of successful results which occurred in a given result set.\n   * Successes are counted relative to some target, or relative to the maximum possible value if no target is given.\n   * Applying a count-success modifier to the results re-casts all results to 1 (success) or 0 (failure)\n   *\n   * 20d20cs      Count the number of dice which rolled a 20\n   * 20d20cs\\>10   Count the number of dice which rolled higher than 10\n   * 20d20cs\\<10   Count the number of dice which rolled less than 10\n   *\n   * @param modifier - The matched modifier query\n   */\n  countSuccess(modifier: string): boolean | void;\n\n  /**\n   * Count the number of failed results which occurred in a given result set.\n   * Failures are counted relative to some target, or relative to the lowest possible value if no target is given.\n   * Applying a count-failures modifier to the results re-casts all results to 1 (failure) or 0 (non-failure)\n   *\n   * 6d6cf      Count the number of dice which rolled a 1 as failures\n   * 6d6cf\\<=3   Count the number of dice which rolled less than 3 as failures\n   * 6d6cf\\>4    Count the number of dice which rolled greater than 4 as failures\n   *\n   * @param modifier - The matched modifier query\n   */\n  countFailures(modifier: string): boolean | void;\n\n  /**\n   * Count the number of even results which occurred in a given result set.\n   * Even numbers are marked as a success and counted as 1\n   * Odd numbers are marked as a non-success and counted as 0.\n   *\n   * 6d6even    Count the number of even numbers rolled\n   *\n   * @param modifier - The matched modifier query\n   */\n  countEven(modifier: string): boolean | void;\n\n  /**\n   * Count the number of odd results which occurred in a given result set.\n   * Odd numbers are marked as a success and counted as 1\n   * Even numbers are marked as a non-success and counted as 0.\n   *\n   * 6d6odd    Count the number of odd numbers rolled\n   *\n   * @param modifier - The matched modifier query\n   */\n  countOdd(modifier: string): boolean | void;\n\n  /**\n   * Deduct the number of failures from the dice result, counting each failure as -1\n   * Failures are identified relative to some target, or relative to the lowest possible value if no target is given.\n   * Applying a deduct-failures modifier to the results counts all failed results as -1.\n   *\n   * 6d6df      Subtract the number of dice which rolled a 1 from the non-failed total.\n   * 6d6cs\\>3df  Subtract the number of dice which rolled a 3 or less from the non-failed count.\n   * 6d6cf\\<3df  Subtract the number of dice which rolled less than 3 from the non-failed count.\n   *\n   * @param modifier - The matched modifier query\n   */\n  deductFailures(modifier: string): boolean | void;\n\n  /**\n   * Subtract the value of failed dice from the non-failed total, where each failure counts as its negative value.\n   * Failures are identified relative to some target, or relative to the lowest possible value if no target is given.\n   * Applying a deduct-failures modifier to the results counts all failed results as -1.\n   *\n   * 6d6df\\<3    Subtract the value of results which rolled less than 3 from the non-failed total.\n   *\n   * @param modifier - The matched modifier query\n   */\n  subtractFailures(modifier: string): boolean | void;\n\n  /**\n   * Subtract the total value of the DiceTerm from a target value, treating the difference as the final total.\n   * Example: 6d6ms\\>12    Roll 6d6 and subtract 12 from the resulting total.\n   * @param modifier - The matched modifier query\n   */\n  marginSuccess(modifier: string): boolean | void;\n\n  /**\n   * Constrain each rolled result to be at least some minimum value.\n   * Example: 6d6min2    Roll 6d6, each result must be at least 2\n   * @param modifier - The matched modifier query\n   */\n  minimum(modifier: string): boolean | void;\n\n  /**\n   * Constrain each rolled result to be at most some maximum value.\n   * Example: 6d6max5    Roll 6d6, each result must be at most 5\n   * @param modifier - The matched modifier query\n   */\n  maximum(modifier: string): boolean | void;\n}\n\ndeclare namespace Die {\n  interface Data extends Partial<TermData> {\n    class: 'Die';\n    results: DiceTerm.Result[];\n  }\n\n  interface TermData extends DiceTerm.TermData {\n    modifiers: Array<keyof typeof Die['MODIFIERS']>;\n  }\n\n  interface Modifiers {\n    r: 'reroll';\n    rr: 'rerollRecursive';\n    x: 'explode';\n    xo: 'explodeOnce';\n    k: 'keep';\n    kh: 'keep';\n    kl: 'keep';\n    d: 'drop';\n    dh: 'drop';\n    dl: 'drop';\n    min: 'minimum';\n    max: 'maximum';\n    even: 'countEven';\n    odd: 'countOdd';\n    cs: 'countSuccess';\n    cf: 'countFailures';\n    df: 'deductFailures';\n    sf: 'subtractFailures';\n    ms: 'marginSuccess';\n  }\n}\n"]},22183:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\diceTerms\\fateDie.d.ts","/**\n * A type of DiceTerm used to represent a three-sided Fate/Fudge die.\n * Mathematically behaves like 1d3-2\n */\ndeclare class FateDie extends DiceTerm {\n  constructor(termData?: Partial<DiceTerm.TermData>);\n\n  faces: 3;\n\n  /**\n   * @defaultValue `'f'`\n   */\n  static DENOMINATION: string;\n\n  /**\n   * @override\n   */\n  roll({ minimize, maximize }?: { minimize: boolean; maximize: boolean }): DiceTerm.Result;\n\n  /**\n   * @override\n   */\n  getResultLabel(result: DiceTerm.Result): string;\n}\n"]},23446:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\mathTerm.d.ts","declare global {\n  /**\n   * A type of RollTerm used to apply a function from the Math library.\n   */\n  class MathTerm extends RollTerm {\n    constructor({ fn, terms, options }: MathTermData);\n\n    /**\n     * The named function in the Math environment which should be applied to the term\n     */\n    fn: MathTermData['fn'];\n\n    /** An array of string argument terms for the function */\n    terms: NonNullable<MathTermData['terms']>;\n\n    /**\n     * The cached Roll instances for each function argument\n     * @defaultValue `[]`\n     */\n    rolls: Roll[];\n\n    /**\n     * The cached result of evaluating the method arguments\n     * @defaultValue `undefined`\n     */\n    result?: number;\n\n    /**\n     * @defaultValue `true`\n     */\n    isIntermediate: boolean;\n\n    /**\n     * @defaultValue `[\"fn\", \"terms\"]`\n     */\n    static SERIALIZE_ATTRIBUTES: string[];\n\n    /**\n     * An array of evaluated DiceTerm instances that should be bubbled up to the parent Roll\n     */\n    get dice(): DiceTerm[] | undefined;\n\n    get total(): number | undefined;\n\n    get expression(): string;\n\n    protected _evaluateSync({ minimize, maximize }?: { minimize?: boolean; maximize?: boolean }): this;\n\n    protected _evaluate({ minimize, maximize }?: { minimize?: boolean; maximize?: boolean }): Promise<this>;\n  }\n}\n\ninterface MathTermData {\n  fn: string;\n\n  /**\n   * @defaultValue `[]`\n   */\n  terms?: string[];\n\n  /**\n   * @defaultValue `{}`\n   */\n  options?: RollTerm.Options;\n}\n\nexport {};\n"]},28357:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\numericTerm.d.ts","declare global {\n  /**\n   * A type of RollTerm used to represent static numbers.\n   */\n  class NumericTerm extends RollTerm {\n    constructor({ number, options }: NumericTermData);\n\n    number: NumericTermData['number'];\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * new RegExp(`^([0-9]+(?:\\\\.[0-9]+)?)${RollTerm.FLAVOR_REGEXP_STRING}?$`)\n     * ```\n     */\n    static REGEXP: RegExp;\n\n    /**\n     * @defaultValue `['number']`\n     */\n    static SERIALIZE_ATTRIBUTES: string[];\n\n    get expression(): string;\n\n    get total(): number;\n\n    /**\n     * Determine whether a string expression matches a NumericTerm\n     * @param expression - The expression to parse\n     */\n    static matchTerm(expression: string): RegExpMatchArray | null;\n\n    /* -------------------------------------------- */\n\n    /**\n     * Construct a term of this type given a matched regular expression array.\n     * @param match -  The matched regular expression array\n     * @returns The constructed term\n     */\n    static fromMatch(match: RegExpMatchArray): NumericTerm;\n  }\n}\n\ninterface NumericTermData {\n  number: number;\n\n  /**\n   * @defaultValue `{}`\n   */\n  options?: RollTerm.Options;\n}\n\nexport {};\n"]},94862:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\operatorTerm.d.ts","/**\n * A type of RollTerm used to denote and perform an arithmetic operation.\n */\ndeclare class OperatorTerm extends RollTerm {\n  constructor({ operator, options }?: Partial<OperatorTerm.TermData>);\n\n  operator: OperatorTerm.TermData['operator'];\n\n  /** An array of operators which represent arithmetic operations */\n  static OPERATORS: ['+', '-', '*', '/'];\n}\n\ndeclare namespace OperatorTerm {\n  interface TermData {\n    operator: string;\n    options?: RollTerm.Options;\n  }\n}\n"]},39979:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\parentheticalTerm.d.ts","/**\n * A type of RollTerm used to enclose a parenthetical expression to be recursively evaluated.\n */\ndeclare class ParentheticalTerm extends RollTerm {\n  constructor({ term, roll, options }: ParentheticalTerm.TermData);\n\n  /** The original provided string term used to construct the parenthetical */\n  term: ParentheticalTerm.TermData['term'];\n\n  /** Alternatively, an already-evaluated Roll instance may be passed directly */\n  roll: ParentheticalTerm.TermData['roll'];\n\n  /**\n   * The regular expression pattern used to identify the opening of a parenthetical expression.\n   * This could also identify the opening of a math function.\n   */\n  static OPEN_REGEXP: RegExp;\n\n  /** A regular expression pattern used to identify the closing of a parenthetical expression. */\n  static CLOSE_REGEXP: RegExp;\n\n  /** An array of evaluated DiceTerm instances that should be bubbled up to the parent Roll */\n  get dice(): DiceTerm[];\n\n  /**\n   * Construct a ParentheticalTerm from an Array of component terms which should be wrapped inside the parentheses.\n   * @param terms - The array of terms to use as internal parts of the parenthetical\n   * @param options - Additional options passed to the ParentheticalTerm constructor\n   * @returns  The constructed ParentheticalTerm instance\n   *\n   * @example <caption>Create a Parenthetical Term from an array of component RollTerm instances</caption>\n   * ```typescript\n   * const d6 = new Die({number: 4, faces: 6});\n   * const plus = new OperatorTerm({operator: \"+\"});\n   * const bonus = new NumericTerm({number: 4});\n   * t = ParentheticalTerm.fromTerms([d6, plus, bonus]);\n   * t.formula; // (4d6 + 4)\n   * ```\n   */\n  static fromTerms(terms: RollTerm[], options?: Partial<RollTerm.Options>): ParentheticalTerm;\n}\n\ndeclare namespace ParentheticalTerm {\n  interface TermData {\n    term: string;\n    roll: Roll;\n    options: RollTerm.Options;\n  }\n}\n"]},81631:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\poolTerm.d.ts","declare global {\n  /**\n   * A type of RollTerm which encloses a pool of multiple inner Rolls which are evaluated jointly.\n   *\n   * A dice pool represents a set of Roll expressions which are collectively modified to compute an effective total\n   * across all Rolls in the pool. The final total for the pool is defined as the sum over kept rolls, relative to any\n   * success count or margin.\n   *\n   * @example\n   * ```typescript\n   * // Keep the highest of the 3 roll expressions\n   * let pool = new PoolTerm({\n   *   rolls: [\"4d6\", \"3d8 - 1\", \"2d10 + 3\"],\n   *   modifiers: [\"kh\"]\n   * });\n   * pool.evaluate();\n   * ```\n   */\n  class PoolTerm extends RollTerm {\n    constructor({ terms, modifiers, rolls, results, options }?: PoolTermConstructorData);\n\n    /**\n     * The original provided terms to the Dice Pool\n     */\n    terms: PoolTerm.TermData['terms'];\n\n    /**\n     * The string modifiers applied to resolve the pool\n     */\n    modifiers: PoolTerm.TermData['modifiers'];\n\n    /**\n     * Each component term of a dice pool is evaluated as a Roll instance\n     */\n    rolls: PoolTerm.TermData['rolls'];\n\n    /**\n     * The array of dice pool results which have been rolled\n     */\n    results: PoolTerm.TermData['results'];\n\n    /**\n     * Define the modifiers that can be used for this particular DiceTerm type.\n     */\n    static MODIFIERS: PoolTerm.Modifiers;\n\n    /**\n     * The regular expression pattern used to identify the opening of a dice pool expression.\n     * @defaultValue `/{/g`\n     */\n    static OPEN_REGEXP: RegExp;\n\n    /**\n     * A regular expression pattern used to identify the closing of a dice pool expression\n     * @defaultValue\n     * ```typescript\n     * new RegExp(`}${DiceTerm.MODIFIERS_REGEXP_STRING}?(?:%F[0-9]+%)?`, \"g\")\n     * ```\n     */\n    static CLOSE_REGEXP: RegExp;\n\n    /**\n     * @defaultValue `[\"terms\", \"modifiers\", \"rolls\", \"results\"]`\n     */\n    static SERIALIZE_ATTRIBUTES: string[];\n\n    /**\n     * Return an Array of each individual DiceTerm instances contained within the PoolTerm.\n     */\n    get dice(): DiceTerm[];\n\n    get expression(): string;\n\n    get total(): undefined | number;\n\n    /**\n     * Return an array of rolled values which are still active within the PoolTerm\n     */\n    get values(): number[];\n\n    /**\n     * Alter the DiceTerm by adding or multiplying the number of dice which are rolled\n     * @param args - Arguments passed to each contained Roll#alter method.\n     * @returns The altered pool\n     */\n    alter(...args: Parameters<Roll['alter']>): this;\n\n    protected _evaluateSync({ minimize, maximize }?: { minimize?: boolean; maximize?: boolean }): this;\n\n    protected _evaluate({ minimize, maximize }?: { minimize?: boolean; maximize?: boolean }): Promise<this>;\n\n    /**\n     * Use the same logic as for the DiceTerm to avoid duplication\n     * @see DiceTerm#_evaluateModifiers\n     */\n    protected _evaluateModifiers(): void;\n\n    /**\n     * Use the same logic as for the DiceTerm to avoid duplication\n     * @see DiceTerm#_evaluateModifier\n     */\n    protected _evaluateModifier(command: string, modifier: string): void;\n\n    protected static _fromData<T extends RollTerm>(this: ConstructorOf<T>, data: object): T;\n\n    toJSON(): object;\n\n    /**\n     * Given a string formula, create and return an evaluated PoolTerm object\n     * @param formula - The string formula to parse\n     * @param options - Additional options applied to the PoolTerm\n     * @returns The evaluated PoolTerm object or null if the formula is invalid\n     */\n    static fromExpression<T extends RollTerm>(\n      this: ConstructorOf<T>,\n      formula: string,\n      options?: RollTerm.Options\n    ): T | null;\n\n    /**\n     * Create a PoolTerm by providing an array of existing Roll objects\n     * @param rolls - An array of Roll objects from which to create the pool\n     * @returns The constructed PoolTerm comprised of the provided rolls\n     */\n    static fromRolls<T extends PoolTerm>(this: ConstructorOf<T>, rolls?: Roll[]): T;\n\n    /**\n     * Keep a certain number of highest or lowest dice rolls from the result set.\n     * @example\n     * `{1d6,1d8,1d10,1d12}kh2` Keep the 2 best rolls from the pool\n     * @example\n     * `{1d12,6}kl` Keep the lowest result in the pool\n     *\n     * @param modifier - The matched modifier query\n     */\n    keep(modifier: string): ReturnType<Die['keep']>;\n\n    /**\n     * Keep a certain number of highest or lowest dice rolls from the result set.\n     * @example\n     * `{1d6,1d8,1d10,1d12}dl3` Drop the 3 worst results in the pool\n     * @example\n     * `{1d12,6}dh` Drop the highest result in the pool\n     *\n     * @param modifier - The matched modifier query\n     */\n    drop(modifier: string): ReturnType<Die['drop']>;\n\n    /**\n     * Count the number of successful results which occurred in the pool.\n     * Successes are counted relative to some target, or relative to the maximum possible value if no target is given.\n     * Applying a count-success modifier to the results re-casts all results to 1 (success) or 0 (failure)\n     * @example\n     * `20d20cs` Count the number of dice which rolled a 20\n     * @example\n     * `20d20cs>10` Count the number of dice which rolled higher than 10\n     * @example\n     * `20d20cs<10` Count the number of dice which rolled less than 10\n     *\n     * @param modifier - The matched modifier query\n     */\n    countSuccess(modifier: string): ReturnType<Die['countSuccess']>;\n\n    /**\n     * Count the number of failed results which occurred in a given result set.\n     * Failures are counted relative to some target, or relative to the lowest possible value if no target is given.\n     * Applying a count-failures modifier to the results re-casts all results to 1 (failure) or 0 (non-failure)\n     * @example\n     * `6d6cf` Count the number of dice which rolled a 1 as failures\n     * @example\n     * `6d6cf<=3` Count the number of dice which rolled less than 3 as failures\n     * @example\n     * `6d6cf>4` Count the number of dice which rolled greater than 4 as failures\n     *\n     * @param modifier - The matched modifier query\n     */\n    countFailures(modifier: string): ReturnType<Die['countFailures']>;\n  }\n\n  /**\n   * @deprecated since 0.8.1\n   */\n  const DicePool: typeof PoolTerm;\n\n  namespace PoolTerm {\n    /**\n     * @remarks This interface is not defined by foundry itself. It only exists\n     * to allow module and system authors to use it for declaration merging,\n     * enabling them to add additional modifiers for {@link PoolTerm}s.\n     */\n    interface Modifiers {\n      k: 'keep';\n      kh: 'keep';\n      kl: 'keep';\n      d: 'drop';\n      dh: 'drop';\n      dl: 'drop';\n      cs: 'countSuccess';\n      cf: 'countFailures';\n    }\n\n    type TermData = Required<PoolTermConstructorData>;\n  }\n}\n\ninterface PoolTermConstructorData {\n  /**\n   * @defaultValue `[]`\n   */\n  terms?: string[];\n\n  /**\n   * @defaultValue `[]`\n   */\n  modifiers?: string[];\n\n  /**\n   * @defaultValue `[]`\n   */\n  rolls?: Roll[];\n\n  /**\n   * @defaultValue `[]`\n   */\n  results?: DiceTerm.Result[];\n\n  /**\n   * @defaultValue `{}`\n   */\n  options?: RollTerm.Options;\n}\n\nexport {};\n"]},64210:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\stringTerm.d.ts","declare global {\n  /**\n   * A type of RollTerm used to represent strings which have not yet been matched.\n   */\n  class StringTerm extends RollTerm {\n    constructor({ term, options }: StringTermConstructorData);\n\n    term: StringTermConstructorData['term'];\n\n    /**\n     * @defaultValue `[\"term\"]`\n     */\n    static SERIALIZE_ATTRIBUTES: string[];\n\n    get expression(): string;\n\n    get total(): string;\n\n    evaluate(options?: Partial<RollTerm.EvaluationOptions>): never;\n  }\n}\n\ninterface StringTermConstructorData {\n  term: string;\n\n  options?: RollTerm.Options;\n}\n\nexport {};\n"]},71464:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\searchFilter.d.ts","/**\n * A controller class for managing a text input widget that filters the contents of some other UI element\n * @see {@link Application}\n *\n */\ndeclare class SearchFilter {\n  /**\n   * @param inputSelector   - The CSS selector used to target the text input element.\n   * @param contentSelector - The CSS selector used to target the content container for these tabs.\n   * @param initial         - The initial value of the search query.\n   *                          (default: `''`)\n   * @param callback        - A callback function which executes when the filter changes.\n   * @param delay           - The number of milliseconds to wait for text input before processing.\n   *                          (default: `100`)\n   */\n  constructor({ inputSelector, contentSelector, initial, callback, delay }: SearchFilter.Options);\n\n  /**\n   * The value of the current query string\n   */\n  query: string;\n\n  /**\n   * A callback function to trigger when the tab is changed\n   */\n  callback: (event: KeyboardEvent, query: string, content: string) => void;\n\n  /**\n   * The CSS selector used to target the tab navigation element\n   */\n  protected _inputSelector: string;\n\n  /**\n   * A reference to the HTML navigation element the tab controller is bound to\n   */\n  protected _input: HTMLElement | null;\n\n  /**\n   * The CSS selector used to target the tab content element\n   */\n  protected _contentSelector: string;\n\n  /**\n   * A reference to the HTML container element of the tab content\n   */\n  protected _content: HTMLElement | null;\n\n  /**\n   * A debounced function which applies the search filtering\n   */\n  protected _filter: this['callback'];\n\n  /**\n   * Bind the SearchFilter controller to an HTML application\n   */\n  bind(html: HTMLElement): void;\n\n  /**\n   * Handle key-up events within the filter input field\n   * @param event - The key-up event\n   */\n  protected _onKeyUp(event: KeyboardEvent): void;\n}\n\ndeclare namespace SearchFilter {\n  interface Options {\n    /**\n     * The CSS selector used to target the text input element.\n     */\n    inputSelector: string;\n\n    /**\n     * The CSS selector used to target the content container for these tabs.\n     */\n    contentSelector: string;\n\n    /**\n     * The initial value of the search query.\n     * @defaultValue `''`\n     */\n    initial?: SearchFilter['query'];\n\n    /**\n     * A callback function which executes when the filter changes.\n     */\n    callback: SearchFilter['callback'];\n\n    /**\n     * The number of milliseconds to wait for text input before processing.\n     * @defaultValue `100`\n     */\n    delay?: number;\n  }\n}\n"]},72096:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\socketInterface.d.ts","declare class SocketInterface {\n  /**\n   * Standardize the way that socket messages are dispatched and their results are handled\n   * @param eventName - The socket event name being handled\n   * @param request   - Data provided to the Socket event\n   * @returns A Promise which resolves to the SocketResponse\n   */\n  static dispatch(eventName: string, request: SocketInterface.Request): Promise<SocketInterface.Response>;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle an error returned from the database, displaying it on screen and in the console\n   * @param err - The provided Error message\n   */\n  protected static _handleError(err: Error): Error;\n}\n\ndeclare namespace SocketInterface {\n  namespace Requests {\n    interface ModifyEmbeddedDocument {\n      action: Action;\n      data: any; // TODO: add generics to this\n      options: Entity.CreateOptions;\n      parentId: string;\n      parentType: string;\n      type: string;\n    }\n\n    // TODO: add remaining actions\n    type Action = 'create' | 'update' | 'delete';\n  }\n\n  namespace Responses {\n    interface ModifyEmbeddedDocument {\n      request: Requests.ModifyEmbeddedDocument;\n      result: any[]; // TODO\n      userId: string;\n    }\n  }\n\n  // TODO: go through all SocketInterface.dispatch calls and collect requests\n  type Request = Requests.ModifyEmbeddedDocument;\n\n  type Response = Responses.ModifyEmbeddedDocument;\n}\n"]},55023:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\sortingHelpers.d.ts","/**\n * A collection of functions related to sorting objects within a parent container.\n */\ndeclare class SortingHelpers {\n  /**\n   * Given a source object to sort, a target to sort relative to, and an Array of siblings in the container:\n   * Determine the updated sort keys for the source object, or all siblings if a reindex is required.\n   * Return an Array of updates to perform, it is up to the caller to dispatch these updates.\n   * Each update is structured as:\n   * ```typescript\n   * {\n   *   target: object,\n   *   update: {sortKey: sortValue}\n   * }\n   * ```\n   *\n   * @param source     - source object being sorted\n   * @param target     - The target object relative which to sort\n   *                     (default: `null`)\n   * @param siblings   - The sorted Array of siblings which share the same sorted container\n   *                     (default: `[]`)\n   * @param sortKey    - The name of the data property within the source object which defines the sort key\n   *                     (default: `'sort'`)\n   * @param sortBefore - Whether to sort before the target (if true) or after (if false)\n   *                     (default: `true`)\n   * @typeParam T      - the type of the source and target object\n   *\n   * @returns An Array of updates for the caller of the helper function to perform\n   */\n  static performIntegerSort<T, SortKey extends string = 'sort'>(\n    source: T,\n    {\n      target,\n      siblings,\n      sortKey,\n      sortBefore\n    }?: {\n      /**\n       * The target object relative which to sort\n       * @defaultValue `null`\n       */\n      target?: T | null;\n\n      /**\n       * The sorted Array of siblings which share the same sorted container\n       * @defaultValue `[]`\n       */\n      siblings?: T[];\n\n      /**\n       * The name of the data property within the source object which defines the sort key\n       * @defaultValue `'sort'`\n       */\n      sortKey?: SortKey;\n\n      /**\n       * Whether to sort before the target (if true) or after (if false)\n       * @defaultValue `true`\n       */\n      sortBefore?: boolean;\n    }\n  ): Array<{\n    target: T;\n    update: {\n      [Key in SortKey]: number;\n    };\n  }>;\n\n  /**\n   * Given an ordered Array of siblings and a target position, return the [min,max] indices to sort before the target\n   */\n  protected static _sortBefore<T>(siblings: T[], idx: number, sortKey: string): [T, T];\n\n  /**\n   * Given an ordered Array of siblings and a target position, return the [min,max] indices to sort after the target\n   */\n  protected static _sortAfter<T>(siblings: T[], idx: number, sortKey: string): [T, T];\n}\n"]},59544:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\specialEffect.d.ts","/**\n * I don't know what this will do yet\n */\ndeclare class SpecialEffect {\n  constructor(parent: PIXI.Container, options?: DeepPartial<SpecialEffect.Options>);\n\n  parent: PIXI.Container;\n\n  options: SpecialEffect.Options;\n\n  emitters: PIXI.particles.Emitter[];\n\n  /**\n   * Use this flag as a way to pass a stop signal into the animation frame\n   */\n  protected _stop: boolean | null;\n\n  static get label(): string;\n\n  static get effectOptions(): SpecialEffect.Options;\n\n  getParticleEmitters(): PIXI.particles.Emitter[];\n\n  play(duration: number): void;\n\n  stop(): void;\n\n  protected _startEmitter(emitter: PIXI.particles.Emitter): void;\n\n  static OPTION_TYPES: {\n    VALUE: 1;\n    CHECKBOX: 2;\n    RANGE: 3;\n    SELECT: 4;\n  };\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   maxSpeed: 0,\n   *   noRotation: false,\n   *   blendMode: 'normal',\n   *   emitterLifetime: -1,\n   *   pos: {\n   *     x: 0,\n   *     y: 0\n   *   },\n   *   spawnType: 'rect'\n   * }\n   * ```\n   */\n  static DEFAULT_CONFIG: PIXI.particles.EmitterConfig | PIXI.particles.OldEmitterConfig;\n}\n\ndeclare namespace SpecialEffect {\n  interface Options {\n    density: {\n      /**\n       * @defaultValue `'Particle Density'`\n       */\n      label: string;\n\n      /**\n       * @defaultValue `SpecialEffect.OPTION_TYPES.RANGE`\n       */\n      type: ValueOf<typeof SpecialEffect['OPTION_TYPES']>;\n\n      /**\n       * @defaultValue `0.5`\n       */\n      value: number;\n\n      /**\n       * @defaultValue `0.1`\n       */\n      min: number;\n\n      /**\n       * @defaultValue `5`\n       */\n      max: number;\n\n      /**\n       * @defaultValue `0.1`\n       */\n      step: number;\n    };\n  }\n\n  type BlendMode =\n    | 'normal'\n    | 'add'\n    | 'multiply'\n    | 'screen'\n    | 'overlay'\n    | 'darken'\n    | 'lighten'\n    | 'color_dodge'\n    | 'color_burn'\n    | 'hard_light'\n    | 'soft_light'\n    | 'difference'\n    | 'exclusion'\n    | 'hue'\n    | 'saturation'\n    | 'color'\n    | 'luminosity';\n\n  type SpawnType = 'point' | 'rect' | 'circle' | 'ring' | 'burst';\n}\n"]},6505:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\specialEffects\\autumnLeavesWeatherEffect.d.ts","/**\n * A special full-screen weather effect which uses one Emitters to render gently falling autumn leaves\n */\n\ndeclare class AutumnLeavesWeatherEffect extends SpecialEffect {\n  static get label(): string;\n\n  static get effectOptions(): SpecialEffect.Options;\n\n  getParticleEmitters(): PIXI.particles.Emitter[];\n\n  protected _getLeafEmitter(parent: PIXI.Container): PIXI.particles.Emitter;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   maxSpeed: 0,\n   *   noRotation: false,\n   *   blendMode: 'normal',\n   *   emitterLifetime: -1,\n   *   pos: {\n   *     x: 0,\n   *     y: 0\n   *   },\n   *   spawnType: 'rect',\n   *   alpha: {\n   *     start: 0.9,\n   *     end: 0.5\n   *   },\n   *   scale: {\n   *     start: 0.2,\n   *     end: 0.4,\n   *     minimumScaleMultiplier: 0.5\n   *   },\n   *   speed: {\n   *     start: 20,\n   *     end: 60,\n   *     minimumSpeedMultiplier: 0.6\n   *   },\n   *   startRotation: {\n   *     min: 0,\n   *     max: 365\n   *   },\n   *   rotation: 180,\n   *   rotationSpeed: {\n   *     min: 100,\n   *     max: 200\n   *   },\n   *   lifetime: {\n   *     min: 10,\n   *     max: 10\n   *   }\n   * }\n   * ```\n   */\n  static LEAF_CONFIG: PIXI.particles.EmitterConfig | PIXI.particles.OldEmitterConfig;\n}\n"]},91114:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\specialEffects\\rainWeatherEffect.d.ts","/**\n * A special full-screen weather effect which uses two Emitters to render drops and splashes\n */\ndeclare class RainWeatherEffect extends SpecialEffect {\n  static get label(): string;\n\n  getParticleEmitters(): PIXI.particles.Emitter[];\n\n  _getRainEmitter(parent: PIXI.Container): PIXI.particles.Emitter;\n\n  _getSplashEmitter(parent: PIXI.Container): PIXI.particles.Emitter;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   maxSpeed: 0,\n   *   noRotation: false,\n   *   blendMode: 'normal',\n   *   emitterLifetime: -1,\n   *   pos: {\n   *     x: 0,\n   *     y: 0\n   *   },\n   *   spawnType: 'rect',\n   *   alpha: {\n   *     start: 0.7,\n   *     end: 0.1\n   *   },\n   *   scale: {\n   *     start: 1.0,\n   *     end: 1.0,\n   *     minimumScaleMultiplier: 0.8\n   *   },\n   *   speed: {\n   *     start: 3500,\n   *     end: 3500,\n   *     minimumSpeedMultiplier: 0.8\n   *   },\n   *   startRotation: {\n   *     min: 75,\n   *     max: 75\n   *   },\n   *   rotation: 90,\n   *   rotationSpeed: {\n   *     min: 0,\n   *     max: 0\n   *   },\n   *   lifetime: {\n   *     min: 0.5,\n   *     max: 0.5\n   *   }\n   * }\n   * ```\n   */\n  static RAIN_CONFIG: PIXI.particles.EmitterConfig | PIXI.particles.OldEmitterConfig;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   maxSpeed: 0,\n   *   noRotation: false,\n   *   blendMode: 'normal',\n   *   emitterLifetime: -1,\n   *   pos: {\n   *     x: 0,\n   *     y: 0\n   *   },\n   *   spawnType: 'rect',\n   *   alpha: {\n   *     start: 1,\n   *     end: 1\n   *   },\n   *   scale: {\n   *     start: 0.6,\n   *     end: 0.6,\n   *     minimumScaleMultiplier: 0.8\n   *   },\n   *   speed: {\n   *     start: 0,\n   *     end: 0\n   *   },\n   *   startRotation: {\n   *     min: -90,\n   *     max: -90\n   *   },\n   *   noRotation: true,\n   *   lifetime: {\n   *     min: 0.5,\n   *     max: 0.5\n   *   }\n   * }\n   * ```\n   */\n  static SPLASH_CONFIG: PIXI.particles.EmitterConfig | PIXI.particles.OldEmitterConfig;\n}\n"]},55101:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\specialEffects\\snowWeatherEffect.d.ts","/**\n * A special full-screen weather effect which uses one Emitters to render snowflakes\n */\ndeclare class SnowWeatherEffect extends SpecialEffect {\n  static get label(): string;\n\n  getParticleEmitters(): PIXI.particles.Emitter[];\n\n  _getSnowEmitter(parent: PIXI.Container): PIXI.particles.Emitter;\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * {\n   *   maxSpeed: 0,\n   *   noRotation: false,\n   *   blendMode: 'normal',\n   *   emitterLifetime: -1,\n   *   pos: {\n   *     x: 0,\n   *     y: 0\n   *   },\n   *   spawnType: 'rect',\n   *   alpha: {\n   *     start: 0.9,\n   *     end: 0.5\n   *   },\n   *   scale: {\n   *     start: 0.2,\n   *     end: 0.4,\n   *     minimumScaleMultiplier: 0.5\n   *   },\n   *   speed: {\n   *     start: 190,\n   *     end: 210,\n   *     minimumSpeedMultiplier: 0.6\n   *   },\n   *   startRotation: {\n   *     min: 50,\n   *     max: 75\n   *   },\n   *   rotation: 90,\n   *   rotationSpeed: {\n   *     min: 0,\n   *     max: 200\n   *   },\n   *   lifetime: {\n   *     min: 4,\n   *     max: 4\n   *   }\n   * }\n   * ```\n   */\n  static SNOW_CONFIG: PIXI.particles.EmitterConfig | PIXI.particles.OldEmitterConfig;\n}\n"]},56275:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\tabs.d.ts",'/**\n * A controller class for managing tabbed navigation within an Application instance.\n * @see {@link Application}\n *\n * @example\n * ```html\n * \x3c!-- Example HTML --\x3e\n * <nav class="tabs" data-group="primary-tabs">\n *   <a class="item" data-tab="tab1">Tab 1</li>\n *   <a class="item" data-tab="tab2">Tab 2</li>\n * </nav>\n *\n * <section class="content">\n *   <div class="tab" data-tab="tab1" data-group="primary-tabs">Content 1</div>\n *   <div class="tab" data-tab="tab2" data-group="primary-tabs">Content 2</div>\n * </section>\n * ```\n * @example\n * ```typescript\n * // TypeScript\n * const tabs = new Tabs({navSelector: ".tabs", contentSelector: ".content", initial: "tab1"});\n * tabs.bind(html);\n * ```\n */\ndeclare class Tabs {\n  /**\n   * @param navSelector     - The CSS selector used to target the navigation element for these tabs\n   * @param contentSelector - The CSS selector used to target the content container for these tabs\n   * @param initial         - The tab name of the initially active tab\n   * @param callback        - An optional callback function that executes when the active tab is changed\n   */\n  constructor({ navSelector, contentSelector, initial, callback }: Tabs.Options);\n\n  /**\n   * The value of the active tab\n   */\n  active: string | undefined;\n\n  /**\n   * A callback function to trigger when the tab is changed\n   */\n  callback: ((event: null, tabs: Tabs, tabName: string) => unknown) | null | undefined;\n\n  /**\n   * The CSS selector used to target the tab navigation element\n   */\n  protected _navSelector: string;\n\n  /**\n   * A reference to the HTML navigation element the tab controller is bound to\n   * @defaultValue `null`\n   */\n  protected _nav: HTMLElement | null;\n\n  /**\n   * The CSS selector used to target the tab content element\n   */\n  protected _contentSelector: string | undefined;\n\n  /**\n   * A reference to the HTML container element of the tab content\n   * @defaultValue `null`\n   */\n  protected _content: HTMLElement | null;\n\n  /**\n   * Bind the Tabs controller to an HTML application\n   */\n  bind(html: HTMLElement): void;\n\n  /**\n   * Activate a new tab by name\n   * @param tabName         - Name of the tab to activate\n   * @param triggerCallback - Whether or not to trigger the callback\n   *                          (default: `false`)\n   */\n  activate(tabName: string, { triggerCallback }?: { triggerCallback?: boolean }): void;\n\n  /**\n   * Handle click events on the tab navigation entries\n   * @param event - A left click event\n   */\n  protected _onClickNav(event: MouseEvent): void;\n}\n\ndeclare namespace Tabs {\n  interface Options {\n    navSelector: string;\n    contentSelector?: string;\n    initial?: string;\n    callback?: ((event: null, tabs: Tabs, tabName: string) => unknown) | null;\n  }\n}\n\ndeclare const TabsV2: typeof Tabs;\n']},31288:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\templateUtils.d.ts","/**\n * Global template cache\n */\ndeclare let _templateCache: Record<string, Handlebars.TemplateDelegate>;\n\n/* -------------------------------------------- */\n/*  HTML Template Loading                       */\n/* -------------------------------------------- */\n\n/**\n * Get a template from the server by fetch request and caching the retrieved result\n * @param path - The web-accessible HTML template URL\n * @returns A Promise which resolves to the compiled Handlebars template\n */\ndeclare function getTemplate(path: string): Promise<Handlebars.TemplateDelegate>;\n\n/* -------------------------------------------- */\n\n/**\n * Load and cache a set of templates by providing an Array of paths\n * @param paths - An array of template file paths to load\n */\ndeclare function loadTemplates(paths: string[]): Promise<Handlebars.TemplateDelegate[]>;\n\n/* -------------------------------------------- */\n\n/**\n * Get and render a template using provided data and handle the returned HTML\n * Support asynchronous file template file loading with a client-side caching layer\n *\n * Allow resolution of prototype methods and properties since this all occurs within the safety of the client.\n * @see {@link https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access}\n *\n * @param path - The file path to the target HTML template\n * @param data - A data object against which to compile the template\n *\n * @returns Returns the rendered HTML\n */\ndeclare function renderTemplate(path: string, data: object): Promise<string>;\n"]},75874:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\textEditor.d.ts","/**\n * A collection of helper functions and utility methods related to the rich text editor\n */\ndeclare class TextEditor {\n  /**\n   * Create a Rich Text Editor. The current implementation uses TinyMCE\n   * @param options - Configuration options provided to the Editor init\n   * @param content - Initial HTML or text content to populate the editor with\n   *                  (default: `''`)\n   * @returns The editor instance.\n   */\n  static create(options: TextEditor.Options, content: string): Promise<tinyMCE.Editor>;\n\n  /**\n   * Safely decode an HTML string, removing invalid tags and converting entities back to unicode characters.\n   * @param html - The original encoded HTML string\n   * @returns The decoded unicode string\n   */\n  static decodeHTML(html: string): string;\n\n  /**\n   * Enrich HTML content by replacing or augmenting components of it\n   * @param content  - The original HTML content (as a string)\n   * @param secrets  - Remove secret tags?\n   * @param entities - Replace dynamic entity links?\n   * @param links    - Replace hyperlink content?\n   * @param rolls    - Replace inline dice rolls?\n   * @param rollData - The data object providing context for inline rolls\n   * @returns The enriched HTML content\n   */\n  static enrichHTML(\n    content: string,\n    {\n      secrets,\n      entities,\n      links,\n      rolls,\n      rollData // TODO: _createInlineRoll\n    }?: { secrets: boolean; entities: boolean; links: boolean; rolls: boolean; rollData: object }\n  ): string;\n\n  /**\n   * Preview an HTML fragment by constructing a substring of a given length from its inner text.\n   * @param content - The raw HTML to preview\n   * @param length  - The desired length\n   *                  (default: `250`)\n   * @returns The previewed HTML\n   */\n  static previewHTML(content: string, length: number): string;\n\n  /**\n   * Truncate a fragment of text to a maximum number of characters.\n   * @param text       - The original text fragment that should be truncated to a maximum length\n   * @param maxLength  - The maximum allowed length of the truncated string.\n   *                     (default: `50`)\n   * @param splitWords - Whether to truncate by splitting on white space (if true) or breaking words.\n   *                     (default: `true`)\n   * @param suffix     - A suffix string to append to denote that the text was truncated.\n   *                     (default: `'…'`)\n   */\n  static truncateText(\n    text: string,\n    { maxLength, splitWords, suffix }?: { maxLength?: number; splitWords?: boolean; suffix?: string }\n  ): string;\n\n  /**\n   * Recursively identify the text nodes within a parent HTML node for potential content replacement.\n   * @param parent - The parent HTML Element\n   * @returns An array of contained Text nodes\n   */\n  protected static _getTextNodes(parent: HTMLElement): Text[];\n\n  /**\n   * Facilitate the replacement of text node content using a matching regex rule and a provided replacement function.\n   */\n  protected static _replaceTextContent(\n    text: Text[],\n    rgx: RegExp,\n    func: (...match: RegExpMatchArray[]) => Node\n  ): boolean;\n\n  /**\n   * Replace a matched portion of a Text node with a replacement Node\n   */\n  protected static _replaceTextNode(text: Text, match: RegExpMatchArray, replacement: Node): void;\n\n  /**\n   * Create a dynamic entity link from a regular expression match\n   * @param match  - The full matched string\n   * @param type   - The matched entity type or \"Compendium\"\n   * @param target - The requested match target (_id or name)\n   * @param name   - A customized or over-ridden display name for the link\n   * @returns An HTML element for the entity link\n   */\n  protected static _createEntityLink(match: string, type: string, target: string, name: string): HTMLAnchorElement;\n\n  /**\n   * Replace a hyperlink-like string with an actual HTML <a> tag\n   * @param match - The full matched string\n   * @returns An HTML element for the entity link\n   */\n  protected static _createHyperlink(match: string): HTMLAnchorElement;\n\n  /**\n   * Replace an inline roll formula with a rollable <a> element or an eagerly evaluated roll result\n   * @param match   - The matched string\n   * @param command - An optional command\n   * @param formula - The matched formula\n   * @param closing - The closing brackets for the inline roll\n   * @returns The replaced match\n   */\n  protected static _createInlineRoll(\n    match: string,\n    command: string,\n    formula: string,\n    closing: string,\n    ...args: object[]\n  ): string;\n\n  static activateListeners(): void;\n\n  /**\n   * Handle click events on Entity Links\n   */\n  protected static _onClickEntityLink(event: Event): Promise<void>;\n\n  /**\n   * Handle left-mouse clicks on an inline roll, dispatching the formula or displaying the tooltip\n   * @param event - The initiating click event\n   */\n  protected static _onClickInlineRoll(event: MouseEvent): Promise<void | Promise<void> | Promise<ChatMessage> | object>;\n\n  /**\n   * Begin a Drag+Drop workflow for a dynamic content link\n   * @param event - The originating drag event\n   */\n  protected static _onDragEntityLink(event: Event): void;\n\n  /**\n   * Begin a a data transfer drag event with default handling\n   */\n  protected _onDragStart(event: Event): void;\n\n  /**\n   * Handle dropping of transferred data onto the active rich text editor\n   * @param event  - The originating drop event which triggered the data transfer\n   * @param editor - The TinyMCE editor instance being dropped on\n   */\n  protected static _onDropEditorData(event: Event, editor: tinyMCE.Editor): Promise<void>;\n\n  protected static _decoder: HTMLTextAreaElement;\n}\n\ndeclare namespace TextEditor {\n  interface Options {\n    /**\n     * @defaultValue `false`\n     */\n    branding?: boolean;\n\n    /**\n     * @defaultValue `['/css/mce.css']`\n     */\n    content_css?: string[];\n\n    /**\n     * @defaultValue `false`\n     */\n    menubar?: boolean;\n\n    /**\n     * @defaultValue `'lists image table hr code save link'`\n     */\n    plugins?: string;\n\n    /**\n     * @defaultValue `true`\n     */\n    save_enablewhendirty?: boolean;\n\n    /**\n     * @defaultValue `false`\n     */\n    statusbar?: boolean;\n\n    style_formats?: [\n      {\n        items?: [\n          {\n            /**\n             * @defaultValue `'section'`\n             */\n            block?: string;\n\n            /**\n             * @defaultValue `'secrect'`\n             */\n            classes?: string;\n\n            /**\n             * @defaultValue `'Secret'`\n             */\n            title?: string;\n\n            /**\n             * @defaultValue `true`\n             */\n            wrapper?: boolean;\n          }\n        ];\n\n        /**\n         * @defaultValue `'Custom'`\n         */\n        title?: string;\n      }\n    ];\n\n    /**\n     * @defaultValue `true`\n     */\n    style_formats_merge?: boolean;\n\n    /**\n     * @defaultValue `{}`\n     */\n    table_default_styles?: object;\n\n    target: HTMLElement;\n\n    /**\n     * @defaultValue `'styleselect bullist numlist image table hr link removeformat code save'`\n     */\n    toolbar?: string;\n  }\n}\n"]},4283:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\textureLoader.d.ts","/**\n * A Loader class which helps with loading video and image textures\n */\ndeclare class TextureLoader {\n  constructor();\n\n  cache: Map<string, PIXI.Texture>;\n\n  /**\n   * Load all the textures which are required for a particular Scene\n   * @param scene - The Scene to load\n   */\n  static loadSceneTextures(scene: Scene): Promise<void>;\n\n  /**\n   * Load an Array of provided source URL paths\n   * @param sources - The source URLs to load\n   * @param message - The status message to display in the load bar\n   * @returns A Promise which resolves once all textures are loaded\n   */\n  load(sources: string[], { message }?: { message?: string }): Promise<void>;\n\n  /**\n   * Load a single texture on-demand from a given source URL path\n   * @param src -\n   */\n  loadTexture(src: string): Promise<PIXI.Texture>;\n\n  /**\n   * Log texture loading progress in the console and in the Scene loading bar\n   */\n  protected _onProgress(src: string, progress: TextureLoader.Progress, message: string): void;\n\n  /**\n   * Log failed texture loading\n   */\n  protected _onError(src: string, progress: TextureLoader.Progress, error: Error): void;\n\n  /**\n   * Load an image texture from a provided source url\n   * @param src -\n   */\n  loadImageTexture(src: string): Promise<PIXI.Texture>;\n\n  /**\n   * If an attempted image load failed, we may attempt a re-load in case the issue was CORS + caching\n   * Cross-origin requests which failed might be CORS, or might be 404, no way to know - so try a 2nd time\n   * @param src     - The source URL being attempted\n   * @param resolve - Resolve the promise\n   * @param reject  - Reject the promise\n   */\n  protected _attemptCORSReload<T>(\n    src: string,\n    resolve: (texture: PIXI.Texture) => void,\n    reject: () => T\n  ): Promise<PIXI.Texture> | T;\n\n  /**\n   * Load a video texture from a provided source url\n   * @param src -\n   */\n  loadVideoTexture(src: string): Promise<PIXI.Texture>;\n\n  /**\n   * Add an image url to the texture cache\n   * @param src - The source URL\n   * @param tex - The readied texture\n   */\n  setCache(src: string, tex: PIXI.Texture): void;\n\n  /**\n   * Retrieve a texture from the texture cache\n   * @param src - The source URL\n   */\n  getCache(src: string): PIXI.Texture | undefined;\n\n  /**\n   * A global reference to the singleton texture loader\n   */\n  static loader: TextureLoader;\n}\n\ndeclare namespace TextureLoader {\n  interface Progress {\n    message: string;\n    loaded: number;\n    failed: number;\n    total: number;\n    pct: number;\n  }\n}\n"]},80057:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\textureUtils.d.ts","/* -------------------------------------------- */\n\n/**\n * Test whether a file source exists by performing a HEAD request against it\n * @param src - The source URL or path to test\n * @returns Does the file exist at the provided url?\n */\ndeclare function srcExists(src: string): Promise<boolean>;\n\n/* -------------------------------------------- */\n\n/**\n * Get a single texture from the cache\n */\ndeclare function getTexture(src: string): PIXI.Texture | null;\n\n/**\n * Load a single texture and return a Promise which resolves once the texture is ready to use\n * @param src      - The requested texture source\n * @param fallback - A fallback texture to use if the requested source is unavailable or invalid\n *                   (default: `null`)\n */\ndeclare function loadTexture(\n  src: string,\n  {\n    fallback\n  }?: {\n    /**\n     * A fallback texture to use if the requested source is unavailable or invalid\n     * @defaultValue `null`\n     */\n    fallback?: string;\n  }\n): Promise<PIXI.Texture | null>;\n"]},75080:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\userTargets.d.ts","/**\n * A subclass of Set which manages the Token ids which the User has targeted\n * @internal\n */\ndeclare class UserTargets extends Set<Token> {\n  constructor(user: UserTargets['user']);\n\n  user: User;\n\n  /**\n   * Return the Token IDs which are user targets\n   */\n  get ids(): string[];\n\n  /**\n   * @override\n   * @remarks\n   * Returns void, but Set<T>.add returns boolean\n   */\n  add(token: Token): any;\n\n  /** @override */\n  clear(): void;\n\n  /**\n   * @override\n   * @remarks\n   * Returns void, but Set<T>.delete returns boolean\n   */\n  delete(token: Token): any;\n\n  /**\n   * Dispatch the targetToken hook whenever the user's target set changes\n   */\n  protected _hook(token: Token, targeted: boolean): void;\n}\n"]},81748:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\utils.d.ts","/**\n * Export data content to be saved to a local file\n * @param data     - Data content converted to a string\n * @param type     - The type of\n * @param filename - The filename of the resulting download\n */\ndeclare function saveDataToFile(data: string, type: string, filename: string): void;\n\n/**\n * Read text data from a user provided File object\n * @param file - A File object\n * @returns A Promise which resolves to the loaded text data\n */\ndeclare function readTextFromFile(file: File): Promise<string>;\n\n/**\n * Retrieve an Entity or Embedded Entity by its Universally Unique Identifier (uuid).\n * @param uuid - The uuid of the Entity or Embedded Entity to retrieve\n */\ndeclare function fromUuid(uuid: string): Promise<foundry.abstract.Document<any, any> | null>;\n\n/**\n * Return a reference to the Document class implementation which is configured for use.\n * @param documentName - The canonical Document name, for example \"Actor\"\n * @returns configured Document class implementation\n */\ndeclare function getDocumentClass<DocumentName extends string>(\n  documentName: DocumentName\n): DocumentName extends keyof CONFIG\n  ? 'documentClass' extends keyof CONFIG[DocumentName]\n    ? CONFIG[DocumentName]['documentClass']\n    : undefined\n  : undefined;\n"]},93849:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\videoHelper.d.ts","/**\n * A helper class to provide common functionality for working with HTML5 video objects\n * A singleton instance of this class is available as `game.video`\n */\ndeclare class VideoHelper {\n  constructor();\n\n  /**\n   * A collectinon of HTML5 video objects which are currently active within the FVTT page\n   * @defaultValue `[]`\n   */\n  videos: HTMLVideoElement[];\n\n  /**\n   * A user gesture must be registered before video playback can begin.\n   * This Set records the video elements which await such a gesture.\n   * @defaultValue an empty Set\n   */\n  pending: Set<HTMLVideoElement>;\n\n  /**\n   * A mapping of base64 video thumbnail images\n   * @defaultValue an empty Map\n   */\n  thumbs: Map<string, string>;\n\n  /**\n   * A flag for whether video playback is currently locked by awaiting a user gesture\n   * @defaultValue `true`\n   */\n  locked: boolean;\n\n  /* -------------------------------------------- */\n  /*  Methods                                     */\n  /* -------------------------------------------- */\n\n  static hasVideoExtension(src: string): boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Play a single video source\n   * If playback is not yet enabled, add the video to the pending queue\n   * @param video - The VIDEO element to play\n   */\n  play(video: HTMLElement): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Register an event listener to await the first mousemove gesture and begin playback once observed\n   * A user interaction must involve a mouse click or keypress.\n   * Listen for any of these events, and handle the first observed gesture.\n   */\n  awaitFirstGesture(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle the first observed user gesture\n   * We need a slight delay because unfortunately Chrome is stupid and doesn't always acknowledge the gesture fast enough.\n   * @param event - The mouse-move event which enables playback\n   */\n  protected _onFirstGesture(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create and cache a static thumbnail to use for the video.\n   * The thumbnail is cached using the video file path or URL.\n   * @param src     - The source video URL\n   * @param options - Thumbnail creation options, including width and height\n   * @returns The created and cached base64 thumbnail image\n   */\n  createThumbnail(src: string, options: ImageHelper.CompositeOptions): Promise<string>;\n}\n"]},94206:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\index.d.ts","import './common/module.mjs';\n\nimport './foundry.js/actorTokenHelpers';\nimport './foundry.js/application';\nimport './foundry.js/audioHelper';\nimport './foundry.js/avClient';\nimport './foundry.js/avMaster';\nimport './foundry.js/avSettings';\nimport './foundry.js/cameraPopoutAppWrapper';\nimport './foundry.js/canvas';\nimport './foundry.js/canvasAnimation';\nimport './foundry.js/canvasDocumentMixin';\nimport './foundry.js/chatBubbles';\nimport './foundry.js/clientDocumentMixin';\nimport './foundry.js/clientSettings';\nimport './foundry.js/config';\nimport './foundry.js/constants';\nimport './foundry.js/contextMenu';\nimport './foundry.js/dragDrop';\nimport './foundry.js/draggable';\nimport './foundry.js/entity';\nimport './foundry.js/features';\nimport './foundry.js/fonts';\nimport './foundry.js/formDataExtended';\nimport './foundry.js/game';\nimport './foundry.js/gameTime';\nimport './foundry.js/globalVariables';\nimport './foundry.js/handlebarsHelpers';\nimport './foundry.js/hooks';\nimport './foundry.js/imageHelper';\nimport './foundry.js/keyboardManager';\nimport './foundry.js/localization';\nimport './foundry.js/mersenneTwister';\nimport './foundry.js/mouseInteractionManager';\nimport './foundry.js/pointSource';\nimport './foundry.js/prototypes';\nimport './foundry.js/quadtree';\nimport './foundry.js/ray';\nimport './foundry.js/roll';\nimport './foundry.js/searchFilter';\nimport './foundry.js/specialEffect';\nimport './foundry.js/socketInterface';\nimport './foundry.js/sortingHelpers';\nimport './foundry.js/tabs';\nimport './foundry.js/templateUtils';\nimport './foundry.js/textEditor';\nimport './foundry.js/textureLoader';\nimport './foundry.js/textureUtils';\nimport './foundry.js/types';\nimport './foundry.js/userTargets';\nimport './foundry.js/utils';\nimport './foundry.js/videoHelper';\n\nimport './foundry.js/applications';\n\nimport './foundry.js/avClients/easyRTCClient';\n\nimport './foundry.js/clientDocuments/activeEffect';\nimport './foundry.js/clientDocuments/actor';\nimport './foundry.js/clientDocuments/canvasDocuments/ambientLightDocument';\nimport './foundry.js/clientDocuments/canvasDocuments/drawingDocument';\nimport './foundry.js/clientDocuments/canvasDocuments/measuredTemplateDocument';\nimport './foundry.js/clientDocuments/canvasDocuments/tokenDocument';\nimport './foundry.js/clientDocuments/chatMessage';\nimport './foundry.js/clientDocuments/combat';\nimport './foundry.js/clientDocuments/combatant';\nimport './foundry.js/clientDocuments/fogExploration';\nimport './foundry.js/clientDocuments/folder';\nimport './foundry.js/clientDocuments/item';\nimport './foundry.js/clientDocuments/journalEntry';\nimport './foundry.js/clientDocuments/macro';\nimport './foundry.js/clientDocuments/playlist';\nimport './foundry.js/clientDocuments/rollTable';\nimport './foundry.js/clientDocuments/scene';\nimport './foundry.js/clientDocuments/setting';\nimport './foundry.js/clientDocuments/user';\n\nimport './foundry.js/collections';\n\nimport './foundry.js/rollTerm';\n\nimport './foundry.js/rollTerms/diceTerm';\nimport './foundry.js/rollTerms/mathTerm';\nimport './foundry.js/rollTerms/numericTerm';\nimport './foundry.js/rollTerms/operatorTerm';\nimport './foundry.js/rollTerms/parentheticalTerm';\nimport './foundry.js/rollTerms/poolTerm';\nimport './foundry.js/rollTerms/stringTerm';\n\nimport './foundry.js/rollTerms/diceTerms/coin';\nimport './foundry.js/rollTerms/diceTerms/die';\nimport './foundry.js/rollTerms/diceTerms/fateDie';\n\nimport './foundry.js/embeddedEntities/activeEffect';\n\nimport './foundry.js/entities/actor';\nimport './foundry.js/entities/chatMessage';\nimport './foundry.js/entities/combat';\nimport './foundry.js/entities/item';\nimport './foundry.js/entities/playlist';\nimport './foundry.js/entities/rollTable';\nimport './foundry.js/entities/scene';\nimport './foundry.js/entities/user';\n\nimport './foundry.js/pixi/blendModes';\n\nimport './foundry.js/pixi/containers/baseGrid';\nimport './foundry.js/pixi/containers/cachedContainer';\nimport './foundry.js/pixi/containers/canvasLayer';\nimport './foundry.js/pixi/containers/controlIcon';\nimport './foundry.js/pixi/containers/cursor';\nimport './foundry.js/pixi/containers/doorControl';\nimport './foundry.js/pixi/containers/placeableObject';\nimport './foundry.js/pixi/containers/ruler';\n\nimport './foundry.js/pixi/containers/baseGrids/hexagonalGrid';\nimport './foundry.js/pixi/containers/baseGrids/squareGrid';\n\nimport './foundry.js/pixi/containers/canvasLayers';\n\nimport './foundry.js/pixi/containers/placeableObjects/ambientLight';\nimport './foundry.js/pixi/containers/placeableObjects/ambientSound';\nimport './foundry.js/pixi/containers/placeableObjects/drawing';\nimport './foundry.js/pixi/containers/placeableObjects/measuredTemplate';\nimport './foundry.js/pixi/containers/placeableObjects/note';\nimport './foundry.js/pixi/containers/placeableObjects/tile';\nimport './foundry.js/pixi/containers/placeableObjects/token';\nimport './foundry.js/pixi/containers/placeableObjects/wall';\n\nimport './foundry.js/pixi/filters/abstractBaseMaskFilter';\n\nimport './foundry.js/pixi/graphics/gridHighlight';\nimport './foundry.js/pixi/graphics/resizeHandle';\n\nimport './foundry.js/pixi/rectangles/normalizedRectangle';\n\nimport './foundry.js/pixi/shaders/abstractBaseShader';\n\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardIlluminationShader';\n\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/chromaColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/emanationColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/energyFieldColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/fogColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/ghostLightColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/hexaDomeColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/lightDomeColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/pulseColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/sunburstColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/torchColorationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardColorationShaders/waveColorationShader';\n\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardIlluminationShaders/blackHoleIlluminationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardIlluminationShaders/ghostLightIlluminationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardIlluminationShaders/pulseIlluminationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardIlluminationShaders/roilingIlluminationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardIlluminationShaders/sunburstIlluminationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardIlluminationShaders/torchIlluminationShader';\nimport './foundry.js/pixi/shaders/abstractBaseShaders/standardIlluminationShaders/waveIlluminationShader';\n\nimport './foundry.js/pixi/texts/preciseText';\n\nimport './foundry.js/specialEffects/autumnLeavesWeatherEffect';\nimport './foundry.js/specialEffects/rainWeatherEffect';\nimport './foundry.js/specialEffects/snowWeatherEffect';\n"]},61198:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\index.d.ts","import './foundry';\nimport './types';\n"]},24200:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\types\\augments\\index.d.ts","import './pixiParticles';\nimport './simple-peer';\nimport './socket.io-client';\nimport './tinyMCE';\n"]},71955:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\types\\augments\\pixiParticles.d.ts","import * as pixiParticles from 'pixi-particles';\n\ndeclare global {\n  namespace PIXI {\n    export import particles = pixiParticles; // eslint-disable-line @typescript-eslint/no-unused-vars\n  }\n}\n"]},37409:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\types\\augments\\simple-peer.d.ts","import * as SimplePeer from 'simple-peer';\nexport = SimplePeer;\nexport as namespace SimplePeer;\n"]},6987:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\types\\augments\\socket.io-client.d.ts","import * as _io from 'socket.io-client';\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var io: typeof _io & typeof _io.io & { connect: typeof _io.io; managers: Partial<Record<string, _io.Manager>> };\n  namespace io {\n    type Socket = _io.Socket;\n    type SocketOptions = _io.SocketOptions;\n    type Manager = _io.Manager;\n    type ManagerOptions = _io.ManagerOptions;\n  }\n}\n"]},69125:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\types\\augments\\tinyMCE.d.ts","import _tinymce from 'tinymce';\nimport type * as _tinymceTypes from 'tinymce';\ndeclare global {\n  // eslint-disable-next-line no-var\n  var tinyMCE: typeof _tinymce;\n  namespace tinyMCE {\n    type AddOnManager<T> = _tinymceTypes.AddOnManager<T>;\n    type Annotator = _tinymceTypes.Annotator;\n    type AstNode = _tinymceTypes.AstNode;\n    type Bookmark = _tinymceTypes.Bookmark;\n    type BookmarkManager = _tinymceTypes.BookmarkManager;\n    type Class = _tinymceTypes.Class;\n    type Color = _tinymceTypes.Color;\n    type ControlSelection = _tinymceTypes.ControlSelection;\n    type DOMUtils = _tinymceTypes.DOMUtils;\n    type Delay = _tinymceTypes.Delay;\n    type DomParser = _tinymceTypes.DomParser;\n    type DomParserSettings = _tinymceTypes.DomParserSettings;\n    type DomQuery = _tinymceTypes.DomQuery;\n    type DomSerializer = _tinymceTypes.DomSerializer;\n    type DomSerializerSettings = _tinymceTypes.DomSerializerSettings;\n    type DomTreeWalker = _tinymceTypes.DomTreeWalker;\n    type Editor = _tinymceTypes.Editor;\n    type EditorCommands = _tinymceTypes.EditorCommands;\n    type EditorEvent<T> = _tinymceTypes.EditorEvent<T>;\n    type EditorManager = _tinymceTypes.EditorManager;\n    type EditorModeApi = _tinymceTypes.EditorModeApi;\n    type EditorObservable = _tinymceTypes.EditorObservable;\n    type EditorSelection = _tinymceTypes.EditorSelection;\n    type EditorSettings = _tinymceTypes.EditorSettings;\n    type Entities = _tinymceTypes.Entities;\n    type Env = _tinymceTypes.Env;\n    type EventDispatcher<T> = _tinymceTypes.EventDispatcher<T>;\n    type EventUtils = _tinymceTypes.EventUtils;\n    type FocusManager = _tinymceTypes.FocusManager;\n    type Formatter = _tinymceTypes.Formatter;\n    type GeomRect = _tinymceTypes.GeomRect;\n    type HtmlSerializer = _tinymceTypes.HtmlSerializer;\n    type HtmlSerializerSettings = _tinymceTypes.HtmlSerializerSettings;\n    type I18n = _tinymceTypes.I18n;\n    type IconManager = _tinymceTypes.IconManager;\n    type JSON = _tinymceTypes.JSON;\n    type JSONP = _tinymceTypes.JSONP;\n    type JSONRequest = _tinymceTypes.JSONRequest;\n    type JSONRequestArgs = _tinymceTypes.JSONRequestArgs;\n    type JSONRequestSettings = _tinymceTypes.JSONRequestSettings;\n    type NotificationApi = _tinymceTypes.NotificationApi;\n    type NotificationManager = _tinymceTypes.NotificationManager;\n    type NotificationSpec = _tinymceTypes.NotificationSpec;\n    type Observable<T> = _tinymceTypes.Observable<T>;\n    type Plugin = _tinymceTypes.Plugin;\n    type PluginManager = _tinymceTypes.PluginManager;\n    type RangeUtils = _tinymceTypes.RangeUtils;\n    type RawEditorSettings = _tinymceTypes.RawEditorSettings;\n    type Rect = _tinymceTypes.Rect;\n    type Resource = _tinymceTypes.Resource;\n    type SaxParser = _tinymceTypes.SaxParser;\n    type SaxParserSettings = _tinymceTypes.SaxParserSettings;\n    type Schema = _tinymceTypes.Schema;\n    type SchemaSettings = _tinymceTypes.SchemaSettings;\n    type ScriptLoader = _tinymceTypes.ScriptLoader;\n    type Shortcuts = _tinymceTypes.Shortcuts;\n    type StyleSheetLoader = _tinymceTypes.StyleSheetLoader;\n    type Styles = _tinymceTypes.Styles;\n    type TextSeeker = _tinymceTypes.TextSeeker;\n    type Theme = _tinymceTypes.Theme;\n    type ThemeManager = _tinymceTypes.ThemeManager;\n    type TinyMCE = _tinymceTypes.TinyMCE;\n    type Tools = _tinymceTypes.Tools;\n    type URI = _tinymceTypes.URI;\n    type UndoManager = _tinymceTypes.UndoManager;\n    type VK = _tinymceTypes.VK;\n    type WindowManager = _tinymceTypes.WindowManager;\n    type Writer = _tinymceTypes.Writer;\n    type WriterSettings = _tinymceTypes.WriterSettings;\n    type XHR = _tinymceTypes.XHR;\n    type XHRSettings = _tinymceTypes.XHRSettings;\n  }\n\n  // eslint-disable-next-line no-var\n  var tinymce: typeof _tinymce;\n}\n"]},91871:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\types\\helperTypes.ts","import DocumentData, { AnyDocumentData } from '../foundry/common/abstract/data.mjs';\nimport Document from '../foundry/common/abstract/document.mjs';\nimport EmbeddedCollection from '../foundry/common/abstract/embedded-collection.mjs';\n\nexport type PropertiesDataType<T extends Document<any, any> | AnyDocumentData> = T extends DocumentData<\n  any,\n  infer U,\n  any,\n  any\n>\n  ? U\n  : T extends Document<infer U, any>\n  ? PropertiesDataType<U>\n  : never;\n\ntype PropertyTypeToSourceType<T> = T extends EmbeddedCollection<infer U, any>\n  ? SourceDataType<InstanceType<U>>[]\n  : T extends Array<infer U>\n  ? Array<PropertyTypeToSourceType<U>>\n  : T extends AnyDocumentData\n  ? SourceDataType<T>\n  : T;\n\nexport type PropertiesToSource<T extends object> = {\n  [Key in keyof T]: PropertyTypeToSourceType<T[Key]>;\n};\n\ntype SourceDataType<T extends Document<any, any> | AnyDocumentData> = T extends DocumentData<\n  any,\n  any,\n  infer U,\n  any,\n  any\n>\n  ? U\n  : T extends Document<infer U, any>\n  ? SourceDataType<U>\n  : never;\n\n/**\n * Returns the type of the constructor data for the given {@link DocumentData}.\n */\nexport type ConstructorDataType<T extends AnyDocumentData> = T['_initializeSource'] extends (data: infer U) => any\n  ? U\n  : never;\n\ntype ObjectToDeepPartial<T> = T extends object ? DeepPartial<T> : T;\n\nexport type PropertyTypeToSourceParameterType<T> = ObjectToDeepPartial<PropertyTypeToSourceType<T>>;\n\n// TODO: Find a way to avoid this helper\nexport type FieldReturnType<T extends DocumentField<any>, U extends Partial<DocumentField<any>>> = Omit<T, keyof U> &\n  Exclude<U, 'undefined'>;\n\nexport type DocumentConstructor = Pick<typeof Document, keyof typeof Document> &\n  (new (...args: any[]) => Document<any, any>);\n\nexport type ConfiguredDocumentClass<T extends DocumentConstructor> = ConfiguredDocumentClassForName<\n  T['metadata']['name']\n>;\n\nexport type DocumentType = keyof {\n  [Key in keyof CONFIG as 'documentClass' extends keyof CONFIG[Key] ? Key : never]: unknown;\n};\n\nexport type PlaceableDocumentType =\n  | 'AmbientLight'\n  | 'AmbientSound'\n  | 'Drawing'\n  | 'MeasuredTemplate'\n  | 'Note'\n  | 'Tile'\n  | 'Token'\n  | 'Wall';\n\nexport type ConfiguredDocumentClassForName<Name extends DocumentType> = 'documentClass' extends keyof CONFIG[Name]\n  ? CONFIG[Name]['documentClass']\n  : never;\n\nexport type ObjectType = keyof {\n  [Key in keyof CONFIG as 'objectClass' extends keyof CONFIG[Key] ? Key : never]: unknown;\n};\n\nexport type ConfiguredObjectClassForName<Name extends ObjectType> = 'objectClass' extends keyof CONFIG[Name]\n  ? CONFIG[Name]['objectClass']\n  : never;\n\nexport type ConfiguredData<Name extends string> = Name extends keyof DataConfig ? DataConfig[Name] : {};\n\nexport type ConfiguredSource<Name extends string> = Name extends keyof SourceConfig ? SourceConfig[Name] : {};\n\nexport type ToObjectFalseType<T> = T extends {\n  toObject: (source: false) => infer U;\n}\n  ? U\n  : T;\n\nexport type ConfiguredSheetClass<T extends DocumentConstructor> = T['metadata']['name'] extends keyof CONFIG\n  ? 'sheetClass' extends keyof CONFIG[T['metadata']['name']]\n    ? CONFIG[T['metadata']['name']]['sheetClass']\n    : never\n  : T;\n\nexport type ObjectClass<T extends DocumentConstructor> = T['metadata']['name'] extends keyof CONFIG\n  ? 'objectClass' extends keyof CONFIG[T['metadata']['name']]\n    ? CONFIG[T['metadata']['name']]['objectClass']\n    : never\n  : T;\n\nexport type LayerClass<T extends DocumentConstructor> = T['metadata']['name'] extends keyof CONFIG\n  ? 'layerClass' extends keyof CONFIG[T['metadata']['name']]\n    ? CONFIG[T['metadata']['name']]['layerClass']\n    : never\n  : T;\n\nexport type DataSourceForPlaceable<P extends PlaceableObject> = P extends PlaceableObject<infer Doc>\n  ? Doc extends Document<infer D, any>\n    ? D['_source']\n    : never\n  : never;\n"]},78259:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\types\\index.d.ts","import './augments';\nimport './utils';\n"]},69091:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["@league-of-foundry-developers\\foundry-vtt-types\\src\\types\\utils.d.ts","/**\n * Recursively sets keys of an object to optional. Used primarily for update methods\n * @internal\n */\ndeclare type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\n/**\n * References the constructor of type `T`\n * @internal\n */\ntype ConstructorOf<T> = new (...args: any) => T;\n\n/**\n * Omit properties of `T` which are of type `U`.\n *\n * @typeParam T - Object type from which properties will be omitted.\n * @typeParam U - Properties of this type will be omitted.\n * @internal\n */\ntype OmitOfType<T extends object, U> = { [k in keyof T as T[k] extends U ? never : k]: T[k] };\n\n/**\n * If T extends `U`, the resulting type is `R`, otherwise it is `T`.\n *\n * @typeParam T - Original type.\n * @typeParam U - Only convert types of this type.\n * @typeParam R - Adjust to this type.\n * @internal\n */\ntype TypeToType<T, U, R> = T extends U ? R : T;\n\n/**\n * Map the types of properties of `T` to `R` if they are of type `U`.\n *\n * @typeParam T - Object type that will have its properties' types adjusted.\n * @typeParam U - Adjust the types of properties of this type.\n * @typeParam R - Type that properties' types will be adjusted to.\n * @internal\n */\ntype MapTypeToType<T, U, R> = { [k in keyof T]: TypeToType<T[k], U, R> };\n\n/**\n * Omit properties of `T` which are assignable from `U`.\n *\n * @typeParam T - Object type that will have its properties omitted.\n * @typeParam U - Properties with types that are assignable from this type will be omitted.\n * @internal\n */\ntype OmitAssignableFromType<T extends object, U> = { [k in keyof T as U extends T[k] ? never : k]: T[k] };\n\n/**\n * Omit properties of `T` which are not assignable from `U`.\n *\n * @typeParam T - Object type that will have its properties omitted.\n * @typeParam U - Properties with types that are not assignable from this type will be omitted.\n * @internal\n */\ntype OmitNotAssignableFromType<T extends object, U> = { [k in keyof T as U extends T[k] ? k : never]: T[k] };\n\n/**\n * Expand an object that contains keys in dotted notation\n * @internal\n */\ntype Expanded<O> = O extends Record<string, unknown>\n  ? {\n      [KO in keyof O as KO extends `${infer A}.${string}` ? A : KO]: KO extends `${string}.${infer B}`\n        ? Expanded<{ [EB in B]: O[KO] }>\n        : Expanded<O[KO]>;\n    }\n  : O;\n\n/**\n * Union type of the types of the values in `T`\n * @internal\n */\ntype ValueOf<T> = T extends Array<unknown> ? T[number] : T[keyof T];\n\n/**\n * Transforms a string to lowercase and the first character to uppercase.\n * @internal\n */\ntype Titlecase<S extends string> = S extends `${infer A} ${infer B}`\n  ? `${Titlecase<A>} ${Titlecase<B>}`\n  : Capitalize<Lowercase<S>>;\n\n/**\n * Deeply merge two types. If either of the given types is not an `object`, `U`\n * simply overwrites `T`.\n *\n * Nested properties of type `object` are merged recursively unless the property\n * in `U` is an `Array`.\n *\n * @typeParam T - The base type that `U` will be merged into.\n * @typeParam U - The type that will be merged into `T`.\n */\ntype Merge<T, U> = T extends object\n  ? U extends Array<any>\n    ? U\n    : U extends object\n    ? {\n        [Key in keyof T | keyof U]: Key extends keyof T\n          ? Key extends keyof U\n            ? Merge<T[Key], U[Key]>\n            : T[Key]\n          : Key extends keyof U\n          ? U[Key]\n          : never;\n      }\n    : U\n  : U;\n"]},91881:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["handlebars\\types\\index.d.ts","/* These definitions were imported from https://github.com/DefinitelyTyped/DefinitelyTyped\n * and includes previous contributions from the DefinitelyTyped community by:\n *   - Albert Willemsen <https://github.com/AlbertWillemsen-Centric>\n *   - Boris Yankov <https://github.com/borisyankov>\n *   - Jessica Franco <https://github.com/Kovensky>\n *   - Masahiro Wakame <https://github.com/vvakame>\n *   - Raanan Weber <https://github.com/RaananW>\n *   - Sergei Dorogin <https://github.com/evil-shrike>\n *   - webbiesdk <https://github.com/webbiesdk>\n *   - Andrew Leedham <https://github.com/AndrewLeedham>\n *   - Nils Knappmeier <https://github.com/nknapp>\n * For full history prior to their migration to handlebars.js, please see:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/commits/1ce60bdc07f10e0b076778c6c953271c072bc894/types/handlebars/index.d.ts\n */\n// TypeScript Version: 2.3\n\ndeclare namespace Handlebars {\n  export interface TemplateDelegate<T = any> {\n      (context: T, options?: RuntimeOptions): string;\n  }\n\n  export type Template<T = any> = TemplateDelegate<T>|string;\n\n  export interface RuntimeOptions {\n      partial?: boolean;\n      depths?: any[];\n      helpers?: { [name: string]: Function };\n      partials?: { [name: string]: HandlebarsTemplateDelegate };\n      decorators?: { [name: string]: Function };\n      data?: any;\n      blockParams?: any[];\n      allowCallsToHelperMissing?: boolean;\n      allowedProtoProperties?: { [name: string]: boolean };\n      allowedProtoMethods?: { [name: string]: boolean };\n      allowProtoPropertiesByDefault?: boolean;\n      allowProtoMethodsByDefault?: boolean;\n  }\n\n  export interface HelperOptions {\n      fn: TemplateDelegate;\n      inverse: TemplateDelegate;\n      hash: any;\n      data?: any;\n  }\n\n  export interface HelperDelegate {\n      (context?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any, options?: HelperOptions): any;\n  }\n  export interface HelperDeclareSpec {\n      [key: string]: HelperDelegate;\n  }\n\n  export interface ParseOptions {\n      srcName?: string;\n      ignoreStandalone?: boolean;\n  }\n\n  export function registerHelper(name: string, fn: HelperDelegate): void;\n  export function registerHelper(name: HelperDeclareSpec): void;\n  export function unregisterHelper(name: string): void;\n\n  export function registerPartial(name: string, fn: Template): void;\n  export function registerPartial(spec: { [name: string]: HandlebarsTemplateDelegate }): void;\n  export function unregisterPartial(name: string): void;\n\n  // TODO: replace Function with actual signature\n  export function registerDecorator(name: string, fn: Function): void;\n  export function unregisterDecorator(name: string): void;\n\n  export function K(): void;\n  export function createFrame(object: any): any;\n  export function blockParams(obj: any[], ids: any[]): any[];\n  export function log(level: number, obj: any): void;\n  export function parse(input: string, options?: ParseOptions): hbs.AST.Program;\n  export function parseWithoutProcessing(input: string, options?: ParseOptions): hbs.AST.Program;\n  export function compile<T = any>(input: any, options?: CompileOptions): HandlebarsTemplateDelegate<T>;\n  export function precompile(input: any, options?: PrecompileOptions): TemplateSpecification;\n  export function template<T = any>(precompilation: TemplateSpecification): HandlebarsTemplateDelegate<T>;\n\n  export function create(): typeof Handlebars;\n\n  export const escapeExpression: typeof Utils.escapeExpression;\n  //export const Utils: typeof hbs.Utils;\n  export const logger: Logger;\n  export const templates: HandlebarsTemplates;\n  export const helpers: { [name: string]: HelperDelegate };\n  export const partials: { [name: string]: any };\n  // TODO: replace Function with actual signature\n  export const decorators: { [name: string]: Function };\n\n  export const VERSION: string;\n\n  export function noConflict(): typeof Handlebars;\n\n  export class Exception {\n      constructor(message: string, node?: hbs.AST.Node);\n      description: string;\n      fileName: string;\n      lineNumber?: any;\n      endLineNumber?: any;\n      message: string;\n      name: string;\n      number: number;\n      stack?: string;\n      column?: any;\n      endColumn?: any;\n  }\n\n  export class SafeString {\n      constructor(str: string);\n      toString(): string;\n      toHTML(): string;\n  }\n\n  export namespace Utils {\n      export function escapeExpression(str: string): string;\n      export function createFrame(object: any): any;\n      export function blockParams(obj: any[], ids: any[]): any[];\n      export function isEmpty(obj: any) : boolean;\n      export function extend(obj: any, ...source: any[]): any;\n      export function toString(obj: any): string;\n      export function isArray(obj: any): boolean;\n      export function isFunction(obj: any): boolean;\n  }\n\n  export namespace AST {\n      export const helpers: hbs.AST.helpers;\n  }\n\n  interface ICompiler {\n      accept(node: hbs.AST.Node): void;\n      Program(program: hbs.AST.Program): void;\n      BlockStatement(block: hbs.AST.BlockStatement): void;\n      PartialStatement(partial: hbs.AST.PartialStatement): void;\n      PartialBlockStatement(partial: hbs.AST.PartialBlockStatement): void;\n      DecoratorBlock(decorator: hbs.AST.DecoratorBlock): void;\n      Decorator(decorator: hbs.AST.Decorator): void;\n      MustacheStatement(mustache: hbs.AST.MustacheStatement): void;\n      ContentStatement(content: hbs.AST.ContentStatement): void;\n      CommentStatement(comment?: hbs.AST.CommentStatement): void;\n      SubExpression(sexpr: hbs.AST.SubExpression): void;\n      PathExpression(path: hbs.AST.PathExpression): void;\n      StringLiteral(str: hbs.AST.StringLiteral): void;\n      NumberLiteral(num: hbs.AST.NumberLiteral): void;\n      BooleanLiteral(bool: hbs.AST.BooleanLiteral): void;\n      UndefinedLiteral(): void;\n      NullLiteral(): void;\n      Hash(hash: hbs.AST.Hash): void;\n  }\n\n  export class Visitor implements ICompiler {\n      accept(node: hbs.AST.Node): void;\n      acceptKey(node: hbs.AST.Node, name: string): void;\n      acceptArray(arr: hbs.AST.Expression[]): void;\n      Program(program: hbs.AST.Program): void;\n      BlockStatement(block: hbs.AST.BlockStatement): void;\n      PartialStatement(partial: hbs.AST.PartialStatement): void;\n      PartialBlockStatement(partial: hbs.AST.PartialBlockStatement): void;\n      DecoratorBlock(decorator: hbs.AST.DecoratorBlock): void;\n      Decorator(decorator: hbs.AST.Decorator): void;\n      MustacheStatement(mustache: hbs.AST.MustacheStatement): void;\n      ContentStatement(content: hbs.AST.ContentStatement): void;\n      CommentStatement(comment?: hbs.AST.CommentStatement): void;\n      SubExpression(sexpr: hbs.AST.SubExpression): void;\n      PathExpression(path: hbs.AST.PathExpression): void;\n      StringLiteral(str: hbs.AST.StringLiteral): void;\n      NumberLiteral(num: hbs.AST.NumberLiteral): void;\n      BooleanLiteral(bool: hbs.AST.BooleanLiteral): void;\n      UndefinedLiteral(): void;\n      NullLiteral(): void;\n      Hash(hash: hbs.AST.Hash): void;\n  }\n\n\n  export interface ResolvePartialOptions {\n    name: string;\n    helpers?: { [name: string]: Function };\n    partials?: { [name: string]: HandlebarsTemplateDelegate };\n    decorators?: { [name: string]: Function };\n    data?: any;\n  }\n\n  export namespace VM {\n    /**\n     * @deprecated\n     */\n    export function resolvePartial<T = any>(partial: HandlebarsTemplateDelegate<T> | undefined, context: any, options: ResolvePartialOptions): HandlebarsTemplateDelegate<T>;\n  }\n}\n\n/**\n* Implement this interface on your MVW/MVVM/MVC views such as Backbone.View\n**/\ninterface HandlebarsTemplatable {\n  template: HandlebarsTemplateDelegate;\n}\n\n// NOTE: for backward compatibility of this typing\ntype HandlebarsTemplateDelegate<T = any> = Handlebars.TemplateDelegate<T>;\n\ninterface HandlebarsTemplates {\n  [index: string]: HandlebarsTemplateDelegate;\n}\n\ninterface TemplateSpecification {\n\n}\n\n// for backward compatibility of this typing\ntype RuntimeOptions = Handlebars.RuntimeOptions;\n\ninterface CompileOptions {\n  data?: boolean;\n  compat?: boolean;\n  knownHelpers?: KnownHelpers;\n  knownHelpersOnly?: boolean;\n  noEscape?: boolean;\n  strict?: boolean;\n  assumeObjects?: boolean;\n  preventIndent?: boolean;\n  ignoreStandalone?: boolean;\n  explicitPartialContext?: boolean;\n}\n\ntype KnownHelpers = {\n  [name in BuiltinHelperName | CustomHelperName]: boolean;\n};\n\ntype BuiltinHelperName =\n  \"helperMissing\"|\n  \"blockHelperMissing\"|\n  \"each\"|\n  \"if\"|\n  \"unless\"|\n  \"with\"|\n  \"log\"|\n  \"lookup\";\n\ntype CustomHelperName = string;\n\ninterface PrecompileOptions extends CompileOptions {\n  srcName?: string;\n  destName?: string;\n}\n\ndeclare namespace hbs {\n  // for backward compatibility of this typing\n  type SafeString = Handlebars.SafeString;\n\n  type Utils = typeof Handlebars.Utils;\n}\n\ninterface Logger {\n  DEBUG: number;\n  INFO: number;\n  WARN: number;\n  ERROR: number;\n  level: number;\n\n  methodMap: { [level: number]: string };\n\n  log(level: number, obj: string): void;\n}\n\ntype CompilerInfo = [number/* revision */, string /* versions */];\n\ndeclare namespace hbs {\n  namespace AST {\n      interface Node {\n          type: string;\n          loc: SourceLocation;\n      }\n\n      interface SourceLocation {\n          source: string;\n          start: Position;\n          end: Position;\n      }\n\n      interface Position {\n          line: number;\n          column: number;\n      }\n\n      interface Program extends Node {\n          body: Statement[];\n          blockParams: string[];\n      }\n\n      interface Statement extends Node {}\n\n      interface MustacheStatement extends Statement {\n          type: 'MustacheStatement';\n          path: PathExpression | Literal;\n          params: Expression[];\n          hash: Hash;\n          escaped: boolean;\n          strip: StripFlags;\n      }\n\n      interface Decorator extends MustacheStatement { }\n\n      interface BlockStatement extends Statement {\n          type: 'BlockStatement';\n          path: PathExpression;\n          params: Expression[];\n          hash: Hash;\n          program: Program;\n          inverse: Program;\n          openStrip: StripFlags;\n          inverseStrip: StripFlags;\n          closeStrip: StripFlags;\n      }\n\n      interface DecoratorBlock extends BlockStatement { }\n\n      interface PartialStatement extends Statement {\n          type: 'PartialStatement';\n          name: PathExpression | SubExpression;\n          params: Expression[];\n          hash: Hash;\n          indent: string;\n          strip: StripFlags;\n      }\n\n      interface PartialBlockStatement extends Statement {\n          type: 'PartialBlockStatement';\n          name: PathExpression | SubExpression;\n          params: Expression[];\n          hash: Hash;\n          program: Program;\n          openStrip: StripFlags;\n          closeStrip: StripFlags;\n      }\n\n      interface ContentStatement extends Statement {\n          type: 'ContentStatement';\n          value: string;\n          original: StripFlags;\n      }\n\n      interface CommentStatement extends Statement {\n          type: 'CommentStatement';\n          value: string;\n          strip: StripFlags;\n      }\n\n      interface Expression extends Node {}\n\n      interface SubExpression extends Expression {\n          type: 'SubExpression';\n          path: PathExpression;\n          params: Expression[];\n          hash: Hash;\n      }\n\n      interface PathExpression extends Expression {\n          type: 'PathExpression';\n          data: boolean;\n          depth: number;\n          parts: string[];\n          original: string;\n      }\n\n      interface Literal extends Expression {}\n      interface StringLiteral extends Literal {\n          type: 'StringLiteral';\n          value: string;\n          original: string;\n      }\n\n      interface BooleanLiteral extends Literal {\n          type: 'BooleanLiteral';\n          value: boolean;\n          original: boolean;\n      }\n\n      interface NumberLiteral extends Literal {\n          type: 'NumberLiteral';\n          value: number;\n          original: number;\n      }\n\n      interface UndefinedLiteral extends Literal {\n          type: 'UndefinedLiteral';\n\t  }\n\n      interface NullLiteral extends Literal {\n          type: 'NullLiteral';\n\t  }\n\n      interface Hash extends Node {\n          type: 'Hash';\n          pairs: HashPair[];\n      }\n\n      interface HashPair extends Node {\n          type: 'HashPair';\n          key: string;\n          value: Expression;\n      }\n\n      interface StripFlags {\n          open: boolean;\n          close: boolean;\n      }\n\n      interface helpers {\n          helperExpression(node: Node): boolean;\n          scopeId(path: PathExpression): boolean;\n          simpleId(path: PathExpression): boolean;\n      }\n  }\n}\n\ndeclare module \"handlebars\" {\n  export = Handlebars;\n}\n\ndeclare module \"handlebars/runtime\" {\n  export = Handlebars;\n}\n"]},30068:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["jquery\\JQuery.d.ts",'// tslint:disable:jsdoc-format\n// tslint:disable:max-line-length\n// tslint:disable:no-irregular-whitespace\n\ninterface JQuery<TElement = HTMLElement> extends Iterable<TElement> {\n    /**\n     * A string containing the jQuery version number.\n     * @see \\`{@link https://api.jquery.com/jquery-2/#jquery1 }\\`\n     * @since 1.0\n     * @example ​ ````Determine if an object is a jQuery object\n```javascript\nvar a = { what: "A regular JS object" },\n  b = $( "body" );\n​\nif ( a.jquery ) { // Falsy, since it\'s undefined\n  alert( "a is a jQuery object!" );\n}\n​\nif ( b.jquery ) { // Truthy, since it\'s a string\n    alert( "b is a jQuery object!" );\n}\n```\n     * @example ​ ````Get the current version of jQuery running on the page\n```javascript\nalert( "You are running jQuery version: " + $.fn.jquery );\n```\n     */\n    jquery: string;\n    /**\n     * The number of elements in the jQuery object.\n     * @see \\`{@link https://api.jquery.com/length/ }\\`\n     * @since 1.0\n     * @example ​ ````Count the divs.  Click to add more.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>length demo</title>\n  <style>\n  body {\n    cursor: pointer;\n  }\n  div {\n    width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: green;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​<span></span>\n  <div></div>​\n<script>\n$( document.body )\n  .click(function() {\n    $( document.body ).append( $( "<div>" ) );\n    var n = $( "div" ).length;\n    $( "span" ).text( "There are " + n + " divs." +\n      "Click to add more.");\n  })\n  // Trigger the click to start\n  .trigger( "click" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    length: number;\n    /**\n     * Create a new jQuery object with elements added to the set of matched elements.\n     * @param selector A string representing a selector expression to find additional elements to add to the set of matched elements.\n     * @param context The point in the document at which the selector should begin matching; similar to the context\n     *                argument of the $(selector, context) method.\n     * @see \\`{@link https://api.jquery.com/add/ }\\`\n     * @since 1.4\n     */\n    add(selector: JQuery.Selector, context: Element): this;\n    // TODO: The return type should reflect newly selected types.\n    /**\n     * Create a new jQuery object with elements added to the set of matched elements.\n     * @param selector_elements_html_selection _&#x40;param_ `selector_elements_html_selection`\n     * <br>\n     * * `selector` — A string representing a selector expression to find additional elements to add to the set of matched elements. <br>\n     * * `elements` — One or more elements to add to the set of matched elements. <br>\n     * * `html` — An HTML fragment to add to the set of matched elements. <br>\n     * * `selection` — An existing jQuery object to add to the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/add/ }\\`\n     * @since 1.0\n     * @since 1.3.2\n     * @example ​ ````Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>add demo</title>\n  <style>\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 10px;\n    float: left;\n  }\n  p {\n    clear: left;\n    font-weight: bold;\n    font-size: 16px;\n    color: blue;\n    margin: 0 10px;\n    padding: 2px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n​\n<p>Added this... (notice no border)</p>\n​\n<script>\n$( "div" ).css( "border", "2px solid red" )\n  .add( "p" )\n  .css( "background", "yellow" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Adds more elements, matched by the given expression, to the set of matched elements.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>add demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<span>Hello Again</span>\n​\n<script>\n$( "p" ).add( "span" ).css( "background", "yellow" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Adds more elements, created on the fly, to the set of matched elements.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>add demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n​\n<script>\n$( "p" ).clone().add( "<span>Again</span>" ).appendTo( document.body );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Adds one or more Elements to the set of matched elements.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>add demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<span id="a">Hello Again</span>\n​\n<script>\n$( "p" ).add( document.getElementById( "a" ) ).css( "background", "yellow" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Demonstrates how to add (or push) elements to an existing collection\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>add demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<span id="a">Hello Again</span>\n​\n<script>\nvar collection = $( "p" );\n// Capture the new collection\ncollection = collection.add( document.getElementById( "a" ) );\ncollection.css( "background", "yellow" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    add(selector_elements_html_selection: JQuery.Selector | JQuery.TypeOrArray<Element> | JQuery.htmlString | JQuery | JQuery.Node): this;\n    /**\n     * Add the previous set of elements on the stack to the current set, optionally filtered by a selector.\n     * @param selector A string containing a selector expression to match the current set of elements against.\n     * @see \\`{@link https://api.jquery.com/addBack/ }\\`\n     * @since 1.8\n     * @example ​ ````The .addBack() method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from .find(&quot;p&quot;). In the second example, .addBack() adds the previous set of elements on the stack — in this case $(&quot;div.after-addback&quot;) — to the current set, selecting both the div and its enclosed paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>addBack demo</title>\n  <style>\n  p, div {\n    margin: 5px;\n    padding: 5px;\n  }\n  .border {\n    border: 2px solid red;\n  }\n  .background {\n    background: yellow;\n  }\n  .left, .right {\n    width: 45%;\n    float: left;\n  }\n  .right {\n    margin-left: 3%;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="left">\n  <p><strong>Before <code>addBack()</code></strong></p>\n  <div class="before-addback">\n    <p>First Paragraph</p>\n    <p>Second Paragraph</p>\n  </div>\n</div>\n<div class="right">\n  <p><strong>After <code>addBack()</code></strong></p>\n  <div class="after-addback">\n    <p>First Paragraph</p>\n    <p>Second Paragraph</p>\n  </div>\n</div>\n​\n<script>\n$( "div.left, div.right" ).find( "div, div > p" ).addClass( "border" );\n​\n// First Example\n$( "div.before-addback" ).find( "p" ).addClass( "background" );\n​\n// Second Example\n$( "div.after-addback" ).find( "p" ).addBack().addClass( "background" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    addBack(selector?: JQuery.Selector): this;\n    /**\n     * Adds the specified class(es) to each element in the set of matched elements.\n     * @param className_function _&#x40;param_ `className_function`\n     * <br>\n     * * `className` — One or more space-separated classes to be added to the class attribute of each matched element. <br>\n     * * `function` — A function returning one or more space-separated class names to be added to the existing class\n     *                name(s). Receives the index position of the element in the set and the existing class name(s) as\n     *                arguments. Within the function, `this` refers to the current element in the set.\n     * @see \\`{@link https://api.jquery.com/addClass/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @since 3.3\n     * @example ​ ````Add the class &quot;selected&quot; to the matched elements.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>addClass demo</title>\n  <style>\n  p {\n    margin: 8px;\n    font-size: 16px;\n  }\n  .selected {\n    color: blue;\n  }\n  .highlight {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>and</p>\n<p>Goodbye</p>\n​\n<script>\n$( "p" ).last().addClass( "selected" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Add the classes &quot;selected&quot; and &quot;highlight&quot; to the matched elements.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>addClass demo</title>\n  <style>\n  p {\n    margin: 8px;\n    font-size: 16px;\n  }\n  .selected {\n    color: red;\n  }\n  .highlight {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>and</p>\n<p>Goodbye</p>\n​\n<script>\n$( "p:last" ).addClass( "selected highlight" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Pass in a function to .addClass() to add the &quot;green&quot; class to a div that already has a &quot;red&quot; class.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>addClass demo</title>\n  <style>\n  div {\n    background: white;\n  }\n  .red {\n    background: red;\n  }\n  .red.green {\n    background: green;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n <div>This div should be white</div>\n <div class="red">This div will be green because it now has the "green" and "red" classes.\n   It would be red if the addClass function failed.</div>\n <div>This div should be white</div>\n <p>There are zero green divs</p>\n​\n<script>\n$( "div" ).addClass(function( index, currentClass ) {\n  var addedClass;\n​\n  if ( currentClass === "red" ) {\n    addedClass = "green";\n    $( "p" ).text( "There is one green div" );\n  }\n​\n  return addedClass;\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    addClass(className_function: JQuery.TypeOrArray<string> | ((this: TElement, index: number, currentClassName: string) => string)): this;\n    /**\n     * Insert content, specified by the parameter, after each element in the set of matched elements.\n     * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or\n     *                 jQuery objects to insert after each element in the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/after/ }\\`\n     * @since 1.0\n     * @example ​ ````Inserts some HTML after all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>after demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>I would like to say: </p>\n​\n<script>\n$( "p" ).after( "<b>Hello</b>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Inserts a DOM element after all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>after demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>I would like to say: </p>\n​\n<script>\n$( "p" ).after( document.createTextNode( "Hello" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>after demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<b>Hello</b>\n<p>I would like to say: </p>\n​\n<script>\n$( "p" ).after( $( "b" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    after(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;\n    /**\n     * Insert content, specified by the parameter, after each element in the set of matched elements.\n     * @param function_functionｰhtml _&#x40;param_ `function_functionｰhtml`\n     * <br>\n     * * `function` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert\n     *                after each element in the set of matched elements. Receives the index position of the element in the\n     *                set as an argument. Within the function, `this` refers to the current element in the set. <br>\n     * * `functionｰhtml` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert\n     *                     after each element in the set of matched elements. Receives the index position of the element in the\n     *                     set and the old HTML value of the element as arguments. Within the function, `this` refers to the\n     *                     current element in the set.\n     * @see \\`{@link https://api.jquery.com/after/ }\\`\n     * @since 1.4\n     * @since 1.10\n     */\n    after(function_functionｰhtml: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;\n    /**\n     * Register a handler to be called when Ajax requests complete. This is an AjaxEvent.\n     * @param handler The function to be invoked.\n     * @see \\`{@link https://api.jquery.com/ajaxComplete/ }\\`\n     * @since 1.0\n     * @example ​ ````Show a message when an Ajax request completes.\n```javascript\n$( document ).ajaxComplete(function( event, request, settings ) {\n  $( "#msg" ).append( "<li>Request Complete.</li>" );\n});\n```\n     */\n    ajaxComplete(handler: (this: Document,\n                           event: JQuery.TriggeredEvent<Document, undefined, Document, Document>,\n                           jqXHR: JQuery.jqXHR,\n                           ajaxOptions: JQuery.AjaxSettings) => void | false): this;\n    /**\n     * Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.\n     * @param handler The function to be invoked.\n     * @see \\`{@link https://api.jquery.com/ajaxError/ }\\`\n     * @since 1.0\n     * @example ​ ````Show a message when an Ajax request fails.\n```javascript\n$( document ).ajaxError(function( event, request, settings ) {\n  $( "#msg" ).append( "<li>Error requesting page " + settings.url + "</li>" );\n});\n```\n     */\n    ajaxError(handler: (this: Document,\n                        event: JQuery.TriggeredEvent<Document, undefined, Document, Document>,\n                        jqXHR: JQuery.jqXHR,\n                        ajaxSettings: JQuery.AjaxSettings,\n                        thrownError: string) => void | false): this;\n    /**\n     * Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.\n     * @param handler The function to be invoked.\n     * @see \\`{@link https://api.jquery.com/ajaxSend/ }\\`\n     * @since 1.0\n     * @example ​ ````Show a message before an Ajax request is sent.\n```javascript\n$( document ).ajaxSend(function( event, request, settings ) {\n  $( "#msg" ).append( "<li>Starting request at " + settings.url + "</li>" );\n});\n```\n     */\n    ajaxSend(handler: (this: Document,\n                       event: JQuery.TriggeredEvent<Document, undefined, Document, Document>,\n                       jqXHR: JQuery.jqXHR,\n                       ajaxOptions: JQuery.AjaxSettings) => void | false): this;\n    /**\n     * Register a handler to be called when the first Ajax request begins. This is an Ajax Event.\n     * @param handler The function to be invoked.\n     * @see \\`{@link https://api.jquery.com/ajaxStart/ }\\`\n     * @since 1.0\n     * @example ​ ````Show a loading message whenever an Ajax request starts (and none is already active).\n```javascript\n$( document ).ajaxStart(function() {\n  $( "#loading" ).show();\n});\n```\n     */\n    ajaxStart(handler: (this: Document) => void | false): this;\n    /**\n     * Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.\n     * @param handler The function to be invoked.\n     * @see \\`{@link https://api.jquery.com/ajaxStop/ }\\`\n     * @since 1.0\n     * @example ​ ````Hide a loading message after all the Ajax requests have stopped.\n```javascript\n$( document ).ajaxStop(function() {\n  $( "#loading" ).hide();\n});\n```\n     */\n    ajaxStop(handler: (this: Document) => void | false): this;\n    /**\n     * Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.\n     * @param handler The function to be invoked.\n     * @see \\`{@link https://api.jquery.com/ajaxSuccess/ }\\`\n     * @since 1.0\n     * @example ​ ````Show a message when an Ajax request completes successfully.\n```javascript\n$( document ).ajaxSuccess(function( event, request, settings ) {\n  $( "#msg" ).append( "<li>Successful Request!</li>" );\n});\n```\n     */\n    ajaxSuccess(handler: (this: Document,\n                          event: JQuery.TriggeredEvent<Document, undefined, Document, Document>,\n                          jqXHR: JQuery.jqXHR,\n                          ajaxOptions: JQuery.AjaxSettings,\n                          data: JQuery.PlainObject) => void | false): this;\n    /**\n     * Perform a custom animation of a set of CSS properties.\n     * @param properties An object of CSS properties and values that the animation will move toward.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/animate/ }\\`\n     * @since 1.0\n     * @example ​ ````An example of using an &#39;easing&#39; function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.\n```javascript\n$( "p" ).animate({\n  opacity: "show"\n}, "slow", "easein" );\n```\n     * @example ​ ````Animate all paragraphs and execute a callback function when the animation is complete.  The first argument is an object of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function.\n```javascript\n$( "p" ).animate({\n  height: 200,\n  width: 400,\n  opacity: 0.5\n}, 1000, "linear", function() {\n  alert( "all done" );\n});\n```\n     */\n    animate(properties: JQuery.PlainObject,\n            duration: JQuery.Duration,\n            easing: string,\n            complete?: (this: TElement) => void): this;\n    /**\n     * Perform a custom animation of a set of CSS properties.\n     * @param properties An object of CSS properties and values that the animation will move toward.\n     * @param duration_easing _&#x40;param_ `duration_easing`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/animate/ }\\`\n     * @since 1.0\n     * @example ​ ````Click the button to animate the div with a number of different properties.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>animate demo</title>\n  <style>\n  div {\n    background-color: #bca;\n    width: 100px;\n    border: 1px solid green;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="go">&raquo; Run</button>\n<div id="block">Hello!</div>\n​\n<script>\n// Using multiple unit types within one animation.\n​\n$( "#go" ).click(function() {\n  $( "#block" ).animate({\n    width: "70%",\n    opacity: 0.4,\n    marginLeft: "0.6in",\n    fontSize: "3em",\n    borderWidth: "10px"\n  }, 1500 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Animates a div&#39;s left property with a relative value. Click several times on the buttons to see the relative animations queued up.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>animate demo</title>\n  <style>\n  div {\n    position: absolute;\n    background-color: #abc;\n    left: 50px;\n    width: 90px;\n    height: 90px;\n    margin: 5px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="left">&laquo;</button>\n<button id="right">&raquo;</button>\n<div class="block"></div>\n​\n<script>\n$( "#right" ).click(function() {\n  $( ".block" ).animate({ "left": "+=50px" }, "slow" );\n});\n​\n$( "#left" ).click(function(){\n  $( ".block" ).animate({ "left": "-=50px" }, "slow" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Animate all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.\n```javascript\n$( "p" ).animate({\n  height: "toggle",\n  opacity: "toggle"\n}, "slow" );\n```\n     * @example ​ ````Animate all paragraphs to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.\n```javascript\n$( "p" ).animate({\n  left: 50,\n  opacity: 1\n}, 500 );\n```\n     */\n    animate(properties: JQuery.PlainObject,\n            duration_easing: JQuery.Duration | string,\n            complete?: (this: TElement) => void): this;\n    /**\n     * Perform a custom animation of a set of CSS properties.\n     * @param properties An object of CSS properties and values that the animation will move toward.\n     * @param options A map of additional options to pass to the method.\n     * @see \\`{@link https://api.jquery.com/animate/ }\\`\n     * @since 1.0\n     * @example ​ ````The first button shows how an unqueued animation works.  It expands the div out to 90% width while the font-size is increasing. Once the font-size change is complete, the border animation will begin.\n\nThe second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>animate demo</title>\n  <style>\n  div {\n    background-color: #bca;\n    width: 200px;\n    height: 1.1em;\n    text-align: center;\n    border: 2px solid green;\n    margin: 3px;\n    font-size: 14px;\n  }\n  button {\n    font-size: 14px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="go1">&raquo; Animate Block1</button>\n<button id="go2">&raquo; Animate Block2</button>\n<button id="go3">&raquo; Animate Both</button>\n<button id="go4">&raquo; Reset</button>\n<div id="block1">Block1</div>\n<div id="block2">Block2</div>\n​\n<script>\n$( "#go1" ).click(function() {\n  $( "#block1" )\n    .animate({\n      width: "90%"\n    }, {\n      queue: false,\n      duration: 3000\n    })\n    .animate({ fontSize: "24px" }, 1500 )\n    .animate({ borderRightWidth: "15px" }, 1500 );\n});\n​\n$( "#go2" ).click(function() {\n  $( "#block2" )\n    .animate({ width: "90%" }, 1000 )\n    .animate({ fontSize: "24px" }, 1000 )\n    .animate({ borderLeftWidth: "15px" }, 1000 );\n});\n​\n$( "#go3" ).click(function() {\n  $( "#go1" ).add( "#go2" ).click();\n});\n​\n$( "#go4" ).click(function() {\n  $( "div" ).css({\n    width: "",\n    fontSize: "",\n    borderWidth: ""\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Animates the first div&#39;s left property and synchronizes the remaining divs, using the step function to set their left properties at each stage of the animation.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>animate demo</title>\n  <style>\n  div {\n    position: relative;\n    background-color: #abc;\n    width: 40px;\n    height: 40px;\n    float: left;\n    margin: 5px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button id="go">Run »</button></p>\n<div class="block"></div>\n<div class="block"></div>\n<div class="block"></div>\n<div class="block"></div>\n<div class="block"></div>\n<div class="block"></div>\n​\n<script>\n$( "#go" ).click(function() {\n  $( ".block:first" ).animate({\n    left: 100\n  }, {\n    duration: 1000,\n    step: function( now, fx ){\n      $( ".block:gt(0)" ).css( "left", now );\n    }\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Animate the left and opacity style properties of all paragraphs; run the animation outside the queue, so that it will automatically start without waiting for its turn.\n```javascript\n$( "p" ).animate({\n  left: "50px",\n  opacity: 1\n}, {\n  duration: 500,\n  queue: false\n});\n```\n     * @example ​ ````Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.\n```javascript\n$( "p" ).animate({\n  height: "toggle",\n  opacity: "toggle"\n}, {\n  duration: "slow"\n});\n```\n     * @example ​ ````Use an easing function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.\n```javascript\n$( "p" ).animate({\n  opacity: "show"\n}, {\n  duration: "slow",\n  easing: "easein"\n});\n```\n     */\n    animate(properties: JQuery.PlainObject,\n            options: JQuery.EffectsOptions<TElement>): this;\n    /**\n     * Perform a custom animation of a set of CSS properties.\n     * @param properties An object of CSS properties and values that the animation will move toward.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/animate/ }\\`\n     * @since 1.0\n     */\n    animate(properties: JQuery.PlainObject,\n            complete?: (this: TElement) => void): this;\n    /**\n     * Insert content, specified by the parameter, to the end of each element in the set of matched elements.\n     * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or\n     *                 jQuery objects to insert at the end of each element in the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/append/ }\\`\n     * @since 1.0\n     * @example ​ ````Appends some HTML to all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>append demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>I would like to say: </p>\n​\n<script>\n$( "p" ).append( "<strong>Hello</strong>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Appends an Element to all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>append demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>I would like to say: </p>\n​\n<script>\n$( "p" ).append( document.createTextNode( "Hello" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>append demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<strong>Hello world!!!</strong>\n<p>I would like to say: </p>\n​\n<script>\n$( "p" ).append( $( "strong" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    append(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;\n    /**\n     * Insert content, specified by the parameter, to the end of each element in the set of matched elements.\n     * @param funсtion A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at\n     *                 the end of each element in the set of matched elements. Receives the index position of the element\n     *                 in the set and the old HTML value of the element as arguments. Within the function, `this` refers to\n     *                 the current element in the set.\n     * @see \\`{@link https://api.jquery.com/append/ }\\`\n     * @since 1.4\n     */\n    append(funсtion: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;\n    /**\n     * Insert every element in the set of matched elements to the end of the target.\n     * @param target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements\n     *               will be inserted at the end of the element(s) specified by this parameter.\n     * @see \\`{@link https://api.jquery.com/appendTo/ }\\`\n     * @since 1.0\n     * @example ​ ````Append all spans to the element with the ID &quot;foo&quot; (Check append() documentation for more examples)\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>appendTo demo</title>\n  <style>\n  #foo {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<span>I have nothing more to say... </span>\n​\n<div id="foo">FOO! </div>\n​\n<script>\n$( "span" ).appendTo( "#foo" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    appendTo(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Element | DocumentFragment> | JQuery): this;\n    /**\n     * Set one or more attributes for the set of matched elements.\n     * @param attributeName The name of the attribute to set.\n     * @param value_function _&#x40;param_ `value_function`\n     * <br>\n     * * `value` — A value to set for the attribute. If `null`, the specified attribute will be removed (as in \\`{@link removeAttr .removeAttr()}`). <br>\n     * * `function` — A function returning the value to set. `this` is the current element. Receives the index position of\n     *                the element in the set and the old attribute value as arguments.\n     * @see \\`{@link https://api.jquery.com/attr/ }\\`\n     * @since 1.0\n     * @since 1.1\n     * @example ​ ````Set the id for divs based on the position in the page.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>attr demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  b {\n    font-weight: bolder;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>Zero-th <span></span></div>\n<div>First <span></span></div>\n<div>Second <span></span></div>\n​\n<script>\n$( "div" )\n  .attr( "id", function( arr ) {\n    return "div-id" + arr;\n  })\n  .each(function() {\n    $( "span", this ).html( "(id = \'<b>" + this.id + "</b>\')" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Set the src attribute from title attribute on the image.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>attr demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<img title="hat.gif">\n​\n<script>\n$( "img" ).attr( "src", function() {\n  return "/resources/" + this.title;\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    attr(attributeName: string,\n         value_function: string | number | null | ((this: TElement, index: number, attr: string) => string | number | void | undefined)): this;\n    /**\n     * Set one or more attributes for the set of matched elements.\n     * @param attributes An object of attribute-value pairs to set.\n     * @see \\`{@link https://api.jquery.com/attr/ }\\`\n     * @since 1.0\n     * @example ​ ````Set some attributes for all &lt;img&gt;s in the page.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>attr demo</title>\n  <style>\n  img {\n    padding: 10px;\n  }\n  div {\n    color: red;\n    font-size: 24px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<img>\n<img>\n<img>\n​\n<div><b>Attribute of Ajax</b></div>\n​\n<script>\n$( "img" ).attr({\n  src: "/resources/hat.gif",\n  title: "jQuery",\n  alt: "jQuery Logo"\n});\n$( "div" ).text( $( "img" ).attr( "alt" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    attr(attributes: JQuery.PlainObject): this;\n    /**\n     * Get the value of an attribute for the first element in the set of matched elements.\n     * @param attributeName The name of the attribute to get.\n     * @see \\`{@link https://api.jquery.com/attr/ }\\`\n     * @since 1.0\n     * @example ​ ````Display the checked attribute and property of a checkbox as it changes.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>attr demo</title>\n  <style>\n  p {\n    margin: 20px 0 0;\n  }\n  b {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="check1" type="checkbox" checked="checked">\n<label for="check1">Check me</label>\n<p></p>\n​\n<script>\n$( "input" )\n  .change(function() {\n    var $input = $( this );\n    $( "p" ).html( ".attr( \'checked\' ): <b>" + $input.attr( "checked" ) + "</b><br>" +\n      ".prop( \'checked\' ): <b>" + $input.prop( "checked" ) + "</b><br>" +\n      ".is( \':checked\' ): <b>" + $input.is( ":checked" ) + "</b>" );\n  })\n  .change();\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Find the title attribute of the first &lt;em&gt; in the page.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>attr demo</title>\n  <style>\n  em {\n    color: blue;\n    font-weight: bold;\n  }\n  div {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Once there was a <em title="huge, gigantic">large</em> dinosaur...</p>\n​\nThe title of the emphasis is:<div></div>\n​\n<script>\nvar title = $( "em" ).attr( "title" );\n$( "div" ).text( title );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    attr(attributeName: string): string | undefined;\n    /**\n     * Insert content, specified by the parameter, before each element in the set of matched elements.\n     * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or\n     *                 jQuery objects to insert before each element in the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/before/ }\\`\n     * @since 1.0\n     * @example ​ ````Inserts some HTML before all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>before demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p> is what I said...</p>\n​\n<script>\n$( "p" ).before( "<b>Hello</b>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Inserts a DOM element before all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>before demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p> is what I said...</p>\n​\n<script>\n$( "p" ).before( document.createTextNode( "Hello" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>before demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p> is what I said...</p><b>Hello</b>\n​\n<script>\n$( "p" ).before( $( "b" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    before(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;\n    /**\n     * Insert content, specified by the parameter, before each element in the set of matched elements.\n     * @param function_functionｰhtml _&#x40;param_ `function_functionｰhtml`\n     * <br>\n     * * `function` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert\n     *                before each element in the set of matched elements. Receives the index position of the element in\n     *                the set as an argument. Within the function, `this` refers to the current element in the set. <br>\n     * * `functionｰhtml` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert\n     *                     before each element in the set of matched elements. Receives the index position of the element in\n     *                     the set and the old HTML value of the element as arguments. Within the function, `this` refers to the\n     *                     current element in the set.\n     * @see \\`{@link https://api.jquery.com/before/ }\\`\n     * @since 1.4\n     * @since 1.10\n     */\n    before(function_functionｰhtml: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;\n    // [bind() overloads] https://github.com/jquery/api.jquery.com/issues/1048\n    /**\n     * Attach a handler to an event for the elements.\n     * @param eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/bind/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link on }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     */\n    bind<TType extends string,\n         TData>(\n        eventType: TType,\n        eventData: TData,\n        handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, TType>\n    ): this;\n    /**\n     * Attach a handler to an event for the elements.\n     * @param eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.\n     * @param handler_preventBubble _&#x40;param_ `handler_preventBubble`\n     * <br>\n     * * `handler` — A function to execute each time the event is triggered. <br>\n     * * `preventBubble` — Setting the third argument to false will attach a function that prevents the default action from\n     *                     occurring and stops the event from bubbling. The default is `true`.\n     * @see \\`{@link https://api.jquery.com/bind/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link on }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     * @example ​ ````Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>bind demo</title>\n  <style>\n  p {\n    background: yellow;\n    font-weight: bold;\n    cursor: pointer;\n    padding: 5px;\n  }\n  p.over {\n     background: #ccc;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Click or double click here.</p>\n<span></span>\n​\n<script>\n$( "p" ).bind( "click", function( event ) {\n  var str = "( " + event.pageX + ", " + event.pageY + " )";\n  $( "span" ).text( "Click happened! " + str );\n});\n$( "p" ).bind( "dblclick", function() {\n  $( "span" ).text( "Double-click happened in " + this.nodeName );\n});\n$( "p" ).bind( "mouseenter mouseleave", function( event ) {\n  $( this ).toggleClass( "over" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To display each paragraph&#39;s text in an alert box whenever it is clicked:\n```javascript\n$( "p" ).bind( "click", function() {\n  alert( $( this ).text() );\n});\n```\n     * @example ​ ````Cancel a default action and prevent it from bubbling up by returning false:\n```javascript\n$( "form" ).bind( "submit", function() {\n  return false;\n})\n```\n     * @example ​ ````Cancel only the default action by using the .preventDefault() method.\n```javascript\n$( "form" ).bind( "submit", function( event ) {\n  event.preventDefault();\n});\n```\n     * @example ​ ````Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.\n```javascript\n$( "form" ).bind( "submit", function( event ) {\n  event.stopPropagation();\n});\n```\n     * @example ​ ````Bind custom events.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>bind demo</title>\n  <style>\n  p {\n    color: red;\n  }\n  span {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Has an attached custom event.</p>\n<button>Trigger custom event</button>\n<span style="display: none;"></span>\n​\n<script>\n$( "p" ).bind( "myCustomEvent", function( e, myName, myValue ) {\n  $( this ).text( myName + ", hi there!" );\n  $( "span" )\n    .stop()\n    .css( "opacity", 1 )\n    .text( "myName = " + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n  });\n$( "button" ).click(function() {\n  $( "p" ).trigger( "myCustomEvent", [ "John" ] );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    bind<TType extends string>(\n        eventType: TType,\n        handler_preventBubble: JQuery.TypeEventHandler<TElement, undefined, TElement, TElement, TType> |\n                               false |\n                               null |\n                               undefined\n    ): this;\n    /**\n     * Attach a handler to an event for the elements.\n     * @param events An object containing one or more DOM event types and functions to execute for them.\n     * @see \\`{@link https://api.jquery.com/bind/ }\\`\n     * @since 1.4\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link on }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     * @example ​ ````Bind multiple events simultaneously.\n```javascript\n$( "div.test" ).bind({\n  click: function() {\n    $( this ).addClass( "active" );\n  },\n  mouseenter: function() {\n    $( this ).addClass( "inside" );\n  },\n  mouseleave: function() {\n    $( this ).removeClass( "inside" );\n  }\n});\n```\n     */\n    bind(events: JQuery.TypeEventHandlers<TElement, undefined, TElement, TElement>): this;\n    /**\n     * Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/blur/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    blur<TData>(eventData: TData,\n                handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'blur\'>): this;\n    /**\n     * Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/blur/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````To trigger the blur event on all paragraphs:\n```javascript\n$( "p" ).blur();\n```\n     */\n    blur(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'blur\'> |\n                   false): this;\n    /**\n     * Bind an event handler to the "change" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/change/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    change<TData>(eventData: TData,\n                  handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'change\'>): this;\n    /**\n     * Bind an event handler to the "change" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/change/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>change demo</title>\n  <style>\n  div {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<select name="sweets" multiple="multiple">\n  <option>Chocolate</option>\n  <option selected="selected">Candy</option>\n  <option>Taffy</option>\n  <option selected="selected">Caramel</option>\n  <option>Fudge</option>\n  <option>Cookie</option>\n</select>\n<div></div>\n​\n<script>\n$( "select" )\n  .change(function () {\n    var str = "";\n    $( "select option:selected" ).each(function() {\n      str += $( this ).text() + " ";\n    });\n    $( "div" ).text( str );\n  })\n  .change();\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To add a validity test to all text input elements:\n```javascript\n$( "input[type=\'text\']" ).change(function() {\n  // Check input( $( this ).val() ) for validity here\n});\n```\n     */\n    change(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'change\'> |\n                     false): this;\n    /**\n     * Get the children of each element in the set of matched elements, optionally filtered by a selector.\n     * @param selector A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/children/ }\\`\n     * @since 1.0\n     * @example ​ ````Find all children of the clicked element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>children demo</title>\n  <style>\n  body {\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  div {\n    width: 130px;\n    height: 82px;\n    margin: 10px;\n    float: left;\n    border: 1px solid blue;\n    padding: 4px;\n  }\n  #container {\n    width: auto;\n    height: 105px;\n    margin: 0;\n    float: none;\n    border: none;\n  }\n  .hilite {\n    border-color: red;\n  }\n  #results {\n    display: block;\n    color: red;\n  }\n  p, span, em, a, b, button {\n    border: 1px solid transparent;\n  }\n  p {\n    margin: 10px;\n  }\n  span {\n    color: blue;\n  }\n  input {\n    width: 100px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="container">\n  <div>\n    <p>This <span>is the <em>way</em> we</span>\n      write <em>the</em> demo,</p>\n  </div>\n​\n  <div>\n    <a href="#"><b>w</b>rit<b>e</b></a> the <span>demo,</span> <button>write\n    the</button> demo,\n  </div>\n​\n  <div>\n    This <span>the way we <em>write</em> the <em>demo</em> so</span>\n    <input type="text" value="early"> in\n  </div>\n​\n  <p>\n    <span>t</span>he <span>m</span>orning.\n    <span id="results">Found <span>0</span> children in <span>TAG</span>.</span>\n  </p>\n</div>\n​\n<script>\n$( "#container" ).click(function ( event ) {\n  $( "*" ).removeClass( "hilite" );\n  var kids = $( event.target ).children();\n  var len = kids.addClass( "hilite" ).length;\n​\n  $( "#results span:first" ).text( len );\n  $( "#results span:last" ).text( event.target.tagName );\n​\n  event.preventDefault();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Find all children of each div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>children demo</title>\n  <style>\n  body {\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  span {\n    color: blue;\n  }\n  p {\n    margin: 5px 0;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello (this is a paragraph)</p>\n​\n<div><span>Hello Again (this span is a child of the a div)</span></div>\n<p>And <span>Again</span> (in another paragraph)</p>\n​\n<div>And One Last <span>Time</span> (most text directly in a div)</div>\n​\n<script>\n$( "div" ).children().css( "border-bottom", "3px double red" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Find all children with a class &quot;selected&quot; of each div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>children demo</title>\n  <style>\n  body {\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  p {\n    margin: 5px 0;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>\n  <span>Hello</span>\n  <p class="selected">Hello Again</p>\n  <div class="selected">And Again</div>\n  <p>And One Last Time</p>\n</div>\n​\n<script>\n$( "div" ).children( ".selected" ).css( "color", "blue" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    children(selector?: JQuery.Selector): this;\n    /**\n     * Remove from the queue all items that have not yet been run.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @see \\`{@link https://api.jquery.com/clearQueue/ }\\`\n     * @since 1.4\n     * @example ​ ````Empty the queue.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>clearQueue demo</title>\n  <style>\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="start">Start</button>\n<button id="stop">Stop</button>\n<div></div>\n​\n<script>\n$( "#start" ).click(function() {\n  var myDiv = $( "div" );\n  myDiv.show( "slow" );\n  myDiv.animate({\n    left:"+=200"\n  }, 5000 );\n​\n  myDiv.queue(function() {\n    var that = $( this );\n    that.addClass( "newcolor" );\n    that.dequeue();\n  });\n​\n  myDiv.animate({\n    left:"-=200"\n  }, 1500 );\n  myDiv.queue(function() {\n    var that = $( this );\n    that.removeClass( "newcolor" );\n    that.dequeue();\n  });\n  myDiv.slideUp();\n});\n​\n$( "#stop" ).click(function() {\n  var myDiv = $( "div" );\n  myDiv.clearQueue();\n  myDiv.stop();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    clearQueue(queueName?: string): this;\n    /**\n     * Bind an event handler to the "click" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/click/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    click<TData>(eventData: TData,\n                 handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'click\'>): this;\n    /**\n     * Bind an event handler to the "click" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/click/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Hide paragraphs on a page when they are clicked:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>click demo</title>\n  <style>\n  p {\n    color: red;\n    margin: 5px;\n    cursor: pointer;\n  }\n  p:hover {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>First Paragraph</p>\n<p>Second Paragraph</p>\n<p>Yet one more Paragraph</p>\n​\n<script>\n$( "p" ).click(function() {\n  $( this ).slideUp();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Trigger the click event on all of the paragraphs on the page:\n```javascript\n$( "p" ).click();\n```\n     */\n    click(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'click\'> |\n                    false): this;\n    /**\n     * Create a deep copy of the set of matched elements.\n     * @param withDataAndEvents A Boolean indicating whether event handlers and data should be copied along with the elements. The\n     *                          default value is false. *In jQuery 1.5.0 the default value was incorrectly true; it was changed back\n     *                          to false in 1.5.1 and up.\n     * @param deepWithDataAndEvents A Boolean indicating whether event handlers and data for all children of the cloned element should\n     *                              be copied. By default its value matches the first argument\'s value (which defaults to false).\n     * @see \\`{@link https://api.jquery.com/clone/ }\\`\n     * @since 1.0\n     * @since 1.5\n     * @example ​ ````Clones all b elements (and selects the clones) and prepends them to all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>clone demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<b>Hello</b><p>, how are you?</p>\n​\n<script>\n$( "b" ).clone().prependTo( "p" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    clone(withDataAndEvents?: boolean, deepWithDataAndEvents?: boolean): this;\n    /**\n     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n     * @param selector A string containing a selector expression to match elements against.\n     * @param context A DOM element within which a matching element may be found.\n     * @see \\`{@link https://api.jquery.com/closest/ }\\`\n     * @since 1.4\n     */\n    closest(selector: JQuery.Selector, context: Element): this;\n    /**\n     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n     * @param selector_selection_element _&#x40;param_ `selector_selection_element`\n     * <br>\n     * * `selector` — A string containing a selector expression to match elements against. <br>\n     * * `selection` — A jQuery object to match elements against. <br>\n     * * `element` — An element to match elements against.\n     * @see \\`{@link https://api.jquery.com/closest/ }\\`\n     * @since 1.3\n     * @since 1.6\n     * @example ​ ````Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>closest demo</title>\n  <style>\n  li {\n    margin: 3px;\n    padding: 3px;\n    background: #EEEEEE;\n  }\n  li.highlight {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li><b>Click me!</b></li>\n  <li>You can also <b>Click me!</b></li>\n</ul>\n​\n<script>\n$( document ).on( "click", function( event ) {\n  $( event.target ).closest( "li" ).toggleClass( "highlight" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>closest demo</title>\n  <style>\n  li {\n    margin: 3px;\n    padding: 3px;\n    background: #EEEEEE;\n  }\n  li.highlight {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li><b>Click me!</b></li>\n  <li>You can also <b>Click me!</b></li>\n</ul>\n​\n<script>\nvar listElements = $( "li" ).css( "color", "blue" );\n$( document ).on( "click", function( event ) {\n  $( event.target ).closest( listElements ).toggleClass( "highlight" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    closest(selector_selection_element: JQuery.Selector | Element | JQuery): this;\n    /**\n     * Get the children of each element in the set of matched elements, including text and comment nodes.\n     * @see \\`{@link https://api.jquery.com/contents/ }\\`\n     * @since 1.2\n     * @example ​ ````Find all the text nodes inside a paragraph and wrap them with a bold tag.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>contents demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello <a href="https://johnresig.com/">John</a>, how are you doing?</p>\n​\n<script>\n$( "p" )\n  .contents()\n  .filter(function(){\n    return this.nodeType !== 1;\n  })\n  .wrap( "<b></b>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the background color of links inside of an iframe.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>contents demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<iframe src="https://api.jquery.com/" width="80%" height="600" id="frameDemo"></iframe>\n​\n<script>\n$( "#frameDemo" ).contents().find( "a" ).css( "background-color", "#BADA55" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    contents(): JQuery<TElement | Text | Comment | Document>;\n    /**\n     * Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/contextmenu/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    contextmenu<TData>(eventData: TData,\n                       handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'contextmenu\'>): this;\n    /**\n     * Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/contextmenu/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````To show a &quot;Hello World!&quot; alert box when the contextmenu event is triggered on a paragraph on the page:\n```javascript\n$( "p" ).contextmenu(function() {\n  alert( "Hello World!" );\n});\n```\n     * @example ​ ````Right click to toggle background color.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>contextmenu demo</title>\n  <style>\n  div {\n    background: blue;\n    color: white;\n    height: 100px;\n    width: 150px;\n }\n  div.contextmenu {\n    background: yellow;\n    color: black;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<span>Right click the block</span>\n​\n<script>\nvar div = $( "div:first" );\ndiv.contextmenu(function() {\n  div.toggleClass( "contextmenu" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    contextmenu(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'contextmenu\'> |\n                          false): this;\n    /**\n     * Set one or more CSS properties for the set of matched elements.\n     * @param propertyName A CSS property name.\n     * @param value_function _&#x40;param_ `value_function`\n     * <br>\n     * * `value` — A value to set for the property. <br>\n     * * `function` — A function returning the value to set. `this` is the current element. Receives the index position of\n     *                the element in the set and the old value as arguments.\n     * @see \\`{@link https://api.jquery.com/css/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @example ​ ````Change the color of any paragraph to red on mouseover event.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>css demo</title>\n  <style>\n  p {\n    color: blue;\n    width: 200px;\n    font-size: 14px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n  <p>Just roll the mouse over me.</p>\n​\n  <p>Or me to see a color change.</p>\n​\n<script>\n$( "p" ).on( "mouseover", function() {\n  $( this ).css( "color", "red" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Increase the width of #box by 200 pixels the first time it is clicked.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>css demo</title>\n  <style>\n  #box {\n    background: black;\n    color: snow;\n    width: 100px;\n    padding: 10px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="box">Click me to grow</div>\n​\n<script>\n$( "#box" ).one( "click", function() {\n  $( this ).css( "width", "+=200" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Highlight a clicked word in the paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>css demo</title>\n  <style>\n  p {\n    color: blue;\n    font-weight: bold;\n    cursor: pointer;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  Once upon a time there was a man\n  who lived in a pizza parlor. This\n  man just loved pizza and ate it all\n  the time.  He went on to be the\n  happiest man in the world.  The end.\n</p>\n​\n<script>\nvar words = $( "p" ).first().text().split( /\\s+/ );\nvar text = words.join( "</span> <span>" );\n$( "p" ).first().html( "<span>" + text + "</span>" );\n$( "span" ).on( "click", function() {\n  $( this ).css( "background-color", "yellow" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    css(propertyName: string,\n        value_function: string | number | ((this: TElement, index: number, value: string) => string | number | void | undefined)): this;\n    /**\n     * Set one or more CSS properties for the set of matched elements.\n     * @param properties An object of property-value pairs to set.\n     * @see \\`{@link https://api.jquery.com/css/ }\\`\n     * @since 1.0\n     * @example ​ ````Change the font weight and background color on mouseenter and mouseleave.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>css demo</title>\n  <style>\n  p {\n    color: green;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Move the mouse over a paragraph.</p>\n<p>Like this one or the one above.</p>\n​\n<script>\n$( "p" )\n  .on( "mouseenter", function() {\n    $( this ).css({\n      "background-color": "yellow",\n      "font-weight": "bolder"\n    });\n  })\n  .on( "mouseleave", function() {\n    var styles = {\n      backgroundColor : "#ddd",\n      fontWeight: ""\n    };\n    $( this ).css( styles );\n  });\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Increase the size of a div when you click it.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>css demo</title>\n  <style>\n  div {\n    width: 20px;\n    height: 15px;\n    background-color: #f33;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>click</div>\n<div>click</div>\n​\n<script>\n$( "div" ).on( "click", function() {\n  $( this ).css({\n    width: function( index, value ) {\n      return parseFloat( value ) * 1.2;\n    },\n    height: function( index, value ) {\n      return parseFloat( value ) * 1.2;\n    }\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    css(properties: JQuery.PlainObject<string | number | ((this: TElement, index: number, value: string) => string | number | void | undefined)>): this;\n    /**\n     * Get the computed style properties for the first element in the set of matched elements.\n     * @param propertyName A CSS property.\n     * @see \\`{@link https://api.jquery.com/css/ }\\`\n     * @since 1.0\n     * @example ​ ````Get the background color of a clicked div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>css demo</title>\n  <style>\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<span id="result">&nbsp;</span>\n<div style="background-color:blue;"></div>\n<div style="background-color:rgb(15,99,30);"></div>\n<div style="background-color:#123456;"></div>\n<div style="background-color:#f11;"></div>\n​\n<script>\n$( "div" ).click(function() {\n  var color = $( this ).css( "background-color" );\n  $( "#result" ).html( "That div is <span style=\'color:" +\n    color + ";\'>" + color + "</span>." );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    css(propertyName: string): string;\n    /**\n     * Get the computed style properties for the first element in the set of matched elements.\n     * @param propertyNames An array of one or more CSS properties.\n     * @see \\`{@link https://api.jquery.com/css/ }\\`\n     * @since 1.9\n     * @example ​ ````Get the width, height, text color, and background color of a clicked div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>css demo</title>\n  <style>\n  div {\n    height: 50px;\n    margin: 5px;\n    padding: 5px;\n    float: left;\n  }\n  #box1 {\n    width: 50px;\n    color: yellow;\n    background-color: blue;\n  }\n  #box2 {\n    width: 80px;\n    color: rgb(255, 255, 255);\n    background-color: rgb(15, 99, 30);\n  }\n  #box3 {\n    width: 40px;\n    color: #fcc;\n    background-color: #123456;\n  }\n  #box4 {\n    width: 70px;\n    background-color: #f11;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p id="result">&nbsp;</p>\n<div id="box1">1</div>\n<div id="box2">2</div>\n<div id="box3">3</div>\n<div id="box4">4</div>\n​\n<script>\n$( "div" ).click(function() {\n  var html = [ "The clicked div has the following styles:" ];\n​\n  var styleProps = $( this ).css([\n    "width", "height", "color", "background-color"\n  ]);\n  $.each( styleProps, function( prop, value ) {\n    html.push( prop + ": " + value );\n  });\n​\n  $( "#result" ).html( html.join( "<br>" ) );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    css(propertyNames: string[]): JQuery.PlainObject<string>;\n    /**\n     * Store arbitrary data associated with the matched elements.\n     * @param key A string naming the piece of data to set.\n     * @param value The new data value; this can be any Javascript type except `undefined`.\n     * @see \\`{@link https://api.jquery.com/data/ }\\`\n     * @since 1.2.3\n     * @example ​ ````Store then retrieve a value from the div element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>data demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>\n  The values stored were\n  <span></span>\n  and\n  <span></span>\n</div>\n​\n<script>\n$( "div" ).data( "test", { first: 16, last: "pizza!" } );\n$( "span:first" ).text( $( "div" ).data( "test" ).first );\n$( "span:last" ).text( $( "div" ).data( "test" ).last );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    data(key: string, value: string | number | boolean | symbol | object | null): this;\n    /**\n     * Store arbitrary data associated with the matched elements.\n     * @param obj An object of key-value pairs of data to update.\n     * @see \\`{@link https://api.jquery.com/data/ }\\`\n     * @since 1.4.3\n     */\n    data(obj: JQuery.PlainObject): this;\n    /**\n     * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.\n     * @param key Name of the data stored.\n     * @param value `undefined` is not recognized as a data value. Calls such as `.data( "name", undefined )`\n     *              will return the jQuery object that it was called on, allowing for chaining.\n     * @see \\`{@link https://api.jquery.com/data/ }\\`\n     * @since 1.2.3\n     */\n    // `unified-signatures` is disabled so that behavior when passing `undefined` to `value` can be documented. Unifying the signatures\n    // results in potential confusion for users from an unexpected parameter.\n    // tslint:disable-next-line:unified-signatures\n    data(key: string, value: undefined): any;\n    /**\n     * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.\n     * @param key Name of the data stored.\n     * @see \\`{@link https://api.jquery.com/data/ }\\`\n     * @since 1.2.3\n     * @example ​ ````Get the data named &quot;blah&quot; stored at for an element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>data demo</title>\n  <style>\n  div {\n    margin: 5px;\n    background: yellow;\n  }\n  button {\n    margin: 5px;\n    font-size: 14px;\n  }\n  p {\n    margin: 5px;\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>A div</div>\n<button>Get "blah" from the div</button>\n<button>Set "blah" to "hello"</button>\n<button>Set "blah" to 86</button>\n<button>Remove "blah" from the div</button>\n<p>The "blah" value of this div is <span>?</span></p>\n​\n<script>\n$( "button" ).click(function() {\n  var value;\n​\n  switch ( $( "button" ).index( this ) ) {\n    case 0 :\n      value = $( "div" ).data( "blah" );\n      break;\n    case 1 :\n      $( "div" ).data( "blah", "hello" );\n      value = "Stored!";\n      break;\n    case 2 :\n      $( "div" ).data( "blah", 86 );\n      value = "Stored!";\n      break;\n    case 3 :\n      $( "div" ).removeData( "blah" );\n      value = "Removed!";\n      break;\n  }\n​\n  $( "span" ).text( "" + value );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    data(key: string): any;\n    /**\n     * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.\n     * @see \\`{@link https://api.jquery.com/data/ }\\`\n     * @since 1.4\n     */\n    data(): JQuery.PlainObject;\n    /**\n     * Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/dblclick/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    dblclick<TData>(eventData: TData,\n                    handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'dblclick\'>): this;\n    /**\n     * Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/dblclick/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````To bind a &quot;Hello World!&quot; alert box to the dblclick event on every paragraph on the page:\n```javascript\n$( "p" ).dblclick(function() {\n  alert( "Hello World!" );\n});\n```\n     * @example ​ ````Double click to toggle background color.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>dblclick demo</title>\n  <style>\n  div {\n    background: blue;\n    color: white;\n    height: 100px;\n    width: 150px;\n }\n  div.dbl {\n    background: yellow;\n    color: black;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<span>Double click the block</span>\n​\n<script>\nvar divdbl = $( "div:first" );\ndivdbl.dblclick(function() {\n  divdbl.toggleClass( "dbl" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    dblclick(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'dblclick\'> |\n                       false): this;\n    /**\n     * Set a timer to delay execution of subsequent items in the queue.\n     * @param duration An integer indicating the number of milliseconds to delay execution of the next item in the queue.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @see \\`{@link https://api.jquery.com/delay/ }\\`\n     * @since 1.4\n     * @example ​ ````Animate the hiding and showing of two divs, delaying the first before showing it.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>delay demo</title>\n  <style>\n  div {\n    position: absolute;\n    width: 60px;\n    height: 60px;\n    float: left;\n  }\n  .first {\n    background-color: #3f3;\n    left: 0;\n  }\n  .second {\n    background-color: #33f;\n    left: 80px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button>Run</button></p>\n<div class="first"></div>\n<div class="second"></div>\n​\n<script>\n$( "button" ).click(function() {\n  $( "div.first" ).slideUp( 300 ).delay( 800 ).fadeIn( 400 );\n  $( "div.second" ).slideUp( 300 ).fadeIn( 400 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    delay(duration: JQuery.Duration, queueName?: string): this;\n    /**\n     * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.\n     * @param selector A selector to filter the elements that trigger the event.\n     * @param eventType A string containing one or more space-separated JavaScript event types, such as "click" or\n     *                  "keydown," or custom event names.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/delegate/ }\\`\n     * @since 1.4.2\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link on }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     */\n    delegate<TType extends string,\n             TData>(\n        selector: JQuery.Selector,\n        eventType: TType,\n        eventData: TData,\n        handler: JQuery.TypeEventHandler<TElement, TData, any, any, TType>\n    ): this;\n    /**\n     * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.\n     * @param selector A selector to filter the elements that trigger the event.\n     * @param eventType A string containing one or more space-separated JavaScript event types, such as "click" or\n     *                  "keydown," or custom event names.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/delegate/ }\\`\n     * @since 1.4.2\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link on }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     * @example ​ ````Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>delegate demo</title>\n  <style>\n  p {\n    background: yellow;\n    font-weight: bold;\n    cursor: pointer;\n    padding: 5px;\n  }\n  p.over {\n    background: #ccc;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Click me!</p>\n​\n<span></span>\n​\n<script>\n$( "body" ).delegate( "p", "click", function() {\n  $( this ).after( "<p>Another paragraph!</p>" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To display each paragraph&#39;s text in an alert box whenever it is clicked:\n```javascript\n$( "body" ).delegate( "p", "click", function() {\n  alert( $( this ).text() );\n});\n```\n     * @example ​ ````To cancel a default action and prevent it from bubbling up, return false:\n```javascript\n$( "body" ).delegate( "a", "click", function() {\n  return false;\n});\n```\n     * @example ​ ````To cancel only the default action by using the preventDefault method.\n```javascript\n$( "body" ).delegate( "a", "click", function( event ) {\n  event.preventDefault();\n});\n```\n     * @example ​ ````Can bind custom events too.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>delegate demo</title>\n  <style>\n  p {\n    color: red;\n  }\n  span {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Has an attached custom event.</p>\n<button>Trigger custom event</button>\n<span style="display:none;"></span>\n​\n<script>\n$( "body" ).delegate( "p", "myCustomEvent", function( e, myName, myValue ) {\n  $( this ).text( "Hi there!" );\n  $( "span" )\n    .stop()\n    .css( "opacity", 1 )\n    .text( "myName = " + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n});\n$( "button" ).click(function() {\n  $( "p" ).trigger( "myCustomEvent" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    delegate<TType extends string>(\n        selector: JQuery.Selector,\n        eventType: TType,\n        handler: JQuery.TypeEventHandler<TElement, undefined, any, any, TType> |\n                 false\n    ): this;\n    /**\n     * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.\n     * @param selector A selector to filter the elements that trigger the event.\n     * @param events A plain object of one or more event types and functions to execute for them.\n     * @see \\`{@link https://api.jquery.com/delegate/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link on }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     */\n    delegate(selector: JQuery.Selector,\n             events: JQuery.TypeEventHandlers<TElement, undefined, any, any>\n    ): this;\n    /**\n     * Execute the next function on the queue for the matched elements.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @see \\`{@link https://api.jquery.com/dequeue/ }\\`\n     * @since 1.2\n     * @example ​ ````Use dequeue to end a custom queue function which allows the queue to keep going.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>dequeue demo</title>\n  <style>\n  div {\n    margin: 3px;\n    width: 50px;\n    position: absolute;\n    height: 50px;\n    left: 10px;\n    top: 30px;\n    background-color: yellow;\n  }\n  div.red {\n    background-color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Start</button>\n<div></div>\n​\n<script>\n$( "button" ).click(function() {\n  $( "div" )\n    .animate({ left:"+=200px" }, 2000 )\n    .animate({ top:"0px" }, 600 )\n    .queue(function() {\n      $( this ).toggleClass( "red" ).dequeue();\n    })\n    .animate({ left:"10px", top:"30px" }, 700 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    dequeue(queueName?: string): this;\n    /**\n     * Remove the set of matched elements from the DOM.\n     * @param selector A selector expression that filters the set of matched elements to be removed.\n     * @see \\`{@link https://api.jquery.com/detach/ }\\`\n     * @since 1.4\n     * @example ​ ````Detach all paragraphs from the DOM\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>detach demo</title>\n  <style>\n  p {\n    background: yellow;\n    margin: 6px 0;\n  }\n  p.off {\n    background: black;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\nhow are\n<p>you?</p>\n<button>Attach/detach paragraphs</button>\n​\n<script>\n$( "p" ).click(function() {\n  $( this ).toggleClass( "off" );\n});\nvar p;\n$( "button" ).click(function() {\n  if ( p ) {\n    p.appendTo( "body" );\n    p = null;\n  } else {\n    p = $( "p" ).detach();\n  }\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    detach(selector?: JQuery.Selector): this;\n    /**\n     * Iterate over a jQuery object, executing a function for each matched element.\n     * @param funсtion A function to execute for each matched element.\n     * @see \\`{@link https://api.jquery.com/each/ }\\`\n     * @since 1.0\n     * @example ​ ````Iterate over three divs and sets their color property.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>each demo</title>\n  <style>\n  div {\n    color: red;\n    text-align: center;\n    cursor: pointer;\n    font-weight: bolder;\n    width: 300px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>Click here</div>\n<div>to iterate through</div>\n<div>these divs.</div>\n​\n<script>\n$( document.body ).click(function() {\n  $( "div" ).each(function( i ) {\n    if ( this.style.color !== "blue" ) {\n      this.style.color = "blue";\n    } else {\n      this.style.color = "";\n    }\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To access a jQuery object instead of the regular DOM element, use $( this ). For example:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>each demo</title>\n  <style>\n  ul {\n    font-size: 18px;\n    margin: 0;\n  }\n  span {\n    color: blue;\n    text-decoration: underline;\n    cursor: pointer;\n  }\n  .example {\n    font-style: italic;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nTo do list: <span>(click here to change)</span>\n<ul>\n  <li>Eat</li>\n  <li>Sleep</li>\n  <li>Be merry</li>\n</ul>\n​\n<script>\n$( "span" ).click(function() {\n  $( "li" ).each(function() {\n    $( this ).toggleClass( "example" );\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Use return false to break out of each() loops early.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>each demo</title>\n  <style>\n  div {\n    width: 40px;\n    height: 40px;\n    margin: 5px;\n    float: left;\n    border: 2px blue solid;\n    text-align: center;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Change colors</button>\n<span></span>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div id="stop">Stop here</div>\n<div></div>\n<div></div>\n<div></div>\n​\n<script>\n$( "button" ).click(function() {\n  $( "div" ).each(function( index, element ) {\n    // element == this\n    $( element ).css( "backgroundColor", "yellow" );\n    if ( $( this ).is( "#stop" ) ) {\n      $( "span" ).text( "Stopped at div index #" + index );\n      return false;\n    }\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    each(funсtion: (this: TElement, index: number, element: TElement) => void | false): this;\n    /**\n     * Remove all child nodes of the set of matched elements from the DOM.\n     * @see \\`{@link https://api.jquery.com/empty/ }\\`\n     * @since 1.0\n     * @example ​ ````Removes all child nodes (including text nodes) from all paragraphs\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>empty demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  Hello, <span>Person</span> <em>and person</em>.\n</p>\n​\n<button>Call empty() on above paragraph</button>\n​\n<script>\n$( "button" ).click(function() {\n  $( "p" ).empty();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    empty(): this;\n    /**\n     * End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.\n     * @see \\`{@link https://api.jquery.com/end/ }\\`\n     * @since 1.0\n     * @example ​ ````Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>end demo</title>\n  <style>\n  p, div {\n    margin: 1px;\n    padding: 1px;\n    font-weight: bold;\n    font-size: 16px;\n  }\n  div {\n    color: blue;\n  }\n  b {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  Hi there <span>how</span> are you <span>doing</span>?\n</p>\n​\n<p>\n  This <span>span</span> is one of\n  several <span>spans</span> in this\n  <span>sentence</span>.\n</p>\n​\n<div>\n  Tags in jQuery object initially: <b></b>\n</div>\n​\n<div>\n  Tags in jQuery object after find: <b></b>\n</div>\n​\n<div>\n  Tags in jQuery object after end: <b></b>\n</div>\n​\n<script>\njQuery.fn.showTags = function( n ) {\n  var tags = this.map(function() {\n    return this.tagName;\n  })\n  .get()\n  .join( ", " );\n  $( "b:eq( " + n + " )" ).text( tags );\n  return this;\n};\n​\n$( "p" )\n  .showTags( 0 )\n  .find( "span" )\n    .showTags( 1 )\n    .css( "background", "yellow" )\n  .end()\n  .showTags( 2 )\n  .css( "font-style", "italic" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>end demo</title>\n  <style>\n  p {\n    margin: 10px;\n    padding: 10px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><span>Hello</span>, how are you?</p>\n​\n<script>\n$( "p" )\n  .find( "span" )\n  .end()\n  .css( "border", "2px red solid" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    end(): this;\n    /**\n     * Reduce the set of matched elements to the one at the specified index.\n     * @param index An integer indicating the 0-based position of the element.\n     *              An integer indicating the position of the element, counting backwards from the last element in the set.\n     * @see \\`{@link https://api.jquery.com/eq/ }\\`\n     * @since 1.1.2\n     * @since 1.4\n     * @example ​ ````Turn the div with index 2 blue by adding an appropriate class.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>eq demo</title>\n  <style>\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 10px;\n    float: left;\n    border: 2px solid blue;\n  }\n  .blue {\n    background: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n​\n<script>\n$( "body" ).find( "div" ).eq( 2 ).addClass( "blue" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    eq(index: number): this;\n    /**\n     * Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.\n     * @param obj An object to merge onto the jQuery prototype.\n     * @see \\`{@link https://api.jquery.com/jQuery.fn.extend/ }\\`\n     * @since 1.0\n     * @example ​ ````Add two methods to the jQuery prototype ($.fn) object and then use one of them.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.fn.extend demo</title>\n  <style>\n  label {\n    display: block;\n    margin: .5em;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<label><input type="checkbox" name="foo"> Foo</label>\n<label><input type="checkbox" name="bar"> Bar</label>\n​\n<script>\njQuery.fn.extend({\n  check: function() {\n    return this.each(function() {\n      this.checked = true;\n    });\n  },\n  uncheck: function() {\n    return this.each(function() {\n      this.checked = false;\n    });\n  }\n});\n​\n// Use the newly created .check() method\n$( "input[type=\'checkbox\']" ).check();\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend(obj: object): this;\n    /**\n     * Display the matched elements by fading them to opaque.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/fadeIn/ }\\`\n     * @since 1.4.3\n     */\n    fadeIn(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;\n    /**\n     * Display the matched elements by fading them to opaque.\n     * @param duration_easing _&#x40;param_ `duration_easing`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/fadeIn/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>fadeIn demo</title>\n  <style>\n  p {\n    position: relative;\n    width: 400px;\n    height: 90px;\n  }\n  div {\n    position: absolute;\n    width: 400px;\n    height: 65px;\n    font-size: 36px;\n    text-align: center;\n    color: yellow;\n    background: red;\n    padding-top: 25px;\n    top: 0;\n    left: 0;\n    display: none;\n  }\n  span {\n    display: none;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  Let it be known that the party of the first part\n  and the party of the second part are henceforth\n  and hereto directed to assess the allegations\n  for factual correctness... (<a href="#">click!</a>)\n  <div><span>CENSORED!</span></div>\n</p>\n​\n<script>\n$( "a" ).click(function() {\n  $( "div" ).fadeIn( 3000, function() {\n    $( "span" ).fadeIn( 100 );\n  });\n  return false;\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    fadeIn(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;\n    /**\n     * Display the matched elements by fading them to opaque.\n     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>\n     * * `options` — A map of additional options to pass to the method.\n     * @see \\`{@link https://api.jquery.com/fadeIn/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>fadeIn demo</title>\n  <style>\n  span {\n    color: red;\n    cursor: pointer;\n  }\n  div {\n    margin: 3px;\n    width: 80px;\n    display: none;\n    height: 80px;\n    float: left;\n  }\n  #one {\n    background: #f00;\n  }\n  #two {\n    background: #0f0;\n  }\n  #three {\n    background: #00f;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<span>Click here...</span>\n<div id="one"></div>\n<div id="two"></div>\n<div id="three"></div>\n​\n<script>\n$( document.body ).click(function() {\n  $( "div:hidden:first" ).fadeIn( "slow" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    fadeIn(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;\n    /**\n     * Hide the matched elements by fading them to transparent.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/fadeOut/ }\\`\n     * @since 1.4.3\n     * @example ​ ````Fades out two divs, one with a &quot;linear&quot; easing and one with the default, &quot;swing,&quot; easing.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>fadeOut demo</title>\n  <style>\n  .box,\n  button {\n    float: left;\n    margin: 5px 10px 5px 0;\n  }\n  .box {\n    height: 80px;\n    width: 80px;\n    background: #090;\n  }\n  #log {\n    clear: left;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="btn1">fade out</button>\n<button id="btn2">show</button>\n​\n<div id="log"></div>\n​\n<div id="box1" class="box">linear</div>\n<div id="box2" class="box">swing</div>\n​\n<script>\n$( "#btn1" ).click(function() {\n  function complete() {\n    $( "<div>" ).text( this.id ).appendTo( "#log" );\n  }\n  $( "#box1" ).fadeOut( 1600, "linear", complete );\n  $( "#box2" ).fadeOut( 1600, complete );\n});\n​\n$( "#btn2" ).click(function() {\n  $( "div" ).show();\n  $( "#log" ).empty();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    fadeOut(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;\n    /**\n     * Hide the matched elements by fading them to transparent.\n     * @param duration_easing _&#x40;param_ `duration_easing`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/fadeOut/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Fades out spans in one section that you click on.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>fadeOut demo</title>\n  <style>\n  span {\n    cursor: pointer;\n  }\n  span.hilite {\n    background: yellow;\n  }\n  div {\n    display: inline;\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<h3>Find the modifiers - <div></div></h3>\n<p>\n  If you <span>really</span> want to go outside\n  <span>in the cold</span> then make sure to wear\n  your <span>warm</span> jacket given to you by\n  your <span>favorite</span> teacher.\n</p>\n​\n<script>\n$( "span" ).click(function() {\n  $( this ).fadeOut( 1000, function() {\n    $( "div" ).text( "\'" + $( this ).text() + "\' has faded!" );\n    $( this ).remove();\n  });\n});\n$( "span" ).hover(function() {\n  $( this ).addClass( "hilite" );\n}, function() {\n  $( this ).removeClass( "hilite" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    fadeOut(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;\n    /**\n     * Hide the matched elements by fading them to transparent.\n     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>\n     * * `options` — A map of additional options to pass to the method.\n     * @see \\`{@link https://api.jquery.com/fadeOut/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Animates all paragraphs to fade out, completing the animation within 600 milliseconds.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>fadeOut demo</title>\n  <style>\n  p {\n    font-size: 150%;\n    cursor: pointer;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  If you click on this paragraph\n  you\'ll see it just fade away.\n</p>\n​\n<script>\n$( "p" ).click(function() {\n  $( "p" ).fadeOut( "slow" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    fadeOut(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;\n    /**\n     * Adjust the opacity of the matched elements.\n     * @param duration A string or number determining how long the animation will run.\n     * @param opacity A number between 0 and 1 denoting the target opacity.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/fadeTo/ }\\`\n     * @since 1.4.3\n     */\n    fadeTo(duration: JQuery.Duration, opacity: number, easing: string, complete?: (this: TElement) => void): this;\n    /**\n     * Adjust the opacity of the matched elements.\n     * @param duration A string or number determining how long the animation will run.\n     * @param opacity A number between 0 and 1 denoting the target opacity.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/fadeTo/ }\\`\n     * @since 1.0\n     * @example ​ ````Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>fadeTo demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\nClick this paragraph to see it fade.\n</p>\n​\n<p>\nCompare to this one that won\'t fade.\n</p>\n​\n<script>\n$( "p:first" ).click(function() {\n  $( this ).fadeTo( "slow", 0.33 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Fade div to a random opacity on each click, completing the animation within 200 milliseconds.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>fadeTo demo</title>\n  <style>\n  p {\n    width: 80px;\n    margin: 0;\n    padding: 5px;\n  }\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n  }\n  #one {\n    top: 0;\n    left: 0;\n    background: #f00;\n  }\n  #two {\n    top: 20px;\n    left: 20px;\n    background: #0f0;\n  }\n  #three {\n    top: 40px;\n    left:40px;\n    background:#00f;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>And this is the library that John built...</p>\n​\n<div id="one"></div>\n<div id="two"></div>\n<div id="three"></div>\n​\n<script>\n$( "div" ).click(function() {\n  $( this ).fadeTo( "fast", Math.random() );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Find the right answer! The fade will take 250 milliseconds and change various styles when it completes.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>fadeTo demo</title>\n  <style>\n  div, p {\n    width: 80px;\n    height: 40px;\n    top: 0;\n    margin: 0;\n    position: absolute;\n    padding-top: 8px;\n  }\n  p {\n    background: #fcc;\n    text-align: center;\n  }\n  div {\n    background: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Wrong</p>\n<div></div>\n<p>Wrong</p>\n<div></div>\n<p>Right!</p>\n<div></div>\n​\n<script>\nvar getPos = function( n ) {\n  return (Math.floor( n ) * 90) + "px";\n};\n$( "p" ).each(function( n ) {\n  var r = Math.floor( Math.random() * 3 );\n  var tmp = $( this ).text();\n  $( this ).text( $( "p:eq(" + r + ")" ).text() );\n  $( "p:eq(" + r + ")" ).text( tmp );\n  $( this ).css( "left", getPos( n ) );\n});\n$( "div" )\n  .each(function( n ) {\n    $( this ).css( "left", getPos( n ) );\n  })\n  .css( "cursor", "pointer" )\n  .click( function() {\n    $( this ).fadeTo( 250, 0.25, function() {\n      $( this )\n        .css( "cursor", "" )\n        .prev()\n          .css({\n            "font-weight": "bolder",\n            "font-style": "italic"\n          });\n    });\n  });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    fadeTo(duration: JQuery.Duration, opacity: number, complete?: (this: TElement) => void): this;\n    /**\n     * Display or hide the matched elements by animating their opacity.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/fadeToggle/ }\\`\n     * @since 1.4.4\n     * @example ​ ````Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a &quot;finished&quot; message upon completion.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>fadeToggle demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>fadeToggle p1</button>\n<button>fadeToggle p2</button>\n<p>This paragraph has a slow, linear fade.</p>\n<p>This paragraph has a fast animation.</p>\n<div id="log"></div>\n​\n<script>\n$( "button:first" ).click(function() {\n  $( "p:first" ).fadeToggle( "slow", "linear" );\n});\n$( "button:last" ).click(function() {\n  $( "p:last" ).fadeToggle( "fast", function() {\n    $( "#log" ).append( "<div>finished</div>" );\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    fadeToggle(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;\n    /**\n     * Display or hide the matched elements by animating their opacity.\n     * @param duration_easing _&#x40;param_ `duration_easing`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/fadeToggle/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a &quot;finished&quot; message upon completion.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>fadeToggle demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>fadeToggle p1</button>\n<button>fadeToggle p2</button>\n<p>This paragraph has a slow, linear fade.</p>\n<p>This paragraph has a fast animation.</p>\n<div id="log"></div>\n​\n<script>\n$( "button:first" ).click(function() {\n  $( "p:first" ).fadeToggle( "slow", "linear" );\n});\n$( "button:last" ).click(function() {\n  $( "p:last" ).fadeToggle( "fast", function() {\n    $( "#log" ).append( "<div>finished</div>" );\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    fadeToggle(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;\n    /**\n     * Display or hide the matched elements by animating their opacity.\n     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>\n     * * `options` — A map of additional options to pass to the method.\n     * @see \\`{@link https://api.jquery.com/fadeToggle/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     */\n    fadeToggle(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;\n    /**\n     * Reduce the set of matched elements to those that match the selector or pass the function\'s test.\n     * @param selector_elements_selection_function _&#x40;param_ `selector_elements_selection_function`\n     * <br>\n     * * `selector` — A string containing a selector expression to match the current set of elements against. <br>\n     * * `elements` — One or more DOM elements to match the current set of elements against. <br>\n     * * `selection` — An existing jQuery object to match the current set of elements against. <br>\n     * * `function` — A function used as a test for each element in the set. this is the current DOM element.\n     * @see \\`{@link https://api.jquery.com/filter/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @example ​ ````Change the color of all divs; then add a border to those with a &quot;middle&quot; class.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>filter demo</title>\n  <style>\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    border: 2px white solid;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div class="middle"></div>\n<div class="middle"></div>\n<div class="middle"></div>\n<div class="middle"></div>\n<div></div>\n​\n<script>\n$( "div" )\n  .css( "background", "#c8ebcc" )\n  .filter( ".middle" )\n    .css( "border-color", "red" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of &quot;fourth.&quot;\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>filter demo</title>\n  <style>\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    border: 3px white solid;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="first"></div>\n<div id="second"></div>\n<div id="third"></div>\n<div id="fourth"></div>\n<div id="fifth"></div>\n<div id="sixth"></div>\n​\n<script>\n$( "div" )\n  .css( "background", "#b4b0da" )\n  .filter(function( index ) {\n    return index === 1 || $( this ).attr( "id" ) === "fourth";\n  })\n    .css( "border", "3px double red" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Select all divs and filter the selection with a DOM element, keeping only the one with an id of &quot;unique&quot;.\n```javascript\n$( "div" ).filter( document.getElementById( "unique" ) );\n```\n     * @example ​ ````Select all divs and filter the selection with a jQuery object, keeping only the one with an id of &quot;unique&quot;.\n```javascript\n$( "div" ).filter( $( "#unique" ) );\n```\n     */\n    filter(selector_elements_selection_function:\n        JQuery.Selector |\n        JQuery.TypeOrArray<Element> |\n        JQuery |\n        ((this: TElement, index: number, element: TElement) => boolean)\n    ): this;\n    /**\n     * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.\n     * @param selector_element _&#x40;param_ `selector_element`\n     * <br>\n     * * `selector` — A string containing a selector expression to match elements against. <br>\n     * * `element` — An element or a jQuery object to match elements against.\n     * @see \\`{@link https://api.jquery.com/find/ }\\`\n     * @since 1.0\n     * @since 1.6\n     * @example ​ ````Starts with all paragraphs and searches for descendant span elements, same as $( &quot;p span&quot; )\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>find demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><span>Hello</span>, how are you?</p>\n<p>Me? I\'m <span>good</span>.</p>\n​\n<script>\n$( "p" ).find( "span" ).css( "color", "red" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>find demo</title>\n  <style>\n  span {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><span>Hello</span>, how are you?</p>\n<p>Me? I\'m <span>good</span>.</p>\n<div>Did you <span>eat</span> yet?</div>\n​\n<script>\nvar spans = $( "span" );\n$( "p" ).find( spans ).css( "color", "red" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Add spans around each word then add a hover and italicize words with the letter t.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>find demo</title>\n  <style>\n  p {\n    font-size: 20px;\n    width: 200px;\n    color: blue;\n    font-weight: bold;\n    margin: 0 10px;\n  }\n  .hilite {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  When the day is short\n  find that which matters to you\n  or stop believing\n</p>\n​\n<script>\nvar newText = $( "p" ).text().split( " " ).join( "</span> <span>" );\nnewText = "<span>" + newText + "</span>";\n​\n$( "p" )\n  .html( newText )\n  .find( "span" )\n    .hover(function() {\n      $( this ).addClass( "hilite" );\n    }, function() {\n      $( this ).removeClass( "hilite" );\n    })\n  .end()\n  .find( ":contains(\'t\')" )\n    .css({\n      "font-style": "italic",\n      "font-weight": "bolder"\n    });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    find<K extends keyof HTMLElementTagNameMap>(selector_element: K | JQuery<K>): JQuery<HTMLElementTagNameMap[K]>;\n    find<K extends keyof SVGElementTagNameMap>(selector_element: K | JQuery<K>): JQuery<SVGElementTagNameMap[K]>;\n    find<E extends HTMLElement>(selector_element: JQuery.Selector | Element | E | JQuery<E>): JQuery<E>;\n    /**\n     * Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.\n     * @param queue The name of the queue in which to stop animations.\n     * @see \\`{@link https://api.jquery.com/finish/ }\\`\n     * @since 1.9\n     * @example ​ ````Click the Go button once to start the animation, and then click the other buttons to see how they affect the current and queued animations.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>finish demo</title>\n  <style>\n  .box {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    width: 15px;\n    height: 15px;\n    background: black;\n  }\n  #path {\n    height: 244px;\n    font-size: 70%;\n    border-left: 2px dashed red;\n    border-bottom: 2px dashed green;\n    border-right: 2px dashed blue;\n  }\n  button {\n    width: 12em;\n    display: block;\n    text-align: left;\n    margin: 0 auto;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="box"></div>\n<div id="path">\n  <button id="go">Go</button>\n  <br>\n  <button id="bstt" class="b">.stop( true,true )</button>\n  <button id="bcf" class="b">.clearQueue().finish()</button>\n  <br>\n  <button id="bstf" class="b">.stop( true, false )</button>\n  <button id="bcs" class="b">.clearQueue().stop()</button>\n  <br>\n  <button id="bsff" class="b">.stop( false, false )</button>\n  <button id="bs" class="b">.stop()</button>\n  <br>\n  <button id="bsft" class="b">.stop( false, true )</button>\n  <br>\n  <button id="bf" class="b">.finish()</button>\n</div>\n​\n<script>\nvar horiz = $( "#path" ).width() - 20,\n  vert = $( "#path" ).height() - 20;\n​\nvar btns = {\n  bstt: function() {\n    $( "div.box" ).stop( true, true );\n  },\n  bs: function() {\n    $( "div.box" ).stop();\n  },\n  bsft: function() {\n    $( "div.box" ).stop( false, true );\n  },\n  bf: function() {\n    $( "div.box" ).finish();\n  },\n  bcf: function() {\n    $( "div.box" ).clearQueue().finish();\n  },\n  bsff: function() {\n    $( "div.box" ).stop( false, false );\n  },\n  bstf: function() {\n    $( "div.box" ).stop( true, false );\n  },\n  bcs: function() {\n    $( "div.box" ).clearQueue().stop();\n  }\n};\n​\n$( "button.b" ).on( "click", function() {\n  btns[ this.id ]();\n});\n​\n$( "#go" ).on( "click", function() {\n  $( ".box" )\n    .clearQueue()\n    .stop()\n    .css({\n      left: 10,\n      top: 10\n    })\n    .animate({\n      top: vert\n    }, 3000 )\n    .animate({\n      left: horiz\n    }, 3000 )\n    .animate({\n      top: 10\n    }, 3000 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    finish(queue?: string): this;\n    /**\n     * Reduce the set of matched elements to the first in the set.\n     * @see \\`{@link https://api.jquery.com/first/ }\\`\n     * @since 1.4\n     * @example ​ ````Highlight the first span in a paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>first demo</title>\n  <style>\n  .highlight{\n    background-color: yellow\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  <span>Look:</span>\n  <span>This is some text in a paragraph.</span>\n  <span>This is a note about it.</span>\n</p>\n​\n<script>\n$( "p span" ).first().addClass( "highlight" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    first(): this;\n    /**\n     * Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/focus/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    focus<TData>(eventData: TData,\n                 handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'focus\'>): this;\n    /**\n     * Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/focus/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Fire focus.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>focus demo</title>\n  <style>\n  span {\n    display: none;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><input type="text"> <span>focus fire</span></p>\n<p><input type="password"> <span>focus fire</span></p>\n​\n<script>\n$( "input" ).focus(function() {\n  $( this ).next( "span" ).css( "display", "inline" ).fadeOut( 1000 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To stop people from writing in text input boxes, try:\n```javascript\n$( "input[type=text]" ).focus(function() {\n  $( this ).blur();\n});\n```\n     * @example ​ ````To focus on a login input box with id &#39;login&#39; on page startup, try:\n```javascript\n$( document ).ready(function() {\n  $( "#login" ).focus();\n});\n```\n     */\n    focus(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'focus\'> |\n                    false): this;\n    /**\n     * Bind an event handler to the "focusin" event.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/focusin/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    focusin<TData>(eventData: TData,\n                   handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'focusin\'>): this;\n    /**\n     * Bind an event handler to the "focusin" event.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/focusin/ }\\`\n     * @since 1.4\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Watch for a focus to occur within the paragraphs on the page.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>focusin demo</title>\n  <style>\n  span {\n    display: none;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><input type="text"> <span>focusin fire</span></p>\n<p><input type="password"> <span>focusin fire</span></p>\n​\n<script>\n$( "p" ).focusin(function() {\n  $( this ).find( "span" ).css( "display", "inline" ).fadeOut( 1000 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    focusin(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'focusin\'> |\n                      false): this;\n    /**\n     * Bind an event handler to the "focusout" JavaScript event.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/focusout/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    focusout<TData>(eventData: TData,\n                    handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'focusout\'>): this;\n    /**\n     * Bind an event handler to the "focusout" JavaScript event.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/focusout/ }\\`\n     * @since 1.4\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Watch for a loss of focus to occur inside paragraphs and note the difference between the focusout count and the blur count. (The blur count does not change because those events do not bubble.)\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>focusout demo</title>\n  <style>\n  .inputs {\n    float: left;\n    margin-right: 1em;\n  }\n  .inputs p {\n    margin-top: 0;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="inputs">\n  <p>\n    <input type="text"><br>\n    <input type="text">\n  </p>\n  <p>\n    <input type="password">\n  </p>\n</div>\n<div id="focus-count">focusout fire</div>\n<div id="blur-count">blur fire</div>\n​\n<script>\nvar focus = 0,\n  blur = 0;\n$( "p" )\n  .focusout(function() {\n    focus++;\n    $( "#focus-count" ).text( "focusout fired: " + focus + "x" );\n  })\n  .blur(function() {\n    blur++;\n    $( "#blur-count" ).text( "blur fired: " + blur + "x" );\n  });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    focusout(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'focusout\'> |\n                       false): this;\n    /**\n     * Retrieve one of the elements matched by the jQuery object.\n     * @param index A zero-based integer indicating which element to retrieve.\n     * @see \\`{@link https://api.jquery.com/get/ }\\`\n     * @since 1.0\n     * @example ​ ````Display the tag name of the click element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>get demo</title>\n  <style>\n  span {\n    color: red;\n  }\n  div {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<span>&nbsp;</span>\n<p>In this paragraph is an <span>important</span> section</p>\n<div><input type="text"></div>\n​\n<script>\n$( "*", document.body ).click(function( event ) {\n  event.stopPropagation();\n  var domElement = $( this ).get( 0 );\n  $( "span:first" ).text( "Clicked on - " + domElement.nodeName );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    get(index: number): TElement;\n    /**\n     * Retrieve the elements matched by the jQuery object.\n     * @see \\`{@link https://api.jquery.com/get/ }\\`\n     * @since 1.0\n     * @example ​ ````Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>get demo</title>\n  <style>\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nReversed - <span></span>\n​\n<div>One</div>\n<div>Two</div>\n<div>Three</div>\n​\n<script>\nfunction display( divs ) {\n  var a = [];\n  for ( var i = 0; i < divs.length; i++ ) {\n    a.push( divs[ i ].innerHTML );\n  }\n  $( "span" ).text( a.join(" ") );\n}\ndisplay( $( "div" ).get().reverse() );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    get(): TElement[];\n    /**\n     * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.\n     * @param selector_contained _&#x40;param_ `selector_contained`\n     * <br>\n     * * `selector` — A string containing a selector expression to match elements against. <br>\n     * * `contained` — A DOM element to match elements against.\n     * @see \\`{@link https://api.jquery.com/has/ }\\`\n     * @since 1.4\n     * @example ​ ````Check if an element is inside another.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>has demo</title>\n  <style>\n  .full {\n    border: 1px solid red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul><li>Does the UL contain an LI?</li></ul>\n​\n<script>\n$( "ul" ).append( "<li>" +\n  ( $( "ul" ).has( "li" ).length ? "Yes" : "No" ) +\n  "</li>" );\n$( "ul" ).has( "li" ).addClass( "full" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    has(selector_contained: string | Element): this;\n    /**\n     * Determine whether any of the matched elements are assigned the given class.\n     * @param className The class name to search for.\n     * @see \\`{@link https://api.jquery.com/hasClass/ }\\`\n     * @since 1.2\n     * @example ​ ````Looks for the paragraph that contains &#39;selected&#39; as a class.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>hasClass demo</title>\n  <style>\n  p {\n    margin: 8px;\n    font-size: 16px;\n  }\n  .selected {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>This paragraph is black and is the first paragraph.</p>\n<p class="selected">This paragraph is red and is the second paragraph.</p>\n<div id="result1">First paragraph has selected class: </div>\n<div id="result2">Second paragraph has selected class: </div>\n<div id="result3">At least one paragraph has selected class: </div>\n​\n<script>\n$( "#result1" ).append( $( "p:first" ).hasClass( "selected" ).toString() );\n$( "#result2" ).append( $( "p:last" ).hasClass( "selected" ).toString() );\n$( "#result3" ).append( $( "p" ).hasClass( "selected" ).toString() ) ;\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    hasClass(className: string): boolean;\n    /**\n     * Set the CSS height of every matched element.\n     * @param value_function _&#x40;param_ `value_function`\n     * <br>\n     * * `value` — An integer representing the number of pixels, or an integer with an optional unit of measure\n     *             appended (as a string). <br>\n     * * `function` — A function returning the height to set. Receives the index position of the element in the set and\n     *                the old height as arguments. Within the function, `this` refers to the current element in the set.\n     * @see \\`{@link https://api.jquery.com/height/ }\\`\n     * @since 1.0\n     * @since 1.4.1\n     * @example ​ ````To set the height of each div on click to 30px plus a color change.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>height demo</title>\n  <style>\n  div {\n    width: 50px;\n    height: 70px;\n    float: left;\n    margin: 5px;\n    background: rgb(255,140,0);\n    cursor: pointer;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n​\n<script>\n$( "div" ).one( "click", function() {\n  $( this ).height( 30 ).css({\n    cursor: "auto",\n    backgroundColor: "green"\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    height(value_function: string | number | ((this: TElement, index: number, height: number) => string | number)): this;\n    /**\n     * Get the current computed height for the first element in the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/height/ }\\`\n     * @since 1.0\n     * @example ​ ````Show various heights.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>height demo</title>\n  <style>\n  body {\n    background: yellow;\n  }\n  button {\n    font-size: 12px;\n    margin: 2px;\n  }\n  p {\n    width: 150px;\n    border: 1px red solid;\n  }\n  div {\n    color: red;\n    font-weight: bold;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="getp">Get Paragraph Height</button>\n<button id="getd">Get Document Height</button>\n<button id="getw">Get Window Height</button>\n​\n<div>&nbsp;</div>\n<p>\n  Sample paragraph to test height\n</p>\n​\n<script>\nfunction showHeight( element, height ) {\n  $( "div" ).text( "The height for the " + element + " is " + height + "px." );\n}\n$( "#getp" ).click(function() {\n  showHeight( "paragraph", $( "p" ).height() );\n});\n$( "#getd" ).click(function() {\n  showHeight( "document", $( document ).height() );\n});\n$( "#getw" ).click(function() {\n  showHeight( "window", $( window ).height() );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    height(): number | undefined;\n    /**\n     * Hide the matched elements.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/hide/ }\\`\n     * @since 1.4.3\n     */\n    hide(duration: JQuery.Duration, easing: string, complete: (this: TElement) => void): this;\n    /**\n     * Hide the matched elements.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing_complete _&#x40;param_ `easing_complete`\n     * <br>\n     * * `easing` — A string indicating which easing function to use for the transition. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/hide/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>hide demo</title>\n  <style>\n  span {\n    background: #def3ca;\n    padding: 3px;\n    float: left;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="hider">Hide</button>\n<button id="shower">Show</button>\n<div>\n  <span>Once</span> <span>upon</span> <span>a</span>\n  <span>time</span> <span>there</span> <span>were</span>\n  <span>three</span> <span>programmers...</span>\n</div>\n​\n<script>\n$( "#hider" ).click(function() {\n  $( "span:last-child" ).hide( "fast", function() {\n    // Use arguments.callee so we don\'t need a named function\n    $( this ).prev().hide( "fast", arguments.callee );\n  });\n});\n$( "#shower" ).click(function() {\n  $( "span" ).show( 2000 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>hide demo</title>\n  <style>\n  div {\n    background: #ece023;\n    width: 30px;\n    height: 40px;\n    margin: 2px;\n    float: left;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n​\n<script>\nfor ( var i = 0; i < 5; i++ ) {\n  $( "<div>" ).appendTo( document.body );\n}\n$( "div" ).click(function() {\n  $( this ).hide( 2000, function() {\n    $( this ).remove();\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    hide(duration: JQuery.Duration, easing_complete: string | ((this: TElement) => void)): this;\n    /**\n     * Hide the matched elements.\n     * @param duration_complete_options _&#x40;param_ `duration_complete_options`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>\n     * * `options` — A map of additional options to pass to the method.\n     * @see \\`{@link https://api.jquery.com/hide/ }\\`\n     * @since 1.0\n     * @example ​ ````Hides all paragraphs then the link on click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>hide demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<a href="#">Click to hide me too</a>\n<p>Here is another paragraph</p>\n​\n<script>\n$( "p" ).hide();\n$( "a" ).click(function( event ) {\n  event.preventDefault();\n  $( this ).hide();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>hide demo</title>\n  <style>\n  p {\n    background: #dad;\n    font-weight: bold;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Hide \'em</button>\n<p>Hiya</p>\n<p>Such interesting text, eh?</p>\n​\n<script>\n$( "button" ).click(function() {\n  $( "p" ).hide( "slow" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    hide(duration_complete_options?: JQuery.Duration | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;\n    /**\n     * Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.\n     * @param handlerIn A function to execute when the mouse pointer enters the element.\n     * @param handlerOut A function to execute when the mouse pointer leaves the element.\n     * @see \\`{@link https://api.jquery.com/hover/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated.\n     *\n     * **Cause**: The `.hover()` method is a shorthand for the use of the `mouseover`/`mouseout` events. It is often a poor user interface choice because it does not allow for any small amounts of delay between when the mouse enters or exits an area and when the event fires. This can make it quite difficult to use with UI widgets such as drop-down menus. For more information on the problems of hovering, see the \\`{@link http://cherne.net/brian/resources/jquery.hoverIntent.html hoverIntent plugin}\\`.\n     *\n     * **Solution**: Review uses of `.hover()` to determine if they are appropriate, and consider use of plugins such as `hoverIntent` as an alternative. The direct replacement for `.hover(fn1, fn2)`, is `.on("mouseenter", fn1).on("mouseleave", fn2)`.\n     * @example ​ ````To add a special style to list items that are being hovered over, try:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>hover demo</title>\n  <style>\n  ul {\n    margin-left: 20px;\n    color: blue;\n  }\n  li {\n    cursor: default;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li>Milk</li>\n  <li>Bread</li>\n  <li class="fade">Chips</li>\n  <li class="fade">Socks</li>\n</ul>\n​\n<script>\n$( "li" ).hover(\n  function() {\n    $( this ).append( $( "<span> ***</span>" ) );\n  }, function() {\n    $( this ).find( "span:last" ).remove();\n  }\n);\n​\n$( "li.fade" ).hover(function() {\n  $( this ).fadeOut( 100 );\n  $( this ).fadeIn( 500 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To add a special style to table cells that are being hovered over, try:\n```javascript\n$( "td" ).hover(\n  function() {\n    $( this ).addClass( "hover" );\n  }, function() {\n    $( this ).removeClass( "hover" );\n  }\n);\n```\n     * @example ​ ````To unbind the above example use:\n```javascript\n$( "td" ).off( "mouseenter mouseleave" );\n```\n     */\n    hover(handlerIn: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'mouseenter\'> |\n                     false,\n          handlerOut: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'mouseleave\'> |\n                      false): this;\n    /**\n     * Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.\n     * @param handlerInOut A function to execute when the mouse pointer enters or leaves the element.\n     * @see \\`{@link https://api.jquery.com/hover/ }\\`\n     * @since 1.4\n     * @deprecated ​ Deprecated.\n     *\n     * **Cause**: The `.hover()` method is a shorthand for the use of the `mouseover`/`mouseout` events. It is often a poor user interface choice because it does not allow for any small amounts of delay between when the mouse enters or exits an area and when the event fires. This can make it quite difficult to use with UI widgets such as drop-down menus. For more information on the problems of hovering, see the \\`{@link http://cherne.net/brian/resources/jquery.hoverIntent.html hoverIntent plugin}\\`.\n     *\n     * **Solution**: Review uses of `.hover()` to determine if they are appropriate, and consider use of plugins such as `hoverIntent` as an alternative. The direct replacement for `.hover(fn1, fn2)`, is `.on("mouseenter", fn1).on("mouseleave", fn2)`.\n     * @example ​ ````Slide the next sibling LI up or down on hover, and toggle a class.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>hover demo</title>\n  <style>\n  ul {\n    margin-left: 20px;\n    color: blue;\n  }\n  li {\n    cursor: default;\n  }\n  li.active {\n    background: black;\n    color: white;\n  }\n  span {\n    color:red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li>Milk</li>\n  <li>White</li>\n  <li>Carrots</li>\n  <li>Orange</li>\n  <li>Broccoli</li>\n  <li>Green</li>\n</ul>\n​\n<script>\n$( "li" )\n  .filter( ":odd" )\n    .hide()\n  .end()\n  .filter( ":even" )\n    .hover(function() {\n      $( this )\n        .toggleClass( "active" )\n        .next()\n          .stop( true, true )\n          .slideToggle();\n    });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    hover(handlerInOut: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'mouseenter\' | \'mouseleave\'> |\n                        false): this;\n    /**\n     * Set the HTML contents of each element in the set of matched elements.\n     * @param htmlString_function _&#x40;param_ `htmlString_function`\n     * <br>\n     * * `htmlString` — A string of HTML to set as the content of each matched element. <br>\n     * * `function` — A function returning the HTML content to set. Receives the index position of the element in the set\n     *                and the old HTML value as arguments. jQuery empties the element before calling the function; use the\n     *                oldhtml argument to reference the previous content. Within the function, `this` refers to the current\n     *                element in the set.\n     * @see \\`{@link https://api.jquery.com/html/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @example ​ ````Add some html to each div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>html demo</title>\n  <style>\n  .red {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<span>Hello</span>\n<div></div>\n<div></div>\n<div></div>\n​\n<script>\n$( "div" ).html( "<span class=\'red\'>Hello <b>Again</b></span>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Add some html to each div then immediately do further manipulations to the inserted html.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>html demo</title>\n  <style>\n  div {\n    color: blue;\n    font-size: 18px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div></div>\n<div></div>\n​\n<script>\n$( "div" ).html( "<b>Wow!</b> Such excitement..." );\n$( "div b" )\n  .append( document.createTextNode( "!!!" ) )\n  .css( "color", "red" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    html(htmlString_function: JQuery.htmlString |\n                              JQuery.Node |\n                              ((this: TElement, index: number, oldhtml: JQuery.htmlString) => JQuery.htmlString | JQuery.Node)): this;\n    /**\n     * Get the HTML contents of the first element in the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/html/ }\\`\n     * @since 1.0\n     * @example ​ ````Click a paragraph to convert it from html to text.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>html demo</title>\n  <style>\n  p {\n    margin: 8px;\n    font-size: 20px;\n    color: blue;\n    cursor: pointer;\n  }\n  b {\n    text-decoration: underline;\n  }\n  button {\n    cursor: pointer;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  <b>Click</b> to change the <span id="tag">html</span>\n</p>\n<p>\n  to a <span id="text">text</span> node.\n</p>\n<p>\n  This <button name="nada">button</button> does nothing.\n</p>\n​\n<script>\n$( "p" ).click(function() {\n  var htmlString = $( this ).html();\n  $( this ).text( htmlString );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    html(): string;\n    /**\n     * Search for a given element from among the matched elements.\n     * @param selector_element _&#x40;param_ `selector_element`\n     * <br>\n     * * `selector` — A selector representing a jQuery collection in which to look for an element. <br>\n     * * `element` — The DOM element or first element within the jQuery object to look for.\n     * @see \\`{@link https://api.jquery.com/index/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @example ​ ````On click, returns the index (zero-based) of that div in the page.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>index demo</title>\n  <style>\n  div {\n    background: yellow;\n    margin: 5px;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<span>Click a div!</span>\n<div>First div</div>\n<div>Second div</div>\n<div>Third div</div>\n​\n<script>\n$( "div" ).click(function() {\n  // `this` is the DOM element that was clicked\n  var index = $( "div" ).index( this );\n  $( "span" ).text( "That was div index #" + index );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Returns the index for the element with ID bar.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>index demo</title>\n  <style>\n  div {\n    font-weight: bold;\n    color: #090;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li id="foo">foo</li>\n  <li id="bar">bar</li>\n  <li id="baz">baz</li>\n</ul>\n<div></div>\n​\n<script>\nvar listItem = $( "#bar" );\n$( "div" ).html( "Index: " + $( "li" ).index( listItem ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Returns the index for the first item in the jQuery collection.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>index demo</title>\n  <style>\n  div {\n    font-weight: bold;\n    color: #090;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li id="foo">foo</li>\n  <li id="bar">bar</li>\n  <li id="baz">baz</li>\n</ul>\n<div></div>\n​\n<script>\nvar listItems = $( "li:gt(0)" );\n$( "div" ).html( "Index: " + $( "li" ).index( listItems ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Returns the index for the element with ID bar in relation to all &lt;li&gt; elements.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>index demo</title>\n  <style>\n  div {\n    font-weight: bold;\n    color: #090;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li id="foo">foo</li>\n  <li id="bar">bar</li>\n  <li id="baz">baz</li>\n</ul>\n<div></div>\n​\n<script>\n$( "div" ).html( "Index: " +  $( "#bar" ).index( "li" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Returns the index for the element with ID bar in relation to its siblings.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>index demo</title>\n  <style>\n  div {\n    font-weight: bold;\n    color: #090;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li id="foo">foo</li>\n  <li id="bar">bar</li>\n  <li id="baz">baz</li>\n</ul>\n<div></div>\n​\n<script>\nvar barIndex = $( "#bar" ).index();\n$( "div" ).html( "Index: " +  barIndex );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Returns -1, as there is no element with ID foobar.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>index demo</title>\n  <style>\n  div {\n    font-weight: bold;\n    color: #090;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li id="foo">foo</li>\n  <li id="bar">bar</li>\n  <li id="baz">baz</li>\n</ul>\n<div></div>\n​\n<script>\nvar foobar = $( "li" ).index( $( "#foobar" ) );\n$( "div" ).html( "Index: " + foobar );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    index(selector_element?: JQuery.Selector | Element | JQuery): number;\n    /**\n     * Set the CSS inner height of each element in the set of matched elements.\n     * @param value_function _&#x40;param_ `value_function`\n     * <br>\n     * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure\n     *             appended (as a string). <br>\n     * * `function` — A function returning the inner height (including padding but not border) to set. Receives the index\n     *                position of the element in the set and the old inner height as arguments. Within the function, `this`\n     *                refers to the current element in the set.\n     * @see \\`{@link https://api.jquery.com/innerHeight/ }\\`\n     * @since 1.8.0\n     * @example ​ ````Change the inner height of each div the first time it is clicked (and change its color).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>innerHeight demo</title>\n  <style>\ndiv {\n  width: 60px;\n  padding: 10px;\n  height: 70px;\n  float: left;\n  margin: 5px;\n  background: red;\n  cursor: pointer;\n}\n.mod {\n  background: blue;\n  cursor: default;\n}\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n​\n<script>\nvar modHeight = 70;\n$( "div" ).one( "click", function() {\n  $( this ).innerHeight( modHeight ).addClass( "mod" );\n  modHeight -= 8;\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    innerHeight(value_function: string | number | ((this: TElement, index: number, height: number) => string | number)): this;\n    /**\n     * Get the current computed height for the first element in the set of matched elements, including padding but not border.\n     * @see \\`{@link https://api.jquery.com/innerHeight/ }\\`\n     * @since 1.2.6\n     * @example ​ ````Get the innerHeight of a paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>innerHeight demo</title>\n  <style>\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p></p>\n​\n<script>\nvar p = $( "p:first" );\n$( "p:last" ).text( "innerHeight:" + p.innerHeight() );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    innerHeight(): number | undefined;\n    /**\n     * Set the CSS inner width of each element in the set of matched elements.\n     * @param value_function _&#x40;param_ `value_function`\n     * <br>\n     * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure\n     *             appended (as a string). <br>\n     * * `function` — A function returning the inner width (including padding but not border) to set. Receives the index\n     *                position of the element in the set and the old inner width as arguments. Within the function, `this`\n     *                refers to the current element in the set.\n     * @see \\`{@link https://api.jquery.com/innerWidth/ }\\`\n     * @since 1.8.0\n     * @example ​ ````Change the inner width of each div the first time it is clicked (and change its color).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>innerWidth demo</title>\n  <style>\ndiv {\nwidth: 60px;\npadding: 10px;\nheight: 50px;\nfloat: left;\nmargin: 5px;\nbackground: red;\ncursor: pointer;\n}\n.mod {\nbackground: blue;\ncursor: default;\n}\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n​\n<script>\nvar modWidth = 60;\n$( "div" ).one( "click", function() {\n$( this ).innerWidth( modWidth ).addClass( "mod" );\nmodWidth -= 8;\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    innerWidth(value_function: string | number | ((this: TElement, index: number, width: number) => string | number)): this;\n    /**\n     * Get the current computed inner width for the first element in the set of matched elements, including padding but not border.\n     * @see \\`{@link https://api.jquery.com/innerWidth/ }\\`\n     * @since 1.2.6\n     * @example ​ ````Get the innerWidth of a paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>innerWidth demo</title>\n  <style>\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p></p>\n​\n<script>\nvar p = $( "p:first" );\n$( "p:last" ).text( "innerWidth:" + p.innerWidth() );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    innerWidth(): number | undefined;\n    /**\n     * Insert every element in the set of matched elements after the target.\n     * @param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements\n     *               will be inserted after the element(s) specified by this parameter.\n     * @see \\`{@link https://api.jquery.com/insertAfter/ }\\`\n     * @since 1.0\n     * @example ​ ````Insert all paragraphs after an element with id of &quot;foo&quot;. Same as $( &quot;#foo&quot; ).after( &quot;p&quot; )\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>insertAfter demo</title>\n  <style>\n  #foo {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p> is what I said... </p>\n<div id="foo">FOO!</div>\n​\n<script>\n$( "p" ).insertAfter( "#foo" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    insertAfter(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Node> | JQuery<Node>): this;\n    /**\n     * Insert every element in the set of matched elements before the target.\n     * @param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements\n     *               will be inserted before the element(s) specified by this parameter.\n     * @see \\`{@link https://api.jquery.com/insertBefore/ }\\`\n     * @since 1.0\n     * @example ​ ````Insert all paragraphs before an element with id of &quot;foo&quot;. Same as $( &quot;#foo&quot; ).before( &quot;p&quot; )\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>insertBefore demo</title>\n  <style>\n  #foo {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="foo">FOO!</div>\n<p>I would like to say: </p>\n​\n<script>\n$( "p" ).insertBefore( "#foo" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    insertBefore(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Node> | JQuery<Node>): this;\n    /**\n     * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.\n     * @param selector_function_selection_elements _&#x40;param_ `selector_function_selection_elements`\n     * <br>\n     * * `selector` — A string containing a selector expression to match elements against. <br>\n     * * `function` — A function used as a test for every element in the set. It accepts two arguments, `index`, which is\n     *                the element\'s index in the jQuery collection, and `element`, which is the DOM element. Within the\n     *                function, `this` refers to the current DOM element. <br>\n     * * `selection` — An existing jQuery object to match the current set of elements against. <br>\n     * * `elements` — One or more elements to match the current set of elements against.\n     * @see \\`{@link https://api.jquery.com/is/ }\\`\n     * @since 1.0\n     * @since 1.6\n     * @example ​ ````Shows a few ways is() can be used inside an event handler.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>is demo</title>\n  <style>\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    border: 4px outset;\n    background: green;\n    text-align: center;\n    font-weight: bolder;\n    cursor: pointer;\n  }\n  .blue {\n    background: blue;\n  }\n  .red {\n    background: red;\n  }\n  span {\n    color: white;\n    font-size: 16px;\n  }\n  p {\n    color: red;\n    font-weight: bolder;\n    background: yellow;\n    margin: 3px;\n    clear: left;\n    display: none;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div class="blue"></div>\n<div></div>\n<div class="red"></div>\n<div><br/><span>Peter</span></div>\n<div class="blue"></div>\n<p>&nbsp;</p>\n​\n<script>\n$( "div" ).one( "click", function() {\n  if ( $( this ).is( ":first-child" ) ) {\n    $( "p" ).text( "It\'s the first div." );\n  } else if ( $( this ).is( ".blue,.red" ) ) {\n    $( "p" ).text( "It\'s a blue or red div." );\n  } else if ( $( this ).is( ":contains(\'Peter\')" ) ) {\n    $( "p" ).text( "It\'s Peter!" );\n  } else {\n    $( "p" ).html( "It\'s nothing <em>special</em>." );\n  }\n  $( "p" ).hide().slideDown( "slow" );\n  $( this ).css({\n    "border-style": "inset",\n    cursor: "default"\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Returns true, because the parent of the input is a form element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>is demo</title>\n  <style>\n  div {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<form>\n  <input type="checkbox">\n</form>\n<div></div>\n​\n<script>\nvar isFormParent = $( "input[type=\'checkbox\']" ).parent().is( "form" );\n$( "div" ).text( "isFormParent = " + isFormParent );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Returns false, because the parent of the input is a p element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>is demo</title>\n  <style>\n  div {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<form>\n  <p><input type="checkbox"></p>\n</form>\n<div></div>\n​\n<script>\nvar isFormParent = $( "input[type=\'checkbox\']" ).parent().is( "form" );\n$( "div" ).text( "isFormParent = " + isFormParent );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>is demo</title>\n  <style>\n  li {\n    cursor: pointer;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul id="browsers">\n  <li>Chrome</li>\n  <li>Safari</li>\n  <li>Firefox</li>\n  <li>Opera</li>\n</ul>\n​\n<script>\nvar alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );\n$( "li" ).click(function() {\n  var li = $( this );\n  if ( li.is( alt ) ) {\n    li.slideUp();\n  } else {\n    li.css( "background", "red" );\n  }\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>is demo</title>\n  <style>\n  li {\n    cursor: pointer;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul id="browsers">\n  <li>Chrome</li>\n  <li>Safari</li>\n  <li>Firefox</li>\n  <li>Opera</li>\n</ul>\n​\n<script>\nvar alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );\n$( "li" ).click(function() {\n  if ( alt.is( this ) ) {\n    $( this ).slideUp();\n  } else {\n    $( this ).css( "background", "red" );\n  }\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    is(selector_function_selection_elements: JQuery.Selector | JQuery.TypeOrArray<Element> | JQuery | ((this: TElement, index: number, element: TElement) => boolean)): boolean;\n    /**\n     * Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/keydown/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    keydown<TData>(eventData: TData,\n                   handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'keydown\'>): this;\n    /**\n     * Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/keydown/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Show the event object for the keydown handler when a key is pressed in the input.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>keydown demo</title>\n  <style>\n  fieldset {\n    margin-bottom: 1em;\n  }\n  input {\n    display: block;\n    margin-bottom: .25em;\n  }\n  #print-output {\n    width: 100%;\n  }\n  .print-output-line {\n    white-space: pre;\n    padding: 5px;\n    font-family: monaco, monospace;\n    font-size: .7em;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<form>\n  <fieldset>\n    <label for="target">Type Something:</label>\n    <input id="target" type="text">\n  </fieldset>\n</form>\n<button id="other">\n  Trigger the handler\n</button>\n<script type="text/javascript" src="/resources/events.js"><\/script>\n​\n<script>\nvar xTriggered = 0;\n$( "#target" ).keydown(function( event ) {\n  if ( event.which == 13 ) {\n   event.preventDefault();\n  }\n  xTriggered++;\n  var msg = "Handler for .keydown() called " + xTriggered + " time(s).";\n  $.print( msg, "html" );\n  $.print( event );\n});\n​\n$( "#other" ).click(function() {\n  $( "#target" ).keydown();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    keydown(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'keydown\'> |\n                      false): this;\n    /**\n     * Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/keypress/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    keypress<TData>(eventData: TData,\n                    handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'keypress\'>): this;\n    /**\n     * Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/keypress/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (https://api.jquery.com/resources/events.js) for the event object&#39;s output.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>keypress demo</title>\n  <style>\n  fieldset {\n    margin-bottom: 1em;\n  }\n  input {\n    display: block;\n    margin-bottom: .25em;\n  }\n  #print-output {\n    width: 100%;\n  }\n  .print-output-line {\n    white-space: pre;\n    padding: 5px;\n    font-family: monaco, monospace;\n    font-size: .7em;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<form>\n  <fieldset>\n    <label for="target">Type Something:</label>\n    <input id="target" type="text">\n  </fieldset>\n</form>\n<button id="other">\n  Trigger the handler\n</button>\n<script src="/resources/events.js"><\/script>\n​\n<script>\nvar xTriggered = 0;\n$( "#target" ).keypress(function( event ) {\n  if ( event.which == 13 ) {\n     event.preventDefault();\n  }\n  xTriggered++;\n  var msg = "Handler for .keypress() called " + xTriggered + " time(s).";\n  $.print( msg, "html" );\n  $.print( event );\n});\n​\n$( "#other" ).click(function() {\n  $( "#target" ).keypress();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    keypress(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'keypress\'> |\n                       false): this;\n    /**\n     * Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/keyup/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    keyup<TData>(eventData: TData,\n                 handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'keyup\'>): this;\n    /**\n     * Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/keyup/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>keyup demo</title>\n  <style>\n  fieldset {\n    margin-bottom: 1em;\n  }\n  input {\n    display: block;\n    margin-bottom: .25em;\n  }\n  #print-output {\n    width: 100%;\n  }\n  .print-output-line {\n    white-space: pre;\n    padding: 5px;\n    font-family: monaco, monospace;\n    font-size: .7em;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<form>\n  <fieldset>\n    <label for="target">Type Something:</label>\n    <input id="target" type="text">\n  </fieldset>\n</form>\n<button id="other">\n  Trigger the handler\n</button>\n<script type="text/javascript" src="/resources/events.js"><\/script>\n​\n<script>\nvar xTriggered = 0;\n$( "#target" ).keyup(function( event ) {\n  xTriggered++;\n  var msg = "Handler for .keyup() called " + xTriggered + " time(s).";\n  $.print( msg, "html" );\n  $.print( event );\n}).keydown(function( event ) {\n  if ( event.which == 13 ) {\n    event.preventDefault();\n  }\n});\n​\n$( "#other").click(function() {\n  $( "#target" ).keyup();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    keyup(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'keyup\'> |\n                    false): this;\n    /**\n     * Reduce the set of matched elements to the final one in the set.\n     * @see \\`{@link https://api.jquery.com/last/ }\\`\n     * @since 1.4\n     * @example ​ ````Highlight the last span in a paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>last demo</title>\n  <style>\n  .highlight {\n    background-color: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><span>Look:</span> <span>This is some text in a paragraph.</span> <span>This is a note about it.</span></p>\n​\n<script>\n$( "p span" ).last().addClass( "highlight" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    last(): this;\n\n    /**\n     * Reduce the set of matched elements to the even ones in the set, numbered from zero.\n     * @see \\`{@link https://api.jquery.com/even/ }\\`\n     * @since 3.5\n     * @example ​ ````Highlight the even items in a list.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>even demo</title>\n  <style>\n  .highlight {\n    background-color: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.5.0.js"><\/script>\n</head>\n<body>\n\n<ul>\n  <li>Look:</li>\n  <li>This is some text in a list.</li>\n  <li>This is a note about it.</li>\n  <li>This is another note about it.</li>\n</ul>\n\n<script>\n$( "ul li" ).even().addClass( "highlight" );\n<\/script>\n\n</body>\n</html>\n```\n     */\n    even(): this;\n\n    /**\n     * Reduce the set of matched elements to the odd ones in the set, numbered from zero.\n     * @see \\`{@link https://api.jquery.com/odd/ }\\`\n     * @since 3.5\n     * @example ​ ````Highlight the odd items in a list.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>odd demo</title>\n  <style>\n  .highlight {\n    background-color: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.5.0.js"><\/script>\n</head>\n<body>\n\n<ul>\n  <li>Look:</li>\n  <li>This is some text in a list.</li>\n  <li>This is a note about it.</li>\n  <li>This is another note about it.</li>\n</ul>\n\n<script>\n$( "ul li" ).odd().addClass( "highlight" );\n<\/script>\n\n</body>\n</html>\n```\n     */\n    odd(): this;\n\n    /**\n     * Load data from the server and place the returned HTML into the matched element.\n     * @param url A string containing the URL to which the request is sent.\n     * @param data A plain object or string that is sent to the server with the request.\n     * @param complete A callback function that is executed when the request completes.\n     * @see \\`{@link https://api.jquery.com/load/ }\\`\n     * @since 1.0\n     * @example ​ ````Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.\n```javascript\n$( "#feeds" ).load( "feeds.php", { limit: 25 }, function() {\n  alert( "The last 25 entries in the feed have been loaded" );\n});\n```\n     */\n    load(url: string,\n         data: string | JQuery.PlainObject,\n         complete: (this: TElement, responseText: string, textStatus: JQuery.Ajax.TextStatus, jqXHR: JQuery.jqXHR) => void): this;\n    /**\n     * Load data from the server and place the returned HTML into the matched element.\n     * @param url A string containing the URL to which the request is sent.\n     * @param complete_data _&#x40;param_ `complete_data`\n     * <br>\n     * * `complete` — A callback function that is executed when the request completes. <br>\n     * * `data` — A plain object or string that is sent to the server with the request.\n     * @see \\`{@link https://api.jquery.com/load/ }\\`\n     * @since 1.0\n     * @example ​ ````Load another page&#39;s list items into an ordered list.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>load demo</title>\n  <style>\n  body {\n    font-size: 12px;\n    font-family: Arial;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<b>Projects:</b>\n<ol id="new-projects"></ol>\n​\n<script>\n$( "#new-projects" ).load( "/resources/load.html #projects li" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Display a notice if the Ajax request encounters an error.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>load demo</title>\n  <style>\n  body {\n    font-size: 12px;\n    font-family: Arial;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<b>Successful Response (should be blank):</b>\n<div id="success"></div>\n<b>Error Response:</b>\n<div id="error"></div>\n​\n<script>\n$( "#success" ).load( "/not-here.php", function( response, status, xhr ) {\n  if ( status == "error" ) {\n    var msg = "Sorry but there was an error: ";\n    $( "#error" ).html( msg + xhr.status + " " + xhr.statusText );\n  }\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Load the feeds.html file into the div with the ID of feeds.\n```javascript\n$( "#feeds" ).load( "feeds.html" );\n```\n     * @example ​ ````pass arrays of data to the server.\n```javascript\n$( "#objectID" ).load( "test.php", { "choices[]": [ "Jon", "Susan" ] } );\n```\n     */\n    load(url: string,\n         complete_data?: ((this: TElement, responseText: string, textStatus: JQuery.Ajax.TextStatus, jqXHR: JQuery.jqXHR) => void) | string | JQuery.PlainObject): this;\n    /**\n     * Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.\n     * @param callback A function object that will be invoked for each element in the current set.\n     * @see \\`{@link https://api.jquery.com/map/ }\\`\n     * @since 1.2\n     * @example ​ ````Build a list of all the values within a form.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>map demo</title>\n  <style>\n  p {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><b>Values: </b></p>\n<form>\n  <input type="text" name="name" value="John">\n  <input type="text" name="password" value="password">\n  <input type="text" name="url" value="https://johnresig.com/">\n</form>\n​\n<script>\n$( "p" )\n  .append( $( "input" ).map(function() {\n    return $( this ).val();\n  })\n  .get()\n  .join( ", " ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````A contrived example to show some functionality.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>map demo</title>\n  <style>\n  body {\n    font-size: 16px;\n  }\n  ul {\n    float: left;\n    margin: 0 30px;\n    color: blue;\n  }\n  #results {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n  <li>Fourth</li>\n  <li>Fifth</li>\n</ul>\n<ul id="results">\n</ul>\n​\n<script>\nvar mappedItems = $( "li" ).map(function( index ) {\n  var replacement = $( "<li>" ).text( $( this ).text() ).get( 0 );\n  if ( index === 0 ) {\n​\n    // Make the first item all caps\n    $( replacement ).text( $( replacement ).text().toUpperCase() );\n  } else if ( index === 1 || index === 3 ) {\n​\n    // Delete the second and fourth items\n    replacement = null;\n  } else if ( index === 2 ) {\n​\n    // Make two of the third item and add some text\n    replacement = [ replacement, $( "<li>" ).get( 0 ) ];\n    $( replacement[ 0 ] ).append( "<b> - A</b>" );\n    $( replacement[ 1 ] ).append( "Extra <b> - B</b>" );\n  }\n​\n  // Replacement will be a dom element, null,\n  // or an array of dom elements\n  return replacement;\n});\n$( "#results" ).append( mappedItems );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Equalize the heights of the divs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>map demo</title>\n  <style>\n  div {\n    width: 40px;\n    float: left;\n  }\n  input {\n    clear: left;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input type="button" value="equalize div heights">\n<div style="background: red; height: 40px; "></div>\n<div style="background: green; height: 70px;"></div>\n<div style="background: blue; height: 50px; "></div>\n​\n<script>\n$.fn.equalizeHeights = function() {\n  var maxHeight = this.map(function( i, e ) {\n    return $( e ).height();\n  }).get();\n  return this.height( Math.max.apply( this, maxHeight ) );\n};\n​\n$( "input" ).click(function() {\n  $( "div" ).equalizeHeights();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    map<TReturn>(callback: (this: TElement, index: number, domElement: TElement) => JQuery.TypeOrArray<TReturn> | null | undefined): JQuery<TReturn>;\n    /**\n     * Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mousedown/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    mousedown<TData>(eventData: TData,\n                     handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'mousedown\'>): this;\n    /**\n     * Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mousedown/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Show texts when mouseup and mousedown event triggering.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>mousedown demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Press mouse and release here.</p>\n​\n<script>\n$( "p" )\n  .mouseup(function() {\n    $( this ).append( "<span style=\'color:#f00;\'>Mouse up.</span>" );\n  })\n  .mousedown(function() {\n    $( this ).append( "<span style=\'color:#00f;\'>Mouse down.</span>" );\n  });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    mousedown(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'mousedown\'> |\n                        false): this;\n    /**\n     * Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mouseenter/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    mouseenter<TData>(eventData: TData,\n                      handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'mouseenter\'>): this;\n    /**\n     * Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mouseenter/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Show texts when mouseenter and mouseout event triggering.\n    mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>mouseenter demo</title>\n  <style>\n  div.out {\n    width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {\n    width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {\n    line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="out overout">\n  <p>move your mouse</p>\n  <div class="in overout"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>\n​\n<div class="out enterleave">\n  <p>move your mouse</p>\n  <div class="in enterleave"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>\n​\n<script>\nvar i = 0;\n$( "div.overout" )\n  .mouseover(function() {\n    $( "p:first", this ).text( "mouse over" );\n    $( "p:last", this ).text( ++i );\n  })\n  .mouseout(function() {\n    $( "p:first", this ).text( "mouse out" );\n  });\n​\nvar n = 0;\n$( "div.enterleave" )\n  .mouseenter(function() {\n    $( "p:first", this ).text( "mouse enter" );\n    $( "p:last", this ).text( ++n );\n  })\n  .mouseleave(function() {\n    $( "p:first", this ).text( "mouse leave" );\n  });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    mouseenter(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'mouseenter\'> |\n                         false): this;\n    /**\n     * Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mouseleave/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    mouseleave<TData>(eventData: TData,\n                      handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'mouseleave\'>): this;\n    /**\n     * Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mouseleave/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Show number of times mouseout and mouseleave events are triggered. mouseout fires when the pointer moves out of child element as well, while mouseleave fires only when the pointer moves out of the bound element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>mouseleave demo</title>\n  <style>\n  div.out {\n    width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {\n    width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {\n    line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="out overout">\n  <p>move your mouse</p>\n  <div class="in overout"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>\n<div class="out enterleave">\n  <p>move your mouse</p>\n  <div class="in enterleave"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>\n​\n<script>\nvar i = 0;\n$( "div.overout" )\n  .mouseover(function() {\n    $( "p:first", this ).text( "mouse over" );\n  })\n  .mouseout(function() {\n    $( "p:first", this ).text( "mouse out" );\n    $( "p:last", this ).text( ++i );\n  });\n​\nvar n = 0;\n$( "div.enterleave" )\n  .mouseenter(function() {\n    $( "p:first", this ).text( "mouse enter" );\n  })\n  .mouseleave(function() {\n    $( "p:first", this ).text( "mouse leave" );\n    $( "p:last", this ).text( ++n );\n  });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    mouseleave(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'mouseleave\'> |\n                         false): this;\n    /**\n     * Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mousemove/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    mousemove<TData>(eventData: TData,\n                     handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'mousemove\'>): this;\n    /**\n     * Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mousemove/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>mousemove demo</title>\n  <style>\n  div {\n    width: 220px;\n    height: 170px;\n    margin: 10px 50px 10px 10px;\n    background: yellow;\n    border: 2px groove;\n    float: right;\n  }\n  p {\n    margin: 0;\n    margin-left: 10px;\n    color: red;\n    width: 220px;\n    height: 120px;\n    padding-top: 70px;\n    float: left;\n    font-size: 14px;\n  }\n  span {\n    display: block;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  <span>Move the mouse over the div.</span>\n  <span>&nbsp;</span>\n</p>\n<div></div>\n​\n<script>\n$( "div" ).mousemove(function( event ) {\n  var pageCoords = "( " + event.pageX + ", " + event.pageY + " )";\n  var clientCoords = "( " + event.clientX + ", " + event.clientY + " )";\n  $( "span:first" ).text( "( event.pageX, event.pageY ) : " + pageCoords );\n  $( "span:last" ).text( "( event.clientX, event.clientY ) : " + clientCoords );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    mousemove(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'mousemove\'> |\n                        false): this;\n    /**\n     * Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mouseout/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    mouseout<TData>(eventData: TData,\n                    handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'mouseout\'>): this;\n    /**\n     * Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mouseout/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Show the number of times mouseout and mouseleave events are triggered.\n  mouseout fires when the pointer moves out of the child element as well, while mouseleave fires only when the pointer moves out of the bound element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>mouseout demo</title>\n  <style>\n  div.out {\n    width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {\n    width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {\n    line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="out overout">\n  <p>move your mouse</p>\n  <div class="in overout"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>\n​\n<div class="out enterleave">\n  <p>move your mouse</p>\n  <div class="in enterleave"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>\n​\n<script>\nvar i = 0;\n$( "div.overout" )\n  .mouseout(function() {\n    $( "p:first", this ).text( "mouse out" );\n    $( "p:last", this ).text( ++i );\n  })\n  .mouseover(function() {\n    $( "p:first", this ).text( "mouse over" );\n  });\n​\nvar n = 0;\n$( "div.enterleave" )\n  .on( "mouseenter", function() {\n    $( "p:first", this ).text( "mouse enter" );\n  })\n  .on( "mouseleave", function() {\n    $( "p:first", this ).text( "mouse leave" );\n    $( "p:last", this ).text( ++n );\n  });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    mouseout(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'mouseout\'> |\n                       false): this;\n    /**\n     * Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mouseover/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    mouseover<TData>(eventData: TData,\n                     handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'mouseover\'>): this;\n    /**\n     * Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mouseover/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Show the number of times mouseover and mouseenter events are triggered.\nmouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>mouseover demo</title>\n  <style>\n  div.out {\n    width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {\n    width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {\n    line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="out overout">\n  <span>move your mouse</span>\n  <div class="in">\n  </div>\n</div>\n​\n<div class="out enterleave">\n  <span>move your mouse</span>\n  <div class="in">\n  </div>\n</div>\n​\n<script>\nvar i = 0;\n$( "div.overout" )\n  .mouseover(function() {\n    i += 1;\n    $( this ).find( "span" ).text( "mouse over x " + i );\n  })\n  .mouseout(function() {\n    $( this ).find( "span" ).text( "mouse out " );\n  });\n​\nvar n = 0;\n$( "div.enterleave" )\n  .mouseenter(function() {\n    n += 1;\n    $( this ).find( "span" ).text( "mouse enter x " + n );\n  })\n  .mouseleave(function() {\n    $( this ).find( "span" ).text( "mouse leave" );\n  });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    mouseover(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'mouseover\'> |\n                        false): this;\n    /**\n     * Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mouseup/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    mouseup<TData>(eventData: TData,\n                   handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'mouseup\'>): this;\n    /**\n     * Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/mouseup/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````Show texts when mouseup and mousedown event triggering.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>mouseup demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Press mouse and release here.</p>\n​\n<script>\n$( "p" )\n  .mouseup(function() {\n    $( this ).append( "<span style=\'color:#f00;\'>Mouse up.</span>" );\n  })\n  .mousedown(function() {\n    $( this ).append( "<span style=\'color:#00f;\'>Mouse down.</span>" );\n  });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    mouseup(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'mouseup\'> |\n                      false): this;\n    /**\n     * Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.\n     * @param selector A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/next/ }\\`\n     * @since 1.0\n     * @example ​ ````Find the very next sibling of each disabled button and change its text &quot;this button is disabled&quot;.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>next demo</title>\n  <style>\n  span {\n    color: blue;\n    font-weight: bold;\n  }\n  button {\n    width: 100px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div><button disabled="disabled">First</button> - <span></span></div>\n<div><button>Second</button> - <span></span></div>\n<div><button disabled="disabled">Third</button> - <span></span></div>\n​\n<script>\n$( "button[disabled]" ).next().text( "this button is disabled" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Find the very next sibling of each paragraph. Keep only the ones with a class &quot;selected&quot;.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>next demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p class="selected">Hello Again</p>\n<div><span>And Again</span></div>\n​\n<script>\n$( "p" ).next( ".selected" ).css( "background", "yellow" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    next(selector?: JQuery.Selector): this;\n    /**\n     * Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.\n     * @param selector A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/nextAll/ }\\`\n     * @since 1.2\n     * @example ​ ````Locate all the divs after the first and give them a class.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>nextAll demo</title>\n  <style>\n  div {\n    width: 80px;\n    height: 80px;\n    background: #abc;\n    border: 2px solid black;\n    margin: 10px;\n    float: left;\n  }\n  div.after {\n    border-color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>first</div>\n<div>sibling<div>child</div></div>\n<div>sibling</div>\n<div>sibling</div>​\n<script>\n$( "div:first" ).nextAll().addClass( "after" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Locate all the paragraphs after the second child in the body and give them a class.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>nextAll demo</title>\n  <style>\n  div, p {\n    width: 60px;\n    height: 60px;\n    background: #abc;\n    border: 2px solid black;\n    margin: 10px;\n    float: left;\n  }\n  .after {\n    border-color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>p</p>\n<div>div</div>\n<p>p</p>\n<p>p</p>\n<div>div</div>\n<p>p</p>\n<div>div</div>\n​\n<script>\n$( ":nth-child(1)" ).nextAll( "p" ).addClass( "after" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    nextAll(selector?: string): this;\n    /**\n     * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.\n     * @param selector_element _&#x40;param_ `selector_element`\n     * <br>\n     * * `selector` — A string containing a selector expression to indicate where to stop matching following sibling elements. <br>\n     * * `element` — A DOM node or jQuery object indicating where to stop matching following sibling elements.\n     * @param filter A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/nextUntil/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @example ​ ````Find the siblings that follow &lt;dt id=&quot;term-2&quot;&gt; up to the next &lt;dt&gt; and give them a red background color. Also, find &lt;dd&gt; siblings that follow &lt;dt id=&quot;term-1&quot;&gt; up to &lt;dt id=&quot;term-3&quot;&gt; and give them a green text color.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>nextUntil demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<dl>\n  <dt id="term-1">term 1</dt>\n  <dd>definition 1-a</dd>\n  <dd>definition 1-b</dd>\n  <dd>definition 1-c</dd>\n  <dd>definition 1-d</dd>\n  <dt id="term-2">term 2</dt>\n  <dd>definition 2-a</dd>\n  <dd>definition 2-b</dd>\n  <dd>definition 2-c</dd>\n  <dt id="term-3">term 3</dt>\n  <dd>definition 3-a</dd>\n  <dd>definition 3-b</dd>\n</dl>\n​\n<script>\n$( "#term-2" )\n  .nextUntil( "dt" )\n    .css( "background-color", "red" );\nvar term3 = document.getElementById( "term-3" );\n$( "#term-1" )\n  .nextUntil( term3, "dd" )\n    .css( "color", "green" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    nextUntil(selector_element?: JQuery.Selector | Element | JQuery, filter?: JQuery.Selector): this;\n    /**\n     * Remove elements from the set of matched elements.\n     * @param selector_function_selection _&#x40;param_ `selector_function_selection`\n     * <br>\n     * * `selector` — A string containing a selector expression, a DOM element, or an array of elements to match against the set. <br>\n     * * `function` — A function used as a test for each element in the set. It accepts two arguments, `index`, which is\n     *                the element\'s index in the jQuery collection, and `element`, which is the DOM element. Within the\n     *                function, `this` refers to the current DOM element. <br>\n     * * `selection` — An existing jQuery object to match the current set of elements against.\n     * @see \\`{@link https://api.jquery.com/not/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @example ​ ````Adds a border to divs that are not green or blue.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>not demo</title>\n  <style>\n  div {\n    width: 50px;\n    height: 50px;\n    margin: 10px;\n    float: left;\n    background: yellow;\n    border: 2px solid white;\n  }\n  .green {\n    background: #8f8;\n  }\n  .gray {\n    background: #ccc;\n  }\n  #blueone {\n    background: #99f;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div id="blueone"></div>\n<div></div>\n<div class="green"></div>\n<div class="green"></div>\n<div class="gray"></div>\n<div></div>\n​\n<script>\n$( "div" ).not( ".green, #blueone" )\n  .css( "border-color", "red" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Removes the element with the ID &quot;selected&quot; from the set of all paragraphs.\n```javascript\n$( "p" ).not( $( "#selected" )[ 0 ] );\n```\n     * @example ​ ````Removes the element with the ID &quot;selected&quot; from the set of all paragraphs.\n```javascript\n$( "p" ).not( "#selected" );\n```\n     * @example ​ ````Removes all elements that match &quot;div p.selected&quot; from the total set of all paragraphs.\n```javascript\n$( "p" ).not( $( "div p.selected" ) );\n```\n     */\n    not(selector_function_selection: JQuery.Selector | JQuery.TypeOrArray<Element> | JQuery | ((this: TElement, index: number, element: TElement) => boolean)): this;\n    /**\n     * Remove an event handler.\n     * @param events One or more space-separated event types and optional namespaces, or just namespaces, such as\n     *               "click", "keydown.myPlugin", or ".myPlugin".\n     * @param selector A selector which should match the one originally passed to .on() when attaching event handlers.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/off/ }\\`\n     * @since 1.7\n     * @example ​ ````Add and remove event handlers on the colored button.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>off demo</title>\n  <style>\n  button {\n    margin: 5px;\n  }\n  button#theone {\n    color: red;\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="theone">Does nothing...</button>\n<button id="bind">Add Click</button>\n<button id="unbind">Remove Click</button>\n<div style="display:none;">Click!</div>\n​\n<script>\nfunction flash() {\n  $( "div" ).show().fadeOut( "slow" );\n}\n$( "#bind" ).click(function() {\n  $( "body" )\n    .on( "click", "#theone", flash )\n    .find( "#theone" )\n      .text( "Can Click!" );\n});\n$( "#unbind" ).click(function() {\n  $( "body" )\n    .off( "click", "#theone", flash )\n    .find( "#theone" )\n      .text( "Does nothing..." );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Remove just one previously bound handler by passing it as the third argument:\n```javascript\nvar foo = function() {\n  // Code to handle some kind of event\n};\n​\n// ... Now foo will be called when paragraphs are clicked ...\n$( "body" ).on( "click", "p", foo );\n​\n// ... Foo will no longer be called.\n$( "body" ).off( "click", "p", foo );\n```\n     */\n    off<TType extends string>(\n        events: TType,\n        selector: JQuery.Selector,\n        handler: JQuery.TypeEventHandler<TElement, any, any, any, TType> |\n                 false\n    ): this;\n    /**\n     * Remove an event handler.\n     * @param events One or more space-separated event types and optional namespaces, or just namespaces, such as\n     *               "click", "keydown.myPlugin", or ".myPlugin".\n     * @param selector_handler _&#x40;param_ `selector_handler`\n     * <br>\n     * * `selector` — A selector which should match the one originally passed to `.on()` when attaching event handlers. <br>\n     * * `handler` — A handler function previously attached for the event(s), or the special value `false`.\n     * @see \\`{@link https://api.jquery.com/off/ }\\`\n     * @since 1.7\n     * @example ​ ````Remove all delegated click handlers from all paragraphs:\n```javascript\n$( "p" ).off( "click", "**" );\n```\n     * @example ​ ````Unbind all delegated event handlers by their namespace:\n```javascript\nvar validate = function() {\n  // Code to validate form entries\n};\n​\n// Delegate events under the ".validator" namespace\n$( "form" ).on( "click.validator", "button", validate );\n​\n$( "form" ).on( "keypress.validator", "input[type=\'text\']", validate );\n​\n// Remove event handlers in the ".validator" namespace\n$( "form" ).off( ".validator" );\n```\n     */\n    off<TType extends string>(\n        events: TType,\n        selector_handler?: JQuery.Selector |\n                           JQuery.TypeEventHandler<TElement, any, any, any, TType> |\n                           false\n    ): this;\n    /**\n     * Remove an event handler.\n     * @param events An object where the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent handler functions previously attached for the event(s).\n     * @param selector A selector which should match the one originally passed to .on() when attaching event handlers.\n     * @see \\`{@link https://api.jquery.com/off/ }\\`\n     * @since 1.7\n     */\n    off(events: JQuery.TypeEventHandlers<TElement, any, any, any>,\n        selector?: JQuery.Selector): this;\n    /**\n     * Remove an event handler.\n     * @param event A jQuery.Event object.\n     * @see \\`{@link https://api.jquery.com/off/ }\\`\n     * @since 1.7\n     * @example ​ ````Remove all event handlers from all paragraphs:\n```javascript\n$( "p" ).off();\n```\n     */\n    off(event?: JQuery.TriggeredEvent<TElement>): this;\n    /**\n     * Set the current coordinates of every element in the set of matched elements, relative to the document.\n     * @param coordinates_function _&#x40;param_ `coordinates_function`\n     * <br>\n     * * `coordinates` — An object containing the properties `top` and `left`, which are numbers indicating the new top and\n     *                   left coordinates for the elements. <br>\n     * * `function` — A function to return the coordinates to set. Receives the index of the element in the collection as\n     *                the first argument and the current coordinates as the second argument. The function should return an\n     *                object with the new `top` and `left` properties.\n     * @see \\`{@link https://api.jquery.com/offset/ }\\`\n     * @since 1.4\n     * @example ​ ````Set the offset of the second paragraph:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>offset demo</title>\n  <style>\n  p {\n    margin-left: 10px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p><p>2nd Paragraph</p>\n​\n<script>\n$( "p:last" ).offset({ top: 10, left: 30 });\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    offset(coordinates_function: JQuery.CoordinatesPartial | ((this: TElement, index: number, coords: JQuery.Coordinates) => JQuery.CoordinatesPartial)): this;\n    /**\n     * Get the current coordinates of the first element in the set of matched elements, relative to the document.\n     * @see \\`{@link https://api.jquery.com/offset/ }\\`\n     * @since 1.2\n     * @example ​ ````Access the offset of the second paragraph:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>offset demo</title>\n  <style>\n  p {\n    margin-left: 10px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p><p>2nd Paragraph</p>\n​\n<script>\nvar p = $( "p:last" );\nvar offset = p.offset();\np.html( "left: " + offset.left + ", top: " + offset.top );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Click to see the offset.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>offset demo</title>\n  <style>\n  p {\n    margin-left: 10px;\n    color: blue;\n    width: 200px;\n    cursor: pointer;\n  }\n  span {\n    color: red;\n    cursor: pointer;\n  }\n  div.abs {\n    width: 50px;\n    height: 50px;\n    position: absolute;\n    left: 220px;\n    top: 35px;\n    background-color: green;\n    cursor: pointer;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="result">Click an element.</div>\n<p>\n  This is the best way to <span>find</span> an offset.\n</p>\n<div class="abs">\n</div>\n​\n<script>\n$( "*", document.body ).click(function( event ) {\n  var offset = $( this ).offset();\n  event.stopPropagation();\n  $( "#result" ).text( this.tagName +\n    " coords ( " + offset.left + ", " + offset.top + " )" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    offset(): JQuery.Coordinates | undefined;\n    /**\n     * Get the closest ancestor element that is positioned.\n     * @see \\`{@link https://api.jquery.com/offsetParent/ }\\`\n     * @since 1.2.6\n     * @example ​ ````Find the offsetParent of item &quot;A.&quot;\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>offsetParent demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul class="level-1">\n  <li class="item-i">I</li>\n  <li class="item-ii" style="position: relative;">II\n    <ul class="level-2">\n      <li class="item-a">A</li>\n      <li class="item-b">B\n        <ul class="level-3">\n          <li class="item-1">1</li>\n          <li class="item-2">2</li>\n          <li class="item-3">3</li>\n        </ul>\n      </li>\n      <li class="item-c">C</li>\n    </ul>\n  </li>\n  <li class="item-iii">III</li>\n</ul>\n​\n<script>$( "li.item-a" ).offsetParent().css( "background-color", "red" );<\/script>\n​\n</body>\n</html>\n```\n     */\n    offsetParent(): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the\n     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     */\n    on<TType extends string,\n       TData>(\n        events: TType,\n        selector: JQuery.Selector,\n        data: TData,\n        handler: JQuery.TypeEventHandler<TElement, TData, any, any, TType>\n    ): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the\n     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     */\n    on<TType extends string,\n       TData>(\n        events: TType,\n        selector: null | undefined,\n        data: TData,\n        handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, TType>\n    ): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the\n     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     * @deprecated ​ Deprecated. Use \\`{@link JQuery.Event }\\` in place of \\`{@link JQueryEventObject }\\`.\n     */\n    on(events: string,\n       selector: JQuery.Selector | null | undefined,\n       data: any,\n       handler: ((event: JQueryEventObject) => void)): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the\n     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand\n     *                for a function that simply does return false.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     * @example ​ ````Click any paragraph to add another after it. Note that .on() allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>on demo</title>\n  <style>\n  p {\n    background: yellow;\n    font-weight: bold;\n    cursor: pointer;\n    padding: 5px;\n  }\n  p.over {\n    background: #ccc;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Click me!</p>\n<span></span>\n​\n<script>\nvar count = 0;\n$( "body" ).on( "click", "p", function() {\n  $( this ).after( "<p>Another paragraph! " + (++count) + "</p>" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Display each paragraph&#39;s text in an alert box whenever it is clicked:\n```javascript\n$( "body" ).on( "click", "p", function() {\n  alert( $( this ).text() );\n});\n```\n     * @example ​ ````Cancel a link&#39;s default action using the .preventDefault() method:\n```javascript\n$( "body" ).on( "click", "a", function( event ) {\n  event.preventDefault();\n});\n```\n     */\n    on<TType extends string>(\n        events: TType,\n        selector: JQuery.Selector,\n        handler: JQuery.TypeEventHandler<TElement, undefined, any, any, TType> |\n                 false\n    ): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param data Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     * @example ​ ````Pass data to the event handler, which is specified here by name:\n```javascript\nfunction myHandler( event ) {\n  alert( event.data.foo );\n}\n$( "p" ).on( "click", { foo: "bar" }, myHandler );\n```\n     */\n    on<TType extends string,\n       TData>(\n        events: TType,\n        data: TData,\n        handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, TType>\n    ): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param selector_data _&#x40;param_ `selector_data`\n     * <br>\n     * * `selector` — A selector string to filter the descendants of the selected elements that trigger the event. If the\n     *                selector is null or omitted, the event is always triggered when it reaches the selected element. <br>\n     * * `data` — Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     * @deprecated ​ Deprecated. Use \\`{@link JQuery.Event }\\` in place of \\`{@link JQueryEventObject }\\`.\n     * @example ​ ````Click any paragraph to add another after it. Note that .on() allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>on demo</title>\n  <style>\n  p {\n    background: yellow;\n    font-weight: bold;\n    cursor: pointer;\n    padding: 5px;\n  }\n  p.over {\n    background: #ccc;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Click me!</p>\n<span></span>\n​\n<script>\nvar count = 0;\n$( "body" ).on( "click", "p", function() {\n  $( this ).after( "<p>Another paragraph! " + (++count) + "</p>" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Display each paragraph&#39;s text in an alert box whenever it is clicked:\n```javascript\n$( "body" ).on( "click", "p", function() {\n  alert( $( this ).text() );\n});\n```\n     * @example ​ ````Cancel a link&#39;s default action using the .preventDefault() method:\n```javascript\n$( "body" ).on( "click", "a", function( event ) {\n  event.preventDefault();\n});\n```\n     * @example ​ ````Pass data to the event handler, which is specified here by name:\n```javascript\nfunction myHandler( event ) {\n  alert( event.data.foo );\n}\n$( "p" ).on( "click", { foo: "bar" }, myHandler );\n```\n     */\n    on(events: string,\n       selector_data: any,\n       handler: ((event: JQueryEventObject) => void)): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand\n     *                for a function that simply does return false.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     * @example ​ ````Display a paragraph&#39;s text in an alert when it is clicked:\n```javascript\n$( "p" ).on( "click", function() {\n  alert( $( this ).text() );\n});\n```\n     * @example ​ ````Cancel a form submit action and prevent the event from bubbling up by returning false:\n```javascript\n$( "form" ).on( "submit", false );\n```\n     * @example ​ ````Cancel only the default action by using .preventDefault().\n```javascript\n$( "form" ).on( "submit", function( event ) {\n  event.preventDefault();\n});\n```\n     * @example ​ ````Stop submit events from bubbling without preventing form submit, using .stopPropagation().\n```javascript\n$( "form" ).on( "submit", function( event ) {\n  event.stopPropagation();\n});\n```\n     * @example ​ ````Pass data to the event handler using the second argument to .trigger()\n```javascript\n$( "div" ).on( "click", function( event, person ) {\n  alert( "Hello, " + person.name );\n});\n$( "div" ).trigger( "click", { name: "Jim" } );\n```\n     * @example ​ ````Use the the second argument of .trigger() to pass an array of data to the event handler\n```javascript\n$( "div" ).on( "click", function( event, salutation, name ) {\n  alert( salutation + ", " + name );\n});\n$( "div" ).trigger( "click", [ "Goodbye", "Jim" ] );\n```\n     * @example ​ ````Attach and trigger custom (non-browser) events.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>on demo</title>\n  <style>\n  p {\n    color: red;\n  }\n  span {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Has an attached custom event.</p>\n<button>Trigger custom event</button>\n<span style="display:none;"></span>\n​\n<script>\n$( "p" ).on( "myCustomEvent", function( event, myName ) {\n  $( this ).text( myName + ", hi there!" );\n  $( "span" )\n    .stop()\n    .css( "opacity", 1 )\n    .text( "myName = " + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n});\n$( "button" ).click(function () {\n  $( "p" ).trigger( "myCustomEvent", [ "John" ] );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Attach multiple events—one on mouseenter and one on mouseleave to the same element:\n```javascript\n$( "#cart" ).on( "mouseenter mouseleave", function( event ) {\n  $( this ).toggleClass( "active" );\n});\n```\n     */\n    on<TType extends string>(\n        events: TType,\n        handler: JQuery.TypeEventHandler<TElement, undefined, TElement, TElement, TType> |\n                 false\n    ): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param handler A function to execute when the event is triggered.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     * @deprecated ​ Deprecated. Use \\`{@link JQuery.Event }\\` in place of \\`{@link JQueryEventObject }\\`.\n     * @example ​ ````Display a paragraph&#39;s text in an alert when it is clicked:\n```javascript\n$( "p" ).on( "click", function() {\n  alert( $( this ).text() );\n});\n```\n     * @example ​ ````Cancel a form submit action and prevent the event from bubbling up by returning false:\n```javascript\n$( "form" ).on( "submit", false );\n```\n     * @example ​ ````Cancel only the default action by using .preventDefault().\n```javascript\n$( "form" ).on( "submit", function( event ) {\n  event.preventDefault();\n});\n```\n     * @example ​ ````Stop submit events from bubbling without preventing form submit, using .stopPropagation().\n```javascript\n$( "form" ).on( "submit", function( event ) {\n  event.stopPropagation();\n});\n```\n     * @example ​ ````Pass data to the event handler using the second argument to .trigger()\n```javascript\n$( "div" ).on( "click", function( event, person ) {\n  alert( "Hello, " + person.name );\n});\n$( "div" ).trigger( "click", { name: "Jim" } );\n```\n     * @example ​ ````Use the the second argument of .trigger() to pass an array of data to the event handler\n```javascript\n$( "div" ).on( "click", function( event, salutation, name ) {\n  alert( salutation + ", " + name );\n});\n$( "div" ).trigger( "click", [ "Goodbye", "Jim" ] );\n```\n     * @example ​ ````Attach and trigger custom (non-browser) events.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>on demo</title>\n  <style>\n  p {\n    color: red;\n  }\n  span {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Has an attached custom event.</p>\n<button>Trigger custom event</button>\n<span style="display:none;"></span>\n​\n<script>\n$( "p" ).on( "myCustomEvent", function( event, myName ) {\n  $( this ).text( myName + ", hi there!" );\n  $( "span" )\n    .stop()\n    .css( "opacity", 1 )\n    .text( "myName = " + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n});\n$( "button" ).click(function () {\n  $( "p" ).trigger( "myCustomEvent", [ "John" ] );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Attach multiple events—one on mouseenter and one on mouseleave to the same element:\n```javascript\n$( "#cart" ).on( "mouseenter mouseleave", function( event ) {\n  $( this ).toggleClass( "active" );\n});\n```\n     */\n    on(events: string,\n       handler: ((event: JQueryEventObject) => void)): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events An object in which the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent a handler function to be called for the event(s).\n     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If\n     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event occurs.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     */\n    on<TData>(\n        events: JQuery.TypeEventHandlers<TElement, TData, any, any>,\n        selector: JQuery.Selector,\n        data: TData\n    ): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events An object in which the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent a handler function to be called for the event(s).\n     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If\n     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event occurs.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     */\n    on<TData>(\n        events: JQuery.TypeEventHandlers<TElement, TData, TElement, TElement>,\n        selector: null | undefined,\n        data: TData\n    ): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events An object in which the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent a handler function to be called for the event(s).\n     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If\n     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     */\n    on(events: JQuery.TypeEventHandlers<TElement, undefined, any, any>,\n       selector: JQuery.Selector\n    ): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events An object in which the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent a handler function to be called for the event(s).\n     * @param data Data to be passed to the handler in event.data when an event occurs.\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     */\n    on<TData>(\n        events: JQuery.TypeEventHandlers<TElement, TData, TElement, TElement>,\n        data: TData\n    ): this;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     * @param events An object in which the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent a handler function to be called for the event(s).\n     * @see \\`{@link https://api.jquery.com/on/ }\\`\n     * @since 1.7\n     * @example ​ ````Attach multiple event handlers simultaneously using a plain object.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>on demo</title>\n  <style>\n  .test {\n    color: #000;\n    padding: .5em;\n    border: 1px solid #444;\n  }\n  .active {\n    color: #900;\n  }\n  .inside {\n    background-color: aqua;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="test">test div</div>\n​\n<script>\n$( "div.test" ).on({\n  click: function() {\n    $( this ).toggleClass( "active" );\n  }, mouseenter: function() {\n    $( this ).addClass( "inside" );\n  }, mouseleave: function() {\n    $( this ).removeClass( "inside" );\n  }\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    on(events: JQuery.TypeEventHandlers<TElement, undefined, TElement, TElement>): this;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the\n     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered.\n     * @see \\`{@link https://api.jquery.com/one/ }\\`\n     * @since 1.7\n     */\n    one<TType extends string,\n        TData>(\n        events: TType,\n        selector: JQuery.Selector,\n        data: TData,\n        handler: JQuery.TypeEventHandler<TElement, TData, any, any, TType>\n    ): this;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the\n     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered.\n     * @see \\`{@link https://api.jquery.com/one/ }\\`\n     * @since 1.7\n     */\n    one<TType extends string,\n        TData>(\n        events: TType,\n        selector: null | undefined,\n        data: TData,\n        handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, TType>\n    ): this;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the\n     *                 selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand\n     *                for a function that simply does return false.\n     * @see \\`{@link https://api.jquery.com/one/ }\\`\n     * @since 1.7\n     */\n    one<TType extends string>(\n        events: TType,\n        selector: JQuery.Selector,\n        handler: JQuery.TypeEventHandler<TElement, undefined, any, any, TType> |\n                 false\n    ): this;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param data Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered.\n     * @see \\`{@link https://api.jquery.com/one/ }\\`\n     * @since 1.7\n     */\n    one<TType extends string,\n        TData>(\n        events: TType,\n        data: TData,\n        handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, TType>\n    ): this;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".\n     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand\n     *                for a function that simply does return false.\n     * @see \\`{@link https://api.jquery.com/one/ }\\`\n     * @since 1.7\n     * @example ​ ````Tie a one-time click to each div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>one demo</title>\n  <style>\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    background: green;\n    border: 10px outset;\n    cursor:pointer;\n  }\n  p {\n    color: red;\n    margin: 0;\n    clear: left;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<p>Click a green square...</p>\n​\n<script>\nvar n = 0;\n$( "div" ).one( "click", function() {\n  var index = $( "div" ).index( this );\n  $( this ).css({\n    borderStyle: "inset",\n    cursor: "auto"\n  });\n  $( "p" ).text( "Div at index #" + index + " clicked." +\n    " That\'s " + (++n) + " total clicks." );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To display the text of all paragraphs in an alert box the first time each of them is clicked:\n```javascript\n$( "p" ).one( "click", function() {\n  alert( $( this ).text() );\n});\n```\n     * @example ​ ````Event handlers will trigger once per element per event type\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>one demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="count">0</div>\n<div class="target">Hover/click me</div>\n​\n<script>\nvar n = 0;\n$(".target").one("click mouseenter", function() {\n  $(".count").html(++n);\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    one<TType extends string>(\n        events: TType,\n        handler: JQuery.TypeEventHandler<TElement, undefined, TElement, TElement, TType>|\n                 false\n    ): this;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     * @param events An object in which the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent a handler function to be called for the event(s).\n     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If\n     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event occurs.\n     * @see \\`{@link https://api.jquery.com/one/ }\\`\n     * @since 1.7\n     */\n    one<TData>(\n        events: JQuery.TypeEventHandlers<TElement, TData, any, any>,\n        selector: JQuery.Selector,\n        data: TData\n    ): this;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     * @param events An object in which the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent a handler function to be called for the event(s).\n     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If\n     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event occurs.\n     * @see \\`{@link https://api.jquery.com/one/ }\\`\n     * @since 1.7\n     */\n    one<TData>(\n        events: JQuery.TypeEventHandlers<TElement, TData, TElement, TElement>,\n        selector: null | undefined,\n        data: TData\n    ): this;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     * @param events An object in which the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent a handler function to be called for the event(s).\n     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If\n     *                 the selector is null or omitted, the handler is always called when it reaches the selected element.\n     * @see \\`{@link https://api.jquery.com/one/ }\\`\n     * @since 1.7\n     */\n    one(events: JQuery.TypeEventHandlers<TElement, undefined, any, any>,\n        selector: JQuery.Selector): this;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     * @param events An object in which the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent a handler function to be called for the event(s).\n     * @param data Data to be passed to the handler in event.data when an event occurs.\n     * @see \\`{@link https://api.jquery.com/one/ }\\`\n     * @since 1.7\n     */\n    one<TData>(\n        events: JQuery.TypeEventHandlers<TElement, TData, TElement, TElement>,\n        data: TData\n    ): this;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     * @param events An object in which the string keys represent one or more space-separated event types and optional\n     *               namespaces, and the values represent a handler function to be called for the event(s).\n     * @see \\`{@link https://api.jquery.com/one/ }\\`\n     * @since 1.7\n     */\n    one(events: JQuery.TypeEventHandlers<TElement, undefined, TElement, TElement>): this;\n    /**\n     * Set the CSS outer height of each element in the set of matched elements.\n     * @param value_function _&#x40;param_ `value_function`\n     * <br>\n     * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure\n     *             appended (as a string). <br>\n     * * `function` — A function returning the outer height to set. Receives the index position of the element in the set\n     *                and the old outer height as arguments. Within the function, `this` refers to the current element in\n     *                the set.\n     * @see \\`{@link https://api.jquery.com/outerHeight/ }\\`\n     * @since 1.8.0\n     * @example ​ ````Change the outer height of each div the first time it is clicked (and change its color).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>outerHeight demo</title>\n  <style>\n  div {\n    width: 50px;\n    padding: 10px;\n    height: 60px;\n    float: left;\n    margin: 5px;\n    background: red;\n    cursor: pointer;\n  }\n  .mod {\n    background: blue;\n    cursor: default;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n​\n<script>\nvar modHeight = 60;\n$( "div" ).one( "click", function() {\n  $( this ).outerHeight( modHeight ).addClass( "mod" );\n  modHeight -= 8;\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    outerHeight(value_function: string | number | ((this: TElement, index: number, height: number) => string | number),\n                includeMargin?: boolean): this;\n    /**\n     * Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements.\n     * @param includeMargin A Boolean indicating whether to include the element\'s margin in the calculation.\n     * @see \\`{@link https://api.jquery.com/outerHeight/ }\\`\n     * @since 1.2.6\n     * @example ​ ````Get the outerHeight of a paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>outerHeight demo</title>\n  <style>\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p><p></p>\n​\n<script>\nvar p = $( "p:first" );\n$( "p:last" ).text(\n  "outerHeight:" + p.outerHeight() +\n  " , outerHeight( true ):" + p.outerHeight( true ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    outerHeight(includeMargin?: boolean): number | undefined;\n    /**\n     * Set the CSS outer width of each element in the set of matched elements.\n     * @param value_function _&#x40;param_ `value_function`\n     * <br>\n     * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure\n     *             appended (as a string). <br>\n     * * `function` — A function returning the outer width to set. Receives the index position of the element in the set\n     *                and the old outer width as arguments. Within the function, `this` refers to the current element in\n     *                the set.\n     * @see \\`{@link https://api.jquery.com/outerWidth/ }\\`\n     * @since 1.8.0\n     * @example ​ ````Change the outer width of each div the first time it is clicked (and change its color).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>outerWidth demo</title>\n  <style>\n  div {\n    width: 60px;\n    padding: 10px;\n    height: 50px;\n    float: left;\n    margin: 5px;\n    background: red;\n    cursor: pointer;\n  }\n  .mod {\n    background: blue;\n    cursor: default;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n​\n<script>\nvar modWidth = 60;\n$( "div" ).one( "click", function() {\n  $( this ).outerWidth( modWidth ).addClass( "mod" );\n  modWidth -= 8;\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    outerWidth(value_function: string | number | ((this: TElement, index: number, width: number) => string | number),\n               includeMargin?: boolean): this;\n    /**\n     * Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements.\n     * @param includeMargin A Boolean indicating whether to include the element\'s margin in the calculation.\n     * @see \\`{@link https://api.jquery.com/outerWidth/ }\\`\n     * @since 1.2.6\n     * @example ​ ````Get the outerWidth of a paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>outerWidth demo</title>\n  <style>\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p><p></p>\n​\n<script>\nvar p = $( "p:first" );\n$( "p:last" ).text(\n  "outerWidth:" + p.outerWidth() +\n  " , outerWidth( true ):" + p.outerWidth( true ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    outerWidth(includeMargin?: boolean): number | undefined;\n    /**\n     * Get the parent of each element in the current set of matched elements, optionally filtered by a selector.\n     * @param selector A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/parent/ }\\`\n     * @since 1.0\n     * @example ​ ````Shows the parent of each element as (parent &gt; child).  Check the View Source to see the raw html.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>parent demo</title>\n  <style>\n  div, p {\n    margin: 10px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>div,\n  <span>span, </span>\n  <b>b </b>\n</div>\n​\n<p>p,\n  <span>span,\n    <em>em </em>\n  </span>\n</p>\n​\n<div>div,\n  <strong>strong,\n    <span>span, </span>\n    <em>em,\n      <b>b, </b>\n    </em>\n  </strong>\n  <b>b </b>\n</div>\n​\n<script>\n$( "*", document.body ).each(function() {\n  var parentTag = $( this ).parent().get( 0 ).tagName;\n  $( this ).prepend( document.createTextNode( parentTag + " > " ) );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Find the parent element of each paragraph with a class &quot;selected&quot;.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>parent demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div><p>Hello</p></div>\n<div class="selected"><p>Hello Again</p></div>\n​\n<script>\n$( "p" ).parent( ".selected" ).css( "background", "yellow" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    parent(selector?: JQuery.Selector): this;\n    /**\n     * Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.\n     * @param selector A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/parents/ }\\`\n     * @since 1.0\n     * @example ​ ````Find all parent elements of each b.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>parents demo</title>\n  <style>\n  b, span, p, html body {\n    padding: .5em;\n    border: 1px solid;\n  }\n  b {\n    color: blue;\n  }\n  strong {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>\n  <p>\n    <span>\n      <b>My parents are: </b>\n    </span>\n  </p>\n</div>\n​\n<script>\nvar parentEls = $( "b" ).parents()\n  .map(function() {\n    return this.tagName;\n  })\n  .get()\n  .join( ", " );\n$( "b" ).append( "<strong>" + parentEls + "</strong>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Click to find all unique div parent elements of each span.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>parents demo</title>\n  <style>\n  p, div, span {\n    margin: 2px;\n    padding: 1px;\n  }\n  div {\n    border: 2px white solid;\n  }\n  span {\n    cursor: pointer;\n    font-size: 12px;\n  }\n  .selected {\n    color: blue;\n  }\n  b {\n    color: red;\n    display: block;\n    font-size: 14px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  <div>\n    <div><span>Hello</span></div>\n      <span>Hello Again</span>\n    </div>\n    <div>\n      <span>And Hello Again</span>\n    </div>\n  </p>\n  <b>Click Hellos to toggle their parents.</b>\n​\n<script>\nfunction showParents() {\n  $( "div" ).css( "border-color", "white" );\n  var len = $( "span.selected" )\n    .parents( "div" )\n      .css( "border", "2px red solid" )\n      .length;\n  $( "b" ).text( "Unique div parents: " + len );\n}\n$( "span" ).click(function() {\n  $( this ).toggleClass( "selected" );\n  showParents();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    parents<K extends keyof HTMLElementTagNameMap>(selector: K | JQuery<K>): JQuery<HTMLElementTagNameMap[K]>;\n    parents<K extends keyof SVGElementTagNameMap>(selector: K | JQuery<K>): JQuery<SVGElementTagNameMap[K]>;\n    // tslint:disable-next-line:no-unnecessary-generics\n    parents<E extends HTMLElement>(selector?: JQuery.Selector): JQuery<E>;\n    /**\n     * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.\n     * @param selector_element _&#x40;param_ `selector_element`\n     * <br>\n     * * `selector` — A string containing a selector expression to indicate where to stop matching ancestor elements. <br>\n     * * `element` — A DOM node or jQuery object indicating where to stop matching ancestor elements.\n     * @param filter A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/parentsUntil/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @example ​ ````Find the ancestors of &lt;li class=&quot;item-a&quot;&gt; up to &lt;ul class=&quot;level-1&quot;&gt; and give them a red background color. Also, find ancestors of &lt;li class=&quot;item-2&quot;&gt; that have a class of &quot;yes&quot; up to &lt;ul class=&quot;level-1&quot;&gt; and give them a green border.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>parentsUntil demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul class="level-1 yes">\n  <li class="item-i">I</li>\n  <li class="item-ii">II\n    <ul class="level-2 yes">\n      <li class="item-a">A</li>\n      <li class="item-b">B\n        <ul class="level-3">\n          <li class="item-1">1</li>\n          <li class="item-2">2</li>\n          <li class="item-3">3</li>\n        </ul>\n      </li>\n      <li class="item-c">C</li>\n    </ul>\n  </li>\n  <li class="item-iii">III</li>\n</ul>\n​\n<script>\n$( "li.item-a" )\n  .parentsUntil( ".level-1" )\n    .css( "background-color", "red" );\n​\n$( "li.item-2" )\n  .parentsUntil( $( "ul.level-1" ), ".yes" )\n    .css( "border", "3px solid green" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    parentsUntil(selector_element?: JQuery.Selector | Element | JQuery, filter?: JQuery.Selector): this;\n    /**\n     * Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.\n     * @see \\`{@link https://api.jquery.com/position/ }\\`\n     * @since 1.2\n     * @example ​ ````Access the position of the second paragraph:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>position demo</title>\n  <style>\n  div {\n    padding: 15px;\n  }\n  p {\n    margin-left: 10px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>\n  <p>Hello</p>\n</div>\n<p></p>\n​\n<script>\nvar p = $( "p:first" );\nvar position = p.position();\n$( "p:last" ).text( "left: " + position.left + ", top: " + position.top );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    position(): JQuery.Coordinates;\n    /**\n     * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.\n     * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or\n     *                 jQuery objects to insert at the beginning of each element in the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/prepend/ }\\`\n     * @since 1.0\n     * @example ​ ````Prepends some HTML to all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>prepend demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>there, friend!</p>\n<p>amigo!</p>\n​\n<script>\n$( "p" ).prepend( "<b>Hello </b>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Prepends a DOM Element to all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>prepend demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>is what I\'d say</p>\n<p>is what I said</p>\n​\n<script>\n$( "p" ).prepend( document.createTextNode( "Hello " ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>prepend demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p> is what was said.</p><b>Hello</b>\n​\n<script>\n$( "p" ).prepend( $( "b" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    prepend(...contents: Array<JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>>): this;\n    /**\n     * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.\n     * @param funсtion A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at\n     *                 the beginning of each element in the set of matched elements. Receives the index position of the\n     *                 element in the set and the old HTML value of the element as arguments. Within the function, `this`\n     *                 refers to the current element in the set.\n     * @see \\`{@link https://api.jquery.com/prepend/ }\\`\n     * @since 1.4\n     */\n    prepend(funсtion: (this: TElement, index: number, html: string) => JQuery.htmlString | JQuery.TypeOrArray<JQuery.Node | JQuery<JQuery.Node>>): this;\n    /**\n     * Insert every element in the set of matched elements to the beginning of the target.\n     * @param target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements\n     *               will be inserted at the beginning of the element(s) specified by this parameter.\n     * @see \\`{@link https://api.jquery.com/prependTo/ }\\`\n     * @since 1.0\n     * @example ​ ````Prepend all spans to the element with the ID &quot;foo&quot; (Check .prepend() documentation for more examples)\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>prependTo demo</title>\n  <style>\n  div {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="foo">FOO!</div>\n<span>I have something to say... </span>\n​\n<script>\n$( "span" ).prependTo( "#foo" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    prependTo(target: JQuery.Selector | JQuery.htmlString | JQuery.TypeOrArray<Element | DocumentFragment> | JQuery): this;\n    /**\n     * Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector.\n     * @param selector A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/prev/ }\\`\n     * @since 1.0\n     * @example ​ ````Find the very previous sibling of each div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>prev demo</title>\n  <style>\n  div {\n    width: 40px;\n    height: 40px;\n    margin: 10px;\n    float: left;\n    border: 2px blue solid;\n    padding: 2px;\n  }\n  span {\n    font-size: 14px;\n  }\n  p {\n    clear: left;\n    margin: 10px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div></div>\n<div><span>has child</span></div>\n<div></div>\n<div></div>\n<div></div>\n<div id="start"></div>\n<div></div>\n<p><button>Go to Prev</button></p>\n​\n<script>\nvar $curr = $( "#start" );\n$curr.css( "background", "#f99" );\n$( "button" ).click(function() {\n  $curr = $curr.prev();\n  $( "div" ).css( "background", "" );\n  $curr.css( "background", "#f99" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````For each paragraph, find the very previous sibling that has a class &quot;selected&quot;.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>prev demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div><span>Hello</span></div>\n<p class="selected">Hello Again</p>\n<p>And Again</p>\n​\n<script>\n$( "p" ).prev( ".selected" ).css( "background", "yellow" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    prev(selector?: JQuery.Selector): this;\n    /**\n     * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.\n     * @param selector A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/prevAll/ }\\`\n     * @since 1.2\n     * @example ​ ````Locate all the divs preceding the last div and give them a class.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>prevAll demo</title>\n  <style>\n  div {\n    width: 70px;\n    height: 70px;\n    background: #abc;\n    border: 2px solid black;\n    margin: 10px;\n    float: left;\n  }\n  div.before {\n    border-color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n​\n<script>\n$( "div:last" ).prevAll().addClass( "before" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    prevAll(selector?: JQuery.Selector): this;\n    /**\n     * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.\n     * @param selector_element _&#x40;param_ `selector_element`\n     * <br>\n     * * `selector` — A string containing a selector expression to indicate where to stop matching preceding sibling elements. <br>\n     * * `element` — A DOM node or jQuery object indicating where to stop matching preceding sibling elements.\n     * @param filter A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/prevUntil/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @example ​ ````Find the siblings that precede &lt;dt id=&quot;term-2&quot;&gt; up to the preceding &lt;dt&gt; and give them a red background color. Also, find previous &lt;dd&gt; siblings of &lt;dt id=&quot;term-3&quot;&gt; up to &lt;dt id=&quot;term-1&quot;&gt; and give them a green text color.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>prevUntil demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<dl>\n  <dt id="term-1">term 1</dt>\n  <dd>definition 1-a</dd>\n  <dd>definition 1-b</dd>\n  <dd>definition 1-c</dd>\n  <dd>definition 1-d</dd>\n​\n  <dt id="term-2">term 2</dt>\n  <dd>definition 2-a</dd>\n  <dd>definition 2-b</dd>\n  <dd>definition 2-c</dd>\n​\n  <dt id="term-3">term 3</dt>\n  <dd>definition 3-a</dd>\n  <dd>definition 3-b</dd>\n</dl>\n​\n<script>\n$( "#term-2" ).prevUntil( "dt" )\n  .css( "background-color", "red" );\n​\nvar term1 = document.getElementById( "term-1" );\n$( "#term-3" ).prevUntil( term1, "dd" )\n  .css( "color", "green" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    prevUntil(selector_element?: JQuery.Selector | Element | JQuery, filter?: JQuery.Selector): this;\n    /**\n     * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.\n     * @param type The type of queue that needs to be observed.\n     * @param target Object onto which the promise methods have to be attached\n     * @see \\`{@link https://api.jquery.com/promise/ }\\`\n     * @since 1.6\n     */\n    promise<T extends object>(type: string, target: T): T & JQuery.Promise<this>;\n    /**\n     * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.\n     * @param target Object onto which the promise methods have to be attached\n     * @see \\`{@link https://api.jquery.com/promise/ }\\`\n     * @since 1.6\n     */\n    promise<T extends object>(target: T): T & JQuery.Promise<this>;\n    /**\n     * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.\n     * @param type The type of queue that needs to be observed.\n     * @see \\`{@link https://api.jquery.com/promise/ }\\`\n     * @since 1.6\n     * @example ​ ````Using .promise() on a collection with no active animation returns a resolved Promise:\n```javascript\nvar div = $( "<div>" );\n​\ndiv.promise().done(function( arg1 ) {\n  // Will fire right away and alert "true"\n  alert( this === div && arg1 === div );\n});\n```\n     * @example ​ ````Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>promise demo</title>\n  <style>\n  div {\n    height: 50px;\n    width: 50px;\n    float: left;\n    margin-right: 10px;\n    display: none;\n    background-color: #090;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Go</button>\n<p>Ready...</p>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n​\n<script>\n$( "button" ).on( "click", function() {\n  $( "p" ).append( "Started..." );\n​\n  $( "div" ).each(function( i ) {\n    $( this ).fadeIn().fadeOut( 1000 * ( i + 1 ) );\n  });\n​\n  $( "div" ).promise().done(function() {\n    $( "p" ).append( " Finished! " );\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Resolve the returned Promise using a $.when() statement (the .promise() method makes it possible to do this with jQuery collections):\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>promise demo</title>\n  <style>\n  div {\n    height: 50px;\n    width: 50px;\n    float: left;\n    margin-right: 10px;\n    display: none;\n    background-color: #090;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Go</button>\n<p>Ready...</p>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n​\n<script>\nvar effect = function() {\n  return $( "div" ).fadeIn( 800 ).delay( 1200 ).fadeOut();\n};\n​\n$( "button" ).on( "click", function() {\n  $( "p" ).append( " Started... " );\n​\n  $.when( effect() ).done(function() {\n    $( "p" ).append( " Finished! " );\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    promise(type?: string): JQuery.Promise<this>;\n    /**\n     * Set one or more properties for the set of matched elements.\n     * @param propertyName The name of the property to set.\n     * @param value_function _&#x40;param_ `value_function`\n     * <br>\n     * * `value` — A value to set for the property. <br>\n     * * `function` — A function returning the value to set. Receives the index position of the element in the set and the\n     *                old property value as arguments. Within the function, the keyword `this` refers to the current element.\n     * @see \\`{@link https://api.jquery.com/prop/ }\\`\n     * @since 1.6\n     */\n    prop(propertyName: string,\n         value_function: string | number | boolean | symbol | object | null | undefined | ((this: TElement, index: number, oldPropertyValue: any) => any)): this;\n    /**\n     * Set one or more properties for the set of matched elements.\n     * @param properties An object of property-value pairs to set.\n     * @see \\`{@link https://api.jquery.com/prop/ }\\`\n     * @since 1.6\n     * @example ​ ````Disable all checkboxes on the page.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>prop demo</title>\n  <style>\n  img {\n    padding: 10px;\n  }\n  div {\n    color: red;\n    font-size: 24px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n  <input type="checkbox" checked="checked">\n  <input type="checkbox">\n  <input type="checkbox">\n  <input type="checkbox" checked="checked">\n​\n<script>\n$( "input[type=\'checkbox\']" ).prop({\n  disabled: true\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    prop(properties: JQuery.PlainObject): this;\n    /**\n     * Get the value of a property for the first element in the set of matched elements.\n     * @param propertyName The name of the property to get.\n     * @see \\`{@link https://api.jquery.com/prop/ }\\`\n     * @since 1.6\n     * @example ​ ````Display the checked property and attribute of a checkbox as it changes.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>prop demo</title>\n  <style>\n  p {\n    margin: 20px 0 0;\n  }\n  b {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="check1" type="checkbox" checked="checked">\n<label for="check1">Check me</label>\n<p></p>\n​\n<script>\n$( "input" ).change(function() {\n  var $input = $( this );\n  $( "p" ).html(\n    ".attr( \\"checked\\" ): <b>" + $input.attr( "checked" ) + "</b><br>" +\n    ".prop( \\"checked\\" ): <b>" + $input.prop( "checked" ) + "</b><br>" +\n    ".is( \\":checked\\" ): <b>" + $input.is( ":checked" ) + "</b>" );\n}).change();\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    prop(propertyName: string): any;\n    /**\n     * Add a collection of DOM elements onto the jQuery stack.\n     * @param elements An array of elements to push onto the stack and make into a new jQuery object.\n     * @param name The name of a jQuery method that generated the array of elements.\n     * @param args The arguments that were passed in to the jQuery method (for serialization).\n     * @see \\`{@link https://api.jquery.com/pushStack/ }\\`\n     * @since 1.3\n     */\n    pushStack(elements: ArrayLike<Element>, name: string, args: any[]): this;\n    /**\n     * Add a collection of DOM elements onto the jQuery stack.\n     * @param elements An array of elements to push onto the stack and make into a new jQuery object.\n     * @see \\`{@link https://api.jquery.com/pushStack/ }\\`\n     * @since 1.0\n     * @example ​ ````Add some elements onto the jQuery stack, then pop back off again.\n```javascript\njQuery([])\n  .pushStack( document.getElementsByTagName( "div" ) )\n  .remove()\n  .end();\n```\n     */\n    pushStack(elements: ArrayLike<Element>): this;\n    /**\n     * Manipulate the queue of functions to be executed, once for each matched element.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @param newQueue The new function to add to the queue, with a function to call that will dequeue the next item.\n     *                 An array of functions to replace the current queue contents.\n     * @see \\`{@link https://api.jquery.com/queue/ }\\`\n     * @since 1.2\n     * @example ​ ````Set a queue array to delete the queue.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>queue demo</title>\n  <style>\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="start">Start</button>\n<button id="stop">Stop</button>\n<div></div>\n​\n<script>\n$( "#start" ).click(function() {\n  $( "div" )\n    .show( "slow" )\n    .animate({ left: "+=200" }, 5000 )\n    .queue(function() {\n      $( this ).addClass( "newcolor" ).dequeue();\n    })\n    .animate({ left: \'-=200\' }, 1500 )\n    .queue(function() {\n      $( this ).removeClass( "newcolor" ).dequeue();\n    })\n    .slideUp();\n});\n$( "#stop" ).click(function() {\n  $( "div" )\n    .queue( "fx", [] )\n    .stop();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    queue(queueName: string, newQueue: JQuery.TypeOrArray<JQuery.QueueFunction<TElement>>): this;\n    /**\n     * Manipulate the queue of functions to be executed, once for each matched element.\n     * @param newQueue The new function to add to the queue, with a function to call that will dequeue the next item.\n     *                 An array of functions to replace the current queue contents.\n     * @see \\`{@link https://api.jquery.com/queue/ }\\`\n     * @since 1.2\n     * @example ​ ````Queue a custom function.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>queue demo</title>\n  <style>\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nClick here...\n<div></div>\n​\n<script>\n$( document.body ).click(function() {\n  $( "div" )\n    .show( "slow" )\n    .animate({ left: "+=200" }, 2000 )\n    .queue(function() {\n      $( this ).addClass( "newcolor" ).dequeue();\n    })\n    .animate({ left: "-=200" }, 500 )\n    .queue(function() {\n      $( this ).removeClass( "newcolor" ).dequeue();\n    })\n    .slideUp();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    queue(newQueue: JQuery.TypeOrArray<JQuery.QueueFunction<TElement>>): this;\n    /**\n     * Show the queue of functions to be executed on the matched elements.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @see \\`{@link https://api.jquery.com/queue/ }\\`\n     * @since 1.2\n     * @example ​ ````Show the length of the queue.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>queue demo</title>\n  <style>\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 60px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  p {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>The queue length is: <span></span></p>\n<div></div>\n​\n<script>\nvar div = $( "div" );\n​\nfunction runIt() {\n  div\n    .show( "slow" )\n    .animate({ left: "+=200" }, 2000 )\n    .slideToggle( 1000 )\n    .slideToggle( "fast" )\n    .animate({ left: "-=200" }, 1500 )\n    .hide( "slow" )\n    .show( 1200 )\n    .slideUp( "normal", runIt );\n}\n​\nfunction showIt() {\n  var n = div.queue( "fx" );\n  $( "span" ).text( n.length );\n  setTimeout( showIt, 100 );\n}\n​\nrunIt();\nshowIt();\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    queue(queueName?: string): JQuery.Queue<Node>;\n    /**\n     * Specify a function to execute when the DOM is fully loaded.\n     * @param handler A function to execute after the DOM is ready.\n     * @see \\`{@link https://api.jquery.com/ready/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.0. Use `jQuery(function() { })`.\n     * @example ​ ````Display a message when the DOM is loaded.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>ready demo</title>\n  <style>\n  p {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n  <script>\n​\n  $(function() {\n    $( "p" ).text( "The DOM is now loaded and can be manipulated." );\n  });\n​\n  <\/script>\n</head>\n<body>\n​\n<p>Not loaded yet.</p>\n​\n</body>\n</html>\n```\n     */\n    ready(handler: ($: JQueryStatic) => void): this;\n    /**\n     * Remove the set of matched elements from the DOM.\n     * @param selector A selector expression that filters the set of matched elements to be removed.\n     * @see \\`{@link https://api.jquery.com/remove/ }\\`\n     * @since 1.0\n     * @example ​ ````Removes all paragraphs from the DOM\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>remove demo</title>\n  <style>\n  p {\n    background: yellow;\n    margin: 6px 0;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\nhow are\n<p>you?</p>\n<button>Call remove() on paragraphs</button>\n​\n<script>\n$( "button" ).click(function() {\n  $( "p" ).remove();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Removes all paragraphs that contain &quot;Hello&quot; from the DOM.  Analogous to doing $(&quot;p&quot;).filter(&quot;:contains(&#39;Hello&#39;)&quot;).remove().\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>remove demo</title>\n  <style>\n  p {\n    background: yellow;\n    margin: 6px 0;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p class="hello">Hello</p>\nhow are\n<p>you?</p>\n<button>Call remove( ":contains(\'Hello\')" ) on paragraphs</button>\n​\n<script>\n$( "button" ).click(function() {\n  $( "p" ).remove( ":contains(\'Hello\')" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    remove(selector?: string): this;\n    /**\n     * Remove an attribute from each element in the set of matched elements.\n     * @param attributeName An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.\n     * @see \\`{@link https://api.jquery.com/removeAttr/ }\\`\n     * @since 1.0\n     * @example ​ ````Clicking the button changes the title of the input next to it. Move the mouse pointer over the text input to see the effect of adding and removing the title attribute.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>removeAttr demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Change title</button>\n<input type="text" title="hello there">\n<div id="log"></div>\n​\n<script>\n(function() {\n  var inputTitle = $( "input" ).attr( "title" );\n  $( "button" ).click(function() {\n    var input = $( this ).next();\n​\n    if ( input.attr( "title" ) === inputTitle ) {\n      input.removeAttr( "title" )\n    } else {\n      input.attr( "title", inputTitle );\n    }\n​\n    $( "#log" ).html( "input title is now " + input.attr( "title" ) );\n  });\n})();\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    removeAttr(attributeName: string): this;\n    /**\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\n     * @param className_function _&#x40;param_ `className_function`\n     * <br>\n     * * `className` — One or more space-separated classes to be removed from the class attribute of each matched element. <br>\n     * * `function` — A function returning one or more space-separated class names to be removed. Receives the index\n     *                position of the element in the set and the old class value as arguments.\n     * @see \\`{@link https://api.jquery.com/removeClass/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @since 3.3\n     * @example ​ ````Remove the class &#39;blue&#39; from the matched elements.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>removeClass demo</title>\n  <style>\n  p {\n    margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  .blue {\n    color: blue;\n  }\n  .under {\n    text-decoration: underline;\n  }\n  .highlight {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p class="blue under">Hello</p>\n<p class="blue under highlight">and</p>\n<p class="blue under">then</p>\n<p class="blue under">Goodbye</p>\n​\n<script>\n$( "p:even" ).removeClass( "blue" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Remove the class &#39;blue&#39; and &#39;under&#39; from the matched elements.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>removeClass demo</title>\n  <style>\n  p {\n    margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  .blue {\n    color: blue;\n  }\n  .under {\n    text-decoration: underline;\n  }\n  .highlight {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p class="blue under">Hello</p>\n<p class="blue under highlight">and</p>\n<p class="blue under">then</p>\n<p class="blue under">Goodbye</p>\n​\n<script>\n$( "p:odd" ).removeClass( "blue under" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Remove all the classes from the matched elements.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>removeClass demo</title>\n  <style>\n  p {\n    margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  .blue {\n    color: blue;\n  }\n  .under {\n    text-decoration: underline;\n  }\n  .highlight {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p class="blue under">Hello</p>\n<p class="blue under highlight">and</p>\n<p class="blue under">then</p>\n<p class="blue under">Goodbye</p>\n​\n<script>\n$( "p:eq(1)" ).removeClass();\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    removeClass(className_function?: JQuery.TypeOrArray<string> | ((this: TElement, index: number, className: string) => string)): this;\n    /**\n     * Remove a previously-stored piece of data.\n     * @param name A string naming the piece of data to delete.\n     *             An array or space-separated string naming the pieces of data to delete.\n     * @see \\`{@link https://api.jquery.com/removeData/ }\\`\n     * @since 1.2.3\n     * @since 1.7\n     * @example ​ ````Set a data store for 2 names then remove one of them.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>removeData demo</title>\n  <style>\n  div {\n    margin: 2px;\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>value1 before creation: <span></span></div>\n<div>value1 after creation: <span></span></div>\n<div>value1 after removal: <span></span></div>\n<div>value2 after removal: <span></span></div>\n​\n<script>\n$( "span:eq(0)" ).text( "" + $( "div" ).data( "test1" ) );\n$( "div" ).data( "test1", "VALUE-1" );\n$( "div" ).data( "test2", "VALUE-2" );\n$( "span:eq(1)" ).text( "" + $( "div").data( "test1" ) );\n$( "div" ).removeData( "test1" );\n$( "span:eq(2)" ).text( "" + $( "div" ).data( "test1" ) );\n$( "span:eq(3)" ).text( "" + $( "div" ).data( "test2" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    removeData(name?: JQuery.TypeOrArray<string>): this;\n    /**\n     * Remove a property for the set of matched elements.\n     * @param propertyName The name of the property to remove.\n     * @see \\`{@link https://api.jquery.com/removeProp/ }\\`\n     * @since 1.6\n     * @example ​ ````Set a numeric property on a paragraph and then remove it.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>removeProp demo</title>\n  <style>\n  img {\n    padding: 10px;\n  }\n  div {\n    color: red;\n    font-size: 24px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n  <p></p>\n​\n<script>\npara = $( "p" );\npara\n  .prop( "luggageCode", 1234 )\n  .append( "The secret luggage code is: ", String( para.prop( "luggageCode" ) ), ". " )\n  .removeProp( "luggageCode" )\n  .append( "Now the secret luggage code is: ", String( para.prop( "luggageCode" ) ), ". " );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    removeProp(propertyName: string): this;\n    /**\n     * Replace each target element with the set of matched elements.\n     * @param target A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.\n     * @see \\`{@link https://api.jquery.com/replaceAll/ }\\`\n     * @since 1.2\n     * @example ​ ````Replace all the paragraphs with bold words.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>replaceAll demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n​\n<script>\n$( "<b>Paragraph. </b>" ).replaceAll( "p" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    replaceAll(target: JQuery.Selector | JQuery | JQuery.TypeOrArray<Element>): this;\n    /**\n     * Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.\n     * @param newContent_function _&#x40;param_ `newContent_function`\n     * <br>\n     * * `newContent` — The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object. <br>\n     * * `function` — A function that returns content with which to replace the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/replaceWith/ }\\`\n     * @since 1.2\n     * @since 1.4\n     * @example ​ ````On click, replace the button with a div containing the same word.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>replaceWith demo</title>\n  <style>\n  button {\n    display: block;\n    margin: 3px;\n    color: red;\n    width: 200px;\n  }\n  div {\n    color: red;\n    border: 2px solid blue;\n    width: 200px;\n    margin: 3px;\n    text-align: center;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>First</button>\n<button>Second</button>\n<button>Third</button>\n​\n<script>\n$( "button" ).click(function() {\n  $( this ).replaceWith( "<div>" + $( this ).text() + "</div>" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Replace all paragraphs with bold words.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>replaceWith demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n​\n<script>\n$( "p" ).replaceWith( "<b>Paragraph. </b>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````On click, replace each paragraph with a div that is already in the DOM and selected with the $() function. Notice it doesn&#39;t clone the object but rather moves it to replace the paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>replaceWith demo</title>\n  <style>\n  div {\n    border: 2px solid blue;\n    color: red;\n    margin: 3px;\n  }\n  p {\n    border: 2px solid red;\n    color: blue;\n    margin: 3px;\n    cursor: pointer;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n  <p>Hello</p>\n  <p>cruel</p>\n  <p>World</p>\n  <div>Replaced!</div>\n​\n<script>\n$( "p" ).click(function() {\n  $( this ).replaceWith( $( "div" ) );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````On button click, replace the containing div with its child divs and append the class name of the selected element to the paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>replaceWith demo</title>\n  <style>\n  .container {\n    background-color: #991;\n  }\n  .inner {\n    color: #911;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>\n  <button>Replace!</button>\n</p>\n<div class="container">\n  <div class="inner">Scooby</div>\n  <div class="inner">Dooby</div>\n  <div class="inner">Doo</div>\n</div>\n​\n<script>\n$( "button" ).on( "click", function() {\n  var $container = $( "div.container" ).replaceWith(function() {\n    return $( this ).contents();\n  });\n​\n  $( "p" ).append( $container.attr( "class" ) );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    replaceWith(newContent_function: JQuery.htmlString |\n                                     JQuery<JQuery.Node> |\n                                     JQuery.TypeOrArray<Element> |\n                                     JQuery.Node |\n                                     ((this: TElement, index: number, oldhtml: JQuery.htmlString) => JQuery.htmlString |\n                                                                                                     JQuery<JQuery.Node> |\n                                                                                                     JQuery.TypeOrArray<Element> |\n                                                                                                     JQuery.Node)): this;\n    /**\n     * Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/resize/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    resize<TData>(eventData: TData,\n                  handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'resize\'>): this;\n    /**\n     * Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/resize/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````To see the window width while (or after) it is resized, try:\n```javascript\n$( window ).resize(function() {\n  $( "body" ).prepend( "<div>" + $( window ).width() + "</div>" );\n});\n```\n     */\n    resize(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'resize\'> |\n                     false): this;\n    /**\n     * Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/scroll/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    scroll<TData>(eventData: TData,\n                  handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'scroll\'>): this;\n    /**\n     * Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/scroll/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````To do something when your page is scrolled:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>scroll demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  p {\n    color: green;\n  }\n  span {\n    color: red;\n    display: none;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>Try scrolling the iframe.</div>\n<p>Paragraph - <span>Scroll happened!</span></p>\n​\n<script>\n$( "p" ).clone().appendTo( document.body );\n$( "p" ).clone().appendTo( document.body );\n$( "p" ).clone().appendTo( document.body );\n$( window ).scroll(function() {\n  $( "span" ).css( "display", "inline" ).fadeOut( "slow" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    scroll(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'scroll\'> |\n                     false): this;\n    /**\n     * Set the current horizontal position of the scroll bar for each of the set of matched elements.\n     * @param value An integer indicating the new position to set the scroll bar to.\n     * @see \\`{@link https://api.jquery.com/scrollLeft/ }\\`\n     * @since 1.2.6\n     * @example ​ ````Set the scrollLeft of a div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>scrollLeft demo</title>\n  <style>\n  div.demo {\n    background: #ccc none repeat scroll 0 0;\n    border: 3px solid #666;\n    margin: 5px;\n    padding: 5px;\n    position: relative;\n    width: 200px;\n    height: 100px;\n    overflow: auto;\n  }\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n    width: 1000px;\n    height: 1000px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="demo"><h1>lalala</h1><p>Hello</p></div>\n​\n<script>\n$( "div.demo" ).scrollLeft( 300 );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    scrollLeft(value: number): this;\n    /**\n     * Get the current horizontal position of the scroll bar for the first element in the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/scrollLeft/ }\\`\n     * @since 1.2.6\n     * @example ​ ````Get the scrollLeft of a paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>scrollLeft demo</title>\n  <style>\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p><p></p>\n​\n<script>\nvar p = $( "p:first" );\n$( "p:last" ).text( "scrollLeft:" + p.scrollLeft() );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    scrollLeft(): number | undefined;\n    /**\n     * Set the current vertical position of the scroll bar for each of the set of matched elements.\n     * @param value A number indicating the new position to set the scroll bar to.\n     * @see \\`{@link https://api.jquery.com/scrollTop/ }\\`\n     * @since 1.2.6\n     * @example ​ ````Set the scrollTop of a div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>scrollTop demo</title>\n  <style>\n  div.demo {\n    background: #ccc none repeat scroll 0 0;\n    border: 3px solid #666;\n    margin: 5px;\n    padding: 5px;\n    position: relative;\n    width: 200px;\n    height: 100px;\n    overflow: auto;\n  }\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n    width: 1000px;\n    height: 1000px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="demo"><h1>lalala</h1><p>Hello</p></div>\n​\n<script>\n$( "div.demo" ).scrollTop( 300 );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    scrollTop(value: number): this;\n    /**\n     * Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.\n     * @see \\`{@link https://api.jquery.com/scrollTop/ }\\`\n     * @since 1.2.6\n     * @example ​ ````Get the scrollTop of a paragraph.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>scrollTop demo</title>\n  <style>\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p><p></p>\n​\n<script>\nvar p = $( "p:first" );\n$( "p:last" ).text( "scrollTop:" + p.scrollTop() );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    scrollTop(): number | undefined;\n    /**\n     * Bind an event handler to the "select" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/select/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    select<TData>(eventData: TData,\n                  handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'select\'>): this;\n    /**\n     * Bind an event handler to the "select" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/select/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````To do something when text in input boxes is selected:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>select demo</title>\n  <style>\n  p {\n    color: blue;\n  }\n  div {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n  <p>Click and drag the mouse to select text in the inputs.</p>\n  <input type="text" value="Some text">\n  <input type="text" value="to test on">\n  <div></div>\n  ​\n<script>\n$( ":input" ).select(function() {\n  $( "div" ).text( "Something was selected" ).show().fadeOut( 1000 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To trigger the select event on all input elements, try:\n```javascript\n$( "input" ).select();\n```\n     */\n    select(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'select\'> |\n                     false): this;\n    /**\n     * Encode a set of form elements as a string for submission.\n     * @see \\`{@link https://api.jquery.com/serialize/ }\\`\n     * @since 1.0\n     * @example ​ ````Serialize a form to a query string that could be sent to a server in an Ajax request.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>serialize demo</title>\n  <style>\n  body, select {\n    font-size: 12px;\n  }\n  form {\n    margin: 5px;\n  }\n  p {\n    color: red;\n    margin: 5px;\n    font-size: 14px;\n  }\n  b {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<form>\n  <select name="single">\n    <option>Single</option>\n    <option>Single2</option>\n  </select>\n​\n  <br>\n  <select name="multiple" multiple="multiple">\n    <option selected="selected">Multiple</option>\n    <option>Multiple2</option>\n    <option selected="selected">Multiple3</option>\n  </select>\n​\n  <br>\n  <input type="checkbox" name="check" value="check1" id="ch1">\n  <label for="ch1">check1</label>\n  <input type="checkbox" name="check" value="check2" checked="checked" id="ch2">\n  <label for="ch2">check2</label>\n​\n  <br>\n  <input type="radio" name="radio" value="radio1" checked="checked" id="r1">\n  <label for="r1">radio1</label>\n  <input type="radio" name="radio" value="radio2" id="r2">\n  <label for="r2">radio2</label>\n</form>\n​\n<p><tt id="results"></tt></p>\n​\n<script>\n  function showValues() {\n    var str = $( "form" ).serialize();\n    $( "#results" ).text( str );\n  }\n  $( "input[type=\'checkbox\'], input[type=\'radio\']" ).on( "click", showValues );\n  $( "select" ).on( "change", showValues );\n  showValues();\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    serialize(): string;\n    /**\n     * Encode a set of form elements as an array of names and values.\n     * @see \\`{@link https://api.jquery.com/serializeArray/ }\\`\n     * @since 1.2\n     * @example ​ ````Get the values from a form, iterate through them, and append them to a results display.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>serializeArray demo</title>\n  <style>\n  body, select {\n    font-size: 14px;\n  }\n  form {\n    margin: 5px;\n  }\n  p {\n    color: red;\n    margin: 5px;\n  }\n  b {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><b>Results:</b> <span id="results"></span></p>\n<form>\n  <select name="single">\n    <option>Single</option>\n    <option>Single2</option>\n  </select>\n  <select name="multiple" multiple="multiple">\n    <option selected="selected">Multiple</option>\n    <option>Multiple2</option>\n    <option selected="selected">Multiple3</option>\n  </select>\n  <br>\n  <input type="checkbox" name="check" value="check1" id="ch1">\n  <label for="ch1">check1</label>\n  <input type="checkbox" name="check" value="check2" checked="checked" id="ch2">\n  <label for="ch2">check2</label>\n  <input type="radio" name="radio" value="radio1" checked="checked" id="r1">\n  <label for="r1">radio1</label>\n  <input type="radio" name="radio" value="radio2" id="r2">\n  <label for="r2">radio2</label>\n</form>\n​\n<script>\n  function showValues() {\n    var fields = $( ":input" ).serializeArray();\n    $( "#results" ).empty();\n    jQuery.each( fields, function( i, field ) {\n      $( "#results" ).append( field.value + " " );\n    });\n  }\n​\n  $( ":checkbox, :radio" ).click( showValues );\n  $( "select" ).change( showValues );\n  showValues();\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    serializeArray(): JQuery.NameValuePair[];\n    /**\n     * Display the matched elements.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/show/ }\\`\n     * @since 1.4.3\n     */\n    show(duration: JQuery.Duration, easing: string, complete: (this: TElement) => void): this;\n    /**\n     * Display the matched elements.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing_complete _&#x40;param_ `easing_complete`\n     * <br>\n     * * `easing` — A string indicating which easing function to use for the transition. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/show/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div&#39;s animation ends.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>show demo</title>\n  <style>\n  div {\n    background: #def3ca;\n    margin: 3px;\n    width: 80px;\n    display: none;\n    float: left;\n    text-align: center;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="showr">Show</button>\n<button id="hidr">Hide</button>\n<div>Hello 3,</div>\n<div>how</div>\n<div>are</div>\n<div>you?</div>\n​\n<script>\n$( "#showr" ).click(function() {\n  $( "div" ).first().show( "fast", function showNext() {\n    $( this ).next( "div" ).show( "fast", showNext );\n  });\n});\n​\n$( "#hidr" ).click(function() {\n  $( "div" ).hide( 1000 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Show all span and input elements with an animation. Change the text once the animation is done.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>show demo</title>\n  <style>\n  span {\n    display: none;\n  }\n  div {\n    display: none;\n  }\n  p {\n    font-weight: bold;\n    background-color: #fcd;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Do it!</button>\n<span>Are you sure? (type \'yes\' if you are) </span>\n<div>\n  <form>\n    <input type="text"  value="as;ldkfjalsdf">\n  </form>\n</div>\n<p style="display:none;">I\'m hidden...</p>\n​\n<script>\nfunction doIt() {\n  $( "span,div" ).show( "slow" );\n}\n// Can pass in function name\n$( "button" ).click( doIt );\n​\n$( "form" ).submit(function( event ) {\n  if ( $( "input" ).val() === "yes" ) {\n    $( "p" ).show( 4000, function() {\n      $( this ).text( "Ok, DONE! (now showing)" );\n    });\n  }\n  $( "span,div" ).hide( "fast" );\n​\n  // Prevent form submission\n  event.preventDefault();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    show(duration: JQuery.Duration, easing_complete: string | ((this: TElement) => void)): this;\n    /**\n     * Display the matched elements.\n     * @param duration_complete_options _&#x40;param_ `duration_complete_options`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>\n     * * `options` — A map of additional options to pass to the method.\n     * @see \\`{@link https://api.jquery.com/show/ }\\`\n     * @since 1.0\n     * @example ​ ````Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>show demo</title>\n  <style>\n  p {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Show it</button>\n<p style="display: none">Hello  2</p>\n​\n<script>\n$( "button" ).click(function() {\n  $( "p" ).show( "slow" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    show(duration_complete_options?: JQuery.Duration | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;\n    /**\n     * Get the siblings of each element in the set of matched elements, optionally filtered by a selector.\n     * @param selector A string containing a selector expression to match elements against.\n     * @see \\`{@link https://api.jquery.com/siblings/ }\\`\n     * @since 1.0\n     * @example ​ ````Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>siblings demo</title>\n  <style>\n  ul {\n    float: left;\n    margin: 5px;\n    font-size: 16px;\n    font-weight: bold;\n  }\n  p {\n    color: blue;\n    margin: 10px 20px;\n    font-size: 16px;\n    padding: 5px;\n    font-weight: bolder;\n  }\n  .hilite {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li>One</li>\n  <li>Two</li>\n  <li class="hilite">Three</li>\n  <li>Four</li>\n</ul>\n​\n<ul>\n  <li>Five</li>\n  <li>Six</li>\n  <li>Seven</li>\n</ul>\n​\n<ul>\n  <li>Eight</li>\n  <li class="hilite">Nine</li>\n  <li>Ten</li>\n  <li class="hilite">Eleven</li>\n</ul>\n​\n<p>Unique siblings: <b></b></p>\n​\n<script>\nvar len = $( ".hilite" ).siblings()\n  .css( "color", "red" )\n  .length;\n$( "b" ).text( len );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Find all siblings with a class &quot;selected&quot; of each div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>siblings demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div><span>Hello</span></div>\n<p class="selected">Hello Again</p>\n<p>And Again</p>\n​\n<script>\n$( "p" ).siblings( ".selected" ).css( "background", "yellow" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    siblings(selector?: JQuery.Selector): this;\n    /**\n     * Reduce the set of matched elements to a subset specified by a range of indices.\n     * @param start An integer indicating the 0-based position at which the elements begin to be selected. If negative,\n     *              it indicates an offset from the end of the set.\n     * @param end An integer indicating the 0-based position at which the elements stop being selected. If negative,\n     *            it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.\n     * @see \\`{@link https://api.jquery.com/slice/ }\\`\n     * @since 1.1.4\n     * @example ​ ````Turns divs yellow based on a random slice.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>slice demo</title>\n  <style>\n  div {\n    width: 40px;\n    height: 40px;\n    margin: 10px;\n    float: left;\n    border: 2px solid blue;\n  }\n  span {\n    color: red;\n    font-weight: bold;\n  }\n  button {\n    margin: 5px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button>Turn slice yellow</button>\n  <span>Click the button!</span></p>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  ​\n<script>\nfunction colorEm() {\n  var $div = $( "div" );\n  var start = Math.floor( Math.random() * $div.length );\n  var end = Math.floor( Math.random() * ( $div.length - start ) ) +\n    start + 1;\n  if ( end === $div.length ) {\n    end = undefined;\n  }\n  $div.css( "background", "" );\n  if ( end ) {\n    $div.slice( start, end ).css( "background", "yellow" );\n  } else {\n    $div.slice( start ).css( "background", "yellow" );\n  }\n  $( "span" ).text( "$( \'div\' ).slice( " + start +\n    (end ? ", " + end : "") +\n    ").css( \'background\', \'yellow\' );" );\n}\n​\n$( "button" ).click( colorEm );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Selects all paragraphs, then slices the selection to include only the first element.\n```javascript\n$( "p" ).slice( 0, 1 ).wrapInner( "<b></b>" );\n```\n     * @example ​ ````Selects all paragraphs, then slices the selection to include only the first and second element.\n```javascript\n$( "p" ).slice( 0, 2 ).wrapInner( "<b></b>" );\n```\n     * @example ​ ````Selects all paragraphs, then slices the selection to include only the second element.\n```javascript\n$( "p" ).slice( 1, 2 ).wrapInner( "<b></b>" );\n```\n     * @example ​ ````Selects all paragraphs, then slices the selection to include only the second and third element.\n```javascript\n$( "p" ).slice( 1 ).wrapInner( "<b></b>" );\n```\n     * @example ​ ````Selects all paragraphs, then slices the selection to include only the third element.\n```javascript\n$( "p" ).slice( -1 ).wrapInner( "<b></b>" );\n```\n     */\n    slice(start: number, end?: number): this;\n    /**\n     * Display the matched elements with a sliding motion.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/slideDown/ }\\`\n     * @since 1.4.3\n     */\n    slideDown(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;\n    /**\n     * Display the matched elements with a sliding motion.\n     * @param duration_easing _&#x40;param_ `duration_easing`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/slideDown/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>slideDown demo</title>\n  <style>\n  div {\n    background: #cfd;\n    margin: 3px;\n    width: 50px;\n    text-align: center;\n    float: left;\n    cursor: pointer;\n    border: 2px outset black;\n    font-weight: bolder;\n  }\n  input {\n    display: none;\n    width: 120px;\n    float: left;\n    margin: 10px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>Push!</div>\n<input type="text">\n<input type="text" class="middle">\n<input type="text">\n  ​\n<script>\n$( "div" ).click(function() {\n  $( this ).css({\n    borderStyle: "inset",\n    cursor: "wait"\n  });\n  $( "input" ).slideDown( 1000, function() {\n    $( this )\n      .css( "border", "2px red inset" )\n      .filter( ".middle" )\n        .css( "background", "yellow" )\n        .focus();\n    $( "div" ).css( "visibility", "hidden" );\n  });\n});\n​\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    slideDown(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;\n    /**\n     * Display the matched elements with a sliding motion.\n     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>\n     * * `options` — A map of additional options to pass to the method.\n     * @see \\`{@link https://api.jquery.com/slideDown/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Animates all divs to slide down and show themselves over 600 milliseconds.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>slideDown demo</title>\n  <style>\n  div {\n    background: #de9a44;\n    margin: 3px;\n    width: 80px;\n    height: 40px;\n    display: none;\n    float: left;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nClick me!\n<div></div>\n<div></div>\n<div></div>\n​\n<script>\n$( document.body ).click(function () {\n  if ( $( "div:first" ).is( ":hidden" ) ) {\n    $( "div" ).slideDown( "slow" );\n  } else {\n    $( "div" ).hide();\n  }\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    slideDown(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;\n    /**\n     * Display or hide the matched elements with a sliding motion.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/slideToggle/ }\\`\n     * @since 1.4.3\n     */\n    slideToggle(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;\n    /**\n     * Display or hide the matched elements with a sliding motion.\n     * @param duration_easing _&#x40;param_ `duration_easing`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/slideToggle/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Animates divs between dividers with a toggle that makes some appear and some disappear.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>slideToggle demo</title>\n  <style>\n  div {\n    background: #b977d1;\n    margin: 3px;\n    width: 60px;\n    height: 60px;\n    float: left;\n  }\n  div.still {\n    background: #345;\n    width: 5px;\n  }\n  div.hider {\n    display: none;\n  }\n  span {\n    color: red;\n  }\n  p {\n    clear: left;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<div class="still"></div>\n<div style="display:none;">\n</div><div class="still"></div>\n<div></div>\n<div class="still"></div>\n<div class="hider"></div>\n<div class="still"></div>\n<div class="hider"></div>\n<div class="still"></div>\n<div></div>\n<p><button id="aa">Toggle</button> There have been <span>0</span> toggled divs.</p>\n​\n<script>\n$( "#aa" ).click(function() {\n  $( "div:not(.still)" ).slideToggle( "slow", function() {\n    var n = parseInt( $( "span" ).text(), 10 );\n    $( "span" ).text( n + 1 );\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    slideToggle(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;\n    /**\n     * Display or hide the matched elements with a sliding motion.\n     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>\n     * * `options` — A map of additional options to pass to the method.\n     * @see \\`{@link https://api.jquery.com/slideToggle/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>slideToggle demo</title>\n  <style>\n  p {\n    width: 400px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Toggle</button>\n<p>\n  This is the paragraph to end all paragraphs.  You\n  should feel <em>lucky</em> to have seen such a paragraph in\n  your life.  Congratulations!\n</p>\n​\n<script>\n$( "button" ).click(function() {\n  $( "p" ).slideToggle( "slow" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    slideToggle(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;\n    /**\n     * Hide the matched elements with a sliding motion.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/slideUp/ }\\`\n     * @since 1.4.3\n     */\n    slideUp(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;\n    /**\n     * Hide the matched elements with a sliding motion.\n     * @param duration_easing _&#x40;param_ `duration_easing`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/slideUp/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>slideUp demo</title>\n  <style>\n div {\n   margin: 2px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>\n  <button>Hide One</button>\n  <input type="text" value="One">\n</div>\n​\n<div>\n  <button>Hide Two</button>\n  <input type="text" value="Two">\n</div>\n​\n<div>\n  <button>Hide Three</button>\n  <input type="text" value="Three">\n</div>\n​\n<div id="msg"></div>\n​\n<script>\n$( "button" ).click(function() {\n  $( this ).parent().slideUp( "slow", function() {\n    $( "#msg" ).text( $( "button", this ).text() + " has completed." );\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    slideUp(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;\n    /**\n     * Hide the matched elements with a sliding motion.\n     * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `easing` — A string indicating which easing function to use for the transition. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>\n     * * `options` — A map of additional options to pass to the method.\n     * @see \\`{@link https://api.jquery.com/slideUp/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @example ​ ````Animates all divs to slide up, completing the animation within 400 milliseconds.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>slideUp demo</title>\n  <style>\n  div {\n    background: #3d9a44;\n    margin: 3px;\n    width: 80px;\n    height: 40px;\n    float: left;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nClick me!\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n​\n<script>\n$( document.body ).click(function() {\n  if ( $( "div:first" ).is( ":hidden" ) ) {\n    $( "div" ).show( "slow" );\n  } else {\n    $( "div" ).slideUp();\n  }\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    slideUp(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;\n    /**\n     * Stop the currently-running animation on the matched elements.\n     * @param queue The name of the queue in which to stop animations.\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well. Defaults to false.\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.\n     * @see \\`{@link https://api.jquery.com/stop/ }\\`\n     * @since 1.7\n     */\n    stop(queue: string, clearQueue?: boolean, jumpToEnd?: boolean): this;\n    /**\n     * Stop the currently-running animation on the matched elements.\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well. Defaults to false.\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.\n     * @see \\`{@link https://api.jquery.com/stop/ }\\`\n     * @since 1.2\n     * @example ​ ````Click the Go button once to start the animation, then click the STOP button to stop it where it&#39;s currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>stop demo</title>\n  <style>\n  div {\n    position: absolute;\n    background-color: #abc;\n    left: 0px;\n    top: 30px;\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="go">Go</button>\n<button id="stop">STOP!</button>\n<button id="back">Back</button>\n<div class="block"></div>\n​\n<script>\n// Start animation\n$( "#go" ).click(function() {\n  $( ".block" ).animate({ left: "+=100px" }, 2000 );\n});\n​\n// Stop animation when button is clicked\n$( "#stop" ).click(function() {\n  $( ".block" ).stop();\n});\n​\n// Start animation in the opposite direction\n$( "#back" ).click(function() {\n  $( ".block" ).animate({ left: "-=100px" }, 2000 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Click the slideToggle button to start the animation, then click again before the animation is completed. The animation will toggle the other direction from the saved starting point.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>stop demo</title>\n  <style>\n  .block {\n    background-color: #abc;\n    border: 2px solid black;\n    width: 200px;\n    height: 80px;\n    margin: 10px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="toggle">slideToggle</button>\n<div class="block"></div>\n​\n<script>\nvar $block = $( ".block" );\n​\n// Toggle a sliding animation animation\n$( "#toggle" ).on( "click", function() {\n  $block.stop().slideToggle( 1000 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    stop(clearQueue?: boolean, jumpToEnd?: boolean): this;\n    /**\n     * Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/submit/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     */\n    submit<TData>(eventData: TData,\n                  handler: JQuery.TypeEventHandler<TElement, TData, TElement, TElement, \'submit\'>): this;\n    /**\n     * Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/submit/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link on }\\` or \\`{@link trigger }\\`.\n     *\n     * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.\n     *\n     * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.\n     * @example ​ ````If you&#39;d like to prevent forms from being submitted unless a flag variable is set, try:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>submit demo</title>\n  <style>\n  p {\n    margin: 0;\n    color: blue;\n  }\n  div,p {\n    margin-left: 10px;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Type \'correct\' to validate.</p>\n<form action="javascript:alert( \'success!\' );">\n  <div>\n    <input type="text">\n    <input type="submit">\n  </div>\n</form>\n<span></span>\n​\n<script>\n$( "form" ).submit(function( event ) {\n  if ( $( "input:first" ).val() === "correct" ) {\n    $( "span" ).text( "Validated..." ).show();\n    return;\n  }\n​\n  $( "span" ).text( "Not valid!" ).show().fadeOut( 1000 );\n  event.preventDefault();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````If you&#39;d like to prevent forms from being submitted unless a flag variable is set, try:\n```javascript\n$( "form" ).submit(function() {\n  return this.some_flag_variable;\n});\n```\n     * @example ​ ````To trigger the submit event on the first form on the page, try:\n```javascript\n$( "form:first" ).submit();\n```\n     */\n    submit(handler?: JQuery.TypeEventHandler<TElement, null, TElement, TElement, \'submit\'> |\n                     false): this;\n    /**\n     * Set the content of each element in the set of matched elements to the specified text.\n     * @param text_function _&#x40;param_ `text_function`\n     * <br>\n     * * `text` — The text to set as the content of each matched element. When Number or Boolean is supplied, it will\n     *            be converted to a String representation. <br>\n     * * `function` — A function returning the text content to set. Receives the index position of the element in the set\n     *                and the old text value as arguments.\n     * @see \\`{@link https://api.jquery.com/text/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @example ​ ````Add text to the paragraph (notice the bold tag is escaped).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>text demo</title>\n  <style>\n  p {\n    color: blue;\n    margin: 8px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Test Paragraph.</p>\n​\n<script>\n$( "p" ).text( "<b>Some</b> new text." );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    text(text_function: string | number | boolean | ((this: TElement, index: number, text: string) => string | number | boolean)): this;\n    /**\n     * Get the combined text contents of each element in the set of matched elements, including their descendants.\n     * @see \\`{@link https://api.jquery.com/text/ }\\`\n     * @since 1.0\n     * @example ​ ````Find the text in the first paragraph (stripping out the html), then set the html of the last paragraph to show it is just text (the red bold is gone).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>text demo</title>\n  <style>\n  p {\n    color: blue;\n    margin: 8px;\n  }\n  b {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><b>Test</b> Paragraph.</p>\n<p></p>\n​\n<script>\nvar str = $( "p:first" ).text();\n$( "p:last" ).html( str );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    text(): string;\n    /**\n     * Retrieve all the elements contained in the jQuery set, as an array.\n     * @see \\`{@link https://api.jquery.com/toArray/ }\\`\n     * @since 1.4\n     * @example ​ ````Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>toArray demo</title>\n  <style>\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nReversed - <span></span>\n​\n<div>One</div>\n<div>Two</div>\n<div>Three</div>​\n<script>\nfunction disp( divs ) {\n  var a = [];\n  for ( var i = 0; i < divs.length; i++ ) {\n    a.push( divs[ i ].innerHTML );\n  }\n  $( "span" ).text( a.join( " " ) );\n}\n​\ndisp( $( "div" ).toArray().reverse() );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    toArray(): TElement[];\n    /**\n     * Display or hide the matched elements.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/toggle/ }\\`\n     * @since 1.4.3\n     */\n    toggle(duration: JQuery.Duration, easing: string, complete?: (this: TElement) => void): this;\n    /**\n     * Display or hide the matched elements.\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/toggle/ }\\`\n     * @since 1.0\n     */\n    toggle(duration: JQuery.Duration, complete: (this: TElement) => void): this;\n    /**\n     * Display or hide the matched elements.\n     * @param duration_complete_options_display _&#x40;param_ `duration_complete_options_display`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>\n     * * `options` — A map of additional options to pass to the method. <br>\n     * * `display` — Use true to show the element or false to hide it.\n     * @see \\`{@link https://api.jquery.com/toggle/ }\\`\n     * @since 1.0\n     * @since 1.3\n     * @example ​ ````Toggles all paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>toggle demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Toggle</button>\n<p>Hello</p>\n<p style="display: none">Good Bye</p>\n​\n<script>\n$( "button" ).click(function() {\n  $( "p" ).toggle();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>toggle demo</title>\n  <style>\n  p {\n    background: #dad;\n    font-weight: bold;\n    font-size: 16px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Toggle \'em</button>\n<p>Hiya</p>\n<p>Such interesting text, eh?</p>\n​\n<script>\n$( "button" ).click(function() {\n  $( "p" ).toggle( "slow" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Shows all paragraphs, then hides them all, back and forth.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>toggle demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Toggle</button>\n<p>Hello</p>\n<p style="display: none">Good Bye</p>\n​\n<script>\nvar flip = 0;\n$( "button" ).click(function() {\n  $( "p" ).toggle( flip++ % 2 === 0 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    toggle(duration_complete_options_display?: JQuery.Duration | ((this: TElement) => void) | JQuery.EffectsOptions<TElement> | boolean): this;\n    /**\n     * Add or remove one or more classes from each element in the set of matched elements, depending on either the class\'s presence or the value of the state argument.\n     * @param className_function _&#x40;param_ `className_function`\n     * <br>\n     * * `className` — One or more class names (separated by spaces) to be toggled for each element in the matched set. <br>\n     * * `function` — A function that returns class names to be toggled in the class attribute of each element in the\n     *                matched set. Receives the index position of the element in the set, the old class value, and the state as arguments.\n     * @param state A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.\n     * @see \\`{@link https://api.jquery.com/toggleClass/ }\\`\n     * @since 1.0\n     * @since 1.3\n     * @since 1.4\n     * @since 3.3\n     * @example ​ ````Toggle the class &#39;highlight&#39; when a paragraph is clicked.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>toggleClass demo</title>\n  <style>\n  p {\n    margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n    cursor: pointer;\n  }\n  .blue {\n    color: blue;\n  }\n  .highlight {\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p class="blue">Click to toggle</p>\n<p class="blue highlight">highlight</p>\n<p class="blue">on these</p>\n<p class="blue">paragraphs</p>\n​\n<script>\n$( "p" ).click(function() {\n  $( this ).toggleClass( "highlight" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Add the &quot;highlight&quot; class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>toggleClass demo</title>\n  <style>\n  p {\n    margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n    cursor: pointer;\n  }\n  .blue {\n    color: blue;\n  }\n  .highlight {\n    background: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p class="blue">Click to toggle (<span>clicks: 0</span>)</p>\n<p class="blue highlight">highlight (<span>clicks: 0</span>)</p>\n<p class="blue">on these (<span>clicks: 0</span>)</p>\n<p class="blue">paragraphs (<span>clicks: 0</span>)</p>\n​\n<script>\nvar count = 0;\n$( "p" ).each(function() {\n  var $thisParagraph = $( this );\n  var count = 0;\n  $thisParagraph.click(function() {\n    count++;\n    $thisParagraph.find( "span" ).text( "clicks: " + count );\n    $thisParagraph.toggleClass( "highlight", count % 3 === 0 );\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Toggle the class name(s) indicated on the buttons for each div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>toggleClass demo</title>\n  <style>\n  .wrap > div {\n    float: left;\n    width: 100px;\n    margin: 1em 1em 0 0;\n    padding-left: 3px;\n    border: 1px solid #abc;\n  }\n  div.a {\n    background-color: aqua;\n  }\n  div.b {\n    background-color: burlywood;\n  }\n  div.c {\n    background-color: cornsilk;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div class="buttons">\n  <button>toggle</button>\n  <button class="a">toggle a</button>\n  <button class="a b">toggle a b</button>\n  <button class="a b c">toggle a b c</button>\n  <a href="#">reset</a>\n</div>\n<div class="wrap">\n  <div></div>\n  <div class="b"></div>\n  <div class="a b"></div>\n  <div class="a c"></div>\n</div>\n​\n<script>\nvar cls = [ "", "a", "a b", "a b c" ];\nvar divs = $( "div.wrap" ).children();\nvar appendClass = function() {\n  divs.append(function() {\n    return "<div>" + ( this.className || "none" ) + "</div>";\n  });\n};\n​\nappendClass();\n​\n$( "button" ).on( "click", function() {\n  var tc = this.className || undefined;\n  divs.toggleClass( tc );\n  appendClass();\n});\n​\n$( "a" ).on( "click", function( event ) {\n  event.preventDefault();\n  divs.empty().each(function( i ) {\n    this.className = cls[ i ];\n  });\n  appendClass();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    toggleClass<TState extends boolean>(className_function: JQuery.TypeOrArray<string> | ((this: TElement, index: number, className: string, state: TState) => string),\n                                        state?: TState): this;\n    /**\n     * Add or remove one or more classes from each element in the set of matched elements, depending on either the class\'s presence or the value of the state argument.\n     * @param state A boolean value to determine whether the class should be added or removed.\n     * @see \\`{@link https://api.jquery.com/toggleClass/ }\\`\n     * @since 1.4\n     * @deprecated ​ Deprecated since 3.0. See \\`{@link https://github.com/jquery/jquery/pull/2618 }\\`.\n     *\n     * **Cause**: Calling `.toggleClass()` with no arguments, or with a single Boolean `true` or `false` argument, has been deprecated. Its behavior was poorly documented, but essentially the method saved away the current class value in a data item when the class was removed and restored the saved value when it was toggled back. If you do not believe you are specificially trying to use this form of the method, it is possible you are accidentally doing so via an inadvertent undefined value, as `.toggleClass( undefined )` toggles all classes.\n     *\n     * **Solution**: If this functionality is still needed, save the current full `.attr( "class" )` value in a data item and restore it when required.\n     */\n    toggleClass(state?: boolean): this;\n    /**\n     * Execute all handlers and behaviors attached to the matched elements for the given event type.\n     * @param eventType_event _&#x40;param_ `eventType_event`\n     * <br>\n     * * `eventType` — A string containing a JavaScript event type, such as `click` or `submit`. <br>\n     * * `event` — A \\`{@link https://api.jquery.com/category/events/event-object/ jQuery.Event}\\` object.\n     * @param extraParameters Additional parameters to pass along to the event handler.\n     * @see \\`{@link https://api.jquery.com/trigger/ }\\`\n     * @since 1.0\n     * @since 1.3\n     * @example ​ ````Clicks to button #2 also trigger a click for button #1.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>trigger demo</title>\n  <style>\n  button {\n    margin: 10px;\n  }\n  div {\n    color: blue;\n    font-weight: bold;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Button #1</button>\n<button>Button #2</button>\n<div><span>0</span> button #1 clicks.</div>\n<div><span>0</span> button #2 clicks.</div>\n​\n<script>\n$( "button:first" ).click(function() {\n  update( $( "span:first" ) );\n});\n​\n$( "button:last" ).click(function() {\n  $( "button:first" ).trigger( "click" );\n  update( $( "span:last" ) );\n});\n​\nfunction update( j ) {\n  var n = parseInt( j.text(), 10 );\n  j.text( n + 1 );\n}\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To submit the first form without using the submit() function, try:\n```javascript\n$( "form:first" ).trigger( "submit" );\n```\n     * @example ​ ````To submit the first form without using the submit() function, try:\n```javascript\nvar event = jQuery.Event( "submit" );\n$( "form:first" ).trigger( event );\nif ( event.isDefaultPrevented() ) {\n  // Perform an action...\n}\n```\n     * @example ​ ````To pass arbitrary data to an event:\n```javascript\n$( "p" )\n  .click(function( event, a, b ) {\n    // When a normal click fires, a and b are undefined\n    // for a trigger like below a refers to "foo" and b refers to "bar"\n  })\n  .trigger( "click", [ "foo", "bar" ] );\n```\n     * @example ​ ````To pass arbitrary data through an event object:\n```javascript\nvar event = jQuery.Event( "logged" );\nevent.user = "foo";\nevent.pass = "bar";\n$( "body" ).trigger( event );\n```\n     * @example ​ ````Alternative way to pass data through an event object:\n```javascript\n$( "body" ).trigger({\n  type:"logged",\n  user:"foo",\n  pass:"bar"\n});\n```\n     */\n    trigger(eventType_event: string | JQuery.Event, extraParameters?: any[] | JQuery.PlainObject | string | number | boolean): this;\n    /**\n     * Execute all handlers attached to an element for an event.\n     * @param eventType_event _&#x40;param_ `eventType_event`\n     * <br>\n     * * `eventType` — A string containing a JavaScript event type, such as `click` or `submit`. <br>\n     * * `event` — A \\`{@link https://api.jquery.com/category/events/event-object/ jQuery.Event}\\` object.\n     * @param extraParameters Additional parameters to pass along to the event handler.\n     * @see \\`{@link https://api.jquery.com/triggerHandler/ }\\`\n     * @since 1.2\n     * @since 1.3\n     * @example ​ ````If you called .triggerHandler() on a focus event - the browser&#39;s default focus action would not be triggered, only the event handlers bound to the focus event.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>triggerHandler demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="old">.trigger( "focus" )</button>\n<button id="new">.triggerHandler( "focus" )</button><br><br>\n​\n<input type="text" value="To Be Focused">\n​\n<script>\n$( "#old" ).click(function() {\n  $( "input" ).trigger( "focus" );\n});\n$( "#new" ).click(function() {\n  $( "input" ).triggerHandler( "focus" );\n});\n$( "input" ).focus(function() {\n  $( "<span>Focused!</span>" ).appendTo( "body" ).fadeOut( 1000 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    triggerHandler(eventType_event: string | JQuery.Event, extraParameters?: any[] | JQuery.PlainObject | string | number | boolean): any;\n    /**\n     * Remove a previously-attached event handler from the elements.\n     * @param event A string containing one or more DOM event types, such as "click" or "submit," or custom event names.\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/unbind/ }\\`\n     * @since 1.0\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link off }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     * @example ​ ````Can bind and unbind events to the colored button.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>unbind demo</title>\n  <style>\n  button {\n    margin: 5px;\n  }\n  button#theone {\n    color: red;\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="theone">Does nothing...</button>\n<button id="bind">Bind Click</button>\n<button id="unbind">Unbind Click</button>\n<div style="display:none;">Click!</div>\n​\n<script>\nfunction aClick() {\n  $( "div" ).show().fadeOut( "slow" );\n}\n$( "#bind" ).click(function() {\n  $( "#theone" )\n    .bind( "click", aClick )\n    .text( "Can Click!" );\n});\n$( "#unbind" ).click(function() {\n  $( "#theone" )\n    .unbind( "click", aClick )\n    .text( "Does nothing..." );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To unbind just one previously bound handler, pass the function in as the second argument:\n```javascript\nvar foo = function() {\n  // Code to handle some kind of event\n};\n​\n$( "p" ).bind( "click", foo ); // ... Now foo will be called when paragraphs are clicked ...\n​\n$( "p" ).unbind( "click", foo ); // ... foo will no longer be called.\n```\n     */\n    unbind<TType extends string>(\n        event: TType,\n        handler: JQuery.TypeEventHandler<TElement, any, TElement, TElement, TType> |\n                 false\n    ): this;\n    /**\n     * Remove a previously-attached event handler from the elements.\n     * @param event A string containing one or more DOM event types, such as "click" or "submit," or custom event names.\n     *              A jQuery.Event object.\n     * @see \\`{@link https://api.jquery.com/unbind/ }\\`\n     * @since 1.0\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link off }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     * @example ​ ````To unbind all events from all paragraphs, write:\n```javascript\n$( "p" ).unbind();\n```\n     * @example ​ ````To unbind all click events from all paragraphs, write:\n```javascript\n$( "p" ).unbind( "click" );\n```\n     */\n    unbind(event?: string | JQuery.TriggeredEvent<TElement>): this;\n    /**\n     * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.\n     * @param selector A selector which will be used to filter the event results.\n     * @param eventType A string containing a JavaScript event type, such as "click" or "keydown"\n     * @param handler A function to execute each time the event is triggered.\n     * @see \\`{@link https://api.jquery.com/undelegate/ }\\`\n     * @since 1.4.2\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link off }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     * @example ​ ````Can bind and unbind events to the colored button.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>undelegate demo</title>\n  <style>\n  button {\n    margin: 5px;\n  }\n  button#theone {\n    color: red;\n    background: yellow;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="theone">Does nothing...</button>\n<button id="bind">Bind Click</button>\n<button id="unbind">Unbind Click</button>\n<div style="display:none;">Click!</div>\n​\n<script>\nfunction aClick() {\n  $( "div" ).show().fadeOut( "slow" );\n}\n$( "#bind" ).click(function() {\n  $( "body" )\n    .delegate( "#theone", "click", aClick )\n    .find( "#theone" ).text( "Can Click!" );\n});\n$( "#unbind" ).click(function() {\n  $( "body" )\n    .undelegate( "#theone", "click", aClick )\n    .find( "#theone" ).text( "Does nothing..." );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````To undelegate just one previously bound handler, pass the function in as the third argument:\n```javascript\nvar foo = function () {\n  // Code to handle some kind of event\n};\n​\n// ... Now foo will be called when paragraphs are clicked ...\n$( "body" ).delegate( "p", "click", foo );\n​\n// ... foo will no longer be called.\n$( "body" ).undelegate( "p", "click", foo );\n```\n     */\n    undelegate<TType extends string>(\n        selector: JQuery.Selector,\n        eventType: TType,\n        handler: JQuery.TypeEventHandler<TElement, any, any, any, TType> |\n                 false\n    ): this;\n    /**\n     * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.\n     * @param selector A selector which will be used to filter the event results.\n     * @param eventType_events _&#x40;param_ `eventType_events`\n     * <br>\n     * * `eventType` — A string containing a JavaScript event type, such as "click" or "keydown" <br>\n     * * `events` — An object of one or more event types and previously bound functions to unbind from them.\n     * @see \\`{@link https://api.jquery.com/undelegate/ }\\`\n     * @since 1.4.2\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link off }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     */\n    undelegate(selector: JQuery.Selector,\n               eventType_events: string |\n                                 JQuery.TypeEventHandlers<TElement, any, any, any>): this;\n    /**\n     * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.\n     * @param namespace A selector which will be used to filter the event results.\n     * @see \\`{@link https://api.jquery.com/undelegate/ }\\`\n     * @since 1.4.2\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link off }\\`.\n     *\n     * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.\n     *\n     * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.\n     * @example ​ ````To unbind all delegated events from all paragraphs, write:\n```javascript\n$( "p" ).undelegate();\n```\n     * @example ​ ````To unbind all delegated click events from all paragraphs, write:\n```javascript\n$( "p" ).undelegate( "click" );\n```\n     * @example ​ ````To unbind all delegated events by their namespace:\n```javascript\nvar foo = function() {\n  // Code to handle some kind of event\n};\n​\n// Delegate events under the ".whatever" namespace\n$( "form" ).delegate( ":button", "click.whatever", foo );\n​\n$( "form" ).delegate( "input[type=\'text\'] ", "keypress.whatever", foo );\n​\n// Unbind all events delegated under the ".whatever" namespace\n$( "form" ).undelegate( ".whatever" );\n```\n     */\n    undelegate(namespace?: string): this;\n    /**\n     * Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.\n     * @param selector A selector to check the parent element against. If an element\'s parent does not match the selector,\n     *                 the element won\'t be unwrapped.\n     * @see \\`{@link https://api.jquery.com/unwrap/ }\\`\n     * @since 1.4\n     * @since 3.0\n     * @example ​ ````Wrap/unwrap a div around each of the paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>unwrap demo</title>\n  <style>\n  div {\n    border: 2px solid blue;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​<button>wrap/unwrap</button>\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>​\n<script>\nvar pTags = $( "p" );\n$( "button" ).click(function() {\n  if ( pTags.parent().is( "div" ) ) {\n    pTags.unwrap();\n  } else {\n    pTags.wrap( "<div></div>" );\n  }\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    unwrap(selector?: string): this;\n    /**\n     * Set the value of each element in the set of matched elements.\n     * @param value_function _&#x40;param_ `value_function`\n     * <br>\n     * * `value` — A string of text, a number, or an array of strings corresponding to the value of each matched\n     *             element to set as selected/checked. <br>\n     * * `function` — A function returning the value to set. `this` is the current element. Receives the index position of\n     *                the element in the set and the old value as arguments.\n     * @see \\`{@link https://api.jquery.com/val/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @example ​ ````Set the value of an input box.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>val demo</title>\n  <style>\n  button {\n    margin: 4px;\n    cursor: pointer;\n  }\n  input {\n    margin: 4px;\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>\n  <button>Feed</button>\n  <button>the</button>\n  <button>Input</button>\n</div>\n<input type="text" value="click a button">\n​\n<script>\n$( "button" ).click(function() {\n  var text = $( this ).text();\n  $( "input" ).val( text );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Use the function argument to modify the value of an input box.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>val demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Type something and then click or tab out of the input.</p>\n<input type="text" value="type something">\n​\n<script>\n$( "input" ).on( "blur", function() {\n  $( this ).val(function( i, val ) {\n    return val.toUpperCase();\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Set a single select, a multiple select, checkboxes and a radio button .\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>val demo</title>\n  <style>\n  body {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<select id="single">\n  <option>Single</option>\n  <option>Single2</option>\n</select>\n​\n<select id="multiple" multiple="multiple">\n  <option selected="selected">Multiple</option>\n  <option>Multiple2</option>\n  <option selected="selected">Multiple3</option>\n</select>\n​\n<br>\n<input type="checkbox" name="checkboxname" value="check1"> check1\n<input type="checkbox" name="checkboxname" value="check2"> check2\n<input type="radio" name="r" value="radio1"> radio1\n<input type="radio" name="r" value="radio2"> radio2\n​\n<script>\n$( "#single" ).val( "Single2" );\n$( "#multiple" ).val([ "Multiple2", "Multiple3" ]);\n$( "input").val([ "check1", "check2", "radio1" ]);\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    val(value_function: string | number | string[] | ((this: TElement, index: number, value: string) => string)): this;\n    /**\n     * Get the current value of the first element in the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/val/ }\\`\n     * @since 1.0\n     * @example ​ ````Get the single value from a single select and an array of values from a multiple select and display their values.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>val demo</title>\n  <style>\n  p {\n    color: red;\n    margin: 4px;\n  }\n  b {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p></p>\n​\n<select id="single">\n  <option>Single</option>\n  <option>Single2</option>\n</select>\n​\n<select id="multiple" multiple="multiple">\n  <option selected="selected">Multiple</option>\n  <option>Multiple2</option>\n  <option selected="selected">Multiple3</option>\n</select>\n​\n<script>\nfunction displayVals() {\n  var singleValues = $( "#single" ).val();\n  var multipleValues = $( "#multiple" ).val() || [];\n  // When using jQuery 3:\n  // var multipleValues = $( "#multiple" ).val();\n  $( "p" ).html( "<b>Single:</b> " + singleValues +\n    " <b>Multiple:</b> " + multipleValues.join( ", " ) );\n}\n​\n$( "select" ).change( displayVals );\ndisplayVals();\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Find the value of an input box.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>val demo</title>\n  <style>\n  p {\n    color: blue;\n    margin: 8px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input type="text" value="some text">\n<p></p>\n​\n<script>\n$( "input" )\n  .keyup(function() {\n    var value = $( this ).val();\n    $( "p" ).text( value );\n  })\n  .keyup();\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    val(): string | number | string[] | undefined;\n    /**\n     * Set the CSS width of each element in the set of matched elements.\n     * @param value_function _&#x40;param_ `value_function`\n     * <br>\n     * * `value` — An integer representing the number of pixels, or an integer along with an optional unit of measure\n     *             appended (as a string). <br>\n     * * `function` — A function returning the width to set. Receives the index position of the element in the set and the\n     *                old width as arguments. Within the function, `this` refers to the current element in the set.\n     * @see \\`{@link https://api.jquery.com/width/ }\\`\n     * @since 1.0\n     * @since 1.4.1\n     * @example ​ ````Change the width of each div the first time it is clicked (and change its color).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>width demo</title>\n  <style>\n  div {\n    width: 70px;\n    height: 50px;\n    float: left;\n    margin: 5px;\n    background: red;\n    cursor: pointer;\n  }\n  .mod {\n    background: blue;\n    cursor: default;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n​\n<script>\nvar modWidth = 50;\n$( "div" ).one( "click", function() {\n  $( this ).width( modWidth ).addClass( "mod" );\n  modWidth -= 8;\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    width(value_function: string | number | ((this: TElement, index: number, value: number) => string | number)): this;\n    /**\n     * Get the current computed width for the first element in the set of matched elements.\n     * @see \\`{@link https://api.jquery.com/width/ }\\`\n     * @since 1.0\n     * @example ​ ````Show various widths.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>width demo</title>\n  <style>\n  body {\n    background: yellow;\n  }\n  button {\n    font-size: 12px;\n    margin: 2px;\n  }\n  p {\n    width: 150px;\n    border: 1px red solid;\n  }\n  div {\n    color: red;\n    font-weight: bold;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="getp">Get Paragraph Width</button>\n<button id="getd">Get Document Width</button>\n<button id="getw">Get Window Width</button>\n<div>&nbsp;</div>\n<p>\n  Sample paragraph to test width\n</p>\n​\n<script>\nfunction showWidth( ele, w ) {\n  $( "div" ).text( "The width for the " + ele + " is " + w + "px." );\n}\n$( "#getp" ).click(function() {\n  showWidth( "paragraph", $( "p" ).width() );\n});\n$( "#getd" ).click(function() {\n  showWidth( "document", $( document ).width() );\n});\n$("#getw").click(function() {\n  showWidth( "window", $( window ).width() );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    width(): number | undefined;\n    /**\n     * Wrap an HTML structure around each element in the set of matched elements.\n     * @param wrappingElement_function _&#x40;param_ `wrappingElement_function`\n     * <br>\n     * * `wrappingElement` — A selector, element, HTML string, or jQuery object specifying the structure to wrap around the\n     *                       matched elements. When you pass a jQuery collection containing more than one element, or a selector\n     *                       matching more than one element, the first element will be used. <br>\n     * * `function` — A callback function returning the HTML content or jQuery object to wrap around the matched elements.\n     *                Receives the index position of the element in the set as an argument. Within the function, `this`\n     *                refers to the current element in the set.\n     * @see \\`{@link https://api.jquery.com/wrap/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @example ​ ````Wrap a new div around all of the paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrap demo</title>\n  <style>\n  div {\n    border: 2px solid blue;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n​\n<script>\n$( "p" ).wrap( "<div></div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.&gt;\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrap demo</title>\n  <style>\n  div {\n    border: 2px blue solid;\n    margin: 2px;\n    padding: 2px;\n  }\n  p {\n    background: yellow;\n    margin: 2px;\n    padding: 2px;\n  }\n  strong {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<span>Span Text</span>\n<strong>What about me?</strong>\n<span>Another One</span>\n​\n<script>\n$( "span" ).wrap( "<div><div><p><em><b></b></em></p></div></div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Wrap a new div around all of the paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrap demo</title>\n  <style>\n  div {\n    border: 2px solid blue;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n​\n<script>\n$( "p" ).wrap( document.createElement( "div" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn&#39;t move the object but just clones it to wrap around its target.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrap demo</title>\n  <style>\n  div {\n    border: 2px solid blue;\n    margin: 2px;\n    padding: 2px;\n  }\n  .doublediv {\n    border-color: red;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n    font-size: 14px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n<div class="doublediv"><div></div></div>\n​\n<script>\n$( "p" ).wrap( $( ".doublediv" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    wrap(wrappingElement_function: JQuery.Selector | JQuery.htmlString | Element | JQuery | ((this: TElement, index: number) => string | JQuery)): this;\n    /**\n     * Wrap an HTML structure around all elements in the set of matched elements.\n     * @param wrappingElement_function _&#x40;param_ `wrappingElement_function`\n     * <br>\n     * * `wrappingElement` — A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. <br>\n     * * `function` — A callback function returning the HTML content or jQuery object to wrap around all the matched\n     *                elements. Within the function, `this` refers to the first element in the set. **Prior to jQuery\n     *                3.0**, the callback was incorrectly called for every element in the set and received the index\n     *                position of the element in the set as an argument.\n     * @see \\`{@link https://api.jquery.com/wrapAll/ }\\`\n     * @since 1.2\n     * @since 1.4\n     * @example ​ ````Wrap a new div around all of the paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrapAll demo</title>\n  <style>\n  div {\n    border: 2px solid blue;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n​\n<script>\n$( "p" ).wrapAll( "<div></div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrapAll demo</title>\n  <style>\n  div {\n    border: 2px blue solid;\n    margin: 2px;\n    padding: 2px;\n  }\n  p {\n    background: yellow;\n    margin: 2px;\n    padding: 2px;\n  }\n  strong {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<span>Span Text</span>\n<strong>What about me?</strong>\n<span>Another One</span>\n​\n<script>\n$( "span").wrapAll( "<div><div><p><em><b></b></em></p></div></div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Wrap a new div around all of the paragraphs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrapAll demo</title>\n  <style>\n  div {\n    border: 2px solid blue;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n​\n<script>\n$( "p" ).wrapAll( document.createElement( "div" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn&#39;t move the object but just clones it to wrap around its target.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrapAll demo</title>\n  <style>\n  div {\n    border: 2px solid blue;\n    margin: 2px;\n    padding: 2px;\n  }\n  .doublediv {\n    border-color: red;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n    font-size: 14px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n<div class="doublediv"><div></div></div>\n​\n<script>\n$( "p" ).wrapAll( $( ".doublediv" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    wrapAll(wrappingElement_function: JQuery.Selector | JQuery.htmlString | Element | JQuery | ((this: TElement) => string | JQuery)): this;\n    /**\n     * Wrap an HTML structure around the content of each element in the set of matched elements.\n     * @param wrappingElement_function _&#x40;param_ `wrappingElement_function`\n     * <br>\n     * * `wrappingElement` — An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap\n     *                       around the content of the matched elements. <br>\n     * * `function` — A callback function which generates a structure to wrap around the content of the matched elements.\n     *                Receives the index position of the element in the set as an argument. Within the function, `this`\n     *                refers to the current element in the set.\n     * @see \\`{@link https://api.jquery.com/wrapInner/ }\\`\n     * @since 1.2\n     * @since 1.4\n     * @example ​ ````Selects all paragraphs and wraps a bold tag around each of its contents.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrapInner demo</title>\n  <style>\n  p {\n    background: #bbf;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n​\n<script>\n$( "p" ).wrapInner( "<b></b>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Wraps a newly created tree of objects around the inside of the body.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrapInner demo</title>\n  <style>\n  div {\n    border: 2px green solid;\n    margin: 2px;\n    padding: 2px;\n  }\n  p {\n    background: yellow;\n    margin: 2px;\n    padding: 2px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nPlain old text, or is it?\n​\n<script>\n$( "body" ).wrapInner( "<div><div><p><em><b></b></em></p></div></div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Selects all paragraphs and wraps a bold tag around each of its contents.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrapInner demo</title>\n  <style>\n  p {\n    background: #9f9;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n​\n<script>\n$( "p" ).wrapInner( document.createElement( "b" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Selects all paragraphs and wraps a jQuery object around each of its contents.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>wrapInner demo</title>\n  <style>\n  p {\n    background: #9f9;\n  }\n  .red {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n​\n<script>\n$( "p" ).wrapInner( $( "<span class=\'red\'></span>" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    wrapInner(wrappingElement_function: JQuery.Selector | JQuery.htmlString | Element | JQuery | ((this: TElement, index: number) => string | JQuery | Element)): this;\n\n    [n: number]: TElement;\n}\n']},98322:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["jquery\\JQueryStatic.d.ts",'// tslint:disable:jsdoc-format\n// tslint:disable:max-line-length\n// tslint:disable:no-irregular-whitespace\n\ninterface JQueryStatic {\n    /**\n     * @see \\`{@link https://api.jquery.com/jquery.ajax/#jQuery-ajax1 }\\`\n     * @deprecated ​ Deprecated. Use \\`{@link ajaxSetup }\\`.\n     */\n    ajaxSettings: JQuery.AjaxSettings;\n    Animation: JQuery.AnimationStatic;\n    Callbacks: JQuery.CallbacksStatic;\n    /**\n     * Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.\n     * @see \\`{@link https://api.jquery.com/jQuery.cssHooks/ }\\`\n     * @since 1.4.3\n     */\n    cssHooks: JQuery.CSSHooks;\n    /**\n     * An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values.\n     * @see \\`{@link https://api.jquery.com/jQuery.cssNumber/ }\\`\n     * @since 1.4.3\n     */\n    cssNumber: JQuery.PlainObject<boolean>;\n    Deferred: JQuery.DeferredStatic;\n    easing: JQuery.Easings;\n    Event: JQuery.EventStatic;\n    /**\n     * @see \\`{@link https://learn.jquery.com/events/event-extensions/ }\\`\n     */\n    event: JQuery.EventExtensions;\n    expr: JQuery.Selectors;\n    // Set to HTMLElement to minimize breaks but should probably be Element.\n    readonly fn: JQuery;\n    fx: JQuery.Effects;\n    /**\n     * A Promise-like object (or "thenable") that resolves when the document is ready.\n     * @see \\`{@link https://api.jquery.com/jQuery.ready/ }\\`\n     * @since 1.8\n     * @example ​ ````Listen for document ready using jQuery.when.\n```javascript\n$.when( $.ready ).then(function() {\n  // Document is ready.\n});\n```\n     * @example ​ ````Typical usage involving another promise, using jQuery.when.\n```javascript\n$.when(\n  $.getJSON( "ajax/test.json" ),\n  $.ready\n).done(function( data ) {\n  // Document is ready.\n  // Value of test.json is passed as `data`.\n});\n```\n     */\n    ready: JQuery.Thenable<JQueryStatic>;\n    /**\n     * A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\'s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\'s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support.\n     * @see \\`{@link https://api.jquery.com/jQuery.support/ }\\`\n     * @since 1.3\n     * @deprecated ​ Deprecated since 1.9. See \\`{@link https://api.jquery.com/jQuery.support/ }\\`.\n     */\n    support: JQuery.PlainObject;\n    timers: Array<JQuery.TickFunction<any>>;\n    Tween: JQuery.TweenStatic;\n    valHooks: JQuery.ValHooks;\n    // HACK: This is the factory function returned when importing jQuery without a DOM. Declaring it separately breaks using the type parameter on JQueryStatic.\n    // HACK: The discriminator parameter handles the edge case of passing a Window object to JQueryStatic. It doesn\'t actually exist on the factory function.\n    (window: Window, discriminator: boolean): JQueryStatic;\n    /**\n     * Creates DOM elements on the fly from the provided string of raw HTML.\n     * @param html _&#x40;param_ `html`\n     * <br>\n     * * `html (ownerDocument)` — A string of HTML to create on the fly. Note that this parses HTML, not XML. <br>\n     * * `html (attributes)` — A string defining a single, standalone, HTML element (e.g. &lt;div/&gt; or &lt;div&gt;&lt;/div&gt;).\n     * @param ownerDocument_attributes _&#x40;param_ `ownerDocument_attributes`\n     * <br>\n     * * `ownerDocument` — A document in which the new elements will be created. <br>\n     * * `attributes` — An object of attributes, events, and methods to call on the newly-created element.\n     * @see \\`{@link https://api.jquery.com/jQuery/ }\\`\n     * @since 1.0\n     * @since 1.4\n     * @example ​ ````Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.\n```javascript\n$( "<div><p>Hello</p></div>" ).appendTo( "body" )\n```\n     * @example ​ ````Create some DOM elements.\n```javascript\n$( "<div/>", {\n  "class": "test",\n  text: "Click me!",\n  click: function() {\n    $( this ).toggleClass( "test" );\n  }\n})\n  .appendTo( "body" );\n```\n     */\n    // tslint:disable-next-line:no-unnecessary-generics\n    <TElement extends HTMLElement = HTMLElement>(html: JQuery.htmlString, ownerDocument_attributes?: Document | JQuery.PlainObject): JQuery<TElement>;\n    /**\n     * Accepts a string containing a CSS selector which is then used to match a set of elements.\n     * @param selector A string containing a selector expression\n     * @param context A DOM Element, Document, Selector or jQuery to use as context\n     * @see \\`{@link https://api.jquery.com/jQuery/ }\\`\n     * @since 1.0\n     * @example ​ ````Find all p elements that are children of a div element and apply a border to them.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>one</p>\n<div><p>two</p></div>\n<p>three</p>\n​\n<script>\n$( "div > p" ).css( "border", "1px solid gray" );\n<\/script>\n</body>\n</html>\n```\n     * @example ​ ````Find all inputs of type radio within the first form in the document.\n```javascript\n$( "input:radio", document.forms[ 0 ] );\n```\n     * @example ​ ````Find all div elements within an XML document from an Ajax response.\n```javascript\n$( "div", xml.responseXML );\n```\n​\n     */\n    // tslint:disable-next-line:no-unnecessary-generics\n    <TElement extends Element = HTMLElement>(selector: JQuery.Selector, context?: Element | Document | JQuery | JQuery.Selector): JQuery<TElement>;\n    /**\n     * Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.\n     * @param element A DOM element to wrap in a jQuery object.\n     * @see \\`{@link https://api.jquery.com/jQuery/ }\\`\n     * @since 1.0\n     * @example ​ ````Set the background color of the page to black.\n```javascript\n$( document.body ).css( "background", "black" );\n```\n     */\n    // NOTE: `HTMLSelectElement` is both an Element and an Array-Like Object but jQuery treats it as an Element.\n    (element: HTMLSelectElement): JQuery<HTMLSelectElement>;\n    /**\n     * Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.\n     * @param element_elementArray _&#x40;param_ `element_elementArray`\n     * <br>\n     * * `element` — A DOM element to wrap in a jQuery object. <br>\n     * * `elementArray` — An array containing a set of DOM elements to wrap in a jQuery object.\n     * @see \\`{@link https://api.jquery.com/jQuery/ }\\`\n     * @since 1.0\n     * @example ​ ````Set the background color of the page to black.\n```javascript\n$( document.body ).css( "background", "black" );\n```\n     * @example ​ ````Hide all the input elements within a form.\n```javascript\n$( myForm.elements ).hide();\n```\n     */\n    <T extends Element>(element_elementArray: T | ArrayLike<T>): JQuery<T>;\n    /**\n     * Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.\n     * @param selection An existing jQuery object to clone.\n     * @see \\`{@link https://api.jquery.com/jQuery/ }\\`\n     * @since 1.0\n     */\n    <T>(selection: JQuery<T>): JQuery<T>;\n    /**\n     * Binds a function to be executed when the DOM has finished loading.\n     * @param callback The function to execute when the DOM is ready.\n     * @see \\`{@link https://api.jquery.com/jQuery/ }\\`\n     * @since 1.0\n     * @example ​ ````Execute the function when the DOM is ready to be used.\n```javascript\n$(function() {\n  // Document is ready\n});\n```\n     * @example ​ ````Use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.\n```javascript\njQuery(function( $ ) {\n  // Your code using failsafe $ alias here...\n});\n```\n     */\n    // tslint:disable-next-line:no-unnecessary-generics unified-signatures\n    <TElement = HTMLElement>(callback: ((this: Document, $: JQueryStatic) => void)): JQuery<TElement>;\n    /**\n     * Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.\n     * @param object A plain object to wrap in a jQuery object.\n     * @see \\`{@link https://api.jquery.com/jQuery/ }\\`\n     * @since 1.0\n     */\n    <T extends JQuery.PlainObject>(object: T): JQuery<T>;\n    /**\n     * Returns an empty jQuery set.\n     * @see \\`{@link https://api.jquery.com/jQuery/ }\\`\n     * @since 1.4\n     */\n    // tslint:disable-next-line:no-unnecessary-generics\n    <TElement = HTMLElement>(): JQuery<TElement>;\n    /**\n     * Perform an asynchronous HTTP (Ajax) request.\n     * @param url A string containing the URL to which the request is sent.\n     * @param settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can\n     *                 be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings.\n     * @see \\`{@link https://api.jquery.com/jQuery.ajax/ }\\`\n     * @since 1.5\n     */\n    ajax(url: string, settings?: JQuery.AjaxSettings): JQuery.jqXHR;\n    /**\n     * Perform an asynchronous HTTP (Ajax) request.\n     * @param settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can\n     *                 be set for any option with $.ajaxSetup().\n     * @see \\`{@link https://api.jquery.com/jQuery.ajax/ }\\`\n     * @since 1.0\n     * @example ​ ````Save some data to the server and notify the user once it&#39;s complete.\n```javascript\n$.ajax({\n  method: "POST",\n  url: "some.php",\n  data: { name: "John", location: "Boston" }\n})\n  .done(function( msg ) {\n    alert( "Data Saved: " + msg );\n  });\n```\n     * @example ​ ````Retrieve the latest version of an HTML page.\n```javascript\n$.ajax({\n  url: "test.html",\n  cache: false\n})\n  .done(function( html ) {\n    $( "#results" ).append( html );\n  });\n```\n     * @example ​ ````Send an xml document as data to the server. By setting the processData\n    option to false, the automatic conversion of data to strings is prevented.\n```javascript\nvar xmlDocument = [create xml document];\nvar xmlRequest = $.ajax({\n  url: "page.php",\n  processData: false,\n  data: xmlDocument\n});\n​\nxmlRequest.done( handleResponse );\n```\n     * @example ​ ````Send an id as data to the server, save some data to the server, and notify the user once it&#39;s complete. If the request fails, alert the user.\n```javascript\nvar menuId = $( "ul.nav" ).first().attr( "id" );\nvar request = $.ajax({\n  url: "script.php",\n  method: "POST",\n  data: { id : menuId },\n  dataType: "html"\n});\n​\nrequest.done(function( msg ) {\n  $( "#log" ).html( msg );\n});\n​\nrequest.fail(function( jqXHR, textStatus ) {\n  alert( "Request failed: " + textStatus );\n});\n```\n     * @example ​ ````Load and execute a JavaScript file.\n```javascript\n$.ajax({\n  method: "GET",\n  url: "test.js",\n  dataType: "script"\n});\n```\n     */\n    ajax(settings?: JQuery.AjaxSettings): JQuery.jqXHR;\n    /**\n     * Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().\n     * @param dataTypes An optional string containing one or more space-separated dataTypes\n     * @param handler A handler to set default values for future Ajax requests.\n     * @see \\`{@link https://api.jquery.com/jQuery.ajaxPrefilter/ }\\`\n     * @since 1.5\n     */\n    ajaxPrefilter(dataTypes: string,\n                  handler: (options: JQuery.AjaxSettings, originalOptions: JQuery.AjaxSettings, jqXHR: JQuery.jqXHR) => string | void): void;\n    /**\n     * Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().\n     * @param handler A handler to set default values for future Ajax requests.\n     * @see \\`{@link https://api.jquery.com/jQuery.ajaxPrefilter/ }\\`\n     * @since 1.5\n     */\n    ajaxPrefilter(handler: (options: JQuery.AjaxSettings, originalOptions: JQuery.AjaxSettings, jqXHR: JQuery.jqXHR) => string | void): void;\n    /**\n     * Set default values for future Ajax requests. Its use is not recommended.\n     * @param options A set of key/value pairs that configure the default Ajax request. All options are optional.\n     * @see \\`{@link https://api.jquery.com/jQuery.ajaxSetup/ }\\`\n     * @since 1.1\n     * @example ​ ````Sets the defaults for Ajax requests to the url &quot;/xmlhttp/&quot;, disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.\n```javascript\n$.ajaxSetup({\n  url: "/xmlhttp/",\n  global: false,\n  type: "POST"\n});\n$.ajax({ data: myData });\n```\n     */\n    ajaxSetup(options: JQuery.AjaxSettings): JQuery.AjaxSettings;\n    /**\n     * Creates an object that handles the actual transmission of Ajax data.\n     * @param dataType A string identifying the data type to use\n     * @param handler A handler to return the new transport object to use with the data type provided in the first argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.ajaxTransport/ }\\`\n     * @since 1.5\n     */\n    ajaxTransport(dataType: string,\n                  handler: (options: JQuery.AjaxSettings, originalOptions: JQuery.AjaxSettings, jqXHR: JQuery.jqXHR) => JQuery.Transport | void): void;\n    /**\n     * @deprecated ​ Deprecated since 3.3. Internal. See \\`{@link https://github.com/jquery/jquery/issues/3384 }\\`.\n     */\n    camelCase(value: string): string;\n    cleanData(elems: ArrayLike<Element | Document | Window | JQuery.PlainObject>): void;\n    /**\n     * Check to see if a DOM element is a descendant of another DOM element.\n     * @param container The DOM element that may contain the other element.\n     * @param contained The DOM element that may be contained by (a descendant of) the other element.\n     * @see \\`{@link https://api.jquery.com/jQuery.contains/ }\\`\n     * @since 1.4\n     * @example ​ ````Check if an element is a descendant of another.\n```javascript\n$.contains( document.documentElement, document.body ); // true\n$.contains( document.body, document.documentElement ); // false\n```\n     */\n    contains(container: Element, contained: Element): boolean;\n    css(elem: Element, name: string): any;\n    /**\n     * Store arbitrary data associated with the specified element. Returns the value that was set.\n     * @param element The DOM element to associate with the data.\n     * @param key A string naming the piece of data to set.\n     * @param value The new data value; this can be any Javascript type except `undefined`.\n     * @see \\`{@link https://api.jquery.com/jQuery.data/ }\\`\n     * @since 1.2.3\n     * @example ​ ````Get the data named &quot;blah&quot; stored at for an element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.data demo</title>\n  <style>\n  div {\n    margin: 5px;\n    background: yellow;\n  }\n  button {\n    margin: 5px;\n    font-size: 14px;\n  }\n  p {\n    margin: 5px;\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>A div</div>\n<button>Get "blah" from the div</button>\n<button>Set "blah" to "hello"</button>\n<button>Set "blah" to 86</button>\n<button>Remove "blah" from the div</button>\n<p>The "blah" value of this div is <span>?</span></p>\n​\n<script>\n$( "button" ).click( function() {\n  var value,\n    div = $( "div" )[ 0 ];\n  switch ( $( "button" ).index( this ) ) {\n  case 0 :\n    value = jQuery.data( div, "blah" );\n    break;\n  case 1 :\n    jQuery.data( div, "blah", "hello" );\n    value = "Stored!";\n    break;\n  case 2 :\n    jQuery.data( div, "blah", 86 );\n    value = "Stored!";\n    break;\n  case 3 :\n    jQuery.removeData( div, "blah" );\n    value = "Removed!";\n    break;\n  }\n  $( "span" ).text( "" + value );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    data<T extends string | number | boolean | symbol | object | null>(element: Element | Document | Window | JQuery.PlainObject, key: string, value: T): T;\n    /**\n     * Returns value at named data store for the element, as set by `jQuery.data(element, name, value)`, or the full data store for the element.\n     * @param element The DOM element to query for the data.\n     * @param key Name of the data stored.\n     * @param value `undefined` is not recognized as a data value. Calls such as `jQuery.data( el, "name", undefined )`\n     *              will return the corresponding data for "name", and is therefore the same as `jQuery.data( el, "name" )`\n     * @see \\`{@link https://api.jquery.com/jQuery.data/ }\\`\n     * @since 1.2.3\n     */\n    // `unified-signatures` is disabled so that behavior when passing `undefined` to `value` can be documented. Unifying the signatures\n    // results in potential confusion for users from an unexpected parameter.\n    // tslint:disable-next-line:unified-signatures\n    data(element: Element | Document | Window | JQuery.PlainObject, key: string, value: undefined): any;\n    /**\n     * Returns value at named data store for the element, as set by `jQuery.data(element, name, value)`, or the full data store for the element.\n     * @param element The DOM element to query for the data.\n     * @param key Name of the data stored.\n     * @see \\`{@link https://api.jquery.com/jQuery.data/ }\\`\n     * @since 1.2.3\n     * @since 1.4\n     * @example ​ ````Store then retrieve a value from the div element.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.data demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>\n  The values stored were\n  <span></span>\n  and\n  <span></span>\n</div>\n​\n<script>\nvar div = $( "div" )[ 0 ];\njQuery.data( div, "test", {\n  first: 16,\n  last: "pizza!"\n});\n$( "span:first" ).text( jQuery.data( div, "test" ).first );\n$( "span:last" ).text( jQuery.data( div, "test" ).last );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    data(element: Element | Document | Window | JQuery.PlainObject, key?: string): any;\n    /**\n     * Execute the next function on the queue for the matched element.\n     * @param element A DOM element from which to remove and execute a queued function.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @see \\`{@link https://api.jquery.com/jQuery.dequeue/ }\\`\n     * @since 1.3\n     * @example ​ ````Use jQuery.dequeue() to end a custom queue function which allows the queue to keep going.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.dequeue demo</title>\n  <style>\n  div {\n    margin: 3px;\n    width: 50px;\n    position: absolute;\n    height: 50px;\n    left: 10px;\n    top: 30px;\n    background-color: yellow;\n  }\n  div.red {\n    background-color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Start</button>\n<div></div>\n​\n<script>\n$( "button" ).click(function() {\n  $( "div" )\n    .animate({ left: \'+=200px\' }, 2000 )\n    .animate({ top: \'0px\' }, 600 )\n    .queue(function() {\n      $( this ).toggleClass( "red" );\n      $.dequeue( this );\n    })\n    .animate({ left:\'10px\', top:\'30px\' }, 700 );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    dequeue(element: Element, queueName?: string): void;\n    /**\n     * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\'s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.\n     * @param array The array to iterate over.\n     * @param callback The function that will be executed on every object.\n     * @see \\`{@link https://api.jquery.com/jQuery.each/ }\\`\n     * @since 1.0\n     * @example ​ ````Iterates through the array displaying each number as both a word and numeral\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.each demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  div#five {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="one"></div>\n<div id="two"></div>\n<div id="three"></div>\n<div id="four"></div>\n<div id="five"></div>\n​\n<script>\nvar arr = [ "one", "two", "three", "four", "five" ];\nvar obj = { one: 1, two: 2, three: 3, four: 4, five: 5 };\n​\njQuery.each( arr, function( i, val ) {\n  $( "#" + val ).text( "Mine is " + val + "." );\n​\n  // Will stop running after "three"\n  return ( val !== "three" );\n});\n​\njQuery.each( obj, function( i, val ) {\n  $( "#" + i ).append( document.createTextNode( " - " + val ) );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Iterates over items in an array, accessing both the current item and its index.\n```javascript\n$.each( [ "a", "b", "c" ], function( i, l ){\n  alert( "Index #" + i + ": " + l );\n});\n```\n     */\n    each<T>(array: ArrayLike<T>, callback: (this: T, indexInArray: number, value: T) => any): ArrayLike<T>;\n    /**\n     * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\'s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.\n     * @param obj The object to iterate over.\n     * @param callback The function that will be executed on every object.\n     * @see \\`{@link https://api.jquery.com/jQuery.each/ }\\`\n     * @since 1.0\n     * @example ​ ````Iterates through the array displaying each number as both a word and numeral\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.each demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  div#five {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="one"></div>\n<div id="two"></div>\n<div id="three"></div>\n<div id="four"></div>\n<div id="five"></div>\n​\n<script>\nvar arr = [ "one", "two", "three", "four", "five" ];\nvar obj = { one: 1, two: 2, three: 3, four: 4, five: 5 };\n​\njQuery.each( arr, function( i, val ) {\n  $( "#" + val ).text( "Mine is " + val + "." );\n​\n  // Will stop running after "three"\n  return ( val !== "three" );\n});\n​\njQuery.each( obj, function( i, val ) {\n  $( "#" + i ).append( document.createTextNode( " - " + val ) );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Iterates over the properties in an object, accessing both the current item and its key.\n```javascript\n$.each({ name: "John", lang: "JS" }, function( k, v ) {\n  alert( "Key: " + k + ", Value: " + v );\n});\n```\n     */\n    each<T, K extends keyof T>(obj: T, callback: (this: T[K], propertyName: K, valueOfProperty: T[K]) => any): T;\n    /**\n     * Takes a string and throws an exception containing it.\n     * @param message The message to send out.\n     * @see \\`{@link https://api.jquery.com/jQuery.error/ }\\`\n     * @since 1.4.1\n     * @example ​ ````Override jQuery.error for display in Firebug.\n```javascript\njQuery.error = console.error;\n```\n     */\n    error(message: string): any;\n    /**\n     * Escapes any character that has a special meaning in a CSS selector.\n     * @param selector A string containing a selector expression to escape.\n     * @see \\`{@link https://api.jquery.com/jQuery.escapeSelector/ }\\`\n     * @since 3.0\n     * @example ​ ````Escape an ID containing a hash.\n```javascript\n$.escapeSelector( "#target" ); // "\\#target"\n```\n     * @example ​ ````Select all the elements having a class name of .box inside a div.\n```javascript\n$( "div" ).find( "." + $.escapeSelector( ".box" ) );\n```\n     */\n    escapeSelector(selector: JQuery.Selector): JQuery.Selector;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.\n     * @param target The object to extend. It will receive the new properties.\n     * @param object1 An object containing additional properties to merge in.\n     * @param object2 An object containing additional properties to merge in.\n     * @param object3 An object containing additional properties to merge in.\n     * @param object4 An object containing additional properties to merge in.\n     * @param object5 An object containing additional properties to merge in.\n     * @param object6 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.1.4\n     * @example ​ ````Merge two objects recursively, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1, recursively\n$.extend( true, object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U, V, W, X, Y, Z>(deep: true, target: T, object1: U, object2: V, object3: W, object4: X, object5: Y, object6: Z): T & U & V & W & X & Y & Z;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.\n     * @param target The object to extend. It will receive the new properties.\n     * @param object1 An object containing additional properties to merge in.\n     * @param object2 An object containing additional properties to merge in.\n     * @param object3 An object containing additional properties to merge in.\n     * @param object4 An object containing additional properties to merge in.\n     * @param object5 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.1.4\n     * @example ​ ````Merge two objects recursively, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1, recursively\n$.extend( true, object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U, V, W, X, Y>(deep: true, target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T & U & V & W & X & Y;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.\n     * @param target The object to extend. It will receive the new properties.\n     * @param object1 An object containing additional properties to merge in.\n     * @param object2 An object containing additional properties to merge in.\n     * @param object3 An object containing additional properties to merge in.\n     * @param object4 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.1.4\n     * @example ​ ````Merge two objects recursively, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1, recursively\n$.extend( true, object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U, V, W, X>(deep: true, target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.\n     * @param target The object to extend. It will receive the new properties.\n     * @param object1 An object containing additional properties to merge in.\n     * @param object2 An object containing additional properties to merge in.\n     * @param object3 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.1.4\n     * @example ​ ````Merge two objects recursively, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1, recursively\n$.extend( true, object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U, V, W>(deep: true, target: T, object1: U, object2: V, object3: W): T & U & V & W;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.\n     * @param target The object to extend. It will receive the new properties.\n     * @param object1 An object containing additional properties to merge in.\n     * @param object2 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.1.4\n     * @example ​ ````Merge two objects recursively, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1, recursively\n$.extend( true, object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U, V>(deep: true, target: T, object1: U, object2: V): T & U & V;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.\n     * @param target The object to extend. It will receive the new properties.\n     * @param object1 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.1.4\n     * @example ​ ````Merge two objects recursively, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1, recursively\n$.extend( true, object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U>(deep: true, target: T, object1: U): T & U;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.\n     * @param target The object to extend. It will receive the new properties.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.1.4\n     */\n    extend<T>(deep: true, target: T): this & T;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param deep If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported.\n     * @param target The object to extend. It will receive the new properties.\n     * @param object1 An object containing additional properties to merge in.\n     * @param objectN Additional objects containing properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.1.4\n     * @example ​ ````Merge two objects recursively, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1, recursively\n$.extend( true, object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend(deep: true, target: any, object1: any, ...objectN: any[]): any;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param target An object that will receive the new properties if additional objects are passed in or that will\n     *               extend the jQuery namespace if it is the sole argument.\n     * @param object1 An object containing additional properties to merge in.\n     * @param object2 An object containing additional properties to merge in.\n     * @param object3 An object containing additional properties to merge in.\n     * @param object4 An object containing additional properties to merge in.\n     * @param object5 An object containing additional properties to merge in.\n     * @param object6 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.0\n     * @example ​ ````Merge two objects, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1\n$.extend( object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar defaults = { validate: false, limit: 5, name: "foo" };\nvar options = { validate: true, name: "bar" };\n​\n// Merge defaults and options, without modifying defaults\nvar settings = $.extend( {}, defaults, options );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( "<div><b>defaults -- </b>" + JSON.stringify( defaults ) + "</div>" );\n$( "#log" ).append( "<div><b>options -- </b>" + JSON.stringify( options ) + "</div>" );\n$( "#log" ).append( "<div><b>settings -- </b>" + JSON.stringify( settings ) + "</div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U, V, W, X, Y, Z>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y, object6: Z): T & U & V & W & X & Y & Z;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param target An object that will receive the new properties if additional objects are passed in or that will\n     *               extend the jQuery namespace if it is the sole argument.\n     * @param object1 An object containing additional properties to merge in.\n     * @param object2 An object containing additional properties to merge in.\n     * @param object3 An object containing additional properties to merge in.\n     * @param object4 An object containing additional properties to merge in.\n     * @param object5 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.0\n     * @example ​ ````Merge two objects, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1\n$.extend( object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar defaults = { validate: false, limit: 5, name: "foo" };\nvar options = { validate: true, name: "bar" };\n​\n// Merge defaults and options, without modifying defaults\nvar settings = $.extend( {}, defaults, options );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( "<div><b>defaults -- </b>" + JSON.stringify( defaults ) + "</div>" );\n$( "#log" ).append( "<div><b>options -- </b>" + JSON.stringify( options ) + "</div>" );\n$( "#log" ).append( "<div><b>settings -- </b>" + JSON.stringify( settings ) + "</div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T & U & V & W & X & Y;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param target An object that will receive the new properties if additional objects are passed in or that will\n     *               extend the jQuery namespace if it is the sole argument.\n     * @param object1 An object containing additional properties to merge in.\n     * @param object2 An object containing additional properties to merge in.\n     * @param object3 An object containing additional properties to merge in.\n     * @param object4 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.0\n     * @example ​ ````Merge two objects, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1\n$.extend( object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar defaults = { validate: false, limit: 5, name: "foo" };\nvar options = { validate: true, name: "bar" };\n​\n// Merge defaults and options, without modifying defaults\nvar settings = $.extend( {}, defaults, options );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( "<div><b>defaults -- </b>" + JSON.stringify( defaults ) + "</div>" );\n$( "#log" ).append( "<div><b>options -- </b>" + JSON.stringify( options ) + "</div>" );\n$( "#log" ).append( "<div><b>settings -- </b>" + JSON.stringify( settings ) + "</div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param target An object that will receive the new properties if additional objects are passed in or that will\n     *               extend the jQuery namespace if it is the sole argument.\n     * @param object1 An object containing additional properties to merge in.\n     * @param object2 An object containing additional properties to merge in.\n     * @param object3 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.0\n     * @example ​ ````Merge two objects, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1\n$.extend( object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar defaults = { validate: false, limit: 5, name: "foo" };\nvar options = { validate: true, name: "bar" };\n​\n// Merge defaults and options, without modifying defaults\nvar settings = $.extend( {}, defaults, options );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( "<div><b>defaults -- </b>" + JSON.stringify( defaults ) + "</div>" );\n$( "#log" ).append( "<div><b>options -- </b>" + JSON.stringify( options ) + "</div>" );\n$( "#log" ).append( "<div><b>settings -- </b>" + JSON.stringify( settings ) + "</div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param target An object that will receive the new properties if additional objects are passed in or that will\n     *               extend the jQuery namespace if it is the sole argument.\n     * @param object1 An object containing additional properties to merge in.\n     * @param object2 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.0\n     * @example ​ ````Merge two objects, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1\n$.extend( object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar defaults = { validate: false, limit: 5, name: "foo" };\nvar options = { validate: true, name: "bar" };\n​\n// Merge defaults and options, without modifying defaults\nvar settings = $.extend( {}, defaults, options );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( "<div><b>defaults -- </b>" + JSON.stringify( defaults ) + "</div>" );\n$( "#log" ).append( "<div><b>options -- </b>" + JSON.stringify( options ) + "</div>" );\n$( "#log" ).append( "<div><b>settings -- </b>" + JSON.stringify( settings ) + "</div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U, V>(target: T, object1: U, object2: V): T & U & V;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param target An object that will receive the new properties if additional objects are passed in or that will\n     *               extend the jQuery namespace if it is the sole argument.\n     * @param object1 An object containing additional properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.0\n     * @example ​ ````Merge two objects, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1\n$.extend( object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar defaults = { validate: false, limit: 5, name: "foo" };\nvar options = { validate: true, name: "bar" };\n​\n// Merge defaults and options, without modifying defaults\nvar settings = $.extend( {}, defaults, options );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( "<div><b>defaults -- </b>" + JSON.stringify( defaults ) + "</div>" );\n$( "#log" ).append( "<div><b>options -- </b>" + JSON.stringify( options ) + "</div>" );\n$( "#log" ).append( "<div><b>settings -- </b>" + JSON.stringify( settings ) + "</div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend<T, U>(target: T, object1: U): T & U;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param target An object that will receive the new properties if additional objects are passed in or that will\n     *               extend the jQuery namespace if it is the sole argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.0\n     */\n    extend<T>(target: T): this & T;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     * @param target An object that will receive the new properties if additional objects are passed in or that will\n     *               extend the jQuery namespace if it is the sole argument.\n     * @param object1 An object containing additional properties to merge in.\n     * @param objectN Additional objects containing properties to merge in.\n     * @see \\`{@link https://api.jquery.com/jQuery.extend/ }\\`\n     * @since 1.0\n     * @example ​ ````Merge two objects, modifying the first.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n​\n// Merge object2 into object1\n$.extend( object1, object2 );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( JSON.stringify( object1 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.extend demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\nvar defaults = { validate: false, limit: 5, name: "foo" };\nvar options = { validate: true, name: "bar" };\n​\n// Merge defaults and options, without modifying defaults\nvar settings = $.extend( {}, defaults, options );\n​\n// Assuming JSON.stringify - not available in IE<8\n$( "#log" ).append( "<div><b>defaults -- </b>" + JSON.stringify( defaults ) + "</div>" );\n$( "#log" ).append( "<div><b>options -- </b>" + JSON.stringify( options ) + "</div>" );\n$( "#log" ).append( "<div><b>settings -- </b>" + JSON.stringify( settings ) + "</div>" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    extend(target: any, object1: any, ...objectN: any[]): any;\n    /**\n     * Load data from the server using a HTTP GET request.\n     * @param url A string containing the URL to which the request is sent.\n     * @param data A plain object or string that is sent to the server with the request.\n     * @param success A callback function that is executed if the request succeeds. Required if `dataType` is provided,\n     *                but you can use `null` or \\`{@link noop jQuery.noop}\\` as a placeholder.\n     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).\n     * @see \\`{@link https://api.jquery.com/jQuery.get/ }\\`\n     * @since 1.0\n     */\n    get(url: string,\n        data: JQuery.PlainObject | string,\n        success: JQuery.jqXHR.DoneCallback | null,\n        dataType?: string): JQuery.jqXHR;\n    /**\n     * Load data from the server using a HTTP GET request.\n     * @param url A string containing the URL to which the request is sent.\n     * @param success A callback function that is executed if the request succeeds. Required if `dataType` is provided,\n     *                but you can use `null` or \\`{@link noop jQuery.noop}\\` as a placeholder.\n     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).\n     * @see \\`{@link https://api.jquery.com/jQuery.get/ }\\`\n     * @since 1.0\n     * @example ​ ````Get the test.php page contents, which has been returned in json format (&lt;?php echo json_encode( array( &quot;name&quot;=&gt;&quot;John&quot;,&quot;time&quot;=&gt;&quot;2pm&quot; ) ); ?&gt;), and add it to the page.\n```javascript\n$.get( "test.php", function( data ) {\n  $( "body" )\n    .append( "Name: " + data.name ) // John\n    .append( "Time: " + data.time ); //  2pm\n}, "json" );\n```\n     */\n    get(url: string,\n        success: JQuery.jqXHR.DoneCallback | null,\n        dataType: string): JQuery.jqXHR;\n    /**\n     * Load data from the server using a HTTP GET request.\n     * @param url A string containing the URL to which the request is sent.\n     * @param success_data _&#x40;param_ `success_data`\n     * <br>\n     * * `success` — A callback function that is executed if the request succeeds. Required if `dataType` is provided,\n     *               but you can use `null` or \\`{@link noop jQuery.noop}\\` as a placeholder. <br>\n     * * `data` — A plain object or string that is sent to the server with the request.\n     * @see \\`{@link https://api.jquery.com/jQuery.get/ }\\`\n     * @since 1.0\n     * @example ​ ````Request the test.php page and send some additional data along (while still ignoring the return results).\n```javascript\n$.get( "test.php", { name: "John", time: "2pm" } );\n```\n     * @example ​ ````Pass arrays of data to the server (while still ignoring the return results).\n```javascript\n$.get( "test.php", { "choices[]": ["Jon", "Susan"] } );\n```\n     * @example ​ ````Alert the results from requesting test.php (HTML or XML, depending on what was returned).\n```javascript\n$.get( "test.php", function( data ) {\n  alert( "Data Loaded: " + data );\n});\n```\n     * @example ​ ````Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).\n```javascript\n$.get( "test.cgi", { name: "John", time: "2pm" } )\n  .done(function( data ) {\n    alert( "Data Loaded: " + data );\n  });\n```\n     */\n    get(url: string,\n        success_data: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string): JQuery.jqXHR;\n    /**\n     * Load data from the server using a HTTP GET request.\n     * @param url_settings _&#x40;param_ `url_settings`\n     * <br>\n     * * `url` — A string containing the URL to which the request is sent. <br>\n     * * `settings` — A set of key/value pairs that configure the Ajax request. All properties except for `url` are\n     *                optional. A default can be set for any option with \\`{@link ajaxSetup $.ajaxSetup()}\\`. See \\`{@link https://api.jquery.com/jquery.ajax/#jQuery-ajax-settings jQuery.ajax( settings )}\\`\n     *                for a complete list of all settings. The type option will automatically be set to `GET`.\n     * @see \\`{@link https://api.jquery.com/jQuery.get/ }\\`\n     * @since 1.0\n     * @since 1.12\n     * @since 2.2\n     * @example ​ ````Request the test.php page, but ignore the return results.\n```javascript\n$.get( "test.php" );\n```\n     */\n    get(url_settings?: string | JQuery.UrlAjaxSettings): JQuery.jqXHR;\n    /**\n     * Load JSON-encoded data from the server using a GET HTTP request.\n     * @param url A string containing the URL to which the request is sent.\n     * @param data A plain object or string that is sent to the server with the request.\n     * @param success A callback function that is executed if the request succeeds.\n     * @see \\`{@link https://api.jquery.com/jQuery.getJSON/ }\\`\n     * @since 1.0\n     */\n    getJSON(url: string,\n            data: JQuery.PlainObject | string,\n            success: JQuery.jqXHR.DoneCallback): JQuery.jqXHR;\n    /**\n     * Load JSON-encoded data from the server using a GET HTTP request.\n     * @param url A string containing the URL to which the request is sent.\n     * @param success_data _&#x40;param_ `url_settings`\n     * <br>\n     * * `success` — A callback function that is executed if the request succeeds. <br>\n     * * `data` — A plain object or string that is sent to the server with the request.\n     * @see \\`{@link https://api.jquery.com/jQuery.getJSON/ }\\`\n     * @since 1.0\n     * @example ​ ````Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.getJSON demo</title>\n  <style>\n  img {\n    height: 100px;\n    float: left;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="images"></div>\n​\n<script>\n(function() {\n  var flickerAPI = "https://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?";\n  $.getJSON( flickerAPI, {\n    tags: "mount rainier",\n    tagmode: "any",\n    format: "json"\n  })\n    .done(function( data ) {\n      $.each( data.items, function( i, item ) {\n        $( "<img>" ).attr( "src", item.media.m ).appendTo( "#images" );\n        if ( i === 3 ) {\n          return false;\n        }\n      });\n    });\n})();\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Load the JSON data from test.js and access a name from the returned JSON data.\n```javascript\n$.getJSON( "test.js", function( json ) {\n  console.log( "JSON Data: " + json.users[ 3 ].name );\n });\n ```\n     * @example ​ ````Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data.\n      If an error occurs, log an error message instead.\n```javascript\n$.getJSON( "test.js", { name: "John", time: "2pm" } )\n  .done(function( json ) {\n    console.log( "JSON Data: " + json.users[ 3 ].name );\n  })\n  .fail(function( jqxhr, textStatus, error ) {\n    var err = textStatus + ", " + error;\n    console.log( "Request Failed: " + err );\n});\n```\n     */\n    getJSON(url: string,\n            success_data?: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string): JQuery.jqXHR;\n    /**\n     * Load a JavaScript file from the server using a GET HTTP request, then execute it.\n     * @param url A string containing the URL to which the request is sent.\n     * @param success A callback function that is executed if the request succeeds.\n     * @see \\`{@link https://api.jquery.com/jQuery.getScript/ }\\`\n     * @since 1.0\n     * @example ​ ````Define a $.cachedScript() method that allows fetching a cached script:\n```javascript\njQuery.cachedScript = function( url, options ) {\n​\n  // Allow user to set any option except for dataType, cache, and url\n  options = $.extend( options || {}, {\n    dataType: "script",\n    cache: true,\n    url: url\n  });\n​\n  // Use $.ajax() since it is more flexible than $.getScript\n  // Return the jqXHR object so we can chain callbacks\n  return jQuery.ajax( options );\n};\n​\n// Usage\n$.cachedScript( "ajax/test.js" ).done(function( script, textStatus ) {\n  console.log( textStatus );\n});\n```\n     * @example ​ ````Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.getScript demo</title>\n  <style>\n  .block {\n     background-color: blue;\n     width: 150px;\n     height: 70px;\n     margin: 10px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="go">&raquo; Run</button>\n<div class="block"></div>\n​\n<script>\nvar url = "https://code.jquery.com/color/jquery.color.js";\n$.getScript( url, function() {\n  $( "#go" ).click(function() {\n    $( ".block" )\n      .animate({\n        backgroundColor: "rgb(255, 180, 180)"\n      }, 1000 )\n      .delay( 500 )\n      .animate({\n        backgroundColor: "olive"\n      }, 1000 )\n      .delay( 500 )\n      .animate({\n        backgroundColor: "#00f"\n      }, 1000 );\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    getScript(url: string,\n              success?: JQuery.jqXHR.DoneCallback<string | undefined>): JQuery.jqXHR<string | undefined>;\n    /**\n     * Load a JavaScript file from the server using a GET HTTP request, then execute it.\n     * @see \\`{@link https://api.jquery.com/jQuery.getScript/ }\\`\n     * @since 1.12\n     * @since 2.2\n     */\n    getScript(options: JQuery.UrlAjaxSettings): JQuery.jqXHR<string | undefined>;\n    /**\n     * Execute some JavaScript code globally.\n     * @param code The JavaScript code to execute.\n     * @see \\`{@link https://api.jquery.com/jQuery.globalEval/ }\\`\n     * @since 1.0.4\n     * @example ​ ````Execute a script in the global context.\n```javascript\nfunction test() {\n  jQuery.globalEval( "var newVar = true;" )\n}\ntest();\n// newVar === true\n```\n     */\n    globalEval(code: string): void;\n    /**\n     * Finds the elements of an array which satisfy a filter function. The original array is not affected.\n     * @param array The array-like object to search through.\n     * @param funсtion The function to process each item against. The first argument to the function is the item, and the\n     *                 second argument is the index. The function should return a Boolean value. `this` will be the global\n     *                 window object.\n     * @param invert If "invert" is false, or not provided, then the function returns an array consisting of all elements\n     *               for which "callback" returns true. If "invert" is true, then the function returns an array\n     *               consisting of all elements for which "callback" returns false.\n     * @see \\`{@link https://api.jquery.com/jQuery.grep/ }\\`\n     * @since 1.0\n     * @example ​ ````Filters the original array of numbers leaving that are not 5 and have an index greater than 4.  Then it removes all 9s.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.grep demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  p {\n    color: green;\n    margin: 0;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<p></p>\n<span></span>\n​\n<script>\nvar arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];\n$( "div" ).text( arr.join( ", " ) );\n​\narr = jQuery.grep(arr, function( n, i ) {\n  return ( n !== 5 && i > 4 );\n});\n$( "p" ).text( arr.join( ", " ) );\n​\narr = jQuery.grep(arr, function( a ) {\n  return a !== 9;\n});\n​\n$( "span" ).text( arr.join( ", " ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Filter an array of numbers to include only numbers bigger then zero.\n```javascript\n$.grep( [ 0, 1, 2 ], function( n, i ) {\n  return n > 0;\n});\n```\n     * @example ​ ````Filter an array of numbers to include numbers that are not bigger than zero.\n```javascript\n$.grep( [ 0, 1, 2 ], function( n, i ) {\n    return n > 0;\n}, true );\n```\n     */\n    grep<T>(array: ArrayLike<T>,\n            funсtion: (elementOfArray: T, indexInArray: number) => boolean,\n            invert?: boolean): T[];\n    /**\n     * Determine whether an element has any jQuery data associated with it.\n     * @param element A DOM element to be checked for data.\n     * @see \\`{@link https://api.jquery.com/jQuery.hasData/ }\\`\n     * @since 1.5\n     * @example ​ ````Set data on an element and see the results of hasData.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.hasData demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>Results: </p>\n​\n<script>\nvar $p = jQuery( "p" ), p = $p[ 0 ];\n$p.append( jQuery.hasData( p ) + " " ); // false\n​\n$.data( p, "testing", 123 );\n$p.append( jQuery.hasData( p ) + " " ); // true\n​\n$.removeData( p, "testing" );\n$p.append( jQuery.hasData( p ) + " " ); // false\n​\n$p.on( "click", function() {} );\n$p.append( jQuery.hasData( p ) + " " ); // true\n​\n$p.off( "click" );\n$p.append( jQuery.hasData( p ) + " " ); // false\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    hasData(element: Element | Document | Window | JQuery.PlainObject): boolean;\n    /**\n     * Holds or releases the execution of jQuery\'s ready event.\n     * @param hold Indicates whether the ready hold is being requested or released\n     * @see \\`{@link https://api.jquery.com/jQuery.holdReady/ }\\`\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.2. See \\`{@link https://github.com/jquery/jquery/issues/3288 }\\`.\n     *\n     * **Cause**: The `jQuery.holdReady()` method has been deprecated due to its detrimental effect on the global performance of the page. This method can prevent all the code on the page from initializing for extended lengths of time.\n     *\n     * **Solution**: Rewrite the page so that it does not require all jQuery ready handlers to be delayed. This might be accomplished, for example, by late-loading only the code that requires the delay when it is safe to run. Due to the complexity of this method, jQuery Migrate does not attempt to fill the functionality. If the underlying version of jQuery used with jQuery Migrate no longer contains `jQuery.holdReady()` the code will fail shortly after this warning appears.\n     * @example ​ ````Delay the ready event until a custom plugin has loaded.\n```javascript\n$.holdReady( true );\n$.getScript( "myplugin.js", function() {\n  $.holdReady( false );\n});\n```\n     */\n    holdReady(hold: boolean): void;\n    /**\n     * Modify and filter HTML strings passed through jQuery manipulation methods.\n     * @param html The HTML string on which to operate.\n     * @see \\`{@link https://api.jquery.com/jQuery.htmlPrefilter/ }\\`\n     * @since 1.12\n     * @since 2.2\n     */\n    htmlPrefilter(html: JQuery.htmlString): JQuery.htmlString;\n    /**\n     * Search for a specified value within an array and return its index (or -1 if not found).\n     * @param value The value to search for.\n     * @param array An array through which to search.\n     * @param fromIndex The index of the array at which to begin the search. The default is 0, which will search the whole array.\n     * @see \\`{@link https://api.jquery.com/jQuery.inArray/ }\\`\n     * @since 1.2\n     * @example ​ ````Report the index of some elements in the array.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.inArray demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>"John" found at <span></span></div>\n<div>4 found at <span></span></div>\n<div>"Karl" not found, so <span></span></div>\n<div>"Pete" is in the array, but not at or after index 2, so <span></span></div>\n​\n<script>\nvar arr = [ 4, "Pete", 8, "John" ];\nvar $spans = $( "span" );\n$spans.eq( 0 ).text( jQuery.inArray( "John", arr ) );\n$spans.eq( 1 ).text( jQuery.inArray( 4, arr ) );\n$spans.eq( 2 ).text( jQuery.inArray( "Karl", arr ) );\n$spans.eq( 3 ).text( jQuery.inArray( "Pete", arr, 2 ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    inArray<T>(value: T, array: T[], fromIndex?: number): number;\n    /**\n     * Determine whether the argument is an array.\n     * @param obj Object to test whether or not it is an array.\n     * @see \\`{@link https://api.jquery.com/jQuery.isArray/ }\\`\n     * @since 1.3\n     * @deprecated ​ Deprecated since 3.2. Use \\`{@link ArrayConstructor.isArray Array.isArray}\\`.\n     * @example ​ ````Finds out if the parameter is an array.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.isArray demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nIs [] an Array? <b></b>\n​\n<script>\n$( "b" ).append( "" + $.isArray([]) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    isArray(obj: any): obj is any[];\n    /**\n     * Check to see if an object is empty (contains no enumerable properties).\n     * @param obj The object that will be checked to see if it\'s empty.\n     * @see \\`{@link https://api.jquery.com/jQuery.isEmptyObject/ }\\`\n     * @since 1.4\n     * @example ​ ````Check an object to see if it&#39;s empty.\n```javascript\njQuery.isEmptyObject({}); // true\njQuery.isEmptyObject({ foo: "bar" }); // false\n```\n     */\n    isEmptyObject(obj: any): boolean;\n    /**\n     * Determine if the argument passed is a JavaScript function object.\n     * @param obj Object to test whether or not it is a function.\n     * @see \\`{@link https://api.jquery.com/jQuery.isFunction/ }\\`\n     * @since 1.2\n     * @deprecated ​ Deprecated since 3.3. Use `typeof x === "function"`.\n     * @example ​ ````Test a few parameter examples.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.isFunction demo</title>\n  <style>\n  div {\n    color: blue;\n    margin: 2px;\n    font-size: 14px;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>jQuery.isFunction( objs[ 0 ] ) = <span></span></div>\n<div>jQuery.isFunction( objs[ 1 ] ) = <span></span></div>\n<div>jQuery.isFunction( objs[ 2 ] ) = <span></span></div>\n<div>jQuery.isFunction( objs[ 3 ] ) = <span></span></div>\n<div>jQuery.isFunction( objs[ 4 ] ) = <span></span></div>\n​\n<script>\nfunction stub() {}\nvar objs = [\n  function() {},\n  { x:15, y:20 },\n  null,\n  stub,\n  "function"\n];\n​\njQuery.each( objs, function( i ) {\n  var isFunc = jQuery.isFunction( objs[ i ]);\n  $( "span" ).eq( i ).text( isFunc );\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Finds out if the parameter is a function.\n```javascript\n$.isFunction(function() {});\n```\n     */\n    // tslint:disable-next-line:ban-types\n    isFunction(obj: any): obj is Function;\n    /**\n     * Determines whether its argument represents a JavaScript number.\n     * @param value The value to be tested.\n     * @see \\`{@link https://api.jquery.com/jQuery.isNumeric/ }\\`\n     * @since 1.7\n     * @deprecated ​ Deprecated since 3.3. Internal. See \\`{@link https://github.com/jquery/jquery/issues/2960 }\\`.\n     * @example ​ ````Sample return values of $.isNumeric with various inputs.\n```javascript\n// true (numeric)\n$.isNumeric( "-10" )\n$.isNumeric( "0" )\n$.isNumeric( 0xFF )\n$.isNumeric( "0xFF" )\n$.isNumeric( "8e5" )\n$.isNumeric( "3.1415" )\n$.isNumeric( +10 )\n$.isNumeric( 0144 )\n​\n// false (non-numeric)\n$.isNumeric( "-0x42" )\n$.isNumeric( "7.2acdgs" )\n$.isNumeric( "" )\n$.isNumeric( {} )\n$.isNumeric( NaN )\n$.isNumeric( null )\n$.isNumeric( true )\n$.isNumeric( Infinity )\n$.isNumeric( undefined )\n```\n     */\n    isNumeric(value: any): boolean;\n    /**\n     * Check to see if an object is a plain object (created using "{}" or "new Object").\n     * @param obj The object that will be checked to see if it\'s a plain object.\n     * @see \\`{@link https://api.jquery.com/jQuery.isPlainObject/ }\\`\n     * @since 1.4\n     * @example ​ ````Check an object to see if it&#39;s a plain object.\n```javascript\njQuery.isPlainObject({}) // true\njQuery.isPlainObject( "test" ) // false\n```\n     */\n    isPlainObject(obj: any): boolean;\n    /**\n     * Determine whether the argument is a window.\n     * @param obj Object to test whether or not it is a window.\n     * @see \\`{@link https://api.jquery.com/jQuery.isWindow/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Internal. See \\`{@link https://github.com/jquery/jquery/issues/3629 }\\`.\n     *\n     * **Cause**: This method returns `true` if its argument is thought to be a `window` element. It was created for internal use and is not a reliable way of detecting `window` for public needs.\n     *\n     * **Solution**: Remove any use of `jQuery.isWindow()` from code. If it is truly needed it can be replaced with a check for `obj != null && obj === obj.window` which was the test used inside this method.\n     * @example ​ ````Finds out if the parameter is a window.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.isWindow demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nIs \'window\' a window? <b></b>\n​\n<script>\n$( "b" ).append( "" + $.isWindow( window ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    isWindow(obj: any): obj is Window;\n    /**\n     * Check to see if a DOM node is within an XML document (or is an XML document).\n     * @param node The DOM node that will be checked to see if it\'s in an XML document.\n     * @see \\`{@link https://api.jquery.com/jQuery.isXMLDoc/ }\\`\n     * @since 1.1.4\n     * @example ​ ````Check an object to see if it&#39;s in an XML document.\n```javascript\njQuery.isXMLDoc( document ) // false\njQuery.isXMLDoc( document.body ) // false\n```\n     */\n    isXMLDoc(node: Node): boolean;\n    /**\n     * Convert an array-like object into a true JavaScript array.\n     * @param obj Any object to turn into a native Array.\n     * @see \\`{@link https://api.jquery.com/jQuery.makeArray/ }\\`\n     * @since 1.2\n     * @example ​ ````Turn a collection of HTMLElements into an Array of them.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.makeArray demo</title>\n  <style>\n  div {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>First</div>\n<div>Second</div>\n<div>Third</div>\n<div>Fourth</div>\n​\n<script>\n// Returns a NodeList\nvar elems = document.getElementsByTagName( "div" );\n// Convert the NodeList to an Array\nvar arr = jQuery.makeArray( elems );\n// Use an Array method on list of dom elements\narr.reverse();\n$( arr ).appendTo( document.body );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Turn a jQuery object into an array\n```javascript\nvar obj = $( "li" );\nvar arr = $.makeArray( obj );\n```\n     */\n    makeArray<T>(obj: ArrayLike<T>): T[];\n    /**\n     * Translate all items in an array or object to new array of items.\n     * @param array The Array to translate.\n     * @param callback The function to process each item against. The first argument to the function is the array item, the\n     *                 second argument is the index in array The function can return any value. A returned array will be\n     *                 flattened into the resulting array. Within the function, this refers to the global (window) object.\n     * @see \\`{@link https://api.jquery.com/jQuery.map/ }\\`\n     * @since 1.0\n     * @example ​ ````Use $.map() to change the values of an array.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.map demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  p {\n    color: green;\n    margin: 0;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div></div>\n<p></p>\n<span></span>\n​\n<script>\nvar arr = [ "a", "b", "c", "d", "e" ];\n$( "div" ).text( arr.join( ", " ) );\n​\narr = jQuery.map( arr, function( n, i ) {\n  return ( n.toUpperCase() + i );\n});\n$( "p" ).text( arr.join( ", " ) );\n​\narr = jQuery.map( arr, function( a ) {\n  return a + a;\n});\n$( "span" ).text( arr.join( ", " ) );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Map the original array to a new one and add 4 to each value.\n```javascript\n$.map( [ 0, 1, 2 ], function( n ) {\n  return n + 4;\n});\n```\n     * @example ​ ````Map the original array to a new one, adding 1 to each value if it is bigger then zero and removing it if not.\n```javascript\n$.map( [ 0, 1, 2 ], function( n ) {\n  return n > 0 ? n + 1 : null;\n});\n```\n     * @example ​ ````Map the original array to a new one; each element is added with its original value and the value plus one.\n```javascript\n$.map( [ 0, 1, 2 ], function( n ) {\n    return [ n, n + 1 ];\n});\n```\n     * @example ​ ````Map the original array to a new one; each element is squared.\n```javascript\n$.map( [ 0, 1, 2, 3 ], function( a ) {\n  return a * a;\n});\n```\n     * @example ​ ````Map the original array to a new one, removing numbers less than 50 by returning null and subtracting 45 from the rest.\n```javascript\n$.map( [ 0, 1, 52, 97 ], function( a ) {\n  return (a > 50 ? a - 45 : null);\n});\n```\n     * @example ​ ````Augment the resulting array by returning an array inside the function.\n```javascript\nvar array = [ 0, 1, 52, 97 ];\narray = $.map( array, function( a, index ) {\n  return [ a - 45, index ];\n});\n```\n     */\n    map<T, TReturn>(array: T[], callback: (this: Window, elementOfArray: T, indexInArray: number) => JQuery.TypeOrArray<TReturn> | null | undefined): TReturn[];\n    /**\n     * Translate all items in an array or object to new array of items.\n     * @param obj The Object to translate.\n     * @param callback The function to process each item against. The first argument to the function is the value; the\n     *                 second argument is the key of the object property. The function can return any value to add to the\n     *                 array. A returned array will be flattened into the resulting array. Within the function, this refers\n     *                 to the global (window) object.\n     * @see \\`{@link https://api.jquery.com/jQuery.map/ }\\`\n     * @since 1.6\n     * @example ​ ````Map the original object to a new array and double each value.\n```javascript\nvar dimensions = { width: 10, height: 15, length: 20 };\ndimensions = $.map( dimensions, function( value, index ) {\n  return value * 2;\n});\n```\n     * @example ​ ````Map an object&#39;s keys to an array.\n```javascript\nvar dimensions = { width: 10, height: 15, length: 20 };\nvar keys = $.map( dimensions, function( value, key ) {\n  return key;\n});\n```\n     */\n    map<T, K extends keyof T, TReturn>(obj: T, callback: (this: Window, propertyOfObject: T[K], key: K) => JQuery.TypeOrArray<TReturn> | null | undefined): TReturn[];\n    /**\n     * Merge the contents of two arrays together into the first array.\n     * @param first The first array-like object to merge, the elements of second added.\n     * @param second The second array-like object to merge into the first, unaltered.\n     * @see \\`{@link https://api.jquery.com/jQuery.merge/ }\\`\n     * @since 1.0\n     * @example ​ ````Merges two arrays, altering the first argument.\n```javascript\n$.merge( [ 0, 1, 2 ], [ 2, 3, 4 ] )\n```\n     * @example ​ ````Merges two arrays, altering the first argument.\n```javascript\n$.merge( [ 3, 2, 1 ], [ 4, 3, 2 ] )\n```\n     * @example ​ ````Merges two arrays, but uses a copy, so the original isn&#39;t altered.\n```javascript\nvar first = [ "a", "b", "c" ];\nvar second = [ "d", "e", "f" ];\n$.merge( $.merge( [], first ), second );\n```\n     */\n    merge<T, U>(first: ArrayLike<T>, second: ArrayLike<U>): Array<T | U>;\n    /**\n     * Relinquish jQuery\'s control of the $ variable.\n     * @param removeAll A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).\n     * @see \\`{@link https://api.jquery.com/jQuery.noConflict/ }\\`\n     * @since 1.0\n     * @example ​ ````Map the original object that was referenced by $ back to $.\n```javascript\njQuery.noConflict();\n// Do something with jQuery\njQuery( "div p" ).hide();\n// Do something with another library\'s $()\n$( "content" ).style.display = "none";\n```\n     * @example ​ ````Revert the $ alias and then create and execute a function to provide the $ as a jQuery alias inside the function&#39;s scope. Inside the function the original $ object is not available. This works well for most plugins that don&#39;t rely on any other library.\n```javascript\njQuery.noConflict();\n(function( $ ) {\n  $(function() {\n    // More code using $ as alias to jQuery\n  });\n})(jQuery);\n​\n// Other code using $ as an alias to the other library\n```\n     * @example ​ ````Create a different alias instead of jQuery to use in the rest of the script.\n```javascript\nvar j = jQuery.noConflict();\n​\n// Do something with jQuery\nj( "div p" ).hide();\n​\n// Do something with another library\'s $()\n$( "content" ).style.display = "none";\n```\n     * @example ​ ````Completely move jQuery to a new namespace in another object.\n```javascript\nvar dom = {};\ndom.query = jQuery.noConflict( true );\n```\n     * @example ​ ````Load two versions of jQuery (not recommended). Then, restore jQuery&#39;s globally scoped variables to the first loaded jQuery.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.noConflict demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log">\n  <h3>Before $.noConflict(true)</h3>\n</div>\n<script src="https://code.jquery.com/jquery-1.6.2.js"><\/script>\n​\n<script>\nvar $log = $( "#log" );\n​\n$log.append( "2nd loaded jQuery version ($): " + $.fn.jquery + "<br>" );\n​\n// Restore globally scoped jQuery variables to the first version loaded\n// (the newer version)\n​\njq162 = jQuery.noConflict( true );\n​\n$log.append( "<h3>After $.noConflict(true)</h3>" );\n$log.append( "1st loaded jQuery version ($): " + $.fn.jquery + "<br>" );\n$log.append( "2nd loaded jQuery version (jq162): " + jq162.fn.jquery + "<br>" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    noConflict(removeAll?: boolean): this;\n    /**\n     * @deprecated ​ Deprecated since 3.2.\n     *\n     * **Cause**: This public but never-documented method has been deprecated as of jQuery 3.2.0.\n     *\n     * **Solution**: Replace calls such as `jQuery.nodeName( elem, "div" )` with a test such as `elem.nodeName.toLowerCase() === "div"`.\n     */\n    nodeName(elem: Node, name: string): boolean;\n    /**\n     * An empty function.\n     * @see \\`{@link https://api.jquery.com/jQuery.noop/ }\\`\n     * @since 1.4\n     */\n    noop(): undefined;\n    /**\n     * Return a number representing the current time.\n     * @see \\`{@link https://api.jquery.com/jQuery.now/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link DateConstructor.now Date.now}\\`.\n     */\n    now(): number;\n    /**\n     * Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties.\n     * @param obj An array, a plain object, or a jQuery object to serialize.\n     * @param traditional A Boolean indicating whether to perform a traditional "shallow" serialization.\n     * @see \\`{@link https://api.jquery.com/jQuery.param/ }\\`\n     * @since 1.2\n     * @since 1.4\n     * @example ​ ````Serialize a key/value object.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.param demo</title>\n  <style>\n  div {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="results"></div>\n​\n<script>\nvar params = { width:1680, height:1050 };\nvar str = jQuery.param( params );\n$( "#results" ).text( str );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Serialize a few complex objects\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.param demo</title>\n  <style>\n  div {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​​\n<script>\n// <=1.3.2:\n$.param({ a: [ 2, 3, 4 ] }); // "a=2&a=3&a=4"\n// >=1.4:\n$.param({ a: [ 2, 3, 4 ] }); // "a[]=2&a[]=3&a[]=4"\n​\n// <=1.3.2:\n$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });\n// "a=[object+Object]&d=3&d=4&d=[object+Object]"\n​\n// >=1.4:\n$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });\n// "a[b]=1&a[c]=2&d[]=3&d[]=4&d[2][e]=5"\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    param(obj: any[] | JQuery.PlainObject | JQuery, traditional?: boolean): string;\n    /**\n     * Parses a string into an array of DOM nodes.\n     * @param data HTML string to be parsed\n     * @param context Document element to serve as the context in which the HTML fragment will be created\n     * @param keepScripts A Boolean indicating whether to include scripts passed in the HTML string\n     * @see \\`{@link https://api.jquery.com/jQuery.parseHTML/ }\\`\n     * @since 1.8\n     */\n    parseHTML(data: string, context: Document | null | undefined, keepScripts: boolean): JQuery.Node[];\n    /**\n     * Parses a string into an array of DOM nodes.\n     * @param data HTML string to be parsed\n     * @param context_keepScripts _&#x40;param_ `context_keepScripts`\n     * <br>\n     * * `context` — Document element to serve as the context in which the HTML fragment will be created <br>\n     * * `keepScripts` — A Boolean indicating whether to include scripts passed in the HTML string\n     * @see \\`{@link https://api.jquery.com/jQuery.parseHTML/ }\\`\n     * @since 1.8\n     * @example ​ ````Create an array of DOM nodes using an HTML string and insert it into a div.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.parseHTML demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log">\n  <h3>Content:</h3>\n</div>\n​\n<script>\nvar $log = $( "#log" ),\n  str = "hello, <b>my name is</b> jQuery.",\n  html = $.parseHTML( str ),\n  nodeNames = [];\n​\n// Append the parsed HTML\n$log.append( html );\n​\n// Gather the parsed HTML\'s node names\n$.each( html, function( i, el ) {\n  nodeNames[ i ] = "<li>" + el.nodeName + "</li>";\n});\n​\n// Insert the node names\n$log.append( "<h3>Node Names:</h3>" );\n$( "<ol></ol>" )\n  .append( nodeNames.join( "" ) )\n  .appendTo( $log );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    parseHTML(data: string, context_keepScripts?: Document | null | boolean): JQuery.Node[];\n    /**\n     * Takes a well-formed JSON string and returns the resulting JavaScript value.\n     * @param json The JSON string to parse.\n     * @see \\`{@link https://api.jquery.com/jQuery.parseJSON/ }\\`\n     * @since 1.4.1\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link JSON.parse }\\`.\n     *\n     * **Cause**: The `jQuery.parseJSON` method in recent jQuery is identical to the native `JSON.parse`. As of jQuery 3.0 `jQuery.parseJSON` is deprecated.\n     *\n     * **Solution**: Replace any use of `jQuery.parseJSON` with `JSON.parse`.\n     * @example ​ ````Parse a JSON string.\n```javascript\nvar obj = jQuery.parseJSON( \'{ "name": "John" }\' );\nalert( obj.name === "John" );\n```\n     */\n    parseJSON(json: string): any;\n    /**\n     * Parses a string into an XML document.\n     * @param data a well-formed XML string to be parsed\n     * @see \\`{@link https://api.jquery.com/jQuery.parseXML/ }\\`\n     * @since 1.5\n     * @example ​ ````Create a jQuery object using an XML string and obtain the value of the title node.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.parseXML demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p id="someElement"></p>\n<p id="anotherElement"></p>\n​\n<script>\nvar xml = "<rss version=\'2.0\'><channel><title>RSS Title</title></channel></rss>",\n  xmlDoc = $.parseXML( xml ),\n  $xml = $( xmlDoc ),\n  $title = $xml.find( "title" );\n​\n// Append "RSS Title" to #someElement\n$( "#someElement" ).append( $title.text() );\n​\n// Change the title to "XML Title"\n$title.text( "XML Title" );\n​\n// Append "XML Title" to #anotherElement\n$( "#anotherElement" ).append( $title.text() );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    parseXML(data: string): XMLDocument;\n    /**\n     * Load data from the server using a HTTP POST request.\n     * @param url A string containing the URL to which the request is sent.\n     * @param data A plain object or string that is sent to the server with the request.\n     * @param success A callback function that is executed if the request succeeds. Required if dataType is provided, but\n     *                can be null in that case.\n     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).\n     * @see \\`{@link https://api.jquery.com/jQuery.post/ }\\`\n     * @since 1.0\n     * @example ​ ````Post to the test.php page and get content which has been returned in json format (&lt;?php echo json_encode(array(&quot;name&quot;=&gt;&quot;John&quot;,&quot;time&quot;=&gt;&quot;2pm&quot;)); ?&gt;).\n```javascript\n$.post( "test.php", { func: "getNameAndTime" }, function( data ) {\n  console.log( data.name ); // John\n  console.log( data.time ); // 2pm\n}, "json");\n```\n     */\n    post(url: string,\n         data: JQuery.PlainObject | string,\n         success: JQuery.jqXHR.DoneCallback | null,\n         dataType?: string): JQuery.jqXHR;\n    /**\n     * Load data from the server using a HTTP POST request.\n     * @param url A string containing the URL to which the request is sent.\n     * @param success A callback function that is executed if the request succeeds. Required if dataType is provided, but\n     *                can be null in that case.\n     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).\n     * @see \\`{@link https://api.jquery.com/jQuery.post/ }\\`\n     * @since 1.0\n     */\n    post(url: string,\n         success: JQuery.jqXHR.DoneCallback | null,\n         dataType: string): JQuery.jqXHR;\n    /**\n     * Load data from the server using a HTTP POST request.\n     * @param url A string containing the URL to which the request is sent.\n     * @param success_data _&#x40;param_ `success_data`\n     * <br>\n     * * `success` — A callback function that is executed if the request succeeds. Required if `dataType` is provided,\n     *               but can be `null` in that case. <br>\n     * * `data` — A plain object or string that is sent to the server with the request.\n     * @see \\`{@link https://api.jquery.com/jQuery.post/ }\\`\n     * @since 1.0\n     * @example ​ ````Request the test.php page and send some additional data along (while still ignoring the return results).\n```javascript\n$.post( "test.php", { name: "John", time: "2pm" } );\n```\n     * @example ​ ````Pass arrays of data to the server (while still ignoring the return results).\n```javascript\n$.post( "test.php", { \'choices[]\': [ "Jon", "Susan" ] } );\n```\n     * @example ​ ````Send form data using Ajax requests\n```javascript\n$.post( "test.php", $( "#testform" ).serialize() );\n```\n     * @example ​ ````Alert the results from requesting test.php (HTML or XML, depending on what was returned).\n```javascript\n$.post( "test.php", function( data ) {\n  alert( "Data Loaded: " + data );\n});\n```\n     * @example ​ ````Alert the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).\n```javascript\n$.post( "test.php", { name: "John", time: "2pm" })\n  .done(function( data ) {\n    alert( "Data Loaded: " + data );\n  });\n```\n     * @example ​ ````Post a form using Ajax and put results in a div\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.post demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<form action="/" id="searchForm">\n  <input type="text" name="s" placeholder="Search...">\n  <input type="submit" value="Search">\n</form>\n\x3c!-- the result of the search will be rendered inside this div --\x3e\n<div id="result"></div>\n​\n<script>\n// Attach a submit handler to the form\n$( "#searchForm" ).submit(function( event ) {\n​\n  // Stop form from submitting normally\n  event.preventDefault();\n​\n  // Get some values from elements on the page:\n  var $form = $( this ),\n    term = $form.find( "input[name=\'s\']" ).val(),\n    url = $form.attr( "action" );\n​\n  // Send the data using post\n  var posting = $.post( url, { s: term } );\n​\n  // Put the results in a div\n  posting.done(function( data ) {\n    var content = $( data ).find( "#content" );\n    $( "#result" ).empty().append( content );\n  });\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    post(url: string,\n         success_data: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string): JQuery.jqXHR;\n    /**\n     * Load data from the server using a HTTP POST request.\n     * @param url_settings _&#x40;param_ `url_settings`\n     * <br>\n     * * `url` — A string containing the URL to which the request is sent. <br>\n     * * `settings` — A set of key/value pairs that configure the Ajax request. All properties except for `url` are optional.\n     *                A default can be set for any option with \\`{@link ajaxSetup $.ajaxSetup()}\\`. See \\`{@link https://api.jquery.com/jquery.ajax/#jQuery-ajax-settings jQuery.ajax( settings )}\\`\n     *                for a complete list of all settings. Type will automatically be set to `POST`.\n     * @see \\`{@link https://api.jquery.com/jQuery.post/ }\\`\n     * @since 1.0\n     * @since 1.12\n     * @since 2.2\n     * @example ​ ````Request the test.php page, but ignore the return results.\n```javascript\n$.post( "test.php" );\n```\n     */\n    post(url_settings?: string | JQuery.UrlAjaxSettings): JQuery.jqXHR;\n\n    // region proxy\n    // #region proxy\n\n    // region (funсtion, null | undefined)\n    // #region (funсtion, null | undefined)\n\n    // region 0 to 7 additional arguments\n    // #region 0 to 7 additional arguments\n\n    // region 0 parameters\n    // #region 0 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F, G>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G) => TReturn,\n                             context: null | undefined,\n                             a: A, b: B, c: C, d: D, e: E, f: F, g: G): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F) => TReturn,\n                          context: null | undefined,\n                          a: A, b: B, c: C, d: D, e: E, f: F): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E>(funсtion: (a: A, b: B, c: C, d: D, e: E) => TReturn,\n                       context: null | undefined,\n                       a: A, b: B, c: C, d: D, e: E): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D>(funсtion: (a: A, b: B, c: C, d: D) => TReturn,\n                    context: null | undefined,\n                    a: A, b: B, c: C, d: D): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C>(funсtion: (a: A, b: B, c: C) => TReturn,\n                 context: null | undefined,\n                 a: A, b: B, c: C): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B>(funсtion: (a: A, b: B) => TReturn,\n              context: null | undefined,\n              a: A, b: B): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A>(funсtion: (a: A) => TReturn,\n           context: null | undefined,\n           a: A): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn>(funсtion: () => TReturn,\n                   context: null | undefined): () => TReturn;\n\n    // #endregion\n\n    // region 1 parameters\n    // #region 1 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F, G,\n        T>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                      t: T) => TReturn,\n           context: null | undefined,\n           a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F,\n        T>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,\n                      t: T) => TReturn,\n           context: null | undefined,\n           a: A, b: B, c: C, d: D, e: E, f: F): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E,\n        T>(funсtion: (a: A, b: B, c: C, d: D, e: E,\n                      t: T) => TReturn,\n           context: null | undefined,\n           a: A, b: B, c: C, d: D, e: E): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D,\n        T>(funсtion: (a: A, b: B, c: C, d: D,\n                      t: T) => TReturn,\n           context: null | undefined,\n           a: A, b: B, c: C, d: D): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C,\n        T>(funсtion: (a: A, b: B, c: C,\n                      t: T) => TReturn,\n           context: null | undefined,\n           a: A, b: B, c: C): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B,\n        T>(funсtion: (a: A, b: B,\n                      t: T) => TReturn,\n           context: null | undefined,\n           a: A, b: B): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A,\n        T>(funсtion: (a: A,\n                      t: T) => TReturn,\n           context: null | undefined,\n           a: A): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        T>(funсtion: (t: T) => TReturn,\n           context: null | undefined): (t: T) => TReturn;\n\n    // #endregion\n\n    // region 2 parameters\n    // #region 2 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F, G,\n        T, U>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                         t: T, u: U) => TReturn,\n              context: null | undefined,\n              a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F,\n        T, U>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,\n                         t: T, u: U) => TReturn,\n              context: null | undefined,\n              a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E,\n        T, U>(funсtion: (a: A, b: B, c: C, d: D, e: E,\n                         t: T, u: U) => TReturn,\n              context: null | undefined,\n              a: A, b: B, c: C, d: D, e: E): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D,\n        T, U>(funсtion: (a: A, b: B, c: C, d: D,\n                         t: T, u: U) => TReturn,\n              context: null | undefined,\n              a: A, b: B, c: C, d: D): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C,\n        T, U>(funсtion: (a: A, b: B, c: C,\n                         t: T, u: U) => TReturn,\n              context: null | undefined,\n              a: A, b: B, c: C): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B,\n        T, U>(funсtion: (a: A, b: B,\n                         t: T, u: U) => TReturn,\n              context: null | undefined,\n              a: A, b: B): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A,\n        T, U>(funсtion: (a: A,\n                         t: T, u: U) => TReturn,\n              context: null | undefined,\n              a: A): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        T, U>(funсtion: (t: T, u: U) => TReturn,\n              context: null | undefined): (t: T, u: U) => TReturn;\n\n    // #endregion\n\n    // region 3 parameters\n    // #region 3 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F, G,\n        T, U, V>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                            t: T, u: U, v: V) => TReturn,\n                 context: null | undefined,\n                 a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F,\n        T, U, V>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,\n                            t: T, u: U, v: V) => TReturn,\n                 context: null | undefined,\n                 a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E,\n        T, U, V>(funсtion: (a: A, b: B, c: C, d: D, e: E,\n                            t: T, u: U, v: V) => TReturn,\n                 context: null | undefined,\n                 a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D,\n        T, U, V>(funсtion: (a: A, b: B, c: C, d: D,\n                            t: T, u: U, v: V) => TReturn,\n                 context: null | undefined,\n                 a: A, b: B, c: C, d: D): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C,\n        T, U, V>(funсtion: (a: A, b: B, c: C,\n                            t: T, u: U, v: V) => TReturn,\n                 context: null | undefined,\n                 a: A, b: B, c: C): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B,\n        T, U, V>(funсtion: (a: A, b: B,\n                            t: T, u: U, v: V) => TReturn,\n                 context: null | undefined,\n                 a: A, b: B): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A,\n        T, U, V>(funсtion: (a: A,\n                            t: T, u: U, v: V) => TReturn,\n                 context: null | undefined,\n                 a: A): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        T, U, V>(funсtion: (t: T, u: U, v: V) => TReturn,\n                 context: null | undefined): (t: T, u: U, v: V) => TReturn;\n\n    // #endregion\n\n    // region 4 parameters\n    // #region 4 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F, G,\n        T, U, V, W>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: null | undefined,\n                    a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F,\n        T, U, V, W>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: null | undefined,\n                    a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E,\n        T, U, V, W>(funсtion: (a: A, b: B, c: C, d: D, e: E,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: null | undefined,\n                    a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D,\n        T, U, V, W>(funсtion: (a: A, b: B, c: C, d: D,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: null | undefined,\n                    a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C,\n        T, U, V, W>(funсtion: (a: A, b: B, c: C,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: null | undefined,\n                    a: A, b: B, c: C): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B,\n        T, U, V, W>(funсtion: (a: A, b: B,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: null | undefined,\n                    a: A, b: B): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A,\n        T, U, V, W>(funсtion: (a: A,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: null | undefined,\n                    a: A): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        T, U, V, W>(funсtion: (t: T, u: U, v: V, w: W) => TReturn,\n                    context: null | undefined): (t: T, u: U, v: V, w: W) => TReturn;\n\n    // #endregion\n\n    // region 5 parameters\n    // #region 5 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F, G,\n        T, U, V, W, X>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: null | undefined,\n                       a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F,\n        T, U, V, W, X>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: null | undefined,\n                       a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E,\n        T, U, V, W, X>(funсtion: (a: A, b: B, c: C, d: D, e: E,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: null | undefined,\n                       a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D,\n        T, U, V, W, X>(funсtion: (a: A, b: B, c: C, d: D,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: null | undefined,\n                       a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C,\n        T, U, V, W, X>(funсtion: (a: A, b: B, c: C,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: null | undefined,\n                       a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B,\n        T, U, V, W, X>(funсtion: (a: A, b: B,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: null | undefined,\n                       a: A, b: B): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A,\n        T, U, V, W, X>(funсtion: (a: A,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: null | undefined,\n                       a: A): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        T, U, V, W, X>(funсtion: (t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: null | undefined): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n\n    // #endregion\n\n    // region 6 parameters\n    // #region 6 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F, G,\n        T, U, V, W, X, Y>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: null | undefined,\n                          a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F,\n        T, U, V, W, X, Y>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: null | undefined,\n                          a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E,\n        T, U, V, W, X, Y>(funсtion: (a: A, b: B, c: C, d: D, e: E,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: null | undefined,\n                          a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D,\n        T, U, V, W, X, Y>(funсtion: (a: A, b: B, c: C, d: D,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: null | undefined,\n                          a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C,\n        T, U, V, W, X, Y>(funсtion: (a: A, b: B, c: C,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: null | undefined,\n                          a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B,\n        T, U, V, W, X, Y>(funсtion: (a: A, b: B,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: null | undefined,\n                          a: A, b: B): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A,\n        T, U, V, W, X, Y>(funсtion: (a: A,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: null | undefined,\n                          a: A): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        T, U, V, W, X, Y>(funсtion: (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: null | undefined): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n\n    // #endregion\n\n    // region 7+ parameters\n    // #region 7+ parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F, G,\n        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: null | undefined,\n                             a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E, F,\n        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B, c: C, d: D, e: E, f: F,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: null | undefined,\n                             a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D, E,\n        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B, c: C, d: D, e: E,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: null | undefined,\n                             a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C, D,\n        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B, c: C, d: D,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: null | undefined,\n                             a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B, C,\n        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B, c: C,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: null | undefined,\n                             a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A, B,\n        T, U, V, W, X, Y, Z>(funсtion: (a: A, b: B,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: null | undefined,\n                             a: A, b: B): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        A,\n        T, U, V, W, X, Y, Z>(funсtion: (a: A,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: null | undefined,\n                             a: A): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn,\n        T, U, V, W, X, Y, Z>(funсtion: (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: null | undefined): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n\n    // #endregion\n\n    // #endregion\n\n    // region 8+ additional arguments\n    // #region 8+ additional arguments\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param additionalArguments Any number of arguments to be passed to the function referenced in the function argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.9\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     */\n    proxy<TReturn>(funсtion: (...args: any[]) => TReturn,\n                   context: null | undefined,\n                   ...additionalArguments: any[]): (...args: any[]) => TReturn;\n\n    // #endregion\n\n    // #endregion\n\n    // region (funсtion, context)\n    // #region (funсtion, context)\n\n    // region 0 to 7 additional arguments\n    // #region 0 to 7 additional arguments\n\n    // region 0 parameters\n    // #region 0 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F, G>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G) => TReturn,\n                             context: TContext,\n                             a: A, b: B, c: C, d: D, e: E, f: F, g: G): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F) => TReturn,\n                          context: TContext,\n                          a: A, b: B, c: C, d: D, e: E, f: F): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E) => TReturn,\n                       context: TContext,\n                       a: A, b: B, c: C, d: D, e: E): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D>(funсtion: (this: TContext, a: A, b: B, c: C, d: D) => TReturn,\n                    context: TContext,\n                    a: A, b: B, c: C, d: D): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C>(funсtion: (this: TContext, a: A, b: B, c: C) => TReturn,\n                 context: TContext,\n                 a: A, b: B, c: C): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B>(funсtion: (this: TContext, a: A, b: B) => TReturn,\n              context: TContext,\n              a: A, b: B): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4`\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A>(funсtion: (this: TContext, a: A) => TReturn,\n           context: TContext,\n           a: A): () => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn>(funсtion: (this: TContext) => TReturn,\n                 context: TContext): () => TReturn;\n\n    // #endregion\n\n    // region 1 parameters\n    // #region 1 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F, G,\n        T>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                      t: T) => TReturn,\n           context: TContext,\n           a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F,\n        T>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,\n                      t: T) => TReturn,\n           context: TContext,\n           a: A, b: B, c: C, d: D, e: E, f: F): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E,\n        T>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,\n                      t: T) => TReturn,\n           context: TContext,\n           a: A, b: B, c: C, d: D, e: E): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D,\n        T>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,\n                      t: T) => TReturn,\n           context: TContext,\n           a: A, b: B, c: C, d: D): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C,\n        T>(funсtion: (this: TContext, a: A, b: B, c: C,\n                      t: T) => TReturn,\n           context: TContext,\n           a: A, b: B, c: C): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B,\n        T>(funсtion: (this: TContext, a: A, b: B,\n                      t: T) => TReturn,\n           context: TContext,\n           a: A, b: B): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A,\n        T>(funсtion: (this: TContext, a: A,\n                      t: T) => TReturn,\n           context: TContext,\n           a: A): (t: T) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        T>(funсtion: (this: TContext, t: T) => TReturn,\n           context: TContext): (t: T) => TReturn;\n\n    // #endregion\n\n    // region 2 parameters\n    // #region 2 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F, G,\n        T, U>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                         t: T, u: U) => TReturn,\n              context: TContext,\n              a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F,\n        T, U>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,\n                         t: T, u: U) => TReturn,\n              context: TContext,\n              a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E,\n        T, U>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,\n                         t: T, u: U) => TReturn,\n              context: TContext,\n              a: A, b: B, c: C, d: D, e: E): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D,\n        T, U>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,\n                         t: T, u: U) => TReturn,\n              context: TContext,\n              a: A, b: B, c: C, d: D): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C,\n        T, U>(funсtion: (this: TContext, a: A, b: B, c: C,\n                         t: T, u: U) => TReturn,\n              context: TContext,\n              a: A, b: B, c: C): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B,\n        T, U>(funсtion: (this: TContext, a: A, b: B,\n                         t: T, u: U) => TReturn,\n              context: TContext,\n              a: A, b: B): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A,\n        T, U>(funсtion: (this: TContext, a: A,\n                         t: T, u: U) => TReturn,\n              context: TContext,\n              a: A): (t: T, u: U) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        T, U>(funсtion: (this: TContext, t: T, u: U) => TReturn,\n              context: TContext): (t: T, u: U) => TReturn;\n\n    // #endregion\n\n    // region 3 parameters\n    // #region 3 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F, G,\n        T, U, V>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                            t: T, u: U, v: V) => TReturn,\n                 context: TContext,\n                 a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F,\n        T, U, V>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,\n                            t: T, u: U, v: V) => TReturn,\n                 context: TContext,\n                 a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E,\n        T, U, V>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,\n                            t: T, u: U, v: V) => TReturn,\n                 context: TContext,\n                 a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D,\n        T, U, V>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,\n                            t: T, u: U, v: V) => TReturn,\n                 context: TContext,\n                 a: A, b: B, c: C, d: D): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C,\n        T, U, V>(funсtion: (this: TContext, a: A, b: B, c: C,\n                            t: T, u: U, v: V) => TReturn,\n                 context: TContext,\n                 a: A, b: B, c: C): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B,\n        T, U, V>(funсtion: (this: TContext, a: A, b: B,\n                            t: T, u: U, v: V) => TReturn,\n                 context: TContext,\n                 a: A, b: B): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A,\n        T, U, V>(funсtion: (this: TContext, a: A,\n                            t: T, u: U, v: V) => TReturn,\n                 context: TContext,\n                 a: A): (t: T, u: U, v: V) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        T, U, V>(funсtion: (this: TContext, t: T, u: U, v: V) => TReturn,\n                 context: TContext): (t: T, u: U, v: V) => TReturn;\n\n    // #endregion\n\n    // region 4 parameters\n    // #region 4 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F, G,\n        T, U, V, W>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: TContext,\n                    a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F,\n        T, U, V, W>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: TContext,\n                    a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E,\n        T, U, V, W>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: TContext,\n                    a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D,\n        T, U, V, W>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: TContext,\n                    a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C,\n        T, U, V, W>(funсtion: (this: TContext, a: A, b: B, c: C,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: TContext,\n                    a: A, b: B, c: C): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B,\n        T, U, V, W>(funсtion: (this: TContext, a: A, b: B,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: TContext,\n                    a: A, b: B): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A,\n        T, U, V, W>(funсtion: (this: TContext, a: A,\n                               t: T, u: U, v: V, w: W) => TReturn,\n                    context: TContext,\n                    a: A): (t: T, u: U, v: V, w: W) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        T, U, V, W>(funсtion: (this: TContext, t: T, u: U, v: V, w: W) => TReturn,\n                    context: TContext): (t: T, u: U, v: V, w: W) => TReturn;\n\n    // #endregion\n\n    // region 5 parameters\n    // #region 5 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F, G,\n        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: TContext,\n                       a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F,\n        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: TContext,\n                       a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E,\n        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: TContext,\n                       a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D,\n        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: TContext,\n                       a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C,\n        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B, c: C,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: TContext,\n                       a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B,\n        T, U, V, W, X>(funсtion: (this: TContext, a: A, b: B,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: TContext,\n                       a: A, b: B): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A,\n        T, U, V, W, X>(funсtion: (this: TContext, a: A,\n                                  t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: TContext,\n                       a: A): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        T, U, V, W, X>(funсtion: (this: TContext, t: T, u: U, v: V, w: W, x: X) => TReturn,\n                       context: TContext): (t: T, u: U, v: V, w: W, x: X) => TReturn;\n\n    // #endregion\n\n    // region 6 parameters\n    // #region 6 parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F, G,\n        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: TContext,\n                          a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F,\n        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: TContext,\n                          a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E,\n        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: TContext,\n                          a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D,\n        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: TContext,\n                          a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C,\n        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B, c: C,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: TContext,\n                          a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B,\n        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A, b: B,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: TContext,\n                          a: A, b: B): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A,\n        T, U, V, W, X, Y>(funсtion: (this: TContext, a: A,\n                                     t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: TContext,\n                          a: A): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        T, U, V, W, X, Y>(funсtion: (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn,\n                          context: TContext): (t: T, u: U, v: V, w: W, x: X, y: Y) => TReturn;\n\n    // #endregion\n\n    // region 7+ parameters\n    // #region 7+ parameters\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @param g An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F, G,\n        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F, g: G,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: TContext,\n                             a: A, b: B, c: C, d: D, e: E, f: F, g: G): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @param f An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E, F,\n        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E, f: F,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: TContext,\n                             a: A, b: B, c: C, d: D, e: E, f: F): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @param e An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D, E,\n        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B, c: C, d: D, e: E,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: TContext,\n                             a: A, b: B, c: C, d: D, e: E): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @param d An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C, D,\n        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B, c: C, d: D,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: TContext,\n                             a: A, b: B, c: C, d: D): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @param c An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B, C,\n        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B, c: C,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: TContext,\n                             a: A, b: B, c: C): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @param b An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A, B,\n        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A, b: B,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: TContext,\n                             a: A, b: B): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param a An argument to be passed to the function referenced in the `function` argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        A,\n        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, a: A,\n                                        t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: TContext,\n                             a: A): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn,\n        T, U, V, W, X, Y, Z>(funсtion: (this: TContext, t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn,\n                             context: TContext): (t: T, u: U, v: V, w: W, x: X, y: Y, z: Z, ...args: any[]) => TReturn;\n\n    // #endregion\n\n    // #endregion\n\n    // region 8+ additional arguments\n    // #region 8+ additional arguments\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param funсtion The function whose context will be changed.\n     * @param context The object to which the context (`this`) of the function should be set.\n     * @param additionalArguments Any number of arguments to be passed to the function referenced in the function argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Change the context of functions bound to a click handler using the &quot;function, context&quot; signature. Unbind the first handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  type: "zombie",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( "background-color", "red" );\n​\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( "#log" ).append( "Hello " + this.type + "<br>" );\n    $( "#test" ).off( "click", this.test );\n  }\n};\n​\nvar you = {\n  type: "person",\n  test: function( event ) {\n    $( "#log" ).append( this.type + " " );\n  }\n};\n​\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n​\n// attach click handlers to #test\n$( "#test" )\n  // this === "zombie"; handler unbound after first click\n  .on( "click", $.proxy( me.test, me ) )\n​\n  // this === "person"\n  .on( "click", youClick )\n​\n  // this === "zombie"\n  .on( "click", $.proxy( you.test, me ) )\n​\n  // this === "<button> element"\n  .on( "click", you.test );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Change the context of a function bound to the click handler,\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><button type="button" id="test">Test</button></p>\n<div id="log"></div>\n​\n<script>\nvar me = {\n  // I\'m a dog\n  type: "dog",\n​\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( "#log" )\n​\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( "<h3>Hello " + one.type + ":</h3>" )\n​\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( "I am a " + this.type + ", " )\n​\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( "and they are " + two.type + ".<br>" )\n​\n      // The event type is "click"\n      .append( "Thanks for " + event.type + "ing." )\n​\n      // The clicked element is `event.target`,\n      // and its type is "button"\n      .append( "the " + event.target.type + "." );\n  }\n};\n​\nvar you = { type: "cat" };\nvar they = { type: "fish" };\n​\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n​\n$( "#test" )\n  .on( "click", proxy );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext,\n        TReturn>(funсtion: (this: TContext, ...args: any[]) => TReturn,\n                 context: TContext,\n                 ...additionalArguments: any[]): (...args: any[]) => TReturn;\n\n    // #endregion\n\n    // #endregion\n\n    // region (context, name)\n    // #region (context, name)\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     * @param context The object to which the context of the function should be set.\n     * @param name The name of the function whose context will be changed (should be a property of the context object).\n     * @param additionalArguments Any number of arguments to be passed to the function named in the name argument.\n     * @see \\`{@link https://api.jquery.com/jQuery.proxy/ }\\`\n     * @since 1.4\n     * @since 1.6\n     * @deprecated ​ Deprecated since 3.3. Use \\`{@link Function#bind }\\`.\n     * @example ​ ````Enforce the context of the function using the &quot;context, function name&quot; signature. Unbind the handler after first click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.proxy demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n  <p><button id="test">Test</button></p>\n  <p id="log"></p>\n​\n<script>\nvar obj = {\n  name: "John",\n  test: function() {\n    $( "#log" ).append( this.name );\n    $( "#test" ).off( "click", obj.test );\n  }\n};\n$( "#test" ).on( "click", jQuery.proxy( obj, "test" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    proxy<TContext>(context: TContext,\n                    name: keyof TContext,\n                    ...additionalArguments: any[]): (...args: any[]) => any;\n\n    // #endregion\n\n    // #endregion\n\n    /**\n     * Manipulate the queue of functions to be executed on the matched element.\n     * @param element A DOM element where the array of queued functions is attached.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @param newQueue The new function to add to the queue.\n     *                 An array of functions to replace the current queue contents.\n     * @see \\`{@link https://api.jquery.com/jQuery.queue/ }\\`\n     * @since 1.3\n     * @example ​ ````Show the length of the queue.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.queue demo</title>\n  <style>\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="show">Show Length of Queue</button>\n<span></span>\n<div></div>\n  ​\n<script>\n$( "#show" ).click(function() {\n  var n = jQuery.queue( $( "div" )[ 0 ], "fx" );\n  $( "span" ).text( "Queue length is: " + n.length );\n});\n​\nfunction runIt() {\n  $( "div" )\n    .show( "slow" )\n    .animate({\n      left: "+=200"\n    }, 2000 )\n    .slideToggle( 1000 )\n    .slideToggle( "fast" )\n    .animate({\n      left: "-=200"\n    }, 1500 )\n    .hide( "slow" )\n    .show( 1200 )\n    .slideUp( "normal", runIt );\n}\n​\nrunIt();\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Queue a custom function.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.queue demo</title>\n  <style>\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nClick here...\n<div></div>\n​\n<script>\n$( document.body ).click(function() {\n  var divs = $( "div" )\n    .show( "slow" )\n    .animate({ left: "+=200" }, 2000 );\n  jQuery.queue( divs[ 0 ], "fx", function() {\n    $( this ).addClass( "newcolor" );\n    jQuery.dequeue( this );\n  });\n  divs.animate({ left: "-=200" }, 500 );\n  jQuery.queue( divs[ 0 ], "fx", function() {\n    $( this ).removeClass( "newcolor" );\n    jQuery.dequeue( this );\n  });\n  divs.slideUp();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Set a queue array to delete the queue.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.queue demo</title>\n  <style>\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button id="start">Start</button>\n<button id="stop">Stop</button>\n<div></div>\n​\n<script>\n$( "#start" ).click(function() {\n  var divs = $( "div" )\n    .show( "slow" )\n    .animate({ left: "+=200" }, 5000 );\n  jQuery.queue( divs[ 0 ], "fx", function() {\n    $( this ).addClass( "newcolor" );\n    jQuery.dequeue( this );\n  });\n  divs.animate({ left: "-=200" }, 1500 );\n  jQuery.queue( divs[ 0 ], "fx", function() {\n    $( this ).removeClass( "newcolor" );\n    jQuery.dequeue( this );\n  });\n  divs.slideUp();\n});\n$( "#stop" ).click(function() {\n  jQuery.queue( $( "div" )[ 0 ], "fx", [] );\n  $( "div" ).stop();\n});\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    queue<T extends Element>(element: T, queueName?: string, newQueue?: JQuery.TypeOrArray<JQuery.QueueFunction<T>>): JQuery.Queue<T>;\n    /**\n     * Handles errors thrown synchronously in functions wrapped in jQuery().\n     * @param error An error thrown in the function wrapped in jQuery().\n     * @see \\`{@link https://api.jquery.com/jQuery.readyException/ }\\`\n     * @since 3.1\n     * @example ​ ````Pass the received error to console.error.\n```javascript\njQuery.readyException = function( error ) {\n  console.error( error );\n};\n```\n     */\n    readyException(error: Error): any;\n    /**\n     * Remove a previously-stored piece of data.\n     * @param element A DOM element from which to remove data.\n     * @param name A string naming the piece of data to remove.\n     * @see \\`{@link https://api.jquery.com/jQuery.removeData/ }\\`\n     * @since 1.2.3\n     * @example ​ ````Set a data store for 2 names then remove one of them.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.removeData demo</title>\n  <style>\n  div {\n    margin: 2px;\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>value1 before creation: <span></span></div>\n<div>value1 after creation: <span></span></div>\n<div>value1 after removal: <span></span></div>\n<div>value2 after removal: <span></span></div>\n​\n<script>\nvar div = $( "div" )[ 0 ];\n$( "span:eq(0)" ).text( "" + $( "div" ).data( "test1" ) );\njQuery.data( div, "test1", "VALUE-1" );\njQuery.data( div, "test2", "VALUE-2" );\n$( "span:eq(1)" ).text( "" + jQuery.data( div, "test1" ) );\njQuery.removeData( div, "test1" );\n$( "span:eq(2)" ).text( "" + jQuery.data( div, "test1" ) );\n$( "span:eq(3)" ).text( "" + jQuery.data( div, "test2" ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    removeData(element: Element | Document | Window | JQuery.PlainObject, name?: string): void;\n    /**\n     * Creates an object containing a set of properties ready to be used in the definition of custom animations.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/jQuery.speed/ }\\`\n     * @since 1.1\n     */\n    speed<TElement extends Element = HTMLElement>(duration: JQuery.Duration, easing: string, complete: (this: TElement) => void): JQuery.EffectsOptions<TElement>;\n    /**\n     * Creates an object containing a set of properties ready to be used in the definition of custom animations.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing_complete _&#x40;param_ `easing_complete`\n     * <br>\n     * * `easing` — A string indicating which easing function to use for the transition. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element.\n     * @see \\`{@link https://api.jquery.com/jQuery.speed/ }\\`\n     * @since 1.0\n     * @since 1.1\n     */\n    speed<TElement extends Element = HTMLElement>(duration: JQuery.Duration,\n                                                  easing_complete: string | ((this: TElement) => void)): JQuery.EffectsOptions<TElement>;\n    /**\n     * Creates an object containing a set of properties ready to be used in the definition of custom animations.\n     * @param duration_complete_settings _&#x40;param_ `duration_complete_settings`\n     * <br>\n     * * `duration` — A string or number determining how long the animation will run. <br>\n     * * `complete` — A function to call once the animation is complete, called once per matched element. <br>\n     * * `settings` —\n     * @see \\`{@link https://api.jquery.com/jQuery.speed/ }\\`\n     * @since 1.0\n     * @since 1.1\n     */\n    speed<TElement extends Element = HTMLElement>(duration_complete_settings?: JQuery.Duration | ((this: TElement) => void) | JQuery.SpeedSettings<TElement>): JQuery.EffectsOptions<TElement>;\n    /**\n     * Remove the whitespace from the beginning and end of a string.\n     * @param str The string to trim.\n     * @see \\`{@link https://api.jquery.com/jQuery.trim/ }\\`\n     * @since 1.0\n     * @example ​ ````Remove the white spaces at the start and at the end of the string.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.trim demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<pre id="original"></pre>\n<pre id="trimmed"></pre>\n​\n<script>\nvar str = "         lots of spaces before and after         ";\n$( "#original" ).html( "Original String: \'" + str + "\'" );\n$( "#trimmed" ).html( "$.trim()\'ed: \'" + $.trim(str) + "\'" );\n<\/script>\n​\n</body>\n</html>\n```\n     * @example ​ ````Remove the white spaces at the start and at the end of the string.\n```javascript\n$.trim("    hello, how are you?    ");\n```\n     * @example ​ ````Remove the white spaces at the start and at the end of the string.\n```javascript\n$.trim("    hello, how are you?    ");\n```\n     */\n    trim(str: string): string;\n    /**\n     * Determine the internal JavaScript [[Class]] of an object.\n     * @param obj Object to get the internal JavaScript [[Class]] of.\n     * @see \\`{@link https://api.jquery.com/jQuery.type/ }\\`\n     * @since 1.4.3\n     * @deprecated ​ Deprecated since 3.3. See \\`{@link https://github.com/jquery/jquery/issues/3605 }\\`.\n     * @example ​ ````Find out if the parameter is a RegExp.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.type demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\nIs it a RegExp? <b></b>\n​\n<script>\n$( "b" ).append( "" + jQuery.type( /test/ ) );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    type(obj: any): \'array\' | \'boolean\' | \'date\' | \'error\' | \'function\' | \'null\' | \'number\' | \'object\' | \'regexp\' | \'string\' | \'symbol\' | \'undefined\';\n    /**\n     * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.\n     * @param array The Array of DOM elements.\n     * @see \\`{@link https://api.jquery.com/jQuery.unique/ }\\`\n     * @since 1.1.3\n     * @deprecated ​ Deprecated since 3.0. Use \\`{@link uniqueSort }\\`.\n     *\n     * **Cause**: The fact that `jQuery.unique` sorted its results in DOM order was surprising to many who did not read the documentation carefully. As of jQuery 3.0 this function is being renamed to make it clear.\n     *\n     * **Solution**: Replace all uses of `jQuery.unique` with `jQuery.uniqueSort` which is the same function with a better name.\n     * @example ​ ````Removes any duplicate elements from the array of divs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.unique demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>There are 6 divs in this document.</div>\n<div></div>\n<div class="dup"></div>\n<div class="dup"></div>\n<div class="dup"></div>\n<div></div>\n​\n<script>\n// unique() must take a native array\nvar divs = $( "div" ).get();\n​\n// Add 3 elements of class dup too (they are divs)\ndivs = divs.concat( $( ".dup" ).get() );\n$( "div:eq(1)" ).text( "Pre-unique there are " + divs.length + " elements." );\n​\ndivs = jQuery.unique( divs );\n$( "div:eq(2)" ).text( "Post-unique there are " + divs.length + " elements." )\n  .css( "color", "red" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    unique<T extends Element>(array: T[]): T[];\n    /**\n     * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.\n     * @param array The Array of DOM elements.\n     * @see \\`{@link https://api.jquery.com/jQuery.uniqueSort/ }\\`\n     * @since 1.12\n     * @since 2.2\n     * @example ​ ````Removes any duplicate elements from the array of divs.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.uniqueSort demo</title>\n  <style>\n  div {\n    color: blue;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>There are 6 divs in this document.</div>\n<div></div>\n<div class="dup"></div>\n<div class="dup"></div>\n<div class="dup"></div>\n<div></div>\n​\n<script>\n// unique() must take a native array\nvar divs = $( "div" ).get();\n​\n// Add 3 elements of class dup too (they are divs)\ndivs = divs.concat( $( ".dup" ).get() );\n$( "div:eq(1)" ).text( "Pre-unique there are " + divs.length + " elements." );\n​\ndivs = jQuery.uniqueSort( divs );\n$( "div:eq(2)" ).text( "Post-unique there are " + divs.length + " elements." )\n  .css( "color", "red" );\n<\/script>\n​\n</body>\n</html>\n```\n     */\n    uniqueSort<T extends Element>(array: T[]): T[];\n    /**\n     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.\n     * @see \\`{@link https://api.jquery.com/jQuery.when/ }\\`\n     * @since 1.5\n     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) ).done(function( a1, a2 ) {\n  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.\n  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]\n  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = "Whip", a2[ 0 ] = " It"\n  if ( /Whip It/.test( data ) ) {\n    alert( "We got what we came for!" );\n  }\n});\n```\n     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) )\n  .then( myFunc, myFailure );\n```\n     */\n    when<TR1, UR1, VR1,\n        TJ1 = any, UJ1 = any, VJ1 = any>(\n            deferredT: JQuery.Promise<TR1, TJ1> | JQuery.Thenable<TR1> | TR1,\n            deferredU: JQuery.Promise<UR1, UJ1> | JQuery.Thenable<UR1> | UR1,\n            deferredV: JQuery.Promise<VR1, VJ1> | JQuery.Thenable<VR1> | VR1,\n    ): JQuery.Promise3<\n        TR1, TJ1, never,\n        UR1, UJ1, never,\n        VR1, VJ1, never>;\n    /**\n     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.\n     * @see \\`{@link https://api.jquery.com/jQuery.when/ }\\`\n     * @since 1.5\n     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) ).done(function( a1, a2 ) {\n  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.\n  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]\n  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = "Whip", a2[ 0 ] = " It"\n  if ( /Whip It/.test( data ) ) {\n    alert( "We got what we came for!" );\n  }\n});\n```\n     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) )\n  .then( myFunc, myFailure );\n```\n     */\n    when<TR1, UR1,\n        TJ1 = any, UJ1 = any>(\n            deferredT: JQuery.Promise<TR1, TJ1> | JQuery.Thenable<TR1> | TR1,\n            deferredU: JQuery.Promise<UR1, UJ1> | JQuery.Thenable<UR1> | UR1,\n    ): JQuery.Promise2<\n        TR1, TJ1, never,\n        UR1, UJ1, never>;\n    /**\n     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.\n     * @see \\`{@link https://api.jquery.com/jQuery.when/ }\\`\n     * @since 1.5\n     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) ).done(function( a1, a2 ) {\n  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.\n  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]\n  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = "Whip", a2[ 0 ] = " It"\n  if ( /Whip It/.test( data ) ) {\n    alert( "We got what we came for!" );\n  }\n});\n```\n     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) )\n  .then( myFunc, myFailure );\n```\n     */\n    when<TR1, TJ1,\n        TR2, TJ2,\n        TR3 = never, TJ3 = never>(\n            deferredT: JQuery.Promise3<TR1, TJ1, any, TR2, TJ2, any, TR3, TJ3, any> |\n                       JQuery.Promise2<TR1, TJ1, any, TR2, TJ2, any>\n    ): JQuery.Promise3<\n        TR1, TJ1, never,\n        TR2, TJ2, never,\n        TR3, TJ3, never>;\n    /**\n     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.\n     * @see \\`{@link https://api.jquery.com/jQuery.when/ }\\`\n     * @since 1.5\n     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) ).done(function( a1, a2 ) {\n  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.\n  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]\n  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = "Whip", a2[ 0 ] = " It"\n  if ( /Whip It/.test( data ) ) {\n    alert( "We got what we came for!" );\n  }\n});\n```\n     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) )\n  .then( myFunc, myFailure );\n```\n     */\n    when<TR1, TJ1 = any>(deferred: JQuery.Promise<TR1, TJ1> | JQuery.Thenable<TR1> | TR1): JQuery.Promise<TR1, TJ1, never>;\n    /**\n     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.\n     * @param deferreds Zero or more Thenable objects.\n     * @see \\`{@link https://api.jquery.com/jQuery.when/ }\\`\n     * @since 1.5\n     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) ).done(function( a1, a2 ) {\n  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.\n  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]\n  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = "Whip", a2[ 0 ] = " It"\n  if ( /Whip It/.test( data ) ) {\n    alert( "We got what we came for!" );\n  }\n});\n```\n     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) )\n  .then( myFunc, myFailure );\n```\n     */\n    when<TR1 = never, TJ1 = never>(...deferreds: Array<JQuery.Promise<TR1, TJ1> | JQuery.Thenable<TR1> | TR1>): JQuery.Promise<TR1, TJ1, never>;\n    /**\n     * Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.\n     * @param deferreds Zero or more Thenable objects.\n     * @see \\`{@link https://api.jquery.com/jQuery.when/ }\\`\n     * @since 1.5\n     * @example ​ ````Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) ).done(function( a1, a2 ) {\n  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.\n  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]\n  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = "Whip", a2[ 0 ] = " It"\n  if ( /Whip It/.test( data ) ) {\n    alert( "We got what we came for!" );\n  }\n});\n```\n     * @example ​ ````Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.\n```javascript\n$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) )\n  .then( myFunc, myFailure );\n```\n     */\n    when(...deferreds: any[]): JQuery.Promise<any, any, never>;\n}\n']},21353:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["jquery\\index.d.ts",'// Type definitions for jquery 3.5\n// Project: https://jquery.com\n// Definitions by: Leonard Thieu <https://github.com/leonard-thieu>\n//                 Boris Yankov <https://github.com/borisyankov>\n//                 Christian Hoffmeister <https://github.com/choffmeister>\n//                 Steve Fenton <https://github.com/Steve-Fenton>\n//                 Diullei Gomes <https://github.com/Diullei>\n//                 Tass Iliopoulos <https://github.com/tasoili>\n//                 Jason Swearingen <https://github.com/jasons-novaleaf>\n//                 Sean Hill <https://github.com/seanski>\n//                 Guus Goossens <https://github.com/Guuz>\n//                 Kelly Summerlin <https://github.com/ksummerlin>\n//                 Basarat Ali Syed <https://github.com/basarat>\n//                 Nicholas Wolverson <https://github.com/nwolverson>\n//                 Derek Cicerone <https://github.com/derekcicerone>\n//                 Andrew Gaspar <https://github.com/AndrewGaspar>\n//                 Seikichi Kondo <https://github.com/seikichi>\n//                 Benjamin Jackman <https://github.com/benjaminjackman>\n//                 Poul Sorensen <https://github.com/s093294>\n//                 Josh Strobl <https://github.com/JoshStrobl>\n//                 John Reilly <https://github.com/johnnyreilly>\n//                 Dick van den Brink <https://github.com/DickvdBrink>\n//                 Thomas Schulz <https://github.com/King2500>\n//                 Terry Mun <https://github.com/terrymun>\n//                 Martin Badin <https://github.com/martin-badin>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.7\n\n/// <reference types="sizzle" />\n/// <reference path="JQueryStatic.d.ts" />\n/// <reference path="JQuery.d.ts" />\n/// <reference path="misc.d.ts" />\n/// <reference path="legacy.d.ts" />\n\nexport = jQuery;\n']},72343:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["jquery\\legacy.d.ts","// tslint:disable:no-irregular-whitespace\n\n// tslint:disable-next-line:no-empty-interface\ninterface JQueryCallback extends JQuery.Callbacks { }\ninterface JQueryDeferred<T> extends JQuery.Deferred<T> { }\n// tslint:disable-next-line:no-empty-interface\ninterface JQueryEventConstructor extends JQuery.EventStatic { }\ninterface JQueryDeferred<T> extends JQuery.Deferred<T> { }\n// tslint:disable-next-line:no-empty-interface\ninterface JQueryAjaxSettings extends JQuery.AjaxSettings { }\ninterface JQueryAnimationOptions extends JQuery.EffectsOptions<Element> { }\n// tslint:disable-next-line:no-empty-interface\ninterface JQueryCoordinates extends JQuery.Coordinates { }\ninterface JQueryGenericPromise<T> extends JQuery.Thenable<T> { }\n// tslint:disable-next-line:no-empty-interface\ninterface JQueryXHR extends JQuery.jqXHR { }\ninterface JQueryPromise<T> extends JQuery.Promise<T> { }\n// tslint:disable-next-line:no-empty-interface\ninterface JQuerySerializeArrayElement extends JQuery.NameValuePair { }\n\n/**\n * @deprecated ​ Deprecated since 1.9. See \\`{@link https://api.jquery.com/jQuery.support/ }\\`.\n */\n// tslint:disable-next-line:no-empty-interface\ninterface JQuerySupport extends JQuery.PlainObject { }\n\n// Legacy types that are not represented in the current type definitions are marked deprecated.\n\n/**\n * @deprecated ​ Deprecated. Use \\`{@link JQuery.Deferred.Callback }\\` or \\`{@link JQuery.Deferred.CallbackBase }\\`.\n */\ninterface JQueryPromiseCallback<T> {\n    (value?: T, ...args: any[]): void;\n}\n/**\n * @deprecated ​ Deprecated. Use \\`{@link JQueryStatic.param JQueryStatic&#91;'param'&#93;}\\`.\n */\ninterface JQueryParam {\n    /**\n     * Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.\n     * @param obj An array or object to serialize.\n     * @param traditional A Boolean indicating whether to perform a traditional \"shallow\" serialization.\n     */\n    (obj: any, traditional?: boolean): string;\n}\n/**\n * @deprecated ​ Deprecated. Use \\`{@link JQuery.Event }\\`.\n */\ninterface BaseJQueryEventObject extends Event {\n    /**\n     * The current DOM element within the event bubbling phase.\n     * @see \\`{@link https://api.jquery.com/event.currentTarget/ }\\`\n     */\n    currentTarget: Element;\n    /**\n     * An optional object of data passed to an event method when the current executing handler is bound.\n     * @see \\`{@link https://api.jquery.com/event.data/ }\\`\n     */\n    data: any;\n    /**\n     * The element where the currently-called jQuery event handler was attached.\n     * @see \\`{@link https://api.jquery.com/event.delegateTarget/ }\\`\n     */\n    delegateTarget: Element;\n    /**\n     * Returns whether event.preventDefault() was ever called on this event object.\n     * @see \\`{@link https://api.jquery.com/event.isDefaultPrevented/ }\\`\n     */\n    isDefaultPrevented(): boolean;\n    /**\n     * Returns whether event.stopImmediatePropagation() was ever called on this event object.\n     * @see \\`{@link https://api.jquery.com/event.isImmediatePropagationStopped/ }\\`\n     */\n    isImmediatePropagationStopped(): boolean;\n    /**\n     * Returns whether event.stopPropagation() was ever called on this event object.\n     * @see \\`{@link https://api.jquery.com/event.isPropagationStopped/ }\\`\n     */\n    isPropagationStopped(): boolean;\n    /**\n     * The namespace specified when the event was triggered.\n     * @see \\`{@link https://api.jquery.com/event.namespace/ }\\`\n     */\n    namespace: string;\n    /**\n     * The browser's original Event object.\n     * @see \\`{@link https://api.jquery.com/category/events/event-object/ }\\`\n     */\n    originalEvent: Event;\n    /**\n     * If this method is called, the default action of the event will not be triggered.\n     * @see \\`{@link https://api.jquery.com/event.preventDefault/ }\\`\n     */\n    preventDefault(): any;\n    /**\n     * The other DOM element involved in the event, if any.\n     * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n     */\n    relatedTarget: Element;\n    /**\n     * The last value returned by an event handler that was triggered by this event, unless the value was undefined.\n     * @see \\`{@link https://api.jquery.com/event.result/ }\\`\n     */\n    result: any;\n    /**\n     * Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.\n     * @see \\`{@link https://api.jquery.com/event.stopImmediatePropagation/ }\\`\n     */\n    stopImmediatePropagation(): void;\n    /**\n     * Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.\n     * @see \\`{@link https://api.jquery.com/event.stopPropagation/ }\\`\n     */\n    stopPropagation(): void;\n    /**\n     * The DOM element that initiated the event.\n     * @see \\`{@link https://api.jquery.com/event.target/ }\\`\n     */\n    target: Element;\n    /**\n     * The mouse position relative to the left edge of the document.\n     * @see \\`{@link https://api.jquery.com/event.pageX/ }\\`\n     */\n    pageX: number;\n    /**\n     * The mouse position relative to the top edge of the document.\n     * @see \\`{@link https://api.jquery.com/event.pageY/ }\\`\n     */\n    pageY: number;\n    /**\n     * For key or mouse events, this property indicates the specific key or button that was pressed.\n     * @see \\`{@link https://api.jquery.com/event.which/ }\\`\n     */\n    which: number;\n    /**\n     * Indicates whether the META key was pressed when the event fired.\n     * @see \\`{@link https://api.jquery.com/event.metaKey/ }\\`\n     */\n    metaKey: boolean;\n}\n/**\n * @deprecated ​ Deprecated. Use \\`{@link JQuery.Event }\\`.\n */\ninterface JQueryInputEventObject extends BaseJQueryEventObject {\n    altKey: boolean;\n    ctrlKey: boolean;\n    metaKey: boolean;\n    shiftKey: boolean;\n}\n/**\n * @deprecated ​ Deprecated. Use \\`{@link JQuery.Event }\\`.\n */\ninterface JQueryMouseEventObject extends JQueryInputEventObject {\n    button: number;\n    clientX: number;\n    clientY: number;\n    offsetX: number;\n    offsetY: number;\n    pageX: number;\n    pageY: number;\n    screenX: number;\n    screenY: number;\n}\n/**\n * @deprecated ​ Deprecated. Use \\`{@link JQuery.Event }\\`.\n */\ninterface JQueryKeyEventObject extends JQueryInputEventObject {\n    /** @deprecated */\n    char: string;\n    /** @deprecated */\n    charCode: number;\n    key: string;\n    /** @deprecated */\n    keyCode: number;\n}\n/**\n * @deprecated ​ Deprecated. Use \\`{@link JQuery.Event }\\`.\n */\ninterface JQueryEventObject extends BaseJQueryEventObject, JQueryInputEventObject, JQueryMouseEventObject, JQueryKeyEventObject { }\n/**\n * @deprecated ​ Deprecated.\n */\ninterface JQueryPromiseOperator<T, U> {\n    (callback1: JQuery.TypeOrArray<JQueryPromiseCallback<T>>,\n     ...callbacksN: Array<JQuery.TypeOrArray<JQueryPromiseCallback<any>>>): JQueryPromise<U>;\n}\n/**\n * @deprecated ​ Deprecated. Internal. See \\`{@link https://github.com/jquery/api.jquery.com/issues/912 }\\`.\n */\ninterface JQueryEasingFunction {\n    (percent: number): number;\n}\n/**\n * @deprecated ​ Deprecated. Internal. See \\`{@link https://github.com/jquery/api.jquery.com/issues/912 }\\`.\n */\ninterface JQueryEasingFunctions {\n    [name: string]: JQueryEasingFunction;\n    linear: JQueryEasingFunction;\n    swing: JQueryEasingFunction;\n}\n"]},57453:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["jquery\\misc.d.ts",'// tslint:disable:jsdoc-format\n// tslint:disable:max-line-length\n// tslint:disable:no-irregular-whitespace\n\ndeclare namespace JQuery {\n    type TypeOrArray<T> = T | T[];\n    type Node = Element | Text | Comment | Document | DocumentFragment;\n\n    /**\n     * A string is designated htmlString in jQuery documentation when it is used to represent one or more DOM elements, typically to be created and inserted in the document. When passed as an argument of the jQuery() function, the string is identified as HTML if it starts with <tag ... >) and is parsed as such until the final > character. Prior to jQuery 1.9, a string was considered to be HTML if it contained <tag ... > anywhere within the string.\n     */\n    type htmlString = string;\n    /**\n     * A selector is used in jQuery to select DOM elements from a DOM document. That document is, in most cases, the DOM document present in all browsers, but can also be an XML document received via Ajax.\n     */\n    type Selector = string;\n\n    /**\n     * The PlainObject type is a JavaScript object containing zero or more key-value pairs. The plain object is, in other words, an Object object. It is designated "plain" in jQuery documentation to distinguish it from other kinds of JavaScript objects: for example, null, user-defined arrays, and host objects such as document, all of which have a typeof value of "object."\n     *\n     * **Note**: The type declaration of PlainObject is imprecise. It includes host objects and user-defined arrays which do not match jQuery\'s definition.\n     */\n    interface PlainObject<T = any> {\n        [key: string]: T;\n    }\n\n    interface Selectors extends Sizzle.Selectors {\n        /**\n         * @deprecated ​ Deprecated since 3.0. Use \\`{@link Selectors#pseudos }\\`.\n         *\n         * **Cause**: The standard way to add new custom selectors through jQuery is `jQuery.expr.pseudos`. These two other aliases are deprecated, although they still work as of jQuery 3.0.\n         *\n         * **Solution**: Rename any of the older usage to `jQuery.expr.pseudos`. The functionality is identical.\n         */\n        \':\': Sizzle.Selectors.PseudoFunctions;\n        /**\n         * @deprecated ​ Deprecated since 3.0. Use \\`{@link Selectors#pseudos }\\`.\n         *\n         * **Cause**: The standard way to add new custom selectors through jQuery is `jQuery.expr.pseudos`. These two other aliases are deprecated, although they still work as of jQuery 3.0.\n         *\n         * **Solution**: Rename any of the older usage to `jQuery.expr.pseudos`. The functionality is identical.\n         */\n        filter: Sizzle.Selectors.FilterFunctions;\n    }\n\n    // region Ajax\n    // #region Ajax\n\n    interface AjaxSettings<TContext = any> extends Ajax.AjaxSettingsBase<TContext> {\n        /**\n         * A string containing the URL to which the request is sent.\n         */\n        url?: string | undefined;\n    }\n\n    interface UrlAjaxSettings<TContext = any> extends Ajax.AjaxSettingsBase<TContext> {\n        /**\n         * A string containing the URL to which the request is sent.\n         */\n        url: string;\n    }\n\n    namespace Ajax {\n        type SuccessTextStatus = \'success\' | \'notmodified\' | \'nocontent\';\n        type ErrorTextStatus = \'timeout\' | \'error\' | \'abort\' | \'parsererror\';\n        type TextStatus = SuccessTextStatus | ErrorTextStatus;\n\n        type SuccessCallback<TContext> = (this: TContext, data: any, textStatus: SuccessTextStatus, jqXHR: jqXHR) => void;\n\n        type ErrorCallback<TContext> = (this: TContext, jqXHR: jqXHR, textStatus: ErrorTextStatus, errorThrown: string) => void;\n\n        type CompleteCallback<TContext> = (this: TContext, jqXHR: jqXHR, textStatus: TextStatus) => void;\n\n        /**\n         * @see \\`{@link https://api.jquery.com/jquery.ajax/#jQuery-ajax-settings }\\`\n         */\n        interface AjaxSettingsBase<TContext> {\n            /**\n             * A set of key/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return.\n             */\n            accepts?: PlainObject<string> | undefined;\n            /**\n             * By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: "jsonp" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success/error/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done().\n             */\n            async?: boolean | undefined;\n            /**\n             * A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request.\n             */\n            beforeSend?(this: TContext, jqXHR: jqXHR, settings: this): false | void;\n            /**\n             * If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending "_={timestamp}" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET.\n             */\n            cache?: boolean | undefined;\n            /**\n             * A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request ("success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.\n             */\n            complete?: TypeOrArray<CompleteCallback<TContext>> | undefined;\n            /**\n             * An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type.\n             */\n            contents?: PlainObject<RegExp> | undefined;\n            /**\n             * When sending data to the server, use this content type. Default is "application/x-www-form-urlencoded; charset=UTF-8", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or text/plain will trigger the browser to send a preflight OPTIONS request to the server.\n             */\n            contentType?: string | false | undefined;\n            /**\n             * This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax).\n             */\n            context?: TContext | undefined;\n            /**\n             * An object containing dataType-to-dataType converters. Each converter\'s value is a function that returns the transformed value of the response.\n             */\n            converters?: PlainObject<((value: any) => any) | true> | undefined;\n            /**\n             * If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain.\n             */\n            crossDomain?: boolean | undefined;\n            /**\n             * Data to be sent to the server. It is converted to a query string, if not already a string. It\'s appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below).\n             */\n            data?: PlainObject | string | undefined;\n            /**\n             * A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the \'dataType\' parameter.\n             */\n            dataFilter?(data: string, type: string): any;\n            /**\n             * The type of data that you\'re expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:\n             *\n             * "xml": Returns a XML document that can be processed via jQuery.\n             *\n             * "html": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.\n             *\n             * "script": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests.\n             *\n             * "json": Evaluates the response as JSON and returns a JavaScript object. Cross-domain "json" requests are converted to "jsonp" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.)\n             *\n             * "jsonp": Loads in a JSON block using JSONP. Adds an extra "?callback=?" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to the URL unless the cache option is set to true.\n             *\n             * "text": A plain text string.\n             *\n             * multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use "text xml" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: "jsonp text xml". Similarly, a shorthand string such as "jsonp xml" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml.\n             */\n            dataType?: \'xml\' | \'html\' | \'script\' | \'json\' | \'jsonp\' | \'text\' | string | undefined;\n            /**\n             * The MIME type of content that is used to submit the form to the server. Possible values are:\n             *\n             * "application/x-www-form-urlencoded": The initial default type.\n             *\n             * "multipart/form-data": The type that allows file <input> element(s) to upload file data.\n             *\n             * "text/plain": A type introduced in HTML5.\n             */\n            enctype?: \'application/x-www-form-urlencoded\' | \'multipart/form-data\' | \'text/plain\' | undefined;\n            /**\n             * A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are "timeout", "error", "abort", and "parsererror". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error." As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event.\n             */\n            error?: TypeOrArray<ErrorCallback<TContext>> | undefined;\n            /**\n             * Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events.\n             */\n            global?: boolean | undefined;\n            /**\n             * An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function.\n             */\n            headers?: PlainObject<string | null | undefined> | undefined;\n            /**\n             * Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the \'etag\' specified by the server to catch unmodified data.\n             */\n            ifModified?: boolean | undefined;\n            /**\n             * Allow the current environment to be recognized as "local," (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method.\n             */\n            isLocal?: boolean | undefined;\n            /**\n             * Override the callback function name in a JSONP request. This value will be used instead of \'callback\' in the \'callback=?\' part of the query string in the url. So {jsonp:\'onJSONPLoad\'} would result in \'onJSONPLoad=?\' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: "callbackName" }. If you don\'t trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons.\n             */\n            jsonp?: string | false | undefined;\n            /**\n             * Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it\'ll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function.\n             */\n            jsonpCallback?: string | ((this: TContext) => string) | undefined;\n            /**\n             * The HTTP method to use for the request (e.g. "POST", "GET", "PUT").\n             */\n            method?: string | undefined;\n            /**\n             * A mime type to override the XHR mime type.\n             */\n            mimeType?: string | undefined;\n            /**\n             * A password to be used with XMLHttpRequest in response to an HTTP access authentication request.\n             */\n            password?: string | undefined;\n            /**\n             * By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data, set this option to false.\n             */\n            processData?: boolean | undefined;\n            /**\n             * Only applies when the "script" transport is used (e.g., cross-domain requests with "jsonp" or "script" dataType and "GET" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script.\n             */\n            scriptCharset?: string | undefined;\n            /**\n             * An object of numeric HTTP codes and functions to be called when the response has the corresponding code.\n             *\n             * If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback.\n             */\n            statusCode?: StatusCodeCallbacks<TContext> | undefined;\n            /**\n             * A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.\n             */\n            success?: TypeOrArray<SuccessCallback<TContext>> | undefined;\n            /**\n             * Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.\n             */\n            timeout?: number | undefined;\n            /**\n             * Set this to true if you wish to use the traditional style of param serialization.\n             */\n            traditional?: boolean | undefined;\n            /**\n             * An alias for method. You should use type if you\'re using versions of jQuery prior to 1.9.0.\n             */\n            type?: string | undefined;\n            /**\n             * A username to be used with XMLHttpRequest in response to an HTTP access authentication request.\n             */\n            username?: string | undefined;\n            // ActiveXObject requires "lib": ["scripthost"] which consumers would also require\n            /**\n             * Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.\n             */\n            xhr?(): XMLHttpRequest;\n            /**\n             * An object of fieldName-fieldValue pairs to set on the native XHR object.\n             *\n             * In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.\n             */\n            xhrFields?: XHRFields | undefined;\n        }\n\n        // region StatusCodeCallbacks\n        // #region StatusCodeCallbacks\n\n        type StatusCodeCallbacks<TContext> = {\n            // region Success Status Codes\n            // #region Success Status Codes\n\n            // jQuery treats 2xx and 304 status codes as a success\n\n            200?: SuccessCallback<TContext> | undefined;\n            201?: SuccessCallback<TContext> | undefined;\n            202?: SuccessCallback<TContext> | undefined;\n            203?: SuccessCallback<TContext> | undefined;\n            204?: SuccessCallback<TContext> | undefined;\n            205?: SuccessCallback<TContext> | undefined;\n            206?: SuccessCallback<TContext> | undefined;\n            207?: SuccessCallback<TContext> | undefined;\n            208?: SuccessCallback<TContext> | undefined;\n            209?: SuccessCallback<TContext> | undefined;\n            210?: SuccessCallback<TContext> | undefined;\n            211?: SuccessCallback<TContext> | undefined;\n            212?: SuccessCallback<TContext> | undefined;\n            213?: SuccessCallback<TContext> | undefined;\n            214?: SuccessCallback<TContext> | undefined;\n            215?: SuccessCallback<TContext> | undefined;\n            216?: SuccessCallback<TContext> | undefined;\n            217?: SuccessCallback<TContext> | undefined;\n            218?: SuccessCallback<TContext> | undefined;\n            219?: SuccessCallback<TContext> | undefined;\n            220?: SuccessCallback<TContext> | undefined;\n            221?: SuccessCallback<TContext> | undefined;\n            222?: SuccessCallback<TContext> | undefined;\n            223?: SuccessCallback<TContext> | undefined;\n            224?: SuccessCallback<TContext> | undefined;\n            225?: SuccessCallback<TContext> | undefined;\n            226?: SuccessCallback<TContext> | undefined;\n            227?: SuccessCallback<TContext> | undefined;\n            228?: SuccessCallback<TContext> | undefined;\n            229?: SuccessCallback<TContext> | undefined;\n            230?: SuccessCallback<TContext> | undefined;\n            231?: SuccessCallback<TContext> | undefined;\n            232?: SuccessCallback<TContext> | undefined;\n            233?: SuccessCallback<TContext> | undefined;\n            234?: SuccessCallback<TContext> | undefined;\n            235?: SuccessCallback<TContext> | undefined;\n            236?: SuccessCallback<TContext> | undefined;\n            237?: SuccessCallback<TContext> | undefined;\n            238?: SuccessCallback<TContext> | undefined;\n            239?: SuccessCallback<TContext> | undefined;\n            240?: SuccessCallback<TContext> | undefined;\n            241?: SuccessCallback<TContext> | undefined;\n            242?: SuccessCallback<TContext> | undefined;\n            243?: SuccessCallback<TContext> | undefined;\n            244?: SuccessCallback<TContext> | undefined;\n            245?: SuccessCallback<TContext> | undefined;\n            246?: SuccessCallback<TContext> | undefined;\n            247?: SuccessCallback<TContext> | undefined;\n            248?: SuccessCallback<TContext> | undefined;\n            249?: SuccessCallback<TContext> | undefined;\n            250?: SuccessCallback<TContext> | undefined;\n            251?: SuccessCallback<TContext> | undefined;\n            252?: SuccessCallback<TContext> | undefined;\n            253?: SuccessCallback<TContext> | undefined;\n            254?: SuccessCallback<TContext> | undefined;\n            255?: SuccessCallback<TContext> | undefined;\n            256?: SuccessCallback<TContext> | undefined;\n            257?: SuccessCallback<TContext> | undefined;\n            258?: SuccessCallback<TContext> | undefined;\n            259?: SuccessCallback<TContext> | undefined;\n            260?: SuccessCallback<TContext> | undefined;\n            261?: SuccessCallback<TContext> | undefined;\n            262?: SuccessCallback<TContext> | undefined;\n            263?: SuccessCallback<TContext> | undefined;\n            264?: SuccessCallback<TContext> | undefined;\n            265?: SuccessCallback<TContext> | undefined;\n            266?: SuccessCallback<TContext> | undefined;\n            267?: SuccessCallback<TContext> | undefined;\n            268?: SuccessCallback<TContext> | undefined;\n            269?: SuccessCallback<TContext> | undefined;\n            270?: SuccessCallback<TContext> | undefined;\n            271?: SuccessCallback<TContext> | undefined;\n            272?: SuccessCallback<TContext> | undefined;\n            273?: SuccessCallback<TContext> | undefined;\n            274?: SuccessCallback<TContext> | undefined;\n            275?: SuccessCallback<TContext> | undefined;\n            276?: SuccessCallback<TContext> | undefined;\n            277?: SuccessCallback<TContext> | undefined;\n            278?: SuccessCallback<TContext> | undefined;\n            279?: SuccessCallback<TContext> | undefined;\n            280?: SuccessCallback<TContext> | undefined;\n            281?: SuccessCallback<TContext> | undefined;\n            282?: SuccessCallback<TContext> | undefined;\n            283?: SuccessCallback<TContext> | undefined;\n            284?: SuccessCallback<TContext> | undefined;\n            285?: SuccessCallback<TContext> | undefined;\n            286?: SuccessCallback<TContext> | undefined;\n            287?: SuccessCallback<TContext> | undefined;\n            288?: SuccessCallback<TContext> | undefined;\n            289?: SuccessCallback<TContext> | undefined;\n            290?: SuccessCallback<TContext> | undefined;\n            291?: SuccessCallback<TContext> | undefined;\n            292?: SuccessCallback<TContext> | undefined;\n            293?: SuccessCallback<TContext> | undefined;\n            294?: SuccessCallback<TContext> | undefined;\n            295?: SuccessCallback<TContext> | undefined;\n            296?: SuccessCallback<TContext> | undefined;\n            297?: SuccessCallback<TContext> | undefined;\n            298?: SuccessCallback<TContext> | undefined;\n            299?: SuccessCallback<TContext> | undefined;\n            304?: SuccessCallback<TContext> | undefined;\n\n            // #endregion\n\n            // region Error Status Codes\n            // #region Error Status Codes\n\n            300?: ErrorCallback<TContext> | undefined;\n            301?: ErrorCallback<TContext> | undefined;\n            302?: ErrorCallback<TContext> | undefined;\n            303?: ErrorCallback<TContext> | undefined;\n            305?: ErrorCallback<TContext> | undefined;\n            306?: ErrorCallback<TContext> | undefined;\n            307?: ErrorCallback<TContext> | undefined;\n            308?: ErrorCallback<TContext> | undefined;\n            309?: ErrorCallback<TContext> | undefined;\n            310?: ErrorCallback<TContext> | undefined;\n            311?: ErrorCallback<TContext> | undefined;\n            312?: ErrorCallback<TContext> | undefined;\n            313?: ErrorCallback<TContext> | undefined;\n            314?: ErrorCallback<TContext> | undefined;\n            315?: ErrorCallback<TContext> | undefined;\n            316?: ErrorCallback<TContext> | undefined;\n            317?: ErrorCallback<TContext> | undefined;\n            318?: ErrorCallback<TContext> | undefined;\n            319?: ErrorCallback<TContext> | undefined;\n            320?: ErrorCallback<TContext> | undefined;\n            321?: ErrorCallback<TContext> | undefined;\n            322?: ErrorCallback<TContext> | undefined;\n            323?: ErrorCallback<TContext> | undefined;\n            324?: ErrorCallback<TContext> | undefined;\n            325?: ErrorCallback<TContext> | undefined;\n            326?: ErrorCallback<TContext> | undefined;\n            327?: ErrorCallback<TContext> | undefined;\n            328?: ErrorCallback<TContext> | undefined;\n            329?: ErrorCallback<TContext> | undefined;\n            330?: ErrorCallback<TContext> | undefined;\n            331?: ErrorCallback<TContext> | undefined;\n            332?: ErrorCallback<TContext> | undefined;\n            333?: ErrorCallback<TContext> | undefined;\n            334?: ErrorCallback<TContext> | undefined;\n            335?: ErrorCallback<TContext> | undefined;\n            336?: ErrorCallback<TContext> | undefined;\n            337?: ErrorCallback<TContext> | undefined;\n            338?: ErrorCallback<TContext> | undefined;\n            339?: ErrorCallback<TContext> | undefined;\n            340?: ErrorCallback<TContext> | undefined;\n            341?: ErrorCallback<TContext> | undefined;\n            342?: ErrorCallback<TContext> | undefined;\n            343?: ErrorCallback<TContext> | undefined;\n            344?: ErrorCallback<TContext> | undefined;\n            345?: ErrorCallback<TContext> | undefined;\n            346?: ErrorCallback<TContext> | undefined;\n            347?: ErrorCallback<TContext> | undefined;\n            348?: ErrorCallback<TContext> | undefined;\n            349?: ErrorCallback<TContext> | undefined;\n            350?: ErrorCallback<TContext> | undefined;\n            351?: ErrorCallback<TContext> | undefined;\n            352?: ErrorCallback<TContext> | undefined;\n            353?: ErrorCallback<TContext> | undefined;\n            354?: ErrorCallback<TContext> | undefined;\n            355?: ErrorCallback<TContext> | undefined;\n            356?: ErrorCallback<TContext> | undefined;\n            357?: ErrorCallback<TContext> | undefined;\n            358?: ErrorCallback<TContext> | undefined;\n            359?: ErrorCallback<TContext> | undefined;\n            360?: ErrorCallback<TContext> | undefined;\n            361?: ErrorCallback<TContext> | undefined;\n            362?: ErrorCallback<TContext> | undefined;\n            363?: ErrorCallback<TContext> | undefined;\n            364?: ErrorCallback<TContext> | undefined;\n            365?: ErrorCallback<TContext> | undefined;\n            366?: ErrorCallback<TContext> | undefined;\n            367?: ErrorCallback<TContext> | undefined;\n            368?: ErrorCallback<TContext> | undefined;\n            369?: ErrorCallback<TContext> | undefined;\n            370?: ErrorCallback<TContext> | undefined;\n            371?: ErrorCallback<TContext> | undefined;\n            372?: ErrorCallback<TContext> | undefined;\n            373?: ErrorCallback<TContext> | undefined;\n            374?: ErrorCallback<TContext> | undefined;\n            375?: ErrorCallback<TContext> | undefined;\n            376?: ErrorCallback<TContext> | undefined;\n            377?: ErrorCallback<TContext> | undefined;\n            378?: ErrorCallback<TContext> | undefined;\n            379?: ErrorCallback<TContext> | undefined;\n            380?: ErrorCallback<TContext> | undefined;\n            381?: ErrorCallback<TContext> | undefined;\n            382?: ErrorCallback<TContext> | undefined;\n            383?: ErrorCallback<TContext> | undefined;\n            384?: ErrorCallback<TContext> | undefined;\n            385?: ErrorCallback<TContext> | undefined;\n            386?: ErrorCallback<TContext> | undefined;\n            387?: ErrorCallback<TContext> | undefined;\n            388?: ErrorCallback<TContext> | undefined;\n            389?: ErrorCallback<TContext> | undefined;\n            390?: ErrorCallback<TContext> | undefined;\n            391?: ErrorCallback<TContext> | undefined;\n            392?: ErrorCallback<TContext> | undefined;\n            393?: ErrorCallback<TContext> | undefined;\n            394?: ErrorCallback<TContext> | undefined;\n            395?: ErrorCallback<TContext> | undefined;\n            396?: ErrorCallback<TContext> | undefined;\n            397?: ErrorCallback<TContext> | undefined;\n            398?: ErrorCallback<TContext> | undefined;\n            399?: ErrorCallback<TContext> | undefined;\n            400?: ErrorCallback<TContext> | undefined;\n            401?: ErrorCallback<TContext> | undefined;\n            402?: ErrorCallback<TContext> | undefined;\n            403?: ErrorCallback<TContext> | undefined;\n            404?: ErrorCallback<TContext> | undefined;\n            405?: ErrorCallback<TContext> | undefined;\n            406?: ErrorCallback<TContext> | undefined;\n            407?: ErrorCallback<TContext> | undefined;\n            408?: ErrorCallback<TContext> | undefined;\n            409?: ErrorCallback<TContext> | undefined;\n            410?: ErrorCallback<TContext> | undefined;\n            411?: ErrorCallback<TContext> | undefined;\n            412?: ErrorCallback<TContext> | undefined;\n            413?: ErrorCallback<TContext> | undefined;\n            414?: ErrorCallback<TContext> | undefined;\n            415?: ErrorCallback<TContext> | undefined;\n            416?: ErrorCallback<TContext> | undefined;\n            417?: ErrorCallback<TContext> | undefined;\n            418?: ErrorCallback<TContext> | undefined;\n            419?: ErrorCallback<TContext> | undefined;\n            420?: ErrorCallback<TContext> | undefined;\n            421?: ErrorCallback<TContext> | undefined;\n            422?: ErrorCallback<TContext> | undefined;\n            423?: ErrorCallback<TContext> | undefined;\n            424?: ErrorCallback<TContext> | undefined;\n            425?: ErrorCallback<TContext> | undefined;\n            426?: ErrorCallback<TContext> | undefined;\n            427?: ErrorCallback<TContext> | undefined;\n            428?: ErrorCallback<TContext> | undefined;\n            429?: ErrorCallback<TContext> | undefined;\n            430?: ErrorCallback<TContext> | undefined;\n            431?: ErrorCallback<TContext> | undefined;\n            432?: ErrorCallback<TContext> | undefined;\n            433?: ErrorCallback<TContext> | undefined;\n            434?: ErrorCallback<TContext> | undefined;\n            435?: ErrorCallback<TContext> | undefined;\n            436?: ErrorCallback<TContext> | undefined;\n            437?: ErrorCallback<TContext> | undefined;\n            438?: ErrorCallback<TContext> | undefined;\n            439?: ErrorCallback<TContext> | undefined;\n            440?: ErrorCallback<TContext> | undefined;\n            441?: ErrorCallback<TContext> | undefined;\n            442?: ErrorCallback<TContext> | undefined;\n            443?: ErrorCallback<TContext> | undefined;\n            444?: ErrorCallback<TContext> | undefined;\n            445?: ErrorCallback<TContext> | undefined;\n            446?: ErrorCallback<TContext> | undefined;\n            447?: ErrorCallback<TContext> | undefined;\n            448?: ErrorCallback<TContext> | undefined;\n            449?: ErrorCallback<TContext> | undefined;\n            450?: ErrorCallback<TContext> | undefined;\n            451?: ErrorCallback<TContext> | undefined;\n            452?: ErrorCallback<TContext> | undefined;\n            453?: ErrorCallback<TContext> | undefined;\n            454?: ErrorCallback<TContext> | undefined;\n            455?: ErrorCallback<TContext> | undefined;\n            456?: ErrorCallback<TContext> | undefined;\n            457?: ErrorCallback<TContext> | undefined;\n            458?: ErrorCallback<TContext> | undefined;\n            459?: ErrorCallback<TContext> | undefined;\n            460?: ErrorCallback<TContext> | undefined;\n            461?: ErrorCallback<TContext> | undefined;\n            462?: ErrorCallback<TContext> | undefined;\n            463?: ErrorCallback<TContext> | undefined;\n            464?: ErrorCallback<TContext> | undefined;\n            465?: ErrorCallback<TContext> | undefined;\n            466?: ErrorCallback<TContext> | undefined;\n            467?: ErrorCallback<TContext> | undefined;\n            468?: ErrorCallback<TContext> | undefined;\n            469?: ErrorCallback<TContext> | undefined;\n            470?: ErrorCallback<TContext> | undefined;\n            471?: ErrorCallback<TContext> | undefined;\n            472?: ErrorCallback<TContext> | undefined;\n            473?: ErrorCallback<TContext> | undefined;\n            474?: ErrorCallback<TContext> | undefined;\n            475?: ErrorCallback<TContext> | undefined;\n            476?: ErrorCallback<TContext> | undefined;\n            477?: ErrorCallback<TContext> | undefined;\n            478?: ErrorCallback<TContext> | undefined;\n            479?: ErrorCallback<TContext> | undefined;\n            480?: ErrorCallback<TContext> | undefined;\n            481?: ErrorCallback<TContext> | undefined;\n            482?: ErrorCallback<TContext> | undefined;\n            483?: ErrorCallback<TContext> | undefined;\n            484?: ErrorCallback<TContext> | undefined;\n            485?: ErrorCallback<TContext> | undefined;\n            486?: ErrorCallback<TContext> | undefined;\n            487?: ErrorCallback<TContext> | undefined;\n            488?: ErrorCallback<TContext> | undefined;\n            489?: ErrorCallback<TContext> | undefined;\n            490?: ErrorCallback<TContext> | undefined;\n            491?: ErrorCallback<TContext> | undefined;\n            492?: ErrorCallback<TContext> | undefined;\n            493?: ErrorCallback<TContext> | undefined;\n            494?: ErrorCallback<TContext> | undefined;\n            495?: ErrorCallback<TContext> | undefined;\n            496?: ErrorCallback<TContext> | undefined;\n            497?: ErrorCallback<TContext> | undefined;\n            498?: ErrorCallback<TContext> | undefined;\n            499?: ErrorCallback<TContext> | undefined;\n            500?: ErrorCallback<TContext> | undefined;\n            501?: ErrorCallback<TContext> | undefined;\n            502?: ErrorCallback<TContext> | undefined;\n            503?: ErrorCallback<TContext> | undefined;\n            504?: ErrorCallback<TContext> | undefined;\n            505?: ErrorCallback<TContext> | undefined;\n            506?: ErrorCallback<TContext> | undefined;\n            507?: ErrorCallback<TContext> | undefined;\n            508?: ErrorCallback<TContext> | undefined;\n            509?: ErrorCallback<TContext> | undefined;\n            510?: ErrorCallback<TContext> | undefined;\n            511?: ErrorCallback<TContext> | undefined;\n            512?: ErrorCallback<TContext> | undefined;\n            513?: ErrorCallback<TContext> | undefined;\n            514?: ErrorCallback<TContext> | undefined;\n            515?: ErrorCallback<TContext> | undefined;\n            516?: ErrorCallback<TContext> | undefined;\n            517?: ErrorCallback<TContext> | undefined;\n            518?: ErrorCallback<TContext> | undefined;\n            519?: ErrorCallback<TContext> | undefined;\n            520?: ErrorCallback<TContext> | undefined;\n            521?: ErrorCallback<TContext> | undefined;\n            522?: ErrorCallback<TContext> | undefined;\n            523?: ErrorCallback<TContext> | undefined;\n            524?: ErrorCallback<TContext> | undefined;\n            525?: ErrorCallback<TContext> | undefined;\n            526?: ErrorCallback<TContext> | undefined;\n            527?: ErrorCallback<TContext> | undefined;\n            528?: ErrorCallback<TContext> | undefined;\n            529?: ErrorCallback<TContext> | undefined;\n            530?: ErrorCallback<TContext> | undefined;\n            531?: ErrorCallback<TContext> | undefined;\n            532?: ErrorCallback<TContext> | undefined;\n            533?: ErrorCallback<TContext> | undefined;\n            534?: ErrorCallback<TContext> | undefined;\n            535?: ErrorCallback<TContext> | undefined;\n            536?: ErrorCallback<TContext> | undefined;\n            537?: ErrorCallback<TContext> | undefined;\n            538?: ErrorCallback<TContext> | undefined;\n            539?: ErrorCallback<TContext> | undefined;\n            540?: ErrorCallback<TContext> | undefined;\n            541?: ErrorCallback<TContext> | undefined;\n            542?: ErrorCallback<TContext> | undefined;\n            543?: ErrorCallback<TContext> | undefined;\n            544?: ErrorCallback<TContext> | undefined;\n            545?: ErrorCallback<TContext> | undefined;\n            546?: ErrorCallback<TContext> | undefined;\n            547?: ErrorCallback<TContext> | undefined;\n            548?: ErrorCallback<TContext> | undefined;\n            549?: ErrorCallback<TContext> | undefined;\n            550?: ErrorCallback<TContext> | undefined;\n            551?: ErrorCallback<TContext> | undefined;\n            552?: ErrorCallback<TContext> | undefined;\n            553?: ErrorCallback<TContext> | undefined;\n            554?: ErrorCallback<TContext> | undefined;\n            555?: ErrorCallback<TContext> | undefined;\n            556?: ErrorCallback<TContext> | undefined;\n            557?: ErrorCallback<TContext> | undefined;\n            558?: ErrorCallback<TContext> | undefined;\n            559?: ErrorCallback<TContext> | undefined;\n            560?: ErrorCallback<TContext> | undefined;\n            561?: ErrorCallback<TContext> | undefined;\n            562?: ErrorCallback<TContext> | undefined;\n            563?: ErrorCallback<TContext> | undefined;\n            564?: ErrorCallback<TContext> | undefined;\n            565?: ErrorCallback<TContext> | undefined;\n            566?: ErrorCallback<TContext> | undefined;\n            567?: ErrorCallback<TContext> | undefined;\n            568?: ErrorCallback<TContext> | undefined;\n            569?: ErrorCallback<TContext> | undefined;\n            570?: ErrorCallback<TContext> | undefined;\n            571?: ErrorCallback<TContext> | undefined;\n            572?: ErrorCallback<TContext> | undefined;\n            573?: ErrorCallback<TContext> | undefined;\n            574?: ErrorCallback<TContext> | undefined;\n            575?: ErrorCallback<TContext> | undefined;\n            576?: ErrorCallback<TContext> | undefined;\n            577?: ErrorCallback<TContext> | undefined;\n            578?: ErrorCallback<TContext> | undefined;\n            579?: ErrorCallback<TContext> | undefined;\n            580?: ErrorCallback<TContext> | undefined;\n            581?: ErrorCallback<TContext> | undefined;\n            582?: ErrorCallback<TContext> | undefined;\n            583?: ErrorCallback<TContext> | undefined;\n            584?: ErrorCallback<TContext> | undefined;\n            585?: ErrorCallback<TContext> | undefined;\n            586?: ErrorCallback<TContext> | undefined;\n            587?: ErrorCallback<TContext> | undefined;\n            588?: ErrorCallback<TContext> | undefined;\n            589?: ErrorCallback<TContext> | undefined;\n            590?: ErrorCallback<TContext> | undefined;\n            591?: ErrorCallback<TContext> | undefined;\n            592?: ErrorCallback<TContext> | undefined;\n            593?: ErrorCallback<TContext> | undefined;\n            594?: ErrorCallback<TContext> | undefined;\n            595?: ErrorCallback<TContext> | undefined;\n            596?: ErrorCallback<TContext> | undefined;\n            597?: ErrorCallback<TContext> | undefined;\n            598?: ErrorCallback<TContext> | undefined;\n            599?: ErrorCallback<TContext> | undefined;\n\n            // #endregion\n        } & {\n            // Status codes not listed require type annotations when defining the callback\n            [index: number]: SuccessCallback<TContext> | ErrorCallback<TContext>;\n        };\n\n        // #endregion\n\n        // Writable properties on XMLHttpRequest\n        interface XHRFields extends Partial<Pick<XMLHttpRequest, \'onreadystatechange\' | \'responseType\' | \'timeout\' | \'withCredentials\'>> {\n            msCaching?: string | undefined;\n        }\n    }\n\n    interface Transport {\n        send(headers: PlainObject, completeCallback: Transport.SuccessCallback): void;\n        abort(): void;\n    }\n\n    namespace Transport {\n        type SuccessCallback = (status: number, statusText: Ajax.TextStatus, responses?: PlainObject, headers?: string) => void;\n    }\n\n    /**\n     * @see \\`{@link https://api.jquery.com/jquery.ajax/#jqXHR }\\`\n     */\n    interface jqXHR<TResolve = any> extends Promise3<TResolve, jqXHR<TResolve>, never,\n        Ajax.SuccessTextStatus, Ajax.ErrorTextStatus, never,\n        jqXHR<TResolve>, string, never>,\n        Pick<XMLHttpRequest, \'abort\' | \'getAllResponseHeaders\' | \'getResponseHeader\' | \'overrideMimeType\' | \'readyState\' | \'responseText\' |\n            \'setRequestHeader\' | \'status\' | \'statusText\'>,\n        Partial<Pick<XMLHttpRequest, \'responseXML\'>> {\n        responseJSON?: any;\n        abort(statusText?: string): void;\n\n        /**\n         * Determine the current state of a Deferred object.\n         * @see \\`{@link https://api.jquery.com/deferred.state/ }\\`\n         * @since 1.7\n         */\n        state(): \'pending\' | \'resolved\' | \'rejected\';\n        statusCode(map: Ajax.StatusCodeCallbacks<any>): void;\n    }\n\n    namespace jqXHR {\n        interface DoneCallback<TResolve = any, TjqXHR = jqXHR<TResolve>> extends Deferred.Callback3<TResolve, Ajax.SuccessTextStatus, TjqXHR> { }\n\n        interface FailCallback<TjqXHR> extends Deferred.Callback3<TjqXHR, Ajax.ErrorTextStatus, string> { }\n\n        interface AlwaysCallback<TResolve = any, TjqXHR = jqXHR<TResolve>> extends Deferred.Callback3<TResolve | TjqXHR, Ajax.TextStatus, TjqXHR | string> { }\n    }\n\n    // #endregion\n\n    // region Callbacks\n    // #region Callbacks\n\n    interface CallbacksStatic {\n        /**\n         * A multi-purpose callbacks list object that provides a powerful way to manage callback lists.\n         * @param flags An optional list of space-separated flags that change how the callback list behaves.\n         * @see \\`{@link https://api.jquery.com/jQuery.Callbacks/ }\\`\n         * @since 1.7\n         */\n        // tslint:disable-next-line:ban-types no-unnecessary-generics\n        <T extends Function>(flags?: string): Callbacks<T>;\n    }\n\n    // tslint:disable-next-line:ban-types\n    interface Callbacks<T extends Function = Function> {\n        /**\n         * Add a callback or a collection of callbacks to a callback list.\n         * @param callback A function, or array of functions, that are to be added to the callback list.\n         * @param callbacks A function, or array of functions, that are to be added to the callback list.\n         * @see \\`{@link https://api.jquery.com/callbacks.add/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.add() to add new callbacks to a callback list:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( "foo: " + value );\n};\n​\n// Another function to also be added to the list\nvar bar = function( value ) {\n  console.log( "bar: " + value );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the function "foo" to the list\ncallbacks.add( foo );\n​\n// Fire the items on the list\ncallbacks.fire( "hello" );\n// Outputs: "foo: hello"\n​\n// Add the function "bar" to the list\ncallbacks.add( bar );\n​\n// Fire the items on the list again\ncallbacks.fire( "world" );\n​\n// Outputs:\n// "foo: world"\n// "bar: world"\n```\n         */\n        add(callback: TypeOrArray<T>, ...callbacks: Array<TypeOrArray<T>>): this;\n        /**\n         * Disable a callback list from doing anything more.\n         * @see \\`{@link https://api.jquery.com/callbacks.disable/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.disable() to disable further calls to a callback list:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( value );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the above function to the list\ncallbacks.add( foo );\n​\n// Fire the items on the list\ncallbacks.fire( "foo" );\n// Outputs: foo\n​\n// Disable further calls being possible\ncallbacks.disable();\n​\n// Attempt to fire with "foobar" as an argument\ncallbacks.fire( "foobar" );\n// foobar isn\'t output\n```\n         */\n        disable(): this;\n        /**\n         * Determine if the callbacks list has been disabled.\n         * @see \\`{@link https://api.jquery.com/callbacks.disabled/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.disabled() to determine if the callbacks list has been disabled:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( "foo:" + value );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the logging function to the callback list\ncallbacks.add( foo );\n​\n// Fire the items on the list, passing an argument\ncallbacks.fire( "hello" );\n// Outputs "foo: hello"\n​\n// Disable the callbacks list\ncallbacks.disable();\n​\n// Test the disabled state of the list\nconsole.log ( callbacks.disabled() );\n// Outputs: true\n```\n         */\n        disabled(): boolean;\n        /**\n         * Remove all of the callbacks from a list.\n         * @see \\`{@link https://api.jquery.com/callbacks.empty/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.empty() to empty a list of callbacks:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar foo = function( value1, value2 ) {\n  console.log( "foo: " + value1 + "," + value2 );\n};\n​\n// Another function to also be added to the list\nvar bar = function( value1, value2 ) {\n  console.log( "bar: " + value1 + "," + value2 );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the two functions\ncallbacks.add( foo );\ncallbacks.add( bar );\n​\n// Empty the callbacks list\ncallbacks.empty();\n​\n// Check to ensure all callbacks have been removed\nconsole.log( callbacks.has( foo ) );\n// false\nconsole.log( callbacks.has( bar ) );\n// false\n```\n         */\n        empty(): this;\n        /**\n         * Call all of the callbacks with the given arguments.\n         * @param args The argument or list of arguments to pass back to the callback list.\n         * @see \\`{@link https://api.jquery.com/callbacks.fire/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.fire() to invoke the callbacks in a list with any arguments that have been passed:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( "foo:" + value );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the function "foo" to the list\ncallbacks.add( foo );\n​\n// Fire the items on the list\ncallbacks.fire( "hello" ); // Outputs: "foo: hello"\ncallbacks.fire( "world" ); // Outputs: "foo: world"\n​\n// Add another function to the list\nvar bar = function( value ){\n  console.log( "bar:" + value );\n};\n​\n// Add this function to the list\ncallbacks.add( bar );\n​\n// Fire the items on the list again\ncallbacks.fire( "hello again" );\n// Outputs:\n// "foo: hello again"\n// "bar: hello again"\n```\n         */\n        fire(...args: any[]): this;\n        /**\n         * Determine if the callbacks have already been called at least once.\n         * @see \\`{@link https://api.jquery.com/callbacks.fired/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.fired() to determine if the callbacks in a list have been called at least once:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( "foo:" + value );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the function "foo" to the list\ncallbacks.add( foo );\n​\n// Fire the items on the list\ncallbacks.fire( "hello" ); // Outputs: "foo: hello"\ncallbacks.fire( "world" ); // Outputs: "foo: world"\n​\n// Test to establish if the callbacks have been called\nconsole.log( callbacks.fired() );\n```\n         */\n        fired(): boolean;\n        /**\n         * Call all callbacks in a list with the given context and arguments.\n         * @param context A reference to the context in which the callbacks in the list should be fired.\n         * @param args An argument, or array of arguments, to pass to the callbacks in the list.\n         * @see \\`{@link https://api.jquery.com/callbacks.fireWith/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.fireWith() to fire a list of callbacks with a specific context and an array of arguments:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar log = function( value1, value2 ) {\n  console.log( "Received: " + value1 + "," + value2 );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the log method to the callbacks list\ncallbacks.add( log );\n​\n// Fire the callbacks on the list using the context "window"\n// and an arguments array\n​\ncallbacks.fireWith( window, [ "foo","bar" ] );\n// Outputs: "Received: foo, bar"\n```\n         */\n        fireWith(context: object, args?: ArrayLike<any>): this;\n        /**\n         * Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list.\n         * @param callback The callback to search for.\n         * @see \\`{@link https://api.jquery.com/callbacks.has/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.has() to check if a callback list contains a specific callback:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar foo = function( value1, value2 ) {\n  console.log( "Received: " + value1 + "," + value2 );\n};\n​\n// A second function which will not be added to the list\nvar bar = function( value1, value2 ) {\n  console.log( "foobar" );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the log method to the callbacks list\ncallbacks.add( foo );\n​\n// Determine which callbacks are in the list\nconsole.log( callbacks.has( foo ) );\n// true\nconsole.log( callbacks.has( bar ) );\n// false\n```\n         */\n        has(callback?: T): boolean;\n        /**\n         * Lock a callback list in its current state.\n         * @see \\`{@link https://api.jquery.com/callbacks.lock/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.lock() to lock a callback list to avoid further changes being made to the list state:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( "foo:" + value );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the logging function to the callback list\ncallbacks.add( foo );\n​\n// Fire the items on the list, passing an argument\ncallbacks.fire( "hello" );\n// Outputs "foo: hello"\n​\n// Lock the callbacks list\ncallbacks.lock();\n​\n// Try firing the items again\ncallbacks.fire( "world" );\n​\n// As the list was locked, no items were called,\n// so "world" isn\'t logged\n```\n         * @example ​ ````Use callbacks.lock() to lock a callback list with &quot;memory,&quot; and then resume using the list:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>callbacks.lock demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n// Simple function for logging results\nvar log = function( value ) {\n  $( "#log" ).append( "<p>" + value + "</p>" );\n};\n​\n// Two sample functions to be added to a callbacks list\nvar foo = function( value ) {\n  log( "foo: " + value );\n};\nvar bar = function( value ) {\n  log( "bar: " + value );\n};\n​\n// Create the callbacks object with the "memory" flag\nvar callbacks = $.Callbacks( "memory" );\n​\n// Add the foo logging function to the callback list\ncallbacks.add( foo );\n​\n// Fire the items on the list, passing an argument\ncallbacks.fire( "hello" );\n// Outputs "foo: hello"\n​\n// Lock the callbacks list\ncallbacks.lock();\n​\n// Try firing the items again\ncallbacks.fire( "world" );\n// As the list was locked, no items were called,\n// so "foo: world" isn\'t logged\n​\n// Add the foo function to the callback list again\ncallbacks.add( foo );\n​\n// Try firing the items again\ncallbacks.fire( "silentArgument" );\n// Outputs "foo: hello" because the argument value was stored in memory\n​\n// Add the bar function to the callback list\ncallbacks.add( bar );\n​\ncallbacks.fire( "youHadMeAtHello" );\n// Outputs "bar: hello" because the list is still locked,\n// and the argument value is still stored in memory\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        lock(): this;\n        /**\n         * Determine if the callbacks list has been locked.\n         * @see \\`{@link https://api.jquery.com/callbacks.locked/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.locked() to determine the lock-state of a callback list:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( "foo: " + value );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the logging function to the callback list\ncallbacks.add( foo );\n​\n// Fire the items on the list, passing an argument\ncallbacks.fire( "hello" );\n// Outputs "foo: hello"\n​\n// Lock the callbacks list\ncallbacks.lock();\n​\n// Test the lock-state of the list\nconsole.log ( callbacks.locked() );\n// true\n```\n         */\n        locked(): boolean;\n        /**\n         * Remove a callback or a collection of callbacks from a callback list.\n         * @param callbacks A function, or array of functions, that are to be removed from the callback list.\n         * @see \\`{@link https://api.jquery.com/callbacks.remove/ }\\`\n         * @since 1.7\n         * @example ​ ````Use callbacks.remove() to remove callbacks from a callback list:\n```javascript\n// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( "foo: " + value );\n};\n​\nvar callbacks = $.Callbacks();\n​\n// Add the function "foo" to the list\ncallbacks.add( foo );\n​\n// Fire the items on the list\ncallbacks.fire( "hello" );\n// Outputs: "foo: hello"\n​\n// Remove "foo" from the callback list\ncallbacks.remove( foo );\n​\n// Fire the items on the list again\ncallbacks.fire( "world" );\n​\n// Nothing output as "foo" is no longer in the list\n```\n         */\n        remove(...callbacks: T[]): this;\n    }\n\n    // #endregion\n\n    // region CSS hooks\n    // #region CSS hooks\n\n    // Workaround for TypeScript 2.3 which does not have support for weak types handling.\n    type CSSHook<TElement> =\n        Partial<_CSSHook<TElement>> & (\n            Pick<_CSSHook<TElement>, \'get\'> |\n            Pick<_CSSHook<TElement>, \'set\'>\n        );\n\n    interface _CSSHook<TElement> {\n        get(elem: TElement, computed: any, extra: any): any;\n        set(elem: TElement, value: any): void;\n    }\n\n    interface CSSHooks {\n        // Set to HTMLElement to minimize breaks but should probably be Element.\n        [propertyName: string]: CSSHook<HTMLElement>;\n    }\n\n    // #endregion\n\n    // region Deferred\n    // #region Deferred\n\n    /**\n     * Any object that has a then method.\n     */\n    interface Thenable<T> extends PromiseLike<T> { }\n\n    // Type parameter guide\n    // --------------------\n    // Each type parameter represents a parameter in one of the three possible callbacks.\n    //\n    // The first letter indicates which position the parameter is in.\n    //\n    // T = A = 1st position\n    // U = B = 2nd position\n    // V = C = 3rd position\n    // S = R = rest position\n    //\n    // The second letter indicates which whether it is a [R]esolve, Re[J]ect, or [N]otify value.\n    //\n    // The third letter indicates whether the value is returned in the [D]one filter, [F]ail filter, or [P]rogress filter.\n\n    /**\n     * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.\n     * @see \\`{@link https://api.jquery.com/Types/#Promise }\\`\n     */\n    interface PromiseBase<TR, TJ, TN,\n        UR, UJ, UN,\n        VR, VJ, VN,\n        SR, SJ, SN> {\n        /**\n         * Add handlers to be called when the Deferred object is either resolved or rejected.\n         * @param alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.\n         * @param alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.\n         * @see \\`{@link https://api.jquery.com/deferred.always/ }\\`\n         * @since 1.6\n         * @example ​ ````Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.\n```javascript\n$.get( "test.php" ).always(function() {\n  alert( "$.get completed with success or error callback arguments" );\n});\n```\n         */\n        always(alwaysCallback: TypeOrArray<Deferred.CallbackBase<TR | TJ, UR | UJ, VR | VJ, SR | SJ>>,\n               ...alwaysCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TR | TJ, UR | UJ, VR | VJ, SR | SJ>>>): this;\n        /**\n         * Add handlers to be called when the Deferred object is resolved.\n         * @param doneCallback A function, or array of functions, that are called when the Deferred is resolved.\n         * @param doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.\n         * @see \\`{@link https://api.jquery.com/deferred.done/ }\\`\n         * @since 1.5\n         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.\n```javascript\n$.get( "test.php" ).done(function() {\n  alert( "$.get succeeded" );\n});\n```\n         * @example ​ ````Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>deferred.done demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Go</button>\n<p>Ready...</p>\n​\n<script>\n// 3 functions to call when the Deferred object is resolved\nfunction fn1() {\n  $( "p" ).append( " 1 " );\n}\nfunction fn2() {\n  $( "p" ).append( " 2 " );\n}\nfunction fn3( n ) {\n  $( "p" ).append( n + " 3 " + n );\n}\n​\n// Create a deferred object\nvar dfd = $.Deferred();\n​\n// Add handlers to be called when dfd is resolved\ndfd\n// .done() can take any number of functions or arrays of functions\n  .done( [ fn1, fn2 ], fn3, [ fn2, fn1 ] )\n// We can chain done methods, too\n  .done(function( n ) {\n    $( "p" ).append( n + " we\'re done." );\n  });\n​\n// Resolve the Deferred object when the button is clicked\n$( "button" ).on( "click", function() {\n  dfd.resolve( "and" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        done(doneCallback: TypeOrArray<Deferred.CallbackBase<TR, UR, VR, SR>>,\n             ...doneCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TR, UR, VR, SR>>>): this;\n        /**\n         * Add handlers to be called when the Deferred object is rejected.\n         * @param failCallback A function, or array of functions, that are called when the Deferred is rejected.\n         * @param failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.\n         * @see \\`{@link https://api.jquery.com/deferred.fail/ }\\`\n         * @since 1.5\n         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.\n```javascript\n$.get( "test.php" )\n  .done(function() {\n    alert( "$.get succeeded" );\n  })\n  .fail(function() {\n    alert( "$.get failed!" );\n  });\n```\n         */\n        fail(failCallback: TypeOrArray<Deferred.CallbackBase<TJ, UJ, VJ, SJ>>,\n             ...failCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TJ, UJ, VJ, SJ>>>): this;\n        /**\n         * Add handlers to be called when the Deferred object generates progress notifications.\n         * @param progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.\n         * @param progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates\n         *                          progress notifications.\n         * @see \\`{@link https://api.jquery.com/deferred.progress/ }\\`\n         * @since 1.7\n         */\n        progress(progressCallback: TypeOrArray<Deferred.CallbackBase<TN, UN, VN, SN>>,\n                 ...progressCallbacks: Array<TypeOrArray<Deferred.CallbackBase<TN, UN, VN, SN>>>): this;\n        /**\n         * Return a Deferred\'s Promise object.\n         * @param target Object onto which the promise methods have to be attached\n         * @see \\`{@link https://api.jquery.com/deferred.promise/ }\\`\n         * @since 1.5\n         * @example ​ ````Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first &quot;wins&quot; and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds &quot;working...&quot; to the document body.\n```javascript\nfunction asyncEvent() {\n  var dfd = jQuery.Deferred();\n​\n  // Resolve after a random interval\n  setTimeout(function() {\n    dfd.resolve( "hurray" );\n  }, Math.floor( 400 + Math.random() * 2000 ) );\n​\n  // Reject after a random interval\n  setTimeout(function() {\n    dfd.reject( "sorry" );\n  }, Math.floor( 400 + Math.random() * 2000 ) );\n​\n  // Show a "working..." message every half-second\n  setTimeout(function working() {\n    if ( dfd.state() === "pending" ) {\n      dfd.notify( "working... " );\n      setTimeout( working, 500 );\n    }\n  }, 1 );\n​\n  // Return the Promise so caller can\'t change the Deferred\n  return dfd.promise();\n}\n​\n// Attach a done, fail, and progress handler for the asyncEvent\n$.when( asyncEvent() ).then(\n  function( status ) {\n    alert( status + ", things are going well" );\n  },\n  function( status ) {\n    alert( status + ", you fail this time" );\n  },\n  function( status ) {\n    $( "body" ).append( status );\n  }\n);\n```\n         */\n        promise<TTarget extends object>(target: TTarget): this & TTarget;\n        /**\n         * Return a Deferred\'s Promise object.\n         * @see \\`{@link https://api.jquery.com/deferred.promise/ }\\`\n         * @since 1.5\n         * @example ​ ````Use the target argument to promote an existing object to a Promise:\n```javascript\n// Existing object\nvar obj = {\n    hello: function( name ) {\n      alert( "Hello " + name );\n    }\n  },\n  // Create a Deferred\n  defer = $.Deferred();\n​\n// Set object as a promise\ndefer.promise( obj );\n​\n// Resolve the deferred\ndefer.resolve( "John" );\n​\n// Use the object as a Promise\nobj.done(function( name ) {\n  obj.hello( name ); // Will alert "Hello John"\n}).hello( "Karl" ); // Will alert "Hello Karl"\n```\n         */\n        promise(): this;\n        /**\n         * Determine the current state of a Deferred object.\n         * @see \\`{@link https://api.jquery.com/deferred.state/ }\\`\n         * @since 1.7\n         */\n        state(): \'pending\' | \'resolved\' | \'rejected\';\n\n        // region pipe\n        // #region pipe\n\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter resolve value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {\n    return value * 2;\n  });\n​\ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( "Value is ( 2*5 = ) 10: " + value );\n});\n```\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<AJF> | AJF,\n                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,\n            BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,\n            CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,\n            RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: null,\n                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<AJF> | AJF,\n                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,\n            BRF | BRP, BJF | BJP, BNF | BNP,\n            CRF | CRP, CJF | CJP, CNF | CNP,\n            RRF | RRP, RJF | RJP, RNF | RNP>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter resolve value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {\n    return value * 2;\n  });\n​\ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( "Value is ( 2*5 = ) 10: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: null,\n                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,\n            BRD | BRP, BJD | BJP, BND | BNP,\n            CRD | CRP, CJD | CJP, CND | CNP,\n            RRD | RRP, RJD | RJP, RND | RNP>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: null,\n                failFilter: null,\n                progressFilter?: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,\n            BRP, BJP, BNP,\n            CRP, CJP, CNP,\n            RRP, RJP, RNP>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter resolve value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {\n    return value * 2;\n  });\n​\ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( "Value is ( 2*5 = ) 10: " + value );\n});\n```\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never>(\n                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<AJF> | AJF,\n                progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,\n            BRD | BRF, BJD | BJF, BND | BNF,\n            CRD | CRF, CJD | CJF, CND | CNF,\n            RRD | RRF, RJD | RJF, RND | RNF>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never>(\n                doneFilter: null,\n                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<AJF> | AJF,\n                progressFilter?: null): PromiseBase<ARF, AJF, ANF,\n            BRF, BJF, BNF,\n            CRF, CJF, CNF,\n            RRF, RJF, RNF>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter resolve value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {\n    return value * 2;\n  });\n​\ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( "Value is ( 2*5 = ) 10: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never>(\n                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter?: null,\n                progressFilter?: null): PromiseBase<ARD, AJD, AND,\n            BRD, BJD, BND,\n            CRD, CJD, CND,\n            RRD, RJD, RND>;\n\n        // #endregion\n\n        // region then\n        // #region then\n\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.\n```javascript\n$.get( "test.php" ).then(\n  function() {\n    alert( "$.get succeeded" );\n  }, function() {\n    alert( "$.get failed!" );\n  }\n);\n```\n         * @example ​ ````Filter the resolve value:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>deferred.then demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Filter Resolve</button>\n<p></p>\n​\n<script>\nvar filterResolve = function() {\n  var defer = $.Deferred(),\n    filtered = defer.then(function( value ) {\n      return value * 2;\n    });\n​\n  defer.resolve( 5 );\n  filtered.done(function( value ) {\n    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );\n  });\n};\n​\n$( "button" ).on( "click", filterResolve );\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.then( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<ARF> | ARF,\n                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,\n            BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,\n            CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,\n            RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.then( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: null,\n                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<ARF> | ARF,\n                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,\n            BRF | BRP, BJF | BJP, BNF | BNP,\n            CRF | CRP, CJF | CJP, CNF | CNP,\n            RRF | RRP, RJF | RJP, RNF | RNP>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Filter the resolve value:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>deferred.then demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Filter Resolve</button>\n<p></p>\n​\n<script>\nvar filterResolve = function() {\n  var defer = $.Deferred(),\n    filtered = defer.then(function( value ) {\n      return value * 2;\n    });\n​\n  defer.resolve( 5 );\n  filtered.done(function( value ) {\n    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );\n  });\n};\n​\n$( "button" ).on( "click", filterResolve );\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: null,\n                progressFilter: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,\n            BRD | BRP, BJD | BJP, BND | BNP,\n            CRD | CRP, CJD | CJP, CND | CNP,\n            RRD | RRP, RJD | RJP, RND | RNP>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: null,\n                failFilter: null,\n                progressFilter?: (t: TN, u: UN, v: VN, ...s: SN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,\n            BRP, BJP, BNP,\n            CRP, CJP, CNP,\n            RRP, RJP, RNP>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.\n```javascript\n$.get( "test.php" ).then(\n  function() {\n    alert( "$.get succeeded" );\n  }, function() {\n    alert( "$.get failed!" );\n  }\n);\n```\n         * @example ​ ````Filter the resolve value:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>deferred.then demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Filter Resolve</button>\n<p></p>\n​\n<script>\nvar filterResolve = function() {\n  var defer = $.Deferred(),\n    filtered = defer.then(function( value ) {\n      return value * 2;\n    });\n​\n  defer.resolve( 5 );\n  filtered.done(function( value ) {\n    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );\n  });\n};\n​\n$( "button" ).on( "click", filterResolve );\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.then( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never>(\n                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<ARF> | ARF,\n                progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,\n            BRD | BRF, BJD | BJF, BND | BNF,\n            CRD | CRF, CJD | CJF, CND | CNF,\n            RRD | RRF, RJD | RJF, RND | RNF>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.then( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never>(\n                doneFilter: null,\n                failFilter: (t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<ARF> | ARF,\n                progressFilter?: null): PromiseBase<ARF, AJF, ANF,\n            BRF, BJF, BNF,\n            CRF, CJF, CNF,\n            RRF, RJF, RNF>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Filter the resolve value:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>deferred.then demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Filter Resolve</button>\n<p></p>\n​\n<script>\nvar filterResolve = function() {\n  var defer = $.Deferred(),\n    filtered = defer.then(function( value ) {\n      return value * 2;\n    });\n​\n  defer.resolve( 5 );\n  filtered.done(function( value ) {\n    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );\n  });\n};\n​\n$( "button" ).on( "click", filterResolve );\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never>(\n                doneFilter: (t: TR, u: UR, v: VR, ...s: SR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter?: null,\n                progressFilter?: null): PromiseBase<ARD, AJD, AND,\n            BRD, BJD, BND,\n            CRD, CJD, CND,\n            RRD, RJD, RND>;\n\n        // #endregion\n\n        /**\n         * Add handlers to be called when the Deferred object is rejected.\n         * @param failFilter A function that is called when the Deferred is rejected.\n         * @see \\`{@link https://api.jquery.com/deferred.catch/ }\\`\n         * @since 3.0\n         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can rejection handlers using the .catch method.\n```javascript\n$.get( "test.php" )\n  .then( function() {\n    alert( "$.get succeeded" );\n  } )\n  .catch( function() {\n    alert( "$.get failed!" );\n  } );\n```\n         */\n        catch<ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never>(\n                failFilter?: ((t: TJ, u: UJ, v: VJ, ...s: SJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<ARF> | ARF) | null): PromiseBase<ARF, AJF, ANF,\n            BRF, BJF, BNF,\n            CRF, CJF, CNF,\n            RRF, RJF, RNF>;\n    }\n\n    /**\n     * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.\n     * @see \\`{@link https://api.jquery.com/Types/#Promise }\\`\n     */\n    interface Promise3<TR, TJ, TN,\n        UR, UJ, UN,\n        VR, VJ, VN> extends PromiseBase<TR, TJ, TN,\n        UR, UJ, UN,\n        VR, VJ, VN,\n        never, never, never> { }\n\n    /**\n     * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.\n     * @see \\`{@link https://api.jquery.com/Types/#Promise }\\`\n     */\n    interface Promise2<TR, TJ, TN,\n        UR, UJ, UN> extends PromiseBase<TR, TJ, TN,\n        UR, UJ, UN,\n        never, never, never,\n        never, never, never> { }\n\n    /**\n     * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.\n     * @see \\`{@link https://api.jquery.com/Types/#Promise }\\`\n     */\n    interface Promise<TR, TJ = any, TN = any> extends PromiseBase<TR, TJ, TN,\n        TR, TJ, TN,\n        TR, TJ, TN,\n        TR, TJ, TN> { }\n\n    interface DeferredStatic {\n        // https://jquery.com/upgrade-guide/3.0/#callback-exit\n        exceptionHook: any;\n        /**\n         * A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.\n         * @param beforeStart A function that is called just before the constructor returns.\n         * @see \\`{@link https://api.jquery.com/jQuery.Deferred/ }\\`\n         * @since 1.5\n         */\n        <TR = any, TJ = any, TN = any>(beforeStart?: (this: Deferred<TR, TJ, TN>, deferred: Deferred<TR, TJ, TN>) => void): Deferred<TR, TJ, TN>;\n    }\n\n    interface Deferred<TR, TJ = any, TN = any> {\n        /**\n         * Call the progressCallbacks on a Deferred object with the given args.\n         * @param args Optional arguments that are passed to the progressCallbacks.\n         * @see \\`{@link https://api.jquery.com/deferred.notify/ }\\`\n         * @since 1.7\n         */\n        notify(...args: TN[]): this;\n        /**\n         * Call the progressCallbacks on a Deferred object with the given context and args.\n         * @param context Context passed to the progressCallbacks as the this object.\n         * @param args An optional array of arguments that are passed to the progressCallbacks.\n         * @see \\`{@link https://api.jquery.com/deferred.notifyWith/ }\\`\n         * @since 1.7\n         */\n        notifyWith(context: object, args?: ArrayLike<TN>): this;\n        /**\n         * Reject a Deferred object and call any failCallbacks with the given args.\n         * @param args Optional arguments that are passed to the failCallbacks.\n         * @see \\`{@link https://api.jquery.com/deferred.reject/ }\\`\n         * @since 1.5\n         */\n        reject(...args: TJ[]): this;\n        /**\n         * Reject a Deferred object and call any failCallbacks with the given context and args.\n         * @param context Context passed to the failCallbacks as the this object.\n         * @param args An optional array of arguments that are passed to the failCallbacks.\n         * @see \\`{@link https://api.jquery.com/deferred.rejectWith/ }\\`\n         * @since 1.5\n         */\n        rejectWith(context: object, args?: ArrayLike<TJ>): this;\n        /**\n         * Resolve a Deferred object and call any doneCallbacks with the given args.\n         * @param args Optional arguments that are passed to the doneCallbacks.\n         * @see \\`{@link https://api.jquery.com/deferred.resolve/ }\\`\n         * @since 1.5\n         */\n        resolve(...args: TR[]): this;\n        /**\n         * Resolve a Deferred object and call any doneCallbacks with the given context and args.\n         * @param context Context passed to the doneCallbacks as the this object.\n         * @param args An optional array of arguments that are passed to the doneCallbacks.\n         * @see \\`{@link https://api.jquery.com/deferred.resolveWith/ }\\`\n         * @since 1.5\n         */\n        resolveWith(context: object, args?: ArrayLike<TR>): this;\n\n        /**\n         * Add handlers to be called when the Deferred object is either resolved or rejected.\n         * @param alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.\n         * @param alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.\n         * @see \\`{@link https://api.jquery.com/deferred.always/ }\\`\n         * @since 1.6\n         * @example ​ ````Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.\n```javascript\n$.get( "test.php" ).always(function() {\n  alert( "$.get completed with success or error callback arguments" );\n});\n```\n         */\n        always(alwaysCallback: TypeOrArray<Deferred.Callback<TR | TJ>>,\n               ...alwaysCallbacks: Array<TypeOrArray<Deferred.Callback<TR | TJ>>>): this;\n        /**\n         * Add handlers to be called when the Deferred object is resolved.\n         * @param doneCallback A function, or array of functions, that are called when the Deferred is resolved.\n         * @param doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.\n         * @see \\`{@link https://api.jquery.com/deferred.done/ }\\`\n         * @since 1.5\n         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.\n```javascript\n$.get( "test.php" ).done(function() {\n  alert( "$.get succeeded" );\n});\n```\n         * @example ​ ````Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>deferred.done demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Go</button>\n<p>Ready...</p>\n​\n<script>\n// 3 functions to call when the Deferred object is resolved\nfunction fn1() {\n  $( "p" ).append( " 1 " );\n}\nfunction fn2() {\n  $( "p" ).append( " 2 " );\n}\nfunction fn3( n ) {\n  $( "p" ).append( n + " 3 " + n );\n}\n​\n// Create a deferred object\nvar dfd = $.Deferred();\n​\n// Add handlers to be called when dfd is resolved\ndfd\n// .done() can take any number of functions or arrays of functions\n  .done( [ fn1, fn2 ], fn3, [ fn2, fn1 ] )\n// We can chain done methods, too\n  .done(function( n ) {\n    $( "p" ).append( n + " we\'re done." );\n  });\n​\n// Resolve the Deferred object when the button is clicked\n$( "button" ).on( "click", function() {\n  dfd.resolve( "and" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        done(doneCallback: TypeOrArray<Deferred.Callback<TR>>,\n             ...doneCallbacks: Array<TypeOrArray<Deferred.Callback<TR>>>): this;\n        /**\n         * Add handlers to be called when the Deferred object is rejected.\n         * @param failCallback A function, or array of functions, that are called when the Deferred is rejected.\n         * @param failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.\n         * @see \\`{@link https://api.jquery.com/deferred.fail/ }\\`\n         * @since 1.5\n         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.\n```javascript\n$.get( "test.php" )\n  .done(function() {\n    alert( "$.get succeeded" );\n  })\n  .fail(function() {\n    alert( "$.get failed!" );\n  });\n```\n         */\n        fail(failCallback: TypeOrArray<Deferred.Callback<TJ>>,\n             ...failCallbacks: Array<TypeOrArray<Deferred.Callback<TJ>>>): this;\n        /**\n         * Add handlers to be called when the Deferred object generates progress notifications.\n         * @param progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.\n         * @param progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates\n         *                          progress notifications.\n         * @see \\`{@link https://api.jquery.com/deferred.progress/ }\\`\n         * @since 1.7\n         */\n        progress(progressCallback: TypeOrArray<Deferred.Callback<TN>>,\n                 ...progressCallbacks: Array<TypeOrArray<Deferred.Callback<TN>>>): this;\n        /**\n         * Return a Deferred\'s Promise object.\n         * @param target Object onto which the promise methods have to be attached\n         * @see \\`{@link https://api.jquery.com/deferred.promise/ }\\`\n         * @since 1.5\n         * @example ​ ````Use the target argument to promote an existing object to a Promise:\n```javascript\n// Existing object\nvar obj = {\n    hello: function( name ) {\n      alert( "Hello " + name );\n    }\n  },\n  // Create a Deferred\n  defer = $.Deferred();\n​\n// Set object as a promise\ndefer.promise( obj );\n​\n// Resolve the deferred\ndefer.resolve( "John" );\n​\n// Use the object as a Promise\nobj.done(function( name ) {\n  obj.hello( name ); // Will alert "Hello John"\n}).hello( "Karl" ); // Will alert "Hello Karl"\n```\n         */\n        promise<TTarget extends object>(target: TTarget): Promise<TR, TJ, TN> & TTarget;\n        /**\n         * Return a Deferred\'s Promise object.\n         * @see \\`{@link https://api.jquery.com/deferred.promise/ }\\`\n         * @since 1.5\n         * @example ​ ````Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first &quot;wins&quot; and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds &quot;working...&quot; to the document body.\n```javascript\nfunction asyncEvent() {\n  var dfd = jQuery.Deferred();\n​\n  // Resolve after a random interval\n  setTimeout(function() {\n    dfd.resolve( "hurray" );\n  }, Math.floor( 400 + Math.random() * 2000 ) );\n​\n  // Reject after a random interval\n  setTimeout(function() {\n    dfd.reject( "sorry" );\n  }, Math.floor( 400 + Math.random() * 2000 ) );\n​\n  // Show a "working..." message every half-second\n  setTimeout(function working() {\n    if ( dfd.state() === "pending" ) {\n      dfd.notify( "working... " );\n      setTimeout( working, 500 );\n    }\n  }, 1 );\n​\n  // Return the Promise so caller can\'t change the Deferred\n  return dfd.promise();\n}\n​\n// Attach a done, fail, and progress handler for the asyncEvent\n$.when( asyncEvent() ).then(\n  function( status ) {\n    alert( status + ", things are going well" );\n  },\n  function( status ) {\n    alert( status + ", you fail this time" );\n  },\n  function( status ) {\n    $( "body" ).append( status );\n  }\n);\n```\n         */\n        promise(): Promise<TR, TJ, TN>;\n        /**\n         * Determine the current state of a Deferred object.\n         * @see \\`{@link https://api.jquery.com/deferred.state/ }\\`\n         * @since 1.7\n         */\n        state(): \'pending\' | \'resolved\' | \'rejected\';\n\n        // region pipe\n        // #region pipe\n\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter resolve value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {\n    return value * 2;\n  });\n​\ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( "Value is ( 2*5 = ) 10: " + value );\n});\n```\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<AJF> | AJF,\n                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,\n            BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,\n            CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,\n            RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: null,\n                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<AJF> | AJF,\n                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,\n            BRF | BRP, BJF | BJP, BNF | BNP,\n            CRF | CRP, CJF | CJP, CNF | CNP,\n            RRF | RRP, RJF | RJP, RNF | RNP>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter resolve value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {\n    return value * 2;\n  });\n​\ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( "Value is ( 2*5 = ) 10: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: null,\n                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,\n            BRD | BRP, BJD | BJP, BND | BNP,\n            CRD | CRP, CJD | CJP, CND | CNP,\n            RRD | RRP, RJD | RJP, RND | RNP>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: null,\n                failFilter: null,\n                progressFilter?: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,\n            BRP, BJP, BNP,\n            CRP, CJP, CNP,\n            RRP, RJP, RNP>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter resolve value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {\n    return value * 2;\n  });\n​\ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( "Value is ( 2*5 = ) 10: " + value );\n});\n```\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never>(\n                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<AJF> | AJF,\n                progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,\n            BRD | BRF, BJD | BJF, BND | BNF,\n            CRD | CRF, CJD | CJF, CND | CNF,\n            RRD | RRF, RJD | RJF, RND | RNF>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never>(\n                doneFilter: null,\n                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<AJF> | AJF,\n                progressFilter?: null): PromiseBase<ARF, AJF, ANF,\n            BRF, BJF, BNF,\n            CRF, CJF, CNF,\n            RRF, RJF, RNF>;\n        /**\n         * Utility method to filter and/or chain Deferreds.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.pipe/ }\\`\n         * @since 1.6\n         * @since 1.7\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link then }\\`.\n         *\n         * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.\n         *\n         * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren\'t relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.\n         * @example ​ ````Filter resolve value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {\n    return value * 2;\n  });\n​\ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( "Value is ( 2*5 = ) 10: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        pipe<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never>(\n                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter?: null,\n                progressFilter?: null): PromiseBase<ARD, AJD, AND,\n            BRD, BJD, BND,\n            CRD, CJD, CND,\n            RRD, RJD, RND>;\n\n        // #endregion\n\n        // region then\n        // #region then\n\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter A function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.\n```javascript\n$.get( "test.php" ).then(\n  function() {\n    alert( "$.get succeeded" );\n  }, function() {\n    alert( "$.get failed!" );\n  }\n);\n```\n         * @example ​ ````Filter the resolve value:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>deferred.then demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Filter Resolve</button>\n<p></p>\n​\n<script>\nvar filterResolve = function() {\n  var defer = $.Deferred(),\n    filtered = defer.then(function( value ) {\n      return value * 2;\n    });\n​\n  defer.resolve( 5 );\n  filtered.done(function( value ) {\n    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );\n  });\n};\n​\n$( "button" ).on( "click", filterResolve );\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.then( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<ARF> | ARF,\n                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARF | ARP, AJD | AJF | AJP, AND | ANF | ANP,\n            BRD | BRF | BRP, BJD | BJF | BJP, BND | BNF | BNP,\n            CRD | CRF | CRP, CJD | CJF | CJP, CND | CNF | CNP,\n            RRD | RRF | RRP, RJD | RJF | RJP, RND | RNF | RNP>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter A function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.then( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: null,\n                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<ARF> | ARF,\n                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARF | ARP, AJF | AJP, ANF | ANP,\n            BRF | BRP, BJF | BJP, BNF | BNP,\n            CRF | CRP, CJF | CJP, CNF | CNP,\n            RRF | RRP, RJF | RJP, RNF | RNP>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter A function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Filter the resolve value:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>deferred.then demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Filter Resolve</button>\n<p></p>\n​\n<script>\nvar filterResolve = function() {\n  var defer = $.Deferred(),\n    filtered = defer.then(function( value ) {\n      return value * 2;\n    });\n​\n  defer.resolve( 5 );\n  filtered.done(function( value ) {\n    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );\n  });\n};\n​\n$( "button" ).on( "click", filterResolve );\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: null,\n                progressFilter: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARD | ARP, AJD | AJP, AND | ANP,\n            BRD | BRP, BJD | BJP, BND | BNP,\n            CRD | CRP, CJD | CJP, CND | CNP,\n            RRD | RRP, RJD | RJP, RND | RNP>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter A function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARP = never, AJP = never, ANP = never,\n            BRP = never, BJP = never, BNP = never,\n            CRP = never, CJP = never, CNP = never,\n            RRP = never, RJP = never, RNP = never>(\n                doneFilter: null,\n                failFilter: null,\n                progressFilter?: (...t: TN[]) => PromiseBase<ARP, AJP, ANP,\n                    BRP, BJP, BNP,\n                    CRP, CJP, CNP,\n                    RRP, RJP, RNP> | Thenable<ANP> | ANP): PromiseBase<ARP, AJP, ANP,\n            BRP, BJP, BNP,\n            CRP, CJP, CNP,\n            RRP, RJP, RNP>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.\n```javascript\n$.get( "test.php" ).then(\n  function() {\n    alert( "$.get succeeded" );\n  }, function() {\n    alert( "$.get failed!" );\n  }\n);\n```\n         * @example ​ ````Filter the resolve value:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>deferred.then demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Filter Resolve</button>\n<p></p>\n​\n<script>\nvar filterResolve = function() {\n  var defer = $.Deferred(),\n    filtered = defer.then(function( value ) {\n      return value * 2;\n    });\n​\n  defer.resolve( 5 );\n  filtered.done(function( value ) {\n    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );\n  });\n};\n​\n$( "button" ).on( "click", filterResolve );\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.then( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never,\n            ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never>(\n                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<ARF> | ARF,\n                progressFilter?: null): PromiseBase<ARD | ARF, AJD | AJF, AND | ANF,\n            BRD | BRF, BJD | BJF, BND | BNF,\n            CRD | CRF, CJD | CJF, CND | CNF,\n            RRD | RRF, RJD | RJF, RND | RNF>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Filter reject value:\n```javascript\nvar defer = $.Deferred(),\n  filtered = defer.then( null, function( value ) {\n    return value * 3;\n  });\n​\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( "Value is ( 3*6 = ) 18: " + value );\n});\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never>(\n                doneFilter: null,\n                failFilter: (...t: TJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<ARF> | ARF,\n                progressFilter?: null): PromiseBase<ARF, AJF, ANF,\n            BRF, BJF, BNF,\n            CRF, CJF, CNF,\n            RRF, RJF, RNF>;\n        /**\n         * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n         * @param doneFilter An optional function that is called when the Deferred is resolved.\n         * @param failFilter An optional function that is called when the Deferred is rejected.\n         * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n         * @see \\`{@link https://api.jquery.com/deferred.then/ }\\`\n         * @since 1.8\n         * @example ​ ````Filter the resolve value:\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>deferred.then demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>Filter Resolve</button>\n<p></p>\n​\n<script>\nvar filterResolve = function() {\n  var defer = $.Deferred(),\n    filtered = defer.then(function( value ) {\n      return value * 2;\n    });\n​\n  defer.resolve( 5 );\n  filtered.done(function( value ) {\n    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );\n  });\n};\n​\n$( "button" ).on( "click", filterResolve );\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Chain tasks:\n```javascript\nvar request = $.ajax( url, { dataType: "json" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n​\nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});\n```\n         */\n        then<ARD = never, AJD = never, AND = never,\n            BRD = never, BJD = never, BND = never,\n            CRD = never, CJD = never, CND = never,\n            RRD = never, RJD = never, RND = never>(\n                doneFilter: (...t: TR[]) => PromiseBase<ARD, AJD, AND,\n                    BRD, BJD, BND,\n                    CRD, CJD, CND,\n                    RRD, RJD, RND> | Thenable<ARD> | ARD,\n                failFilter?: null,\n                progressFilter?: null): PromiseBase<ARD, AJD, AND,\n            BRD, BJD, BND,\n            CRD, CJD, CND,\n            RRD, RJD, RND>;\n\n        // #endregion\n\n        /**\n         * Add handlers to be called when the Deferred object is rejected.\n         * @param failFilter A function that is called when the Deferred is rejected.\n         * @see \\`{@link https://api.jquery.com/deferred.catch/ }\\`\n         * @since 3.0\n         * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can rejection handlers using the .catch method.\n```javascript\n$.get( "test.php" )\n  .then( function() {\n    alert( "$.get succeeded" );\n  } )\n  .catch( function() {\n    alert( "$.get failed!" );\n  } );\n```\n         */\n        catch<ARF = never, AJF = never, ANF = never,\n            BRF = never, BJF = never, BNF = never,\n            CRF = never, CJF = never, CNF = never,\n            RRF = never, RJF = never, RNF = never>(\n                failFilter?: ((...t: TJ[]) => PromiseBase<ARF, AJF, ANF,\n                    BRF, BJF, BNF,\n                    CRF, CJF, CNF,\n                    RRF, RJF, RNF> | Thenable<ARF> | ARF) | null): PromiseBase<ARF, AJF, ANF,\n            BRF, BJF, BNF,\n            CRF, CJF, CNF,\n            RRF, RJF, RNF>;\n    }\n\n    namespace Deferred {\n        type CallbackBase<T, U, V, R> = (t: T, u: U, v: V, ...r: R[]) => void;\n\n        interface Callback3<T, U, V> extends CallbackBase<T, U, V, never> { }\n\n        type Callback<T> = (...args: T[]) => void;\n\n        /**\n         * @deprecated ​ Deprecated. Use \\`{@link Callback }\\`.\n         */\n        interface DoneCallback<TResolve> extends Callback<TResolve> { }\n\n        /**\n         * @deprecated ​ Deprecated. Use \\`{@link Callback }\\`.\n         */\n        interface FailCallback<TReject> extends Callback<TReject> { }\n\n        /**\n         * @deprecated ​ Deprecated. Use \\`{@link Callback }\\`.\n         */\n        interface AlwaysCallback<TResolve, TReject> extends Callback<TResolve | TReject> { }\n\n        /**\n         * @deprecated ​ Deprecated. Use \\`{@link Callback }\\`.\n         */\n        interface ProgressCallback<TNotify> extends Callback<TNotify> { }\n    }\n\n    // #endregion\n\n    // region Effects\n    // #region Effects\n\n    type Duration = number | \'fast\' | \'slow\';\n\n    /**\n     * @see \\`{@link https://api.jquery.com/animate/#animate-properties-options }\\`\n     */\n    interface EffectsOptions<TElement> extends PlainObject {\n        /**\n         * A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).\n         */\n        always?(this: TElement, animation: Animation<TElement>, jumpedToEnd: boolean): void;\n        /**\n         * A function that is called once the animation on an element is complete.\n         */\n        complete?(this: TElement): void;\n        /**\n         * A function to be called when the animation on an element completes (its Promise object is resolved).\n         */\n        done?(this: TElement, animation: Animation<TElement>, jumpedToEnd: boolean): void;\n        /**\n         * A string or number determining how long the animation will run.\n         */\n        duration?: Duration | undefined;\n        /**\n         * A string indicating which easing function to use for the transition.\n         */\n        easing?: string | undefined;\n        /**\n         * A function to be called when the animation on an element fails to complete (its Promise object is rejected).\n         */\n        fail?(this: TElement, animation: Animation<TElement>, jumpedToEnd: boolean): void;\n        /**\n         * A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.\n         */\n        progress?(this: TElement, animation: Animation<TElement>, progress: number, remainingMs: number): void;\n        /**\n         * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. As of jQuery 1.7, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call .dequeue("queuename") to start it.\n         */\n        queue?: boolean | string | undefined;\n        /**\n         * An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.\n         */\n        specialEasing?: PlainObject<string> | undefined;\n        /**\n         * A function to call when the animation on an element begins.\n         */\n        start?(this: TElement, animation: Animation<TElement>): void;\n        /**\n         * A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.\n         */\n        step?(this: TElement, now: number, tween: Tween<TElement>): void;\n    }\n\n    // region Animation\n    // #region Animation\n\n    /**\n     * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n     * @since 1.8\n     */\n    interface AnimationStatic {\n        /**\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        <TElement>(element: TElement, props: PlainObject, opts: EffectsOptions<TElement>): Animation<TElement>;\n        /**\n         * During the initial setup, `jQuery.Animation` will call any callbacks that have been registered through `jQuery.Animation.prefilter( function( element, props, opts ) )`.\n         * @param callback The prefilter will have `this` set to an animation object, and you can modify any of the `props` or\n         *                 `opts` however you need. The prefilter _may_ return its own promise which also implements `stop()`,\n         *                 in which case, processing of prefilters stops. If the prefilter is not trying to override the animation\n         *                 entirely, it should return `undefined` or some other falsy value.\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#prefilters }\\`\n         * @since 1.8\n         */\n        prefilter<TElement>(\n            callback: (this: Animation<TElement>, element: TElement, props: PlainObject, opts: EffectsOptions<TElement>) => Animation<TElement> | _Falsy | void,\n            prepend?: boolean\n        ): void;\n        /**\n         * A "Tweener" is a function responsible for creating a tween object, and you might want to override these if you want to implement complex values ( like a clip/transform array matrix ) in a single property.\n         *\n         * You can override the default process for creating a tween in order to provide your own tween object by using `jQuery.Animation.tweener( props, callback( prop, value ) )`.\n         * @param props A space separated list of properties to be passed to your tweener, or `"*"` if it should be called\n         *              for all properties.\n         * @param callback The callback will be called with `this` being an `Animation` object. The tweener function will\n         *                 generally start with `var tween = this.createTween( prop, value );`, but doesn\'t nessecarily need to\n         *                 use the `jQuery.Tween()` factory.\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweeners }\\`\n         * @since 1.8\n         */\n        tweener(props: string, callback: Tweener<any>): void;\n    }\n\n    /**\n     * The promise will be resolved when the animation reaches its end, and rejected when terminated early. The context of callbacks attached to the promise will be the element, and the arguments will be the `Animation` object and a boolean `jumpedToEnd` which when true means the animation was stopped with `gotoEnd`, when `undefined` the animation completed naturally.\n     * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n     * @since 1.8\n     */\n    interface Animation<TElement> extends Promise3<\n        Animation<TElement>, Animation<TElement>, Animation<TElement>,\n        true | undefined, false, number,\n        never, never, number\n    > {\n        /**\n         * The duration specified in ms\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        duration: number;\n        /**\n         * The element being animatied\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        elem: TElement;\n        /**\n         * The final value of each property animating\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        props: PlainObject;\n        /**\n         * The animation options\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        opts: EffectsOptions<TElement>;\n        /**\n         * The original properties before being filtered\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        originalProps: PlainObject;\n        /**\n         * The original options before being filtered\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        originalOpts: EffectsOptions<TElement>;\n        /**\n         * The numeric value of `new Date()` when the animation began\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        startTime: number;\n        /**\n         * The animations tweens.\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        tweens: Array<Tween<TElement>>;\n        /**\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        createTween(propName: string, finalValue: number): Tween<TElement>;\n        /**\n         * Stops the animation early, optionally going to the end.\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\\`\n         * @since 1.8\n         */\n        stop(gotoEnd: boolean): this;\n    }\n\n    /**\n     * A "Tweener" is a function responsible for creating a tween object, and you might want to override these if you want to implement complex values ( like a clip/transform array matrix ) in a single property.\n     * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweeners }\\`\n     * @since 1.8\n     */\n    type Tweener<TElement> = (this: Animation<TElement>, propName: string, finalValue: number) => Tween<TElement>;\n\n    /**\n     * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n     * @since 1.8\n     */\n    interface TweenStatic {\n        /**\n         * `jQuery.Tween.propHooks[ prop ]` is a hook point that replaces `jQuery.fx.step[ prop ]` (which is being deprecated.) These hooks are used by the tween to get and set values on elements.\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\\`\n         * @since 1.8\n         * @example\n```javascript\njQuery.Tween.propHooks[ property ] = {\n    get: function( tween ) {\n         // get tween.prop from tween.elem and return it\n    },\n    set: function( tween ) {\n         // set tween.prop on tween.elem to tween.now + tween.unit\n    }\n}\n```\n         */\n        propHooks: PropHooks;\n        /**\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        <TElement>(elem: TElement, options: EffectsOptions<TElement>, prop: string, end: number, easing?: string, unit?: string): Tween<TElement>;\n    }\n\n    /**\n     * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n     * @since 1.8\n     */\n    // This should be a class but doesn\'t work correctly under the JQuery namespace. Tween should be an inner class of jQuery.\n    interface Tween<TElement> {\n        /**\n         * The easing used\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        easing: string;\n        /**\n         * The element being animated\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        elem: TElement;\n        /**\n         * The ending value of the tween\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        end: number;\n        /**\n         * The current value of the tween\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        now: number;\n        /**\n         * A reference to the animation options\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        options: EffectsOptions<TElement>;\n        // Undocumented. Is this intended to be public?\n        pos?: number | undefined;\n        /**\n         * The property being animated\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        prop: string;\n        /**\n         * The starting value of the tween\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        start: number;\n        /**\n         * The CSS unit for the tween\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        unit: string;\n        /**\n         * Reads the current value for property from the element\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        cur(): any;\n        /**\n         * Updates the value for the property on the animated elemd.\n         * @param progress A number from 0 to 1.\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\\`\n         * @since 1.8\n         */\n        run(progress: number): this;\n    }\n\n    /**\n     * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\\`\n     * @since 1.8\n     */\n    // Workaround for TypeScript 2.3 which does not have support for weak types handling.\n    type PropHook<TElement> = {\n        /**\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\\`\n         * @since 1.8\n         */\n        get(tween: Tween<TElement>): any;\n    } | {\n        /**\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\\`\n         * @since 1.8\n         */\n        set(tween: Tween<TElement>): void;\n    } | {\n        [key: string]: never;\n    };\n\n    /**\n     * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\\`\n     * @since 1.8\n     */\n    interface PropHooks {\n        [property: string]: PropHook<Node>;\n    }\n\n    // #endregion\n\n    // region Easing\n    // #region Easing\n\n    type EasingMethod = (percent: number) => number;\n\n    interface Easings {\n        [name: string]: EasingMethod;\n    }\n\n    // #endregion\n\n    // region Effects (fx)\n    // #region Effects (fx)\n\n    interface Effects {\n        /**\n         * The rate (in milliseconds) at which animations fire.\n         * @see \\`{@link https://api.jquery.com/jQuery.fx.interval/ }\\`\n         * @since 1.4.3\n         * @deprecated ​ Deprecated since 3.0. See \\`{@link https://api.jquery.com/jQuery.fx.interval/ }\\`.\n         *\n         * **Cause**: As of jQuery 3.0 the `jQuery.fx.interval` property can be used to change the animation interval only on browsers that do not support the `window.requestAnimationFrame()` method. That is currently only Internet Explorer 9 and the Android Browser. Once support is dropped for these browsers, the property will serve no purpose and it will be removed.\n         *\n         * **Solution**: Find and remove code that changes or uses `jQuery.fx.interval`. If the value is being used by code in your page or a plugin, the code may be making assumptions that are no longer valid. The default value of `jQuery.fx.interval` is `13` (milliseconds), which could be used instead of accessing this property.\n         * @example ​ ````Cause all animations to run with less frames.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.fx.interval demo</title>\n  <style>\n  div {\n    width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: green;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p><input type="button" value="Run"></p>\n<div></div>\n​\n<script>\njQuery.fx.interval = 100;\n$( "input" ).click(function() {\n  $( "div" ).toggle( 3000 );\n});\n<\/script>\n</body>\n</html>\n```\n        */\n        interval: number;\n        /**\n         * Globally disable all animations.\n         * @see \\`{@link https://api.jquery.com/jQuery.fx.off/ }\\`\n         * @since 1.3\n         * @example ​ ````Toggle animation on and off\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>jQuery.fx.off demo</title>\n  <style>\n  div {\n    width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: green;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input type="button" value="Run">\n<button>Toggle fx</button>\n<div></div>\n​\n<script>\nvar toggleFx = function() {\n  $.fx.off = !$.fx.off;\n};\ntoggleFx();\n$( "button" ).click( toggleFx );\n$( "input" ).click(function() {\n  $( "div" ).toggle( "slow" );\n});\n<\/script>\n</body>\n</html>\n```\n        */\n        off: boolean;\n        /**\n         * @deprecated ​ Deprecated since 1.8. Use \\`{@link Tween.propHooks jQuery.Tween.propHooks}\\`.\n         *\n         * `jQuery.fx.step` functions are being replaced by `jQuery.Tween.propHooks` and may eventually be removed, but are still supported via the default tween propHook.\n         */\n        step: PlainObject<AnimationHook<Node>>;\n        /**\n         * _overridable_ Clears up the `setInterval`\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#plugging-in-a-different-timer-loop }\\`\n         * @since 1.8\n         */\n        stop(): void;\n        /**\n         * Calls `.run()` on each object in the `jQuery.timers` array, removing it from the array if `.run()` returns a falsy value. Calls `jQuery.fx.stop()` whenever there are no timers remaining.\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#plugging-in-a-different-timer-loop }\\`\n         * @since 1.8\n         */\n        tick(): void;\n        /**\n         * _overridable_ Creates a `setInterval` if one doesn\'t already exist, and pushes `tickFunction` to the `jQuery.timers` array. `tickFunction` should also have `anim`, `elem`, and `queue` properties that reference the animation object, animated element, and queue option to facilitate `jQuery.fn.stop()`\n         *\n         * By overriding `fx.timer` and `fx.stop` you should be able to implement any animation tick behaviour you desire. (like using `requestAnimationFrame` instead of `setTimeout`.)\n         *\n         * There is an example of overriding the timer loop in \\`{@link https://github.com/gnarf37/jquery-requestAnimationFrame jquery.requestAnimationFrame}\\`\n         * @see \\`{@link https://gist.github.com/gnarf/54829d408993526fe475#plugging-in-a-different-timer-loop }\\`\n         * @since 1.8\n         */\n        timer(tickFunction: TickFunction<any>): void;\n    }\n\n    /**\n     * @deprecated ​ Deprecated since 1.8. Use \\`{@link Tween.propHooks jQuery.Tween.propHooks}\\`.\n     *\n     * `jQuery.fx.step` functions are being replaced by `jQuery.Tween.propHooks` and may eventually be removed, but are still supported via the default tween propHook.\n     */\n    type AnimationHook<TElement> = (fx: Tween<TElement>) => void;\n\n    interface TickFunction<TElement> {\n        anim: Animation<TElement>;\n        elem: TElement;\n        queue: boolean | string;\n        (): any;\n    }\n\n    // #endregion\n\n    // region Queue\n    // #region Queue\n\n    // TODO: Is the first element always a string or is that specific to the \'fx\' queue?\n    type Queue<TElement> = { 0: string; } & Array<QueueFunction<TElement>>;\n\n    type QueueFunction<TElement> = (this: TElement, next: () => void) => void;\n\n    // #endregion\n\n    // region Speed\n    // #region Speed\n\n    // Workaround for TypeScript 2.3 which does not have support for weak types handling.\n    type SpeedSettings<TElement> = {\n        /**\n         * A string or number determining how long the animation will run.\n         */\n        duration: Duration;\n    } | {\n        /**\n         * A string indicating which easing function to use for the transition.\n         */\n        easing: string;\n    } | {\n        /**\n         * A function to call once the animation is complete.\n         */\n        complete(this: TElement): void;\n    } | {\n        [key: string]: never;\n    };\n\n    // #endregion\n\n    // #endregion\n\n    // region Events\n    // #region Events\n\n    // region Event\n    // #region Event\n\n    // This should be a class but doesn\'t work correctly under the JQuery namespace. Event should be an inner class of jQuery.\n\n    /**\n     * jQuery\'s event system normalizes the event object according to W3C standards. The event object is guaranteed to be passed to the event handler (no checks for window.event required). It normalizes the target, relatedTarget, which, metaKey and pageX/Y properties and provides both stopPropagation() and preventDefault() methods.\n     *\n     * Those properties are all documented, and accompanied by examples, on the \\`{@link http://api.jquery.com/category/events/event-object/ Event object}\\` page.\n     *\n     * The standard events in the Document Object Model are: `blur`, `focus`, `load`, `resize`, `scroll`, `unload`, `beforeunload`, `click`, `dblclick`, `mousedown`, `mouseup`, `mousemove`, `mouseover`, `mouseout`, `mouseenter`, `mouseleave`, `change`, `select`, `submit`, `keydown`, `keypress`, and `keyup`. Since the DOM event names have predefined meanings for some elements, using them for other purposes is not recommended. jQuery\'s event model can trigger an event by any name on an element, and it is propagated up the DOM tree to which that element belongs, if any.\n     * @see \\`{@link https://api.jquery.com/category/events/event-object/ }\\`\n     */\n    interface EventStatic {\n        /**\n         * The jQuery.Event constructor is exposed and can be used when calling trigger. The new operator is optional.\n         *\n         * Check \\`{@link https://api.jquery.com/trigger/ trigger}\\`\'s documentation to see how to combine it with your own event object.\n         * @see \\`{@link https://api.jquery.com/category/events/event-object/ }\\`\n         * @since 1.6\n         * @example\n```javascript\n//Create a new jQuery.Event object without the "new" operator.\nvar e = jQuery.Event( "click" );\n​\n// trigger an artificial click event\njQuery( "body" ).trigger( e );\n```\n         * @example\n```javascript\n// Create a new jQuery.Event object with specified event properties.\nvar e = jQuery.Event( "keydown", { keyCode: 64 } );\n​\n// trigger an artificial keydown event with keyCode 64\njQuery( "body" ).trigger( e );\n```\n         */\n        <T extends object>(event: string, properties?: T): Event & T;\n        /**\n         * The jQuery.Event constructor is exposed and can be used when calling trigger. The new operator is optional.\n         *\n         * Check \\`{@link https://api.jquery.com/trigger/ trigger}\\`\'s documentation to see how to combine it with your own event object.\n         * @see \\`{@link https://api.jquery.com/category/events/event-object/ }\\`\n         * @since 1.6\n         * @example\n```javascript\n//Create a new jQuery.Event object without the "new" operator.\nvar e = jQuery.Event( "click" );\n​\n// trigger an artificial click event\njQuery( "body" ).trigger( e );\n```\n         * @example\n```javascript\n// Create a new jQuery.Event object with specified event properties.\nvar e = jQuery.Event( "keydown", { keyCode: 64 } );\n​\n// trigger an artificial keydown event with keyCode 64\njQuery( "body" ).trigger( e );\n```\n         */\n        new <T extends object>(event: string, properties?: T): Event & T;\n    }\n\n    /**\n     * jQuery\'s event system normalizes the event object according to W3C standards. The event object is guaranteed to be passed to the event handler (no checks for window.event required). It normalizes the target, relatedTarget, which, metaKey and pageX/Y properties and provides both stopPropagation() and preventDefault() methods.\n     *\n     * Those properties are all documented, and accompanied by examples, on the \\`{@link http://api.jquery.com/category/events/event-object/ Event object}\\` page.\n     *\n     * The standard events in the Document Object Model are: `blur`, `focus`, `load`, `resize`, `scroll`, `unload`, `beforeunload`, `click`, `dblclick`, `mousedown`, `mouseup`, `mousemove`, `mouseover`, `mouseout`, `mouseenter`, `mouseleave`, `change`, `select`, `submit`, `keydown`, `keypress`, and `keyup`. Since the DOM event names have predefined meanings for some elements, using them for other purposes is not recommended. jQuery\'s event model can trigger an event by any name on an element, and it is propagated up the DOM tree to which that element belongs, if any.\n     * @see \\`{@link https://api.jquery.com/category/events/event-object/ }\\`\n     * @see \\`{@link TriggeredEvent }\\`\n     */\n    interface Event {\n        // region Copied properties\n        // #region Copied properties\n\n        // Event\n\n        bubbles: boolean | undefined;\n        cancelable: boolean | undefined;\n        eventPhase: number | undefined;\n\n        // UIEvent\n\n        detail: number | undefined;\n        view: Window | undefined;\n\n        // MouseEvent\n\n        button: number | undefined;\n        buttons: number | undefined;\n        clientX: number | undefined;\n        clientY: number | undefined;\n        offsetX: number | undefined;\n        offsetY: number | undefined;\n        /**\n         * The mouse position relative to the left edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageX/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageX demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageX: number | undefined;\n        /**\n         * The mouse position relative to the top edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageY/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageY demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageY: number | undefined;\n        screenX: number | undefined;\n        screenY: number | undefined;\n        /** @deprecated */\n        toElement: Element | undefined;\n\n        // PointerEvent\n\n        pointerId: number | undefined;\n        pointerType: string | undefined;\n\n        // KeyboardEvent\n\n        /** @deprecated */\n        char: string | undefined;\n        /** @deprecated */\n        charCode: number | undefined;\n        key: string | undefined;\n        /** @deprecated */\n        keyCode: number | undefined;\n\n        // TouchEvent\n\n        changedTouches: TouchList | undefined;\n        targetTouches: TouchList | undefined;\n        touches: TouchList | undefined;\n\n        // MouseEvent, KeyboardEvent\n\n        /**\n         * For key or mouse events, this property indicates the specific key or button that was pressed.\n         * @see \\`{@link https://api.jquery.com/event.which/ }\\`\n         * @since 1.1.3\n         * @example ​ ````Log which key was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="type something">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "keydown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Log which mouse button was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="click here">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "mousedown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        which: number | undefined;\n\n        // MouseEvent, KeyboardEvent, TouchEvent\n\n        altKey: boolean | undefined;\n        ctrlKey: boolean | undefined;\n        /**\n         * Indicates whether the META key was pressed when the event fired.\n         * @see \\`{@link https://api.jquery.com/event.metaKey/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Determine whether the META key was pressed when the event fired.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.metaKey demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button value="Test" name="Test" id="checkMetaKey">Click me!</button>\n<div id="display"></div>\n​\n<script>\n$( "#checkMetaKey" ).click(function( event ) {\n  $( "#display" ).text( event.metaKey );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        metaKey: boolean | undefined;\n        shiftKey: boolean | undefined;\n\n        // #endregion\n\n        /**\n         * The difference in milliseconds between the time the browser created the event and January 1, 1970.\n         * @see \\`{@link https://api.jquery.com/event.timeStamp/ }\\`\n         * @since 1.2.6\n         * @example ​ ````Display the time since the click handler last executed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.timeStamp demo</title>\n  <style>\n  div {\n    height: 100px;\n    width: 300px;\n    margin: 10px;\n    background-color: #ffd;\n    overflow: auto;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div>Click.</div>\n​\n<script>\nvar last, diff;\n$( "div" ).click(function( event ) {\n  if ( last ) {\n    diff = event.timeStamp - last;\n    $( "div" ).append( "time since last event: " + diff + "<br>" );\n  } else {\n    $( "div" ).append( "Click again.<br>" );\n  }\n  last = event.timeStamp;\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        timeStamp: number;\n        /**\n         * Describes the nature of the event.\n         * @see \\`{@link https://api.jquery.com/event.type/ }\\`\n         * @since 1.0\n         * @example ​ ````On all anchor clicks, alert the event type.\n```javascript\n$( "a" ).click(function( event ) {\n  alert( event.type ); // "click"\n});\n```\n         */\n        type: string;\n        /**\n         * Returns whether event.preventDefault() was ever called on this event object.\n         * @see \\`{@link https://api.jquery.com/event.isDefaultPrevented/ }\\`\n         * @since 1.3\n         * @example ​ ````Checks whether event.preventDefault() was called.\n```javascript\n$( "a" ).click(function( event ) {\n  alert( event.isDefaultPrevented() ); // false\n  event.preventDefault();\n  alert( event.isDefaultPrevented() ); // true\n});\n```\n         */\n        isDefaultPrevented(): boolean;\n        /**\n         * Returns whether event.stopImmediatePropagation() was ever called on this event object.\n         * @see \\`{@link https://api.jquery.com/event.isImmediatePropagationStopped/ }\\`\n         * @since 1.3\n         * @example ​ ````Checks whether event.stopImmediatePropagation() was called.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.isImmediatePropagationStopped demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>click me</button>\n<div id="stop-log"></div>\n  ​\n<script>\nfunction immediatePropStopped( event ) {\n  var msg = "";\n  if ( event.isImmediatePropagationStopped() ) {\n    msg = "called";\n  } else {\n    msg = "not called";\n  }\n  $( "#stop-log" ).append( "<div>" + msg + "</div>" );\n}\n​\n$( "button" ).click(function( event ) {\n  immediatePropStopped( event );\n  event.stopImmediatePropagation();\n  immediatePropStopped( event );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        isImmediatePropagationStopped(): boolean;\n        /**\n         * Returns whether event.stopPropagation() was ever called on this event object.\n         * @see \\`{@link https://api.jquery.com/event.isPropagationStopped/ }\\`\n         * @since 1.3\n         * @example ​ ````Checks whether event.stopPropagation() was called\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.isPropagationStopped demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>click me</button>\n<div id="stop-log"></div>\n  ​\n<script>\nfunction propStopped( event ) {\n  var msg = "";\n  if ( event.isPropagationStopped() ) {\n    msg = "called";\n  } else {\n    msg = "not called";\n  }\n  $( "#stop-log" ).append( "<div>" + msg + "</div>" );\n}\n​\n$( "button" ).click(function(event) {\n  propStopped( event );\n  event.stopPropagation();\n  propStopped( event );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        isPropagationStopped(): boolean;\n        /**\n         * If this method is called, the default action of the event will not be triggered.\n         * @see \\`{@link https://api.jquery.com/event.preventDefault/ }\\`\n         * @since 1.0\n         * @example ​ ````Cancel the default action (navigation) of the click.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.preventDefault demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<a href="https://jquery.com">default click action is prevented</a>\n<div id="log"></div>\n​\n<script>\n$( "a" ).click(function( event ) {\n  event.preventDefault();\n  $( "<div>" )\n    .append( "default " + event.type + " prevented" )\n    .appendTo( "#log" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        preventDefault(): void;\n        /**\n         * Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.\n         * @see \\`{@link https://api.jquery.com/event.stopImmediatePropagation/ }\\`\n         * @since 1.3\n         * @example ​ ````Prevents other event handlers from being called.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.stopImmediatePropagation demo</title>\n  <style>\n  p {\n    height: 30px;\n    width: 150px;\n    background-color: #ccf;\n  }\n  div {\n    height: 30px;\n    width: 150px;\n    background-color: #cfc;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<p>paragraph</p>\n<div>division</div>\n​\n<script>\n$( "p" ).click(function( event ) {\n  event.stopImmediatePropagation();\n});\n$( "p" ).click(function( event ) {\n  // This function won\'t be executed\n  $( this ).css( "background-color", "#f00" );\n});\n$( "div" ).click(function( event ) {\n  // This function will be executed\n  $( this ).css( "background-color", "#f00" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        stopImmediatePropagation(): void;\n        /**\n         * Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.\n         * @see \\`{@link https://api.jquery.com/event.stopPropagation/ }\\`\n         * @since 1.0\n         * @example ​ ````Kill the bubbling on the click event.\n```javascript\n$( "p" ).click(function( event ) {\n  event.stopPropagation();\n  // Do something\n});\n```\n         */\n        stopPropagation(): void;\n    }\n\n    // #endregion\n\n    /**\n     * Base type for jQuery events that have been triggered (including events triggered on plain objects).\n     */\n    interface TriggeredEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends Event {\n        /**\n         * The current DOM element within the event bubbling phase.\n         * @see \\`{@link https://api.jquery.com/event.currentTarget/ }\\`\n         * @since 1.3\n         * @example ​ ````Alert that currentTarget matches the `this` keyword.\n```javascript\n$( "p" ).click(function( event ) {\n  alert( event.currentTarget === this ); // true\n});\n```\n        */\n        currentTarget: TCurrentTarget;\n        /**\n         * The element where the currently-called jQuery event handler was attached.\n         * @see \\`{@link https://api.jquery.com/event.delegateTarget/ }\\`\n         * @since 1.7\n         * @example ​ ````When a button in any box class is clicked, change the box&#39;s background color to red.\n```javascript\n$( ".box" ).on( "click", "button", function( event ) {\n  $( event.delegateTarget ).css( "background-color", "red" );\n});\n```\n        */\n        delegateTarget: TDelegateTarget;\n        /**\n         * The DOM element that initiated the event.\n         * @see \\`{@link https://api.jquery.com/event.target/ }\\`\n         * @since 1.0\n         * @example ​ ````Display the tag&#39;s name on click\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.target demo</title>\n  <style>\n  span, strong, p {\n    padding: 8px;\n    display: block;\n    border: 1px solid #999;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n<div>\n  <p>\n    <strong><span>click</span></strong>\n  </p>\n</div>\n​\n<script>\n$( "body" ).click(function( event ) {\n  $( "#log" ).html( "clicked: " + event.target.nodeName );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Implements a simple event delegation: The click handler is added to an unordered list, and the children of its li children are hidden. Clicking one of the li children toggles (see toggle()) their children.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.target demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<ul>\n  <li>item 1\n    <ul>\n      <li>sub item 1-a</li>\n      <li>sub item 1-b</li>\n    </ul>\n  </li>\n  <li>item 2\n    <ul>\n      <li>sub item 2-a</li>\n      <li>sub item 2-b</li>\n    </ul>\n  </li>\n</ul>\n​\n<script>\nfunction handler( event ) {\n  var target = $( event.target );\n  if ( target.is( "li" ) ) {\n    target.children().toggle();\n  }\n}\n$( "ul" ).click( handler ).find( "ul" ).hide();\n<\/script>\n​\n</body>\n</html>\n```\n        */\n        target: TTarget;\n\n        /**\n         * An optional object of data passed to an event method when the current executing handler is bound.\n         * @see \\`{@link https://api.jquery.com/event.data/ }\\`\n         * @since 1.1\n         * @example ​ ````Within a for loop, pass the value of i to the .on() method so that the current iteration&#39;s value is preserved.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.data demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button> 0 </button>\n<button> 1 </button>\n<button> 2 </button>\n<button> 3 </button>\n<button> 4 </button>\n​\n<div id="log"></div>\n​\n<script>\nvar logDiv = $( "#log" );\n​\nfor ( var i = 0; i < 5; i++ ) {\n  $( "button" ).eq( i ).on( "click", { value: i }, function( event ) {\n    var msgs = [\n      "button = " + $( this ).index(),\n      "event.data.value = " + event.data.value,\n      "i = " + i\n    ];\n    logDiv.append( msgs.join( ", " ) + "<br>" );\n  });\n}\n<\/script>\n​\n</body>\n</html>\n```\n        */\n        data: TData;\n\n        /**\n         * The namespace specified when the event was triggered.\n         * @see \\`{@link https://api.jquery.com/event.namespace/ }\\`\n         * @since 1.4.3\n         * @example ​ ````Determine the event namespace used.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.namespace demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>display event.namespace</button>\n<p></p>\n​\n<script>\n$( "p" ).on( "test.something", function( event ) {\n  alert( event.namespace );\n});\n$( "button" ).click(function( event ) {\n  $( "p" ).trigger( "test.something" );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        namespace?: string | undefined;\n        originalEvent?: _Event | undefined;\n        /**\n         * The last value returned by an event handler that was triggered by this event, unless the value was undefined.\n         * @see \\`{@link https://api.jquery.com/event.result/ }\\`\n         * @since 1.3\n         * @example ​ ````Display previous handler&#39;s return value\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.result demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button>display event.result</button>\n<p></p>\n​\n<script>\n$( "button" ).click(function( event ) {\n  return "hey";\n});\n$( "button" ).click(function( event ) {\n  $( "p" ).html( event.result );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        result?: any;\n    }\n\n    // region Event\n    // #region Event\n\n    interface EventBase<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends TriggeredEvent<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n```javascript\n$( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n});\n```\n        */\n        relatedTarget?: undefined;\n\n        // Event\n\n        bubbles: boolean;\n        cancelable: boolean;\n        eventPhase: number;\n\n        // UIEvent\n\n        detail: undefined;\n        view: undefined;\n\n        // MouseEvent\n\n        button: undefined;\n        buttons: undefined;\n        clientX: undefined;\n        clientY: undefined;\n        offsetX: undefined;\n        offsetY: undefined;\n        /**\n         * The mouse position relative to the left edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageX/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageX demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageX: undefined;\n        /**\n         * The mouse position relative to the top edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageY/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageY demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageY: undefined;\n        screenX: undefined;\n        screenY: undefined;\n        /** @deprecated */\n        toElement: undefined;\n\n        // PointerEvent\n\n        pointerId: undefined;\n        pointerType: undefined;\n\n        // KeyboardEvent\n\n        /** @deprecated */\n        char: undefined;\n        /** @deprecated */\n        charCode: undefined;\n        key: undefined;\n        /** @deprecated */\n        keyCode: undefined;\n\n        // TouchEvent\n\n        changedTouches: undefined;\n        targetTouches: undefined;\n        touches: undefined;\n\n        // MouseEvent, KeyboardEvent\n\n        /**\n         * For key or mouse events, this property indicates the specific key or button that was pressed.\n         * @see \\`{@link https://api.jquery.com/event.which/ }\\`\n         * @since 1.1.3\n         * @deprecated ​ Deprecated since 3.3. See \\`{@link https://github.com/jquery/api.jquery.com/issues/821 }\\`.\n         * @example ​ ````Log which key was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="type something">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "keydown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Log which mouse button was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="click here">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "mousedown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        which: undefined;\n\n        // MouseEvent, KeyboardEvent, TouchEvent\n\n        altKey: undefined;\n        ctrlKey: undefined;\n        /**\n         * Indicates whether the META key was pressed when the event fired.\n         * @see \\`{@link https://api.jquery.com/event.metaKey/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Determine whether the META key was pressed when the event fired.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.metaKey demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button value="Test" name="Test" id="checkMetaKey">Click me!</button>\n<div id="display"></div>\n​\n<script>\n$( "#checkMetaKey" ).click(function( event ) {\n  $( "#display" ).text( event.metaKey );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        metaKey: undefined;\n        shiftKey: undefined;\n\n        originalEvent?: _Event | undefined;\n    }\n\n    interface ChangeEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'change\';\n    }\n\n    interface ResizeEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'resize\';\n    }\n\n    interface ScrollEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'scroll\';\n    }\n\n    interface SelectEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'select\';\n    }\n\n    interface SubmitEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends EventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'submit\';\n    }\n\n    // #endregion\n\n    // region UIEvent\n    // #region UIEvent\n\n    interface UIEventBase<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends TriggeredEvent<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        // Event\n\n        bubbles: boolean;\n        cancelable: boolean;\n        eventPhase: number;\n\n        // UIEvent\n\n        detail: number;\n        view: Window;\n\n        originalEvent?: _UIEvent | undefined;\n    }\n\n    // region MouseEvent\n    // #region MouseEvent\n\n    interface MouseEventBase<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends UIEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n```javascript\n$( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n});\n```\n        */\n        relatedTarget?: EventTarget | null | undefined;\n\n        // MouseEvent\n\n        button: number;\n        buttons: number;\n        clientX: number;\n        clientY: number;\n        offsetX: number;\n        offsetY: number;\n        /**\n         * The mouse position relative to the left edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageX/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageX demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageX: number;\n        /**\n         * The mouse position relative to the top edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageY/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageY demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageY: number;\n        screenX: number;\n        screenY: number;\n        /** @deprecated */\n        toElement: Element;\n\n        // PointerEvent\n\n        pointerId: undefined;\n        pointerType: undefined;\n\n        // KeyboardEvent\n\n        /** @deprecated */\n        char: undefined;\n        /** @deprecated */\n        charCode: undefined;\n        key: undefined;\n        /** @deprecated */\n        keyCode: undefined;\n\n        // TouchEvent\n\n        changedTouches: undefined;\n        targetTouches: undefined;\n        touches: undefined;\n\n        // MouseEvent, KeyboardEvent\n\n        /**\n         * For key or mouse events, this property indicates the specific key or button that was pressed.\n         * @see \\`{@link https://api.jquery.com/event.which/ }\\`\n         * @since 1.1.3\n         * @deprecated ​ Deprecated since 3.3. See \\`{@link https://github.com/jquery/api.jquery.com/issues/821 }\\`.\n         * @example ​ ````Log which key was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="type something">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "keydown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Log which mouse button was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="click here">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "mousedown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        which: number;\n\n        // MouseEvent, KeyboardEvent, TouchEvent\n\n        altKey: boolean;\n        ctrlKey: boolean;\n        /**\n         * Indicates whether the META key was pressed when the event fired.\n         * @see \\`{@link https://api.jquery.com/event.metaKey/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Determine whether the META key was pressed when the event fired.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.metaKey demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button value="Test" name="Test" id="checkMetaKey">Click me!</button>\n<div id="display"></div>\n​\n<script>\n$( "#checkMetaKey" ).click(function( event ) {\n  $( "#display" ).text( event.metaKey );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        metaKey: boolean;\n        shiftKey: boolean;\n\n        originalEvent?: _MouseEvent | undefined;\n    }\n\n    interface ClickEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n ```javascript\n $( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n });\n ```\n        */\n        relatedTarget?: null | undefined;\n\n        type: \'click\';\n    }\n\n    interface ContextMenuEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n ```javascript\n $( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n });\n ```\n        */\n        relatedTarget?: null | undefined;\n\n        type: \'contextmenu\';\n    }\n\n    interface DoubleClickEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n ```javascript\n $( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n });\n ```\n        */\n        relatedTarget?: null | undefined;\n\n        type: \'dblclick\';\n    }\n\n    interface MouseDownEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n ```javascript\n $( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n });\n ```\n        */\n        relatedTarget?: null | undefined;\n\n        type: \'mousedown\';\n    }\n\n    interface MouseEnterEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        // Special handling by jQuery.\n        type: \'mouseover\';\n    }\n\n    interface MouseLeaveEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        // Special handling by jQuery.\n        type: \'mouseout\';\n    }\n\n    interface MouseMoveEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n ```javascript\n $( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n });\n ```\n        */\n        relatedTarget?: null | undefined;\n\n        type: \'mousemove\';\n    }\n\n    interface MouseOutEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'mouseout\';\n    }\n\n    interface MouseOverEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'mouseover\';\n    }\n\n    interface MouseUpEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends MouseEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n ```javascript\n $( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n });\n ```\n        */\n        relatedTarget?: null | undefined;\n\n        type: \'mouseup\';\n    }\n\n    // region DragEvent\n    // #region DragEvent\n\n    interface DragEventBase<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends UIEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        originalEvent?: _DragEvent | undefined;\n    }\n\n    interface DragEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'drag\';\n    }\n\n    interface DragEndEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'dragend\';\n    }\n\n    interface DragEnterEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'dragenter\';\n    }\n\n    interface DragExitEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'dragexit\';\n    }\n\n    interface DragLeaveEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'dragleave\';\n    }\n\n    interface DragOverEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'dragover\';\n    }\n\n    interface DragStartEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'dragstart\';\n    }\n\n    interface DropEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends DragEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'drop\';\n    }\n\n    // #endregion\n\n    // #endregion\n\n    // region KeyboardEvent\n    // #region KeyboardEvent\n\n    interface KeyboardEventBase<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends UIEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n```javascript\n$( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n});\n```\n        */\n        relatedTarget?: undefined;\n\n        // MouseEvent\n\n        button: undefined;\n        buttons: undefined;\n        clientX: undefined;\n        clientY: undefined;\n        offsetX: undefined;\n        offsetY: undefined;\n        /**\n         * The mouse position relative to the left edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageX/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageX demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageX: undefined;\n        /**\n         * The mouse position relative to the top edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageY/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageY demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageY: undefined;\n        screenX: undefined;\n        screenY: undefined;\n        /** @deprecated */\n        toElement: undefined;\n\n        // PointerEvent\n\n        pointerId: undefined;\n        pointerType: undefined;\n\n        // KeyboardEvent\n\n        /** @deprecated */\n        char: string | undefined;\n        /** @deprecated */\n        charCode: number;\n        code: string;\n        key: string;\n        /** @deprecated */\n        keyCode: number;\n\n        // TouchEvent\n\n        changedTouches: undefined;\n        targetTouches: undefined;\n        touches: undefined;\n\n        // MouseEvent, KeyboardEvent\n\n        /**\n         * For key or mouse events, this property indicates the specific key or button that was pressed.\n         * @see \\`{@link https://api.jquery.com/event.which/ }\\`\n         * @since 1.1.3\n         * @deprecated ​ Deprecated since 3.3. See \\`{@link https://github.com/jquery/api.jquery.com/issues/821 }\\`.\n         * @example ​ ````Log which key was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="type something">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "keydown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Log which mouse button was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="click here">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "mousedown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        which: number;\n\n        // MouseEvent, KeyboardEvent, TouchEvent\n\n        altKey: boolean;\n        ctrlKey: boolean;\n        /**\n         * Indicates whether the META key was pressed when the event fired.\n         * @see \\`{@link https://api.jquery.com/event.metaKey/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Determine whether the META key was pressed when the event fired.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.metaKey demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button value="Test" name="Test" id="checkMetaKey">Click me!</button>\n<div id="display"></div>\n​\n<script>\n$( "#checkMetaKey" ).click(function( event ) {\n  $( "#display" ).text( event.metaKey );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        metaKey: boolean;\n        shiftKey: boolean;\n\n        originalEvent?: _KeyboardEvent | undefined;\n    }\n\n    interface KeyDownEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends KeyboardEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'keydown\';\n    }\n\n    interface KeyPressEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends KeyboardEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'keypress\';\n    }\n\n    interface KeyUpEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends KeyboardEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'keyup\';\n    }\n\n    // #endregion\n\n    // region TouchEvent\n    // #region TouchEvent\n\n    interface TouchEventBase<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends UIEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n```javascript\n$( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n});\n```\n        */\n        relatedTarget?: undefined;\n\n        // MouseEvent\n\n        button: undefined;\n        buttons: undefined;\n        clientX: undefined;\n        clientY: undefined;\n        offsetX: undefined;\n        offsetY: undefined;\n        /**\n         * The mouse position relative to the left edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageX/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageX demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageX: undefined;\n        /**\n         * The mouse position relative to the top edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageY/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageY demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageY: undefined;\n        screenX: undefined;\n        screenY: undefined;\n        /** @deprecated */\n        toElement: undefined;\n\n        // PointerEvent\n\n        pointerId: undefined;\n        pointerType: undefined;\n\n        // KeyboardEvent\n\n        /** @deprecated */\n        char: undefined;\n        /** @deprecated */\n        charCode: undefined;\n        key: undefined;\n        /** @deprecated */\n        keyCode: undefined;\n\n        // TouchEvent\n\n        changedTouches: TouchList;\n        targetTouches: TouchList;\n        touches: TouchList;\n\n        // MouseEvent, KeyboardEvent\n\n        /**\n         * For key or mouse events, this property indicates the specific key or button that was pressed.\n         * @see \\`{@link https://api.jquery.com/event.which/ }\\`\n         * @since 1.1.3\n         * @deprecated ​ Deprecated since 3.3. See \\`{@link https://github.com/jquery/api.jquery.com/issues/821 }\\`.\n         * @example ​ ````Log which key was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="type something">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "keydown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Log which mouse button was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="click here">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "mousedown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        which: undefined;\n\n        // MouseEvent, KeyboardEvent, TouchEvent\n\n        altKey: boolean;\n        ctrlKey: boolean;\n        /**\n         * Indicates whether the META key was pressed when the event fired.\n         * @see \\`{@link https://api.jquery.com/event.metaKey/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Determine whether the META key was pressed when the event fired.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.metaKey demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button value="Test" name="Test" id="checkMetaKey">Click me!</button>\n<div id="display"></div>\n​\n<script>\n$( "#checkMetaKey" ).click(function( event ) {\n  $( "#display" ).text( event.metaKey );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        metaKey: boolean;\n        shiftKey: boolean;\n\n        originalEvent?: _TouchEvent | undefined;\n    }\n\n    interface TouchCancelEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'touchcancel\';\n    }\n\n    interface TouchEndEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'touchend\';\n    }\n\n    interface TouchMoveEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'touchmove\';\n    }\n\n    interface TouchStartEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends TouchEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'touchstart\';\n    }\n\n    // #endregion\n\n    // region FocusEvent\n    // #region FocusEvent\n\n    interface FocusEventBase<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends UIEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        /**\n         * The other DOM element involved in the event, if any.\n         * @see \\`{@link https://api.jquery.com/event.relatedTarget/ }\\`\n         * @since 1.1.4\n         * @example ​ ````On mouseout of anchors, alert the element type being entered.\n```javascript\n$( "a" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // "DIV"\n});\n```\n        */\n        relatedTarget?: EventTarget | null | undefined;\n\n        // MouseEvent\n\n        button: undefined;\n        buttons: undefined;\n        clientX: undefined;\n        clientY: undefined;\n        offsetX: undefined;\n        offsetY: undefined;\n        /**\n         * The mouse position relative to the left edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageX/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageX demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageX: undefined;\n        /**\n         * The mouse position relative to the top edge of the document.\n         * @see \\`{@link https://api.jquery.com/event.pageY/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.pageY demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<div id="log"></div>\n​\n<script>\n$( document ).on( "mousemove", function( event ) {\n  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        pageY: undefined;\n        screenX: undefined;\n        screenY: undefined;\n        /** @deprecated */\n        toElement: undefined;\n\n        // PointerEvent\n\n        pointerId: undefined;\n        pointerType: undefined;\n\n        // KeyboardEvent\n\n        /** @deprecated */\n        char: undefined;\n        /** @deprecated */\n        charCode: undefined;\n        key: undefined;\n        /** @deprecated */\n        keyCode: undefined;\n\n        // TouchEvent\n\n        changedTouches: undefined;\n        targetTouches: undefined;\n        touches: undefined;\n\n        // MouseEvent, KeyboardEvent\n\n        /**\n         * For key or mouse events, this property indicates the specific key or button that was pressed.\n         * @see \\`{@link https://api.jquery.com/event.which/ }\\`\n         * @since 1.1.3\n         * @deprecated ​ Deprecated since 3.3. See \\`{@link https://github.com/jquery/api.jquery.com/issues/821 }\\`.\n         * @example ​ ````Log which key was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="type something">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "keydown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         * @example ​ ````Log which mouse button was depressed.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.which demo</title>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<input id="whichkey" value="click here">\n<div id="log"></div>\n​\n<script>\n$( "#whichkey" ).on( "mousedown", function( event ) {\n  $( "#log" ).html( event.type + ": " +  event.which );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        which: undefined;\n\n        // MouseEvent, KeyboardEvent, TouchEvent\n\n        altKey: undefined;\n        ctrlKey: undefined;\n        /**\n         * Indicates whether the META key was pressed when the event fired.\n         * @see \\`{@link https://api.jquery.com/event.metaKey/ }\\`\n         * @since 1.0.4\n         * @example ​ ````Determine whether the META key was pressed when the event fired.\n```html\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>event.metaKey demo</title>\n  <style>\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  </style>\n  <script src="https://code.jquery.com/jquery-3.3.1.js"><\/script>\n</head>\n<body>\n​\n<button value="Test" name="Test" id="checkMetaKey">Click me!</button>\n<div id="display"></div>\n​\n<script>\n$( "#checkMetaKey" ).click(function( event ) {\n  $( "#display" ).text( event.metaKey );\n});\n<\/script>\n​\n</body>\n</html>\n```\n         */\n        metaKey: undefined;\n        shiftKey: undefined;\n\n        originalEvent?: _FocusEvent | undefined;\n    }\n\n    interface BlurEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'blur\';\n    }\n\n    interface FocusEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'focus\';\n    }\n\n    interface FocusInEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'focusin\';\n    }\n\n    interface FocusOutEvent<\n        TDelegateTarget = any,\n        TData = any,\n        TCurrentTarget = any,\n        TTarget = any\n    > extends FocusEventBase<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        type: \'focusout\';\n    }\n\n    // #endregion\n\n    // #endregion\n\n    interface TypeToTriggeredEventMap<\n        TDelegateTarget,\n        TData,\n        TCurrentTarget,\n        TTarget\n    > {\n        // Event\n\n        change: ChangeEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        resize: ResizeEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        scroll: ScrollEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        select: SelectEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        submit: SubmitEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n\n        // UIEvent\n\n        // MouseEvent\n\n        click: ClickEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        contextmenu: ContextMenuEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        dblclick: DoubleClickEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        mousedown: MouseDownEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        mouseenter: MouseEnterEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        mouseleave: MouseLeaveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        mousemove: MouseMoveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        mouseout: MouseOutEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        mouseover: MouseOverEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        mouseup: MouseUpEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n\n        // DragEvent\n\n        drag: DragEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        dragend: DragEndEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        dragenter: DragEnterEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        dragexit: DragExitEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        dragleave: DragLeaveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        dragover: DragOverEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        dragstart: DragStartEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        drop: DropEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n\n        // KeyboardEvent\n\n        keydown: KeyDownEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        keypress: KeyPressEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        keyup: KeyUpEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n\n        // TouchEvent\n\n        touchcancel: TouchCancelEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        touchend: TouchEndEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        touchmove: TouchMoveEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        touchstart: TouchStartEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n\n        // FocusEvent\n\n        blur: BlurEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        focus: FocusEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        focusin: FocusInEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n        focusout: FocusOutEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n\n        [type: string]: TriggeredEvent<TDelegateTarget, TData, TCurrentTarget, TTarget>;\n    }\n\n    // Extra parameters can be passed from trigger()\n    type EventHandlerBase<TContext, T> = (this: TContext, t: T, ...args: any[]) => any;\n\n    type EventHandler<\n        TCurrentTarget,\n        TData = undefined\n    > = EventHandlerBase<TCurrentTarget, TriggeredEvent<TCurrentTarget, TData>>;\n\n    type TypeEventHandler<\n        TDelegateTarget,\n        TData,\n        TCurrentTarget,\n        TTarget,\n        TType extends keyof TypeToTriggeredEventMap<TDelegateTarget, TData, TCurrentTarget, TTarget>\n    > = EventHandlerBase<TCurrentTarget, TypeToTriggeredEventMap<TDelegateTarget, TData, TCurrentTarget, TTarget>[TType]>;\n\n    interface TypeEventHandlers<\n        TDelegateTarget,\n        TData,\n        TCurrentTarget,\n        TTarget\n    > extends _TypeEventHandlers<TDelegateTarget, TData, TCurrentTarget, TTarget> {\n        // No idea why it\'s necessary to include `object` in the union but otherwise TypeScript complains that\n        // derived types of Event are not assignable to Event.\n        [type: string]: TypeEventHandler<TDelegateTarget, TData, TCurrentTarget, TTarget, string> |\n                        false |\n                        undefined |\n                        object;\n    }\n\n    type _TypeEventHandlers<\n        TDelegateTarget,\n        TData,\n        TCurrentTarget,\n        TTarget\n    > = {\n        [TType in keyof TypeToTriggeredEventMap<TDelegateTarget, TData, TCurrentTarget, TTarget>]?:\n            TypeEventHandler<TDelegateTarget, TData, TCurrentTarget, TTarget, TType> |\n            false |\n            object;\n    };\n\n    // region Event extensions\n    // #region Event extensions\n\n    interface EventExtensions {\n        /**\n         * The jQuery special event hooks are a set of per-event-name functions and properties that allow code to control the behavior of event processing within jQuery. The mechanism is similar to `fixHooks` in that the special event information is stored in `jQuery.event.special.NAME`, where `NAME` is the name of the special event. Event names are case sensitive.\n         *\n         * As with `fixHooks`, the special event hooks design assumes it will be very rare that two unrelated pieces of code want to process the same event name. Special event authors who need to modify events with existing hooks will need to take precautions to avoid introducing unwanted side-effects by clobbering those hooks.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#special-event-hooks }\\`\n         */\n        special: SpecialEventHooks;\n    }\n\n    // region Special event hooks\n    // #region Special event hooks\n\n    /**\n     * The jQuery special event hooks are a set of per-event-name functions and properties that allow code to control the behavior of event processing within jQuery. The mechanism is similar to `fixHooks` in that the special event information is stored in `jQuery.event.special.NAME`, where `NAME` is the name of the special event. Event names are case sensitive.\n     *\n     * As with `fixHooks`, the special event hooks design assumes it will be very rare that two unrelated pieces of code want to process the same event name. Special event authors who need to modify events with existing hooks will need to take precautions to avoid introducing unwanted side-effects by clobbering those hooks.\n     * @see \\`{@link https://learn.jquery.com/events/event-extensions/#special-event-hooks }\\`\n     */\n    // Workaround for TypeScript 2.3 which does not have support for weak types handling.\n    type SpecialEventHook<TTarget, TData> = {\n        /**\n         * Indicates whether this event type should be bubbled when the `.trigger()` method is called; by default it is `false`, meaning that a triggered event will bubble to the element\'s parents up to the document (if attached to a document) and then to the window. Note that defining `noBubble` on an event will effectively prevent that event from being used for delegated events with `.trigger()`.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#nobubble-boolean }\\`\n         */\n        noBubble: boolean;\n    } | {\n        /**\n         * When defined, these string properties specify that a special event should be handled like another event type until the event is delivered. The `bindType` is used if the event is attached directly, and the `delegateType` is used for delegated events. These types are generally DOM event types, and _should not_ be a special event themselves.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#bindtype-string-delegatetype-string }\\`\n         */\n        bindType: string;\n    } | {\n        /**\n         * When defined, these string properties specify that a special event should be handled like another event type until the event is delivered. The `bindType` is used if the event is attached directly, and the `delegateType` is used for delegated events. These types are generally DOM event types, and _should not_ be a special event themselves.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#bindtype-string-delegatetype-string }\\`\n         */\n        delegateType: string;\n    } | {\n        /**\n         * The setup hook is called the first time an event of a particular type is attached to an element; this provides the hook an opportunity to do processing that will apply to all events of this type on this element. The `this` keyword will be a reference to the element where the event is being attached and `eventHandle` is jQuery\'s event handler function. In most cases the `namespaces` argument should not be used, since it only represents the namespaces of the _first_ event being attached; subsequent events may not have this same namespaces.\n         *\n         * This hook can perform whatever processing it desires, including attaching its own event handlers to the element or to other elements and recording setup information on the element using the `jQuery.data()` method. If the setup hook wants jQuery to add a browser event (via `addEventListener` or `attachEvent`, depending on browser) it should return `false`. In all other cases, jQuery will not add the browser event, but will continue all its other bookkeeping for the event. This would be appropriate, for example, if the event was never fired by the browser but invoked by `.trigger()`. To attach the jQuery event handler in the setup hook, use the `eventHandle` argument.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#setup-function-data-object-namespaces-eventhandle-function }\\`\n         */\n        setup(this: TTarget, data: TData, namespaces: string, eventHandle: EventHandler<TTarget, TData>): void | false;\n    } | {\n        /**\n         * The teardown hook is called when the final event of a particular type is removed from an element. The `this` keyword will be a reference to the element where the event is being cleaned up. This hook should return `false` if it wants jQuery to remove the event from the browser\'s event system (via `removeEventListener` or `detachEvent`). In most cases, the setup and teardown hooks should return the same value.\n         *\n         * If the setup hook attached event handlers or added data to an element through a mechanism such as `jQuery.data()`, the teardown hook should reverse the process and remove them. jQuery will generally remove the data and events when an element is totally removed from the document, but failing to remove data or events on teardown will cause a memory leak if the element stays in the document.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#teardown-function }\\`\n         */\n        teardown(this: TTarget): void | false;\n    } | {\n        /**\n         * Each time an event handler is added to an element through an API such as `.on()`, jQuery calls this hook. The `this` keyword will be the element to which the event handler is being added, and the `handleObj` argument is as described in the section above. The return value of this hook is ignored.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#add-function-handleobj }\\`\n         */\n        add(this: TTarget, handleObj: HandleObject<TTarget, TData>): void;\n    } | {\n        /**\n         * When an event handler is removed from an element using an API such as `.off()`, this hook is called. The `this` keyword will be the element where the handler is being removed, and the `handleObj` argument is as described in the section above. The return value of this hook is ignored.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#remove-function-handleobj }\\`\n         */\n        remove(this: TTarget, handleObj: HandleObject<TTarget, TData>): void;\n    } | {\n        /**\n         * Called when the `.trigger()` or `.triggerHandler()` methods are used to trigger an event for the special type from code, as opposed to events that originate from within the browser. The `this` keyword will be the element being triggered, and the event argument will be a `jQuery.Event` object constructed from the caller\'s input. At minimum, the event type, data, namespace, and target properties are set on the event. The data argument represents additional data passed by `.trigger()` if present.\n         *\n         * The trigger hook is called early in the process of triggering an event, just after the `jQuery.Event` object is constructed and before any handlers have been called. It can process the triggered event in any way, for example by calling `event.stopPropagation()` or `event.preventDefault()` before returning. If the hook returns `false`, jQuery does not perform any further event triggering actions and returns immediately. Otherwise, it performs the normal trigger processing, calling any event handlers for the element and bubbling the event (unless propagation is stopped in advance or `noBubble` was specified for the special event) to call event handlers attached to parent elements.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#trigger-function-event-jquery-event-data-object }\\`\n         */\n        trigger(this: TTarget, event: Event, data: TData): void | false;\n    } | {\n        /**\n         * When the `.trigger()` method finishes running all the event handlers for an event, it also looks for and runs any method on the target object by the same name unless of the handlers called `event.preventDefault()`. So, `.trigger( "submit" )` will execute the `submit()` method on the element if one exists. When a `_default` hook is specified, the hook is called just prior to checking for and executing the element\'s default method. If this hook returns the value `false` the element\'s default method will be called; otherwise it is not.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#_default-function-event-jquery-event-data-object }\\`\n         */\n        _default(event: TriggeredEvent<TTarget, TData>, data: TData): void | false;\n    } | {\n        /**\n         * jQuery calls a handle hook when the event has occurred and jQuery would normally call the user\'s event handler specified by `.on()` or another event binding method. If the hook exists, jQuery calls it _instead_ of that event handler, passing it the event and any data passed from `.trigger()` if it was not a native event. The `this` keyword is the DOM element being handled, and `event.handleObj` property has the detailed event information.\n         *\n         * Based in the information it has, the handle hook should decide whether to call the original handler function which is in `event.handleObj.handler`. It can modify information in the event object before calling the original handler, but _must restore_ that data before returning or subsequent unrelated event handlers may act unpredictably. In most cases, the handle hook should return the result of the original handler, but that is at the discretion of the hook. The handle hook is unique in that it is the only special event function hook that is called under its original special event name when the type is mapped using `bindType` and `delegateType`. For that reason, it is almost always an error to have anything other than a handle hook present if the special event defines a `bindType` and `delegateType`, since those other hooks will never be called.\n         * @see \\`{@link https://learn.jquery.com/events/event-extensions/#handle-function-event-jquery-event-data-object }\\`\n         */\n        handle(this: TTarget, event: TriggeredEvent<TTarget, TData> & { handleObj: HandleObject<TTarget, TData>; }, ...data: TData[]): void;\n    } | {\n        preDispatch(this: TTarget, event: Event): false | void;\n    } | {\n        postDispatch(this: TTarget, event: Event): void;\n    } | {\n        [key: string]: never;\n    };\n\n    interface SpecialEventHooks {\n        [event: string]: SpecialEventHook<EventTarget, any>;\n    }\n\n    /**\n     * Many of the special event hook functions below are passed a `handleObj` object that provides more information about the event, how it was attached, and its current state. This object and its contents should be treated as read-only data, and only the properties below are documented for use by special event handlers.\n     * @see \\`{@link https://learn.jquery.com/events/event-extensions/#the-handleobj-object }\\`\n     */\n    interface HandleObject<TTarget, TData> {\n        /**\n         * The type of event, such as `"click"`. When special event mapping is used via `bindType` or `delegateType`, this will be the mapped type.\n         */\n        readonly type: string;\n        /**\n         * The original type name regardless of whether it was mapped via `bindType` or `delegateType`. So when a "pushy" event is mapped to "click" its `origType` would be "pushy".\n         */\n        readonly origType: string;\n        /**\n         * Namespace(s), if any, provided when the event was attached, such as `"myPlugin"`. When multiple namespaces are given, they are separated by periods and sorted in ascending alphabetical order. If no namespaces are provided, this property is an empty string.\n         */\n        readonly namespace: string;\n        /**\n         * For delegated events, this is the selector used to filter descendant elements and determine if the handler should be called. For directly bound events, this property is `null`.\n         */\n        readonly selector: string | undefined | null;\n        /**\n         * The data, if any, passed to jQuery during event binding, e.g. `{ myData: 42 }`. If the data argument was omitted or `undefined`, this property is `undefined` as well.\n         */\n        readonly data: TData;\n        /**\n         * Event handler function passed to jQuery during event binding. If `false` was passed during event binding, the handler refers to a single shared function that simply returns `false`.\n         */\n        readonly handler: EventHandler<TTarget, TData>;\n    }\n\n    // #endregion\n\n    // #endregion\n\n    // #endregion\n\n    interface NameValuePair {\n        name: string;\n        value: string;\n    }\n\n    // region Coordinates\n    // #region Coordinates\n\n    interface Coordinates {\n        left: number;\n        top: number;\n    }\n\n    // Workaround for TypeScript 2.3 which does not have support for weak types handling.\n    type CoordinatesPartial =\n        Pick<Coordinates, \'left\'> |\n        Pick<Coordinates, \'top\'> |\n        { [key: string]: never; };\n\n    // #endregion\n\n    // region Val hooks\n    // #region Val hooks\n\n    // Workaround for TypeScript 2.3 which does not have support for weak types handling.\n    type ValHook<TElement> = {\n        get(elem: TElement): any;\n    } | {\n        set(elem: TElement, value: any): any;\n    } | {\n        [key: string]: never;\n    };\n\n    interface ValHooks {\n        // Set to HTMLElement to minimize breaks but should probably be Element.\n        [nodeName: string]: ValHook<HTMLElement>;\n    }\n\n    // #endregion\n\n    type _Falsy = false | null | undefined | 0 | \'\' | typeof document.all;\n}\n\ndeclare const jQuery: JQueryStatic;\ndeclare const $: JQueryStatic;\n\ntype _Event = Event;\ntype _UIEvent = UIEvent;\ntype _MouseEvent = MouseEvent;\ntype _DragEvent = DragEvent;\ntype _KeyboardEvent = KeyboardEvent;\ntype _TouchEvent = TouchEvent;\ntype _FocusEvent = FocusEvent;\n\n// region ES5 compatibility\n// #region ES5 compatibility\n\n// Forward declaration of `Iterable<T>`.\n// tslint:disable-next-line:no-empty-interface\ninterface Iterable<T> { }\n\ninterface SymbolConstructor {\n    /**\n     * A String value that is used in the creation of the default string description of an object.\n     * Called by the built-in method Object.prototype.toString.\n     */\n    readonly toStringTag: symbol;\n}\n\ndeclare var Symbol: SymbolConstructor;\n\n// #endregion\n']},32943:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["pixi-particles\\index.d.ts",'// Generated by dts-bundle-generator v4.3.0\n\nimport { Circle, Container, DisplayObject, Point, Rectangle, Renderer, Sprite, Texture } from \'pixi.js\';\n\nexport interface BasicPoint {\r\n\tx: number;\r\n\ty: number;\r\n}\nexport interface Segment {\r\n\tp1: BasicPoint;\r\n\tp2: BasicPoint;\r\n\tl: number;\r\n}\n/**\r\n * Chain of line segments for generating spawn positions.\r\n */\nexport declare class PolygonalChain {\r\n\t/**\r\n\t * List of segment objects in the chain.\r\n\t */\r\n\tprivate segments;\r\n\t/**\r\n\t * Total length of all segments of the chain.\r\n\t */\r\n\tprivate totalLength;\r\n\t/**\r\n\t * Total length of segments up to and including the segment of the same index.\r\n\t * Used for weighted random selection of segment.\r\n\t */\r\n\tprivate countingLengths;\r\n\t/**\r\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n\t */\r\n\tconstructor(data: BasicPoint[] | BasicPoint[][]);\r\n\t/**\r\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n\t */\r\n\tprivate init;\r\n\t/**\r\n\t * Gets a random point in the chain.\r\n\t * @param out The point to store the selected position in.\r\n\t */\r\n\tgetRandomPoint(out: Point): void;\r\n}\nexport interface EmitterConfig {\r\n\talpha?: ValueList<number>;\r\n\tspeed?: ValueList<number>;\r\n\tminimumSpeedMultiplier?: number;\r\n\tmaxSpeed?: number;\r\n\tacceleration?: {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t};\r\n\tscale?: ValueList<number>;\r\n\tminimumScaleMultiplier?: number;\r\n\tcolor?: ValueList<string>;\r\n\tstartRotation?: RandNumber;\r\n\tnoRotation?: boolean;\r\n\trotationSpeed?: RandNumber;\r\n\trotationAcceleration?: number;\r\n\tlifetime: RandNumber;\r\n\tblendMode?: string;\r\n\tease?: SimpleEase | EaseSegment[];\r\n\textraData?: any;\r\n\tparticlesPerWave?: number;\r\n\t/**\r\n\t * Really "rect"|"circle"|"ring"|"burst"|"point"|"polygonalChain", but that\r\n\t * tends to be too strict for random object creation.\r\n\t */\r\n\tspawnType?: string;\r\n\tspawnRect?: {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\tw: number;\r\n\t\th: number;\r\n\t};\r\n\tspawnCircle?: {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\tr: number;\r\n\t\tminR?: number;\r\n\t};\r\n\tparticleSpacing?: number;\r\n\tangleStart?: number;\r\n\tspawnPolygon?: BasicPoint[] | BasicPoint[][];\r\n\tfrequency: number;\r\n\tspawnChance?: number;\r\n\temitterLifetime?: number;\r\n\tmaxParticles?: number;\r\n\taddAtBack?: boolean;\r\n\tpos: {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t};\r\n\temit?: boolean;\r\n\tautoUpdate?: boolean;\r\n\torderedArt?: boolean;\r\n}\nexport interface RandNumber {\r\n\tmax: number;\r\n\tmin: number;\r\n}\nexport interface BasicTweenable<T> {\r\n\tstart: T;\r\n\tend: T;\r\n}\nexport interface OldEmitterConfig {\r\n\talpha?: BasicTweenable<number>;\r\n\tspeed?: BasicTweenable<number> & {\r\n\t\tminimumSpeedMultiplier?: number;\r\n\t};\r\n\tmaxSpeed?: number;\r\n\tacceleration?: {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t};\r\n\tscale?: BasicTweenable<number> & {\r\n\t\tminimumScaleMultiplier?: number;\r\n\t};\r\n\tcolor?: BasicTweenable<string>;\r\n\tstartRotation?: RandNumber;\r\n\tnoRotation?: boolean;\r\n\trotationSpeed?: RandNumber;\r\n\trotationAcceleration?: number;\r\n\tlifetime: RandNumber;\r\n\tblendMode?: string;\r\n\tease?: SimpleEase | EaseSegment[];\r\n\textraData?: any;\r\n\tparticlesPerWave?: number;\r\n\t/**\r\n\t * Really "rect"|"circle"|"ring"|"burst"|"point"|"polygonalChain", but that\r\n\t * tends to be too strict for random object creation.\r\n\t */\r\n\tspawnType?: string;\r\n\tspawnRect?: {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\tw: number;\r\n\t\th: number;\r\n\t};\r\n\tspawnCircle?: {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\tr: number;\r\n\t\tminR?: number;\r\n\t};\r\n\tparticleSpacing?: number;\r\n\tangleStart?: number;\r\n\tspawnPolygon?: BasicPoint[] | BasicPoint[][];\r\n\tfrequency: number;\r\n\tspawnChance?: number;\r\n\temitterLifetime?: number;\r\n\tmaxParticles?: number;\r\n\taddAtBack?: boolean;\r\n\tpos: {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t};\r\n\temit?: boolean;\r\n\tautoUpdate?: boolean;\r\n\torderedArt?: boolean;\r\n}\nexport interface ValueStep<T> {\r\n\tvalue: T;\r\n\ttime: number;\r\n}\nexport interface ValueList<T> {\r\n\tlist: ValueStep<T>[];\r\n\tisStepped?: boolean;\r\n\tease?: SimpleEase | EaseSegment[];\r\n}\n/**\r\n * A single node in a PropertyList.\r\n */\nexport declare class PropertyNode<V> {\r\n\t/**\r\n\t * Value for the node.\r\n\t */\r\n\tvalue: V;\r\n\t/**\r\n\t * Time value for the node. Between 0-1.\r\n\t */\r\n\ttime: number;\r\n\t/**\r\n\t * The next node in line.\r\n\t */\r\n\tnext: PropertyNode<V>;\r\n\t/**\r\n\t * If this is the first node in the list, controls if the entire list is stepped or not.\r\n\t */\r\n\tisStepped: boolean;\r\n\tease: SimpleEase;\r\n\t/**\r\n\t * @param value The value for this node\r\n\t * @param time The time for this node, between 0-1\r\n\t * @param [ease] Custom ease for this list. Only relevant for the first node.\r\n\t */\r\n\tconstructor(value: V, time: number, ease?: SimpleEase | EaseSegment[]);\r\n\t/**\r\n\t * Creates a list of property values from a data object {list, isStepped} with a list of objects in\r\n\t * the form {value, time}. Alternatively, the data object can be in the deprecated form of\r\n\t * {start, end}.\r\n\t * @param data The data for the list.\r\n\t * @param data.list The array of value and time objects.\r\n\t * @param data.isStepped If the list is stepped rather than interpolated.\r\n\t * @param data.ease Custom ease for this list.\r\n\t * @return The first node in the list\r\n\t */\r\n\tstatic createList<T extends (string | number)>(data: ValueList<T> | BasicTweenable<T>): PropertyNode<T extends string ? Color : T>;\r\n}\nexport declare function GetTextureFromString(s: string): Texture;\nexport interface Color {\r\n\tr: number;\r\n\tg: number;\r\n\tb: number;\r\n\ta?: number;\r\n}\nexport interface EaseSegment {\r\n\tcp: number;\r\n\ts: number;\r\n\te: number;\r\n}\nexport declare type SimpleEase = (time: number) => number;\n/**\r\n * Contains helper functions for particles and emitters to use.\r\n */\nexport declare namespace ParticleUtils {\r\n\t/**\r\n\t * If errors and warnings should be logged within the library.\r\n\t */\r\n\tconst verbose = false;\r\n\tconst DEG_TO_RADS: number;\r\n\t/**\r\n\t * Rotates a point by a given angle.\r\n\t * @param angle The angle to rotate by in degrees\r\n\t * @param p The point to rotate around 0,0.\r\n\t */\r\n\tfunction rotatePoint(angle: number, p: Point): void;\r\n\t/**\r\n\t * Combines separate color components (0-255) into a single uint color.\r\n\t * @param r The red value of the color\r\n\t * @param g The green value of the color\r\n\t * @param b The blue value of the color\r\n\t * @return The color in the form of 0xRRGGBB\r\n\t */\r\n\tfunction combineRGBComponents(r: number, g: number, b: number): number;\r\n\t/**\r\n\t * Reduces the point to a length of 1.\r\n\t * @param point The point to normalize\r\n\t */\r\n\tfunction normalize(point: Point): void;\r\n\t/**\r\n\t * Multiplies the x and y values of this point by a value.\r\n\t * @param point The point to scaleBy\r\n\t * @param value The value to scale by.\r\n\t */\r\n\tfunction scaleBy(point: Point, value: number): void;\r\n\t/**\r\n\t * Returns the length (or magnitude) of this point.\r\n\t * @param point The point to measure length\r\n\t * @return The length of this point.\r\n\t */\r\n\tfunction length(point: Point): number;\r\n\t/**\r\n\t * Converts a hex string from "#AARRGGBB", "#RRGGBB", "0xAARRGGBB", "0xRRGGBB",\r\n\t * "AARRGGBB", or "RRGGBB" to an object of ints of 0-255, as\r\n\t * {r, g, b, (a)}.\r\n\t * @param color The input color string.\r\n\t * @param output An object to put the output in. If omitted, a new object is created.\r\n\t * @return The object with r, g, and b properties, possibly with an a property.\r\n\t */\r\n\tfunction hexToRGB(color: string, output?: Color): Color;\r\n\t/**\r\n\t * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\r\n\t * by the related tool at http://www.greensock.com/customease/.\r\n\t * @param segments An array of segments, as created by\r\n\t * http://www.greensock.com/customease/.\r\n\t * @return A function that calculates the percentage of change at\r\n\t *                    a given point in time (0-1 inclusive).\r\n\t */\r\n\tfunction generateEase(segments: EaseSegment[]): SimpleEase;\r\n\t/**\r\n\t * Gets a blend mode, ensuring that it is valid.\r\n\t * @param name The name of the blend mode to get.\r\n\t * @return The blend mode as specified in the PIXI.BLEND_MODES enumeration.\r\n\t */\r\n\tfunction getBlendMode(name: string): number;\r\n\t/**\r\n\t * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\r\n\t * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\r\n\t * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\r\n\t * @param list The list of data to convert.\r\n\t * @param [numSteps=10] The number of steps to use.\r\n\t * @return The blend mode as specified in the PIXI.blendModes enumeration.\r\n\t */\r\n\tfunction createSteppedGradient(list: ValueStep<string>[], numSteps?: number): PropertyNode<Color>;\r\n}\nexport interface ParticleConstructor {\r\n\tnew (emitter: Emitter): Particle;\r\n}\n/**\r\n * A particle emitter.\r\n */\nexport declare class Emitter {\r\n\t/**\r\n\t * The constructor used to create new particles. The default is\r\n\t * the built in particle class.\r\n\t */\r\n\tprotected _particleConstructor: typeof Particle;\r\n\t/**\r\n\t * An array of PIXI Texture objects.\r\n\t */\r\n\tparticleImages: any[];\r\n\t/**\r\n\t * The first node in the list of alpha values for all particles.\r\n\t */\r\n\tstartAlpha: PropertyNode<number>;\r\n\t/**\r\n\t * The first node in the list of speed values of all particles.\r\n\t */\r\n\tstartSpeed: PropertyNode<number>;\r\n\t/**\r\n\t * A minimum multiplier for the speed of a particle at all stages of its life. A value between\r\n\t * minimumSpeedMultiplier and 1 is randomly generated for each particle.\r\n\t */\r\n\tminimumSpeedMultiplier: number;\r\n\t/**\r\n\t * Acceleration to apply to particles. Using this disables\r\n\t * any interpolation of particle speed. If the particles do\r\n\t * not have a rotation speed, then they will be rotated to\r\n\t * match the direction of travel.\r\n\t */\r\n\tacceleration: Point;\r\n\t/**\r\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\r\n\t * will disable the maximum speed.\r\n\t */\r\n\tmaxSpeed: number;\r\n\t/**\r\n\t * The first node in the list of scale values of all particles.\r\n\t */\r\n\tstartScale: PropertyNode<number>;\r\n\t/**\r\n\t * A minimum multiplier for the scale of a particle at all stages of its life. A value between\r\n\t * minimumScaleMultiplier and 1 is randomly generated for each particle.\r\n\t */\r\n\tminimumScaleMultiplier: number;\r\n\t/**\r\n\t * The first node in the list of  color values of all particles, as red, green, and blue\r\n\t * uints from 0-255.\r\n\t */\r\n\tstartColor: PropertyNode<Color>;\r\n\t/**\r\n\t * The minimum lifetime for a particle, in seconds.\r\n\t */\r\n\tminLifetime: number;\r\n\t/**\r\n\t * The maximum lifetime for a particle, in seconds.\r\n\t */\r\n\tmaxLifetime: number;\r\n\t/**\r\n\t * The minimum start rotation for a particle, in degrees. This value\r\n\t * is ignored if the spawn type is "burst" or "arc".\r\n\t */\r\n\tminStartRotation: number;\r\n\t/**\r\n\t * The maximum start rotation for a particle, in degrees. This value\r\n\t * is ignored if the spawn type is "burst" or "arc".\r\n\t */\r\n\tmaxStartRotation: number;\r\n\t/**\r\n\t * If no particle rotation should occur. Starting rotation will still\r\n\t * affect the direction in which particles move. If the rotation speed\r\n\t * is set, then this will be ignored.\r\n\t */\r\n\tnoRotation: boolean;\r\n\t/**\r\n\t * The minimum rotation speed for a particle, in degrees per second.\r\n\t * This only visually spins the particle, it does not change direction\r\n\t * of movement.\r\n\t */\r\n\tminRotationSpeed: number;\r\n\t/**\r\n\t * The maximum rotation speed for a particle, in degrees per second.\r\n\t * This only visually spins the particle, it does not change direction\r\n\t * of movement.\r\n\t */\r\n\tmaxRotationSpeed: number;\r\n\t/**\r\n\t* The Acceleration of rotation (angular acceleration) for a particle, in degrees per second.\r\n\t*/\r\n\trotationAcceleration: number;\r\n\t/**\r\n\t * The blend mode for all particles, as named by PIXI.blendModes.\r\n\t */\r\n\tparticleBlendMode: number;\r\n\t/**\r\n\t * An easing function for nonlinear interpolation of values. Accepts a single\r\n\t * parameter of time as a value from 0-1, inclusive. Expected outputs are values\r\n\t * from 0-1, inclusive.\r\n\t */\r\n\tcustomEase: SimpleEase;\r\n\t/**\r\n\t *\tExtra data for use in custom particles. The emitter doesn\'t look inside, but\r\n\t *\tpasses it on to the particle to use in init().\r\n\t */\r\n\textraData: any;\r\n\t/**\r\n\t * Time between particle spawns in seconds.\r\n\t */\r\n\tprotected _frequency: number;\r\n\t/**\r\n\t * Chance that a particle will be spawned on each opportunity to spawn one.\r\n\t * 0 is 0%, 1 is 100%.\r\n\t */\r\n\tspawnChance: number;\r\n\t/**\r\n\t * Maximum number of particles to keep alive at a time. If this limit\r\n\t * is reached, no more particles will spawn until some have died.\r\n\t */\r\n\tmaxParticles: number;\r\n\t/**\r\n\t * The amount of time in seconds to emit for before setting emit to false.\r\n\t * A value of -1 is an unlimited amount of time.\r\n\t */\r\n\temitterLifetime: number;\r\n\t/**\r\n\t * Position at which to spawn particles, relative to the emitter\'s owner\'s origin.\r\n\t * For example, the flames of a rocket travelling right might have a spawnPos\r\n\t * of {x:-50, y:0}.\r\n\t * to spawn at the rear of the rocket.\r\n\t * To change this, use updateSpawnPos().\r\n\t */\r\n\tspawnPos: Point;\r\n\t/**\r\n\t * How the particles will be spawned. Valid types are "point", "rectangle",\r\n\t * "circle", "burst", "ring".\r\n\t */\r\n\tspawnType: string;\r\n\t/**\r\n\t * A reference to the emitter function specific to the spawn type.\r\n\t */\r\n\tprotected _spawnFunc: (p: Particle, emitPosX: number, emitPosY: number, i?: number) => void;\r\n\t/**\r\n\t * A rectangle relative to spawnPos to spawn particles inside if the spawn type is "rect".\r\n\t */\r\n\tspawnRect: Rectangle;\r\n\t/**\r\n\t * A polygon relative to spawnPos to spawn particles on the chain if the spawn type is "polygonalChain".\r\n\t */\r\n\tspawnPolygonalChain: PolygonalChain;\r\n\t/**\r\n\t * A circle relative to spawnPos to spawn particles inside if the spawn type is "circle".\r\n\t */\r\n\tspawnCircle: Circle & {\r\n\t\tminRadius: number;\r\n\t};\r\n\t/**\r\n\t * Number of particles to spawn time that the frequency allows for particles to spawn.\r\n\t */\r\n\tparticlesPerWave: number;\r\n\t/**\r\n\t * Spacing between particles in a burst. 0 gives a random angle for each particle.\r\n\t */\r\n\tparticleSpacing: number;\r\n\t/**\r\n\t * Angle at which to start spawning particles in a burst.\r\n\t */\r\n\tangleStart: number;\r\n\t/**\r\n\t * Rotation of the emitter or emitter\'s owner in degrees. This is added to\r\n\t * the calculated spawn angle.\r\n\t * To change this, use rotate().\r\n\t */\r\n\tprotected rotation: number;\r\n\t/**\r\n\t * The world position of the emitter\'s owner, to add spawnPos to when\r\n\t * spawning particles. To change this, use updateOwnerPos().\r\n\t */\r\n\tprotected ownerPos: Point;\r\n\t/**\r\n\t * The origin + spawnPos in the previous update, so that the spawn position\r\n\t * can be interpolated to space out particles better.\r\n\t */\r\n\tprotected _prevEmitterPos: Point;\r\n\t/**\r\n\t * If _prevEmitterPos is valid, to prevent interpolation on the first update\r\n\t */\r\n\tprotected _prevPosIsValid: boolean;\r\n\t/**\r\n\t * If either ownerPos or spawnPos has changed since the previous update.\r\n\t */\r\n\tprotected _posChanged: boolean;\r\n\t/**\r\n\t * The container to add particles to.\r\n\t */\r\n\tprotected _parent: Container;\r\n\t/**\r\n\t * If particles should be added at the back of the display list instead of the front.\r\n\t */\r\n\taddAtBack: boolean;\r\n\t/**\r\n\t * The current number of active particles.\r\n\t */\r\n\tparticleCount: number;\r\n\t/**\r\n\t * If particles should be emitted during update() calls. Setting this to false\r\n\t * stops new particles from being created, but allows existing ones to die out.\r\n\t */\r\n\tprotected _emit: boolean;\r\n\t/**\r\n\t * The timer for when to spawn particles in seconds, where numbers less\r\n\t * than 0 mean that particles should be spawned.\r\n\t */\r\n\tprotected _spawnTimer: number;\r\n\t/**\r\n\t * The life of the emitter in seconds.\r\n\t */\r\n\tprotected _emitterLife: number;\r\n\t/**\r\n\t * The particles that are active and on the display list. This is the first particle in a\r\n\t * linked list.\r\n\t */\r\n\tprotected _activeParticlesFirst: Particle;\r\n\t/**\r\n\t * The particles that are active and on the display list. This is the last particle in a\r\n\t * linked list.\r\n\t */\r\n\tprotected _activeParticlesLast: Particle;\r\n\t/**\r\n\t * The particles that are not currently being used. This is the first particle in a\r\n\t * linked list.\r\n\t */\r\n\tprotected _poolFirst: Particle;\r\n\t/**\r\n\t * The original config object that this emitter was initialized with.\r\n\t */\r\n\tprotected _origConfig: any;\r\n\t/**\r\n\t * The original particle image data that this emitter was initialized with.\r\n\t */\r\n\tprotected _origArt: any;\r\n\t/**\r\n\t * If the update function is called automatically from the shared ticker.\r\n\t * Setting this to false requires calling the update function manually.\r\n\t */\r\n\tprotected _autoUpdate: boolean;\r\n\t/**\r\n\t * A number keeping index of currently applied image. Used to emit arts in order.\r\n\t */\r\n\tprotected _currentImageIndex: number;\r\n\t/**\r\n\t * If the emitter should destroy itself when all particles have died out. This is set by\r\n\t * playOnceAndDestroy();\r\n\t */\r\n\tprotected _destroyWhenComplete: boolean;\r\n\t/**\r\n\t * A callback for when all particles have died out. This is set by\r\n\t * playOnceAndDestroy() or playOnce();\r\n\t */\r\n\tprotected _completeCallback: () => void;\r\n\t/**\r\n\t * @param particleParent The container to add the particles to.\r\n\t * @param particleImages A texture or array of textures to use\r\n\t *                       for the particles. Strings will be turned\r\n\t *                       into textures via Texture.fromImage().\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t * @param config.emit If config.emit is explicitly passed as false, the\r\n\t *                    Emitter will start disabled.\r\n\t * @param config.autoUpdate If config.autoUpdate is explicitly passed as\r\n\t *                          true, the Emitter will automatically call\r\n\t *                          update via the PIXI shared ticker.\r\n\t */\r\n\tconstructor(particleParent: Container, particleImages: any, config: EmitterConfig | OldEmitterConfig);\r\n\t/**\r\n\t * If the emitter is using particle art in order as provided in `particleImages`.\r\n\t * Effective only when `particleImages` has multiple art options.\r\n\t * This is particularly useful ensuring that each art shows up once, in case you need to emit a body in an order.\r\n\t * For example: dragon - [Head, body1, body2, ..., tail]\r\n\t */\r\n\torderedArt: boolean;\r\n\t/**\r\n\t * Time between particle spawns in seconds. If this value is not a number greater than 0,\r\n\t * it will be set to 1 (particle per second) to prevent infinite loops.\r\n\t */\r\n\tfrequency: number;\r\n\t/**\r\n\t * The constructor used to create new particles. The default is\r\n\t * the built in Particle class. Setting this will dump any active or\r\n\t * pooled particles, if the emitter has already been used.\r\n\t */\r\n\tparticleConstructor: typeof Particle;\r\n\t/**\r\n\t* The container to add particles to. Settings this will dump any active particles.\r\n\t*/\r\n\tparent: Container;\r\n\t/**\r\n\t * Sets up the emitter based on the config settings.\r\n\t * @param art A texture or array of textures to use for the particles.\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t */\r\n\tinit(art: any, config: EmitterConfig | OldEmitterConfig): void;\r\n\t/**\r\n\t * Sets up additional parameters to the emitter from config settings.\r\n\t * Using for parsing additional parameters on classes that extend from Emitter\r\n\t * @param art A texture or array of textures to use for the particles.\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t */\r\n\tprotected initAdditional(art: any, config: EmitterConfig | OldEmitterConfig): void;\r\n\t/**\r\n\t * Parsing emitter spawn type from config settings.\r\n\t * Place for override and add new kind of spawn type\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t */\r\n\tprotected parseSpawnType(config: EmitterConfig | OldEmitterConfig): void;\r\n\t/**\r\n\t * Recycles an individual particle. For internal use only.\r\n\t * @param particle The particle to recycle.\r\n\t * @internal\r\n\t */\r\n\trecycle(particle: Particle): void;\r\n\t/**\r\n\t * Sets the rotation of the emitter to a new value.\r\n\t * @param newRot The new rotation, in degrees.\r\n\t */\r\n\trotate(newRot: number): void;\r\n\t/**\r\n\t * Changes the spawn position of the emitter.\r\n\t * @param x The new x value of the spawn position for the emitter.\r\n\t * @param y The new y value of the spawn position for the emitter.\r\n\t */\r\n\tupdateSpawnPos(x: number, y: number): void;\r\n\t/**\r\n\t * Changes the position of the emitter\'s owner. You should call this if you are adding\r\n\t * particles to the world container that your emitter\'s owner is moving around in.\r\n\t * @param x The new x value of the emitter\'s owner.\r\n\t * @param y The new y value of the emitter\'s owner.\r\n\t */\r\n\tupdateOwnerPos(x: number, y: number): void;\r\n\t/**\r\n\t * Prevents emitter position interpolation in the next update.\r\n\t * This should be used if you made a major position change of your emitter\'s owner\r\n\t * that was not normal movement.\r\n\t */\r\n\tresetPositionTracking(): void;\r\n\t/**\r\n\t * If particles should be emitted during update() calls. Setting this to false\r\n\t * stops new particles from being created, but allows existing ones to die out.\r\n\t */\r\n\temit: boolean;\r\n\t/**\r\n\t * If the update function is called automatically from the shared ticker.\r\n\t * Setting this to false requires calling the update function manually.\r\n\t */\r\n\tautoUpdate: boolean;\r\n\t/**\r\n\t * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\r\n\t * when particle emission is complete.\r\n\t * @param callback Callback for when emission is complete (all particles have died off)\r\n\t */\r\n\tplayOnceAndDestroy(callback?: () => void): void;\r\n\t/**\r\n\t * Starts emitting particles and optionally calls a callback when particle emission is complete.\r\n\t * @param callback Callback for when emission is complete (all particles have died off)\r\n\t */\r\n\tplayOnce(callback?: () => void): void;\r\n\t/**\r\n\t * Updates all particles spawned by this emitter and emits new ones.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t */\r\n\tupdate(delta: number): void;\r\n\t/**\r\n\t * Set additional properties to new particle.\r\n\t * Using on classes that extend from Emitter\r\n\t * @param p The particle\r\n\t */\r\n\tprotected applyAdditionalProperties(p: Particle): void;\r\n\t/**\r\n\t * Positions a particle for a point type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter\'s x position\r\n\t * @param emitPosY The emitter\'s y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnPoint(p: Particle, emitPosX: number, emitPosY: number): void;\r\n\t/**\r\n\t * Positions a particle for a rectangle type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter\'s x position\r\n\t * @param emitPosY The emitter\'s y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnRect(p: Particle, emitPosX: number, emitPosY: number): void;\r\n\t/**\r\n\t * Positions a particle for a circle type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter\'s x position\r\n\t * @param emitPosY The emitter\'s y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnCircle(p: Particle, emitPosX: number, emitPosY: number): void;\r\n\t/**\r\n\t * Positions a particle for a ring type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter\'s x position\r\n\t * @param emitPosY The emitter\'s y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnRing(p: Particle, emitPosX: number, emitPosY: number): void;\r\n\t/**\r\n\t * Positions a particle for polygonal chain.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter\'s x position\r\n\t * @param emitPosY The emitter\'s y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnPolygonalChain(p: Particle, emitPosX: number, emitPosY: number): void;\r\n\t/**\r\n\t * Positions a particle for a burst type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter\'s x position\r\n\t * @param emitPosY The emitter\'s y position\r\n\t * @param i The particle number in the current wave.\r\n\t */\r\n\tprotected _spawnBurst(p: Particle, emitPosX: number, emitPosY: number, i: number): void;\r\n\t/**\r\n\t * Kills all active particles immediately.\r\n\t */\r\n\tcleanup(): void;\r\n\t/**\r\n\t * Destroys the emitter and all of its particles.\r\n\t */\r\n\tdestroy(): void;\r\n}\n/**\r\n * Singly linked list container for keeping track of interpolated properties for particles.\r\n * Each Particle will have one of these for each interpolated property.\r\n */\nexport declare class PropertyList<V> {\r\n\t/**\r\n\t * The current property node in the linked list.\r\n\t */\r\n\tcurrent: PropertyNode<V>;\r\n\t/**\r\n\t * The next property node in the linked list. Stored separately for slightly less variable\r\n\t * access.\r\n\t */\r\n\tnext: PropertyNode<V>;\r\n\t/**\r\n\t * Calculates the correct value for the current interpolation value. This method is set in\r\n\t * the reset() method.\r\n\t * @param lerp The interpolation value from 0-1.\r\n\t * @return The interpolated value. Colors are converted to the hex value.\r\n\t */\r\n\tinterpolate: (lerp: number) => number;\r\n\t/**\r\n\t * A custom easing method for this list.\r\n\t * @param lerp The interpolation value from 0-1.\r\n\t * @return The eased value, also from 0-1.\r\n\t */\r\n\tease: SimpleEase;\r\n\t/**\r\n\t * If this list manages colors, which requires a different method for interpolation.\r\n\t */\r\n\tprivate isColor;\r\n\t/**\r\n\t * @param isColor If this list handles color values\r\n\t */\r\n\tconstructor(isColor?: boolean);\r\n\t/**\r\n\t * Resets the list for use.\r\n\t * @param first The first node in the list.\r\n\t * @param first.isStepped If the values should be stepped instead of interpolated linearly.\r\n\t */\r\n\treset(first: PropertyNode<V>): void;\r\n}\n/** Interface for a child of a LinkedListContainer (has the prev/next properties added) */\nexport interface LinkedListChild extends DisplayObject {\r\n\tnextChild: LinkedListChild | null;\r\n\tprevChild: LinkedListChild | null;\r\n}\n/**\r\n * A semi-experimental Container that uses a doubly linked list to manage children instead of an\r\n * array. This means that adding/removing children often is not the same performance hit that\r\n * it would to be continually pushing/splicing.\r\n * However, this is primarily intended to be used for heavy particle usage, and may not handle\r\n * edge cases well if used as a complete Container replacement.\r\n */\nexport declare class LinkedListContainer extends Container {\r\n\tprivate _firstChild;\r\n\tprivate _lastChild;\r\n\tprivate _childCount;\r\n\treadonly firstChild: LinkedListChild;\r\n\treadonly lastChild: LinkedListChild;\r\n\treadonly childCount: number;\r\n\taddChild<T extends DisplayObject[]>(...children: T): T[0];\r\n\taddChildAt<T extends DisplayObject>(child: T, index: number): T;\r\n\t/**\r\n\t * Adds a child to the container to be rendered below another child.\r\n\t *\r\n\t * @param child The child to add\r\n\t * @param relative - The current child to add the new child relative to.\r\n\t * @return The child that was added.\r\n\t */\r\n\taddChildBelow<T extends DisplayObject>(child: T, relative: DisplayObject): T;\r\n\t/**\r\n\t * Adds a child to the container to be rendered above another child.\r\n\t *\r\n\t * @param child The child to add\r\n\t * @param relative - The current child to add the new child relative to.\r\n\t * @return The child that was added.\r\n\t */\r\n\taddChildAbove<T extends DisplayObject>(child: T, relative: DisplayObject): T;\r\n\tswapChildren(child: DisplayObject, child2: DisplayObject): void;\r\n\tgetChildIndex(child: DisplayObject): number;\r\n\tsetChildIndex(child: DisplayObject, index: number): void;\r\n\tremoveChild<T extends DisplayObject[]>(...children: T): T[0];\r\n\tgetChildAt(index: number): DisplayObject;\r\n\tremoveChildAt(index: number): DisplayObject;\r\n\tremoveChildren(beginIndex?: number, endIndex?: number): DisplayObject[];\r\n\t/**\r\n\t * Updates the transform on all children of this container for rendering.\r\n\t * Copied from and overrides PixiJS v5 method (v4 method is identical)\r\n\t */\r\n\tupdateTransform(): void;\r\n\t/**\r\n\t * Recalculates the bounds of the container.\r\n\t * Copied from and overrides PixiJS v5 method (v4 method is identical)\r\n\t */\r\n\tcalculateBounds(): void;\r\n\t/**\r\n\t * Retrieves the local bounds of the displayObject as a rectangle object. Copied from and overrides PixiJS v5 method\r\n\t */\r\n\tgetLocalBounds(rect?: Rectangle, skipChildrenUpdate?: boolean): Rectangle;\r\n\t/**\r\n\t * Renders the object using the WebGL renderer. Copied from and overrides PixiJS v5 method\r\n\t */\r\n\trender(renderer: Renderer): void;\r\n\t/**\r\n\t * Render the object using the WebGL renderer and advanced features. Copied from and overrides PixiJS v5 method\r\n\t */\r\n\tprotected renderAdvanced(renderer: Renderer): void;\r\n\t/**\r\n\t * Renders the object using the WebGL renderer. Copied from and overrides PixiJS V4 method.\r\n\t */\r\n\trenderWebGL(renderer: any): void;\r\n\t/**\r\n\t * Render the object using the WebGL renderer and advanced features. Copied from and overrides PixiJS V4 method.\r\n\t */\r\n\tprivate renderAdvancedWebGL;\r\n\t/**\r\n\t * Renders the object using the Canvas renderer. Copied from and overrides PixiJS V4 method or Canvas mixin in V5.\r\n\t */\r\n\trenderCanvas(renderer: any): void;\r\n}\n/**\r\n * An individual particle image. You shouldn\'t have to deal with these.\r\n */\nexport declare class Particle extends Sprite implements LinkedListChild {\r\n\t/**\r\n\t * The emitter that controls this particle.\r\n\t */\r\n\temitter: Emitter;\r\n\t/**\r\n\t * The velocity of the particle. Speed may change, but the angle also\r\n\t * contained in velocity is constant.\r\n\t */\r\n\tvelocity: Point;\r\n\t/**\r\n\t * The maximum lifetime of this particle, in seconds.\r\n\t */\r\n\tmaxLife: number;\r\n\t/**\r\n\t * The current age of the particle, in seconds.\r\n\t */\r\n\tage: number;\r\n\t/**\r\n\t * A simple easing function to be applied to all properties that\r\n\t * are being interpolated.\r\n\t */\r\n\tease: SimpleEase;\r\n\t/**\r\n\t * Extra data that the emitter passes along for custom particles.\r\n\t */\r\n\textraData: any;\r\n\t/**\r\n\t * The alpha of the particle throughout its life.\r\n\t */\r\n\talphaList: PropertyList<number>;\r\n\t/**\r\n\t * The speed of the particle throughout its life.\r\n\t */\r\n\tspeedList: PropertyList<number>;\r\n\t/**\r\n\t * A multiplier from 0-1 applied to the speed of the particle at all times.\r\n\t */\r\n\tspeedMultiplier: number;\r\n\t/**\r\n\t * Acceleration to apply to the particle.\r\n\t */\r\n\tacceleration: Point;\r\n\t/**\r\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\r\n\t * will disable the maximum speed.\r\n\t */\r\n\tmaxSpeed: number;\r\n\t/**\r\n\t * Speed at which the particle rotates, in radians per second.\r\n\t */\r\n\trotationSpeed: number;\r\n\t/**\r\n\t * Acceleration of rotation (angular acceleration) to apply to the particle.\r\n\t */\r\n\trotationAcceleration: number;\r\n\t/**\r\n\t * If particle rotation is locked, preventing rotation from occurring due\r\n\t * to directional changes.\r\n\t */\r\n\tnoRotation: boolean;\r\n\t/**\r\n\t * The scale of the particle throughout its life.\r\n\t */\r\n\tscaleList: PropertyList<number>;\r\n\t/**\r\n\t * A multiplier from 0-1 applied to the scale of the particle at all times.\r\n\t */\r\n\tscaleMultiplier: number;\r\n\t/**\r\n\t * The tint of the particle throughout its life.\r\n\t */\r\n\tcolorList: PropertyList<Color>;\r\n\t/**\r\n\t * A reference to init, so that subclasses can access it without the penalty of Function.call()\r\n\t */\r\n\tprotected Particle_init: typeof Particle.prototype.init;\r\n\t/**\r\n\t * A reference to update so that subclasses can access the original without the overhead\r\n\t * of Function.call().\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t * @return The standard interpolation multiplier (0-1) used for all relevant particle\r\n\t *                   properties. A value of -1 means the particle died of old age instead.\r\n\t */\r\n\tprotected Particle_update: typeof Particle.prototype.update;\r\n\tprotected Particle_destroy: typeof Particle.prototype.destroy;\r\n\tprotected Sprite_destroy: typeof Sprite.prototype.destroy;\r\n\t/**\r\n\t * If alpha should be interpolated at all.\r\n\t */\r\n\tprotected _doAlpha: boolean;\r\n\t/**\r\n\t * If scale should be interpolated at all.\r\n\t */\r\n\tprotected _doScale: boolean;\r\n\t/**\r\n\t * If speed should be interpolated at all.\r\n\t */\r\n\tprotected _doSpeed: boolean;\r\n\t/**\r\n\t * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\r\n\t * and _doSpeed gets priority.\r\n\t */\r\n\tprotected _doAcceleration: boolean;\r\n\t/**\r\n\t * If color should be interpolated at all.\r\n\t */\r\n\tprotected _doColor: boolean;\r\n\t/**\r\n\t * If normal movement should be handled. Subclasses wishing to override movement\r\n\t * can set this to false in init().\r\n\t */\r\n\tprotected _doNormalMovement: boolean;\r\n\t/**\r\n\t * One divided by the max life of the particle, saved for slightly faster math.\r\n\t */\r\n\tprivate _oneOverLife;\r\n\t/**\r\n\t * Reference to the next particle in the list.\r\n\t */\r\n\tnext: Particle;\r\n\t/**\r\n\t * Reference to the previous particle in the list.\r\n\t */\r\n\tprev: Particle;\r\n\tprevChild: LinkedListChild;\r\n\tnextChild: LinkedListChild;\r\n\t/**\r\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\r\n\t */\r\n\tconstructor(emitter: Emitter);\r\n\t/**\r\n\t * Initializes the particle for use, based on the properties that have to\r\n\t * have been set already on the particle.\r\n\t */\r\n\tinit(): void;\r\n\t/**\r\n\t * Sets the texture for the particle. This can be overridden to allow\r\n\t * for an animated particle.\r\n\t * @param art The texture to set.\r\n\t */\r\n\tapplyArt(art: any): void;\r\n\t/**\r\n\t * Updates the particle.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t * @return The standard interpolation multiplier (0-1) used for all\r\n\t *         relevant particle properties. A value of -1 means the particle\r\n\t *         died of old age instead.\r\n\t */\r\n\tupdate(delta: number): number;\r\n\t/**\r\n\t * Kills the particle, removing it from the display list\r\n\t * and telling the emitter to recycle it.\r\n\t */\r\n\tkill(): void;\r\n\t/**\r\n\t * Destroys the particle, removing references and preventing future use.\r\n\t */\r\n\tdestroy(): void;\r\n\t/**\r\n\t * Checks over the art that was passed to the Emitter\'s init() function, to do any special\r\n\t * modifications to prepare it ahead of time.\r\n\t * @param art The array of art data. For Particle, it should be an array of\r\n\t *            Textures. Any strings in the array will be converted to\r\n\t *            Textures via Texture.from().\r\n\t * @return The art, after any needed modifications.\r\n\t */\r\n\tstatic parseArt(art: any[]): any[];\r\n\t/**\r\n\t * Parses extra emitter data to ensure it is set up for this particle class.\r\n\t * Particle does nothing to the extra data.\r\n\t * @param extraData The extra data from the particle config.\r\n\t * @return The parsed extra data.\r\n\t */\r\n\tstatic parseData(extraData: any): any;\r\n}\n/**\r\n * An particle that follows a path defined by an algebraic expression, e.g. "sin(x)" or\r\n * "5x + 3".\r\n * To use this class, the particle config must have a "path" string in the\r\n * "extraData" parameter. This string should have "x" in it to represent movement (from the\r\n * speed settings of the particle). It may have numbers, parentheses, the four basic\r\n * operations, and the following Math functions or properties (without the preceding "Math."):\r\n * "pow", "sqrt", "abs", "floor", "round", "ceil", "E", "PI", "sin", "cos", "tan", "asin",\r\n * "acos", "atan", "atan2", "log".\r\n * The overall movement of the particle and the expression value become x and y positions for\r\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\r\n * the particle.\r\n *\r\n * Some example paths:\r\n *\r\n * \t"sin(x/10) * 20" // A sine wave path.\r\n * \t"cos(x/100) * 30" // Particles curve counterclockwise (for medium speed/low lifetime particles)\r\n * \t"pow(x/10, 2) / 2" // Particles curve clockwise (remember, +y is down).\r\n */\nexport declare class PathParticle extends Particle {\r\n\t/**\r\n\t * The function representing the path the particle should take.\r\n\t */\r\n\tpath: Function;\r\n\t/**\r\n\t * The initial rotation in degrees of the particle, because the direction of the path\r\n\t * is based on that.\r\n\t */\r\n\tinitialRotation: number;\r\n\t/**\r\n\t * The initial position of the particle, as all path movement is added to that.\r\n\t */\r\n\tinitialPosition: Point;\r\n\t/**\r\n\t * Total single directional movement, due to speed.\r\n\t */\r\n\tmovement: number;\r\n\t/**\r\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\r\n\t */\r\n\tconstructor(emitter: Emitter);\r\n\t/**\r\n\t * Initializes the particle for use, based on the properties that have to\r\n\t * have been set already on the particle.\r\n\t */\r\n\tinit(): void;\r\n\t/**\r\n\t * Updates the particle.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t */\r\n\tupdate(delta: number): number;\r\n\t/**\r\n\t * Destroys the particle, removing references and preventing future use.\r\n\t */\r\n\tdestroy(): void;\r\n\t/**\r\n\t * Checks over the art that was passed to the Emitter\'s init() function, to do any special\r\n\t * modifications to prepare it ahead of time. This just runs Particle.parseArt().\r\n\t * @param art The array of art data. For Particle, it should be an array of\r\n\t *            Textures. Any strings in the array will be converted to\r\n\t *            Textures via Texture.fromImage().\r\n\t * @return The art, after any needed modifications.\r\n\t */\r\n\tstatic parseArt(art: (Texture | string)[]): Texture[];\r\n\t/**\r\n\t * Parses extra emitter data to ensure it is set up for this particle class.\r\n\t * PathParticle checks for the existence of path data, and parses the path data for use\r\n\t * by particle instances.\r\n\t * @param extraData The extra data from the particle config.\r\n\t * @return The parsed extra data.\r\n\t */\r\n\tstatic parseData(extraData: {\r\n\t\tpath: string;\r\n\t}): any;\r\n}\nexport interface ParsedAnimatedParticleArt {\r\n\ttextures: Texture[];\r\n\tduration: number;\r\n\tframerate: number;\r\n\tloop: boolean;\r\n}\nexport interface AnimatedParticleArt {\r\n\tframerate: \'matchLife\' | number;\r\n\tloop?: boolean;\r\n\ttextures: (string | Texture | {\r\n\t\ttexture: string | Texture;\r\n\t\tcount: number;\r\n\t})[];\r\n}\n/**\r\n * An individual particle image with an animation. Art data passed to the emitter must be\r\n * formatted in a particular way for AnimatedParticle to be able to handle it:\r\n *\r\n * ```typescript\r\n * {\r\n *     //framerate is required. It is the animation speed of the particle in frames per\r\n *     //second.\r\n *     //A value of "matchLife" causes the animation to match the lifetime of an individual\r\n *     //particle, instead of at a constant framerate. This causes the animation to play\r\n *     //through one time, completing when the particle expires.\r\n *     framerate: 6,\r\n *     //loop is optional, and defaults to false.\r\n *     loop: true,\r\n *     //textures is required, and can be an array of any (non-zero) length.\r\n *     textures: [\r\n *         //each entry represents a single texture that should be used for one or more\r\n *         //frames. Any strings will be converted to Textures with Texture.from().\r\n *         //Instances of PIXI.Texture will be used directly.\r\n *         "animFrame1.png",\r\n *         //entries can be an object with a \'count\' property, telling AnimatedParticle to\r\n *         //use that texture for \'count\' frames sequentially.\r\n *         {\r\n *             texture: "animFrame2.png",\r\n *             count: 3\r\n *         },\r\n *         "animFrame3.png"\r\n *     ]\r\n * }\r\n * ```\r\n */\nexport declare class AnimatedParticle extends Particle {\r\n\t/**\r\n\t * Texture array used as each frame of animation, similarly to how MovieClip works.\r\n\t */\r\n\tprivate textures;\r\n\t/**\r\n\t * Duration of the animation, in seconds.\r\n\t */\r\n\tprivate duration;\r\n\t/**\r\n\t * Animation framerate, in frames per second.\r\n\t */\r\n\tprivate framerate;\r\n\t/**\r\n\t * Animation time elapsed, in seconds.\r\n\t */\r\n\tprivate elapsed;\r\n\t/**\r\n\t * If this particle animation should loop.\r\n\t */\r\n\tprivate loop;\r\n\t/**\r\n\t * @param emitter The emitter that controls this AnimatedParticle.\r\n\t */\r\n\tconstructor(emitter: Emitter);\r\n\t/**\r\n\t * Initializes the particle for use, based on the properties that have to\r\n\t * have been set already on the particle.\r\n\t */\r\n\tinit(): void;\r\n\t/**\r\n\t * Sets the textures for the particle.\r\n\t * @param art An array of PIXI.Texture objects for this animated particle.\r\n\t */\r\n\tapplyArt(art: ParsedAnimatedParticleArt): void;\r\n\t/**\r\n\t * Updates the particle.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t */\r\n\tupdate(delta: number): number;\r\n\t/**\r\n\t * Destroys the particle, removing references and preventing future use.\r\n\t */\r\n\tdestroy(): void;\r\n\t/**\r\n\t * Checks over the art that was passed to the Emitter\'s init() function, to do any special\r\n\t * modifications to prepare it ahead of time.\r\n\t * @param art The array of art data, properly formatted for AnimatedParticle.\r\n\t * @return The art, after any needed modifications.\r\n\t */\r\n\tstatic parseArt(art: AnimatedParticleArt[]): any;\r\n}\n\nexport {};\n']},93762:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["pixi.js\\pixi.js.d.ts","/**\n * @namespace PIXI\n */\ndeclare namespace PIXI {\n    /**\n     * String of the current PIXI version.\n     *\n     * @static\n     * @constant\n     * @memberof PIXI\n     * @name VERSION\n     * @type {string}\n     */\n    var VERSION: string;\n    /**\n     * This namespace contains WebGL-only display filters that can be applied\n     * to DisplayObjects using the {@link PIXI.DisplayObject#filters filters} property.\n     *\n     * Since PixiJS only had a handful of built-in filters, additional filters\n     * can be downloaded {@link https://github.com/pixijs/pixi-filters here} from the\n     * PixiJS Filters repository.\n     *\n     * All filters must extend {@link PIXI.Filter}.\n     *\n     * @example\n     * // Create a new application\n     * const app = new PIXI.Application();\n     *\n     * // Draw a green rectangle\n     * const rect = new PIXI.Graphics()\n     *     .beginFill(0x00ff00)\n     *     .drawRect(40, 40, 200, 200);\n     *\n     * // Add a blur filter\n     * rect.filters = [new PIXI.filters.BlurFilter()];\n     *\n     * // Display rectangle\n     * app.stage.addChild(rect);\n     * document.body.appendChild(app.view);\n     * @namespace PIXI.filters\n     */\n    namespace filters {\n        /**\n         * Simplest filter - applies alpha.\n         *\n         * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n         * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n         * If elements are not opaque, they will blend with each other anyway.\n         *\n         * Very handy if you want to use common features of all filters:\n         *\n         * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n         *\n         * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n         *\n         * @class\n         * @extends PIXI.Filter\n         * @memberof PIXI.filters\n         */\n        class AlphaFilter extends PIXI.Filter {\n            constructor(alpha?: number);\n            /**\n             * Coefficient for alpha multiplication\n             *\n             * @member {number}\n             * @default 1\n             */\n            alpha: number;\n            /**\n             * The padding of the filter. Some filters require extra space to breath such as a blur.\n             * Increasing this will add extra width and height to the bounds of the object that the\n             * filter is applied to.\n             *\n             * @member {number} PIXI.Filter#padding\n             */\n            padding: number;\n            /**\n             * The resolution of the filter. Setting this to be lower will lower the quality but\n             * increase the performance of the filter.\n             *\n             * @member {number} PIXI.Filter#resolution\n             */\n            resolution: number;\n            /**\n             * If enabled is true the filter is applied, if false it will not.\n             *\n             * @member {boolean} PIXI.Filter#enabled\n             */\n            enabled: boolean;\n            /**\n             * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n             * Switch it off if it does not work for specific shader.\n             *\n             * @member {boolean} PIXI.Filter#autoFit\n             */\n            autoFit: boolean;\n            /**\n             * Legacy filters use position and uvs from attributes\n             * @member {boolean} PIXI.Filter#legacy\n             * @readonly\n             */\n            readonly legacy: boolean;\n            /**\n             * The WebGL state the filter requires to render\n             * @member {PIXI.State} PIXI.Filter#state\n             */\n            state: PIXI.State;\n            /**\n             * Applies the filter\n             *\n             * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from\n             * @param {PIXI.RenderTexture} input - The input render target.\n             * @param {PIXI.RenderTexture} output - The target to output to.\n             * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.\n             * @param {object} [currentState] - It's current state of filter.\n             *        There are some useful properties in the currentState :\n             *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n             */\n            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, currentState?: any): void;\n            /**\n             * Sets the blendmode of the filter\n             *\n             * @member {number}\n             * @default PIXI.BLEND_MODES.NORMAL\n             */\n            blendMode: number;\n            /**\n             * Program that the shader uses\n             *\n             * @member {PIXI.Program} PIXI.Shader#program\n             */\n            program: PIXI.Program;\n            /**\n             * Shader uniform values, shortcut for `uniformGroup.uniforms`\n             * @readonly\n             * @member {object}\n             */\n            readonly uniforms: any;\n        }\n        /**\n         * The BlurFilter applies a Gaussian blur to an object.\n         *\n         * The strength of the blur can be set for the x-axis and y-axis separately.\n         *\n         * @class\n         * @extends PIXI.Filter\n         * @memberof PIXI.filters\n         */\n        class BlurFilter extends PIXI.Filter {\n            constructor(strength?: number, quality?: number, resolution?: number, kernelSize?: number);\n            /**\n             * Applies the filter.\n             *\n             * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n             * @param {PIXI.RenderTexture} input - The input target.\n             * @param {PIXI.RenderTexture} output - The output target.\n             * @param {PIXI.CLEAR_MODES} clearMode - How to clear\n             */\n            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES): void;\n            /**\n             * Sets the strength of both the blurX and blurY properties simultaneously\n             *\n             * @member {number}\n             * @default 2\n             */\n            blur: number;\n            /**\n             * Sets the number of passes for blur. More passes means higher quaility bluring.\n             *\n             * @member {number}\n             * @default 1\n             */\n            quality: number;\n            /**\n             * Sets the strength of the blurX property\n             *\n             * @member {number}\n             * @default 2\n             */\n            blurX: number;\n            /**\n             * Sets the strength of the blurY property\n             *\n             * @member {number}\n             * @default 2\n             */\n            blurY: number;\n            /**\n             * Sets the blendmode of the filter\n             *\n             * @member {number}\n             * @default PIXI.BLEND_MODES.NORMAL\n             */\n            blendMode: number;\n            /**\n             * If set to true the edge of the target will be clamped\n             *\n             * @member {boolean}\n             * @default false\n             */\n            repeatEdgePixels: boolean;\n            /**\n             * The padding of the filter. Some filters require extra space to breath such as a blur.\n             * Increasing this will add extra width and height to the bounds of the object that the\n             * filter is applied to.\n             *\n             * @member {number} PIXI.Filter#padding\n             */\n            padding: number;\n            /**\n             * The resolution of the filter. Setting this to be lower will lower the quality but\n             * increase the performance of the filter.\n             *\n             * @member {number} PIXI.Filter#resolution\n             */\n            resolution: number;\n            /**\n             * If enabled is true the filter is applied, if false it will not.\n             *\n             * @member {boolean} PIXI.Filter#enabled\n             */\n            enabled: boolean;\n            /**\n             * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n             * Switch it off if it does not work for specific shader.\n             *\n             * @member {boolean} PIXI.Filter#autoFit\n             */\n            autoFit: boolean;\n            /**\n             * Legacy filters use position and uvs from attributes\n             * @member {boolean} PIXI.Filter#legacy\n             * @readonly\n             */\n            readonly legacy: boolean;\n            /**\n             * The WebGL state the filter requires to render\n             * @member {PIXI.State} PIXI.Filter#state\n             */\n            state: PIXI.State;\n            /**\n             * Program that the shader uses\n             *\n             * @member {PIXI.Program} PIXI.Shader#program\n             */\n            program: PIXI.Program;\n            /**\n             * Shader uniform values, shortcut for `uniformGroup.uniforms`\n             * @readonly\n             * @member {object}\n             */\n            readonly uniforms: any;\n        }\n        /**\n         * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n         *\n         * @class\n         * @extends PIXI.Filter\n         * @memberof PIXI.filters\n         */\n        class BlurFilterPass extends PIXI.Filter {\n            constructor(horizontal: boolean, strength?: number, quality?: number, resolution?: number, kernelSize?: number);\n            /**\n             * Applies the filter.\n             *\n             * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n             * @param {PIXI.RenderTexture} input - The input target.\n             * @param {PIXI.RenderTexture} output - The output target.\n             * @param {PIXI.CLEAR_MODES} clearMode - How to clear\n             */\n            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES): void;\n            /**\n             * Sets the strength of both the blur.\n             *\n             * @member {number}\n             * @default 16\n             */\n            blur: number;\n            /**\n             * Sets the quality of the blur by modifying the number of passes. More passes means higher\n             * quaility bluring but the lower the performance.\n             *\n             * @member {number}\n             * @default 4\n             */\n            quality: number;\n            /**\n             * The padding of the filter. Some filters require extra space to breath such as a blur.\n             * Increasing this will add extra width and height to the bounds of the object that the\n             * filter is applied to.\n             *\n             * @member {number} PIXI.Filter#padding\n             */\n            padding: number;\n            /**\n             * The resolution of the filter. Setting this to be lower will lower the quality but\n             * increase the performance of the filter.\n             *\n             * @member {number} PIXI.Filter#resolution\n             */\n            resolution: number;\n            /**\n             * If enabled is true the filter is applied, if false it will not.\n             *\n             * @member {boolean} PIXI.Filter#enabled\n             */\n            enabled: boolean;\n            /**\n             * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n             * Switch it off if it does not work for specific shader.\n             *\n             * @member {boolean} PIXI.Filter#autoFit\n             */\n            autoFit: boolean;\n            /**\n             * Legacy filters use position and uvs from attributes\n             * @member {boolean} PIXI.Filter#legacy\n             * @readonly\n             */\n            readonly legacy: boolean;\n            /**\n             * The WebGL state the filter requires to render\n             * @member {PIXI.State} PIXI.Filter#state\n             */\n            state: PIXI.State;\n            /**\n             * Sets the blendmode of the filter\n             *\n             * @member {number}\n             * @default PIXI.BLEND_MODES.NORMAL\n             */\n            blendMode: number;\n            /**\n             * Program that the shader uses\n             *\n             * @member {PIXI.Program} PIXI.Shader#program\n             */\n            program: PIXI.Program;\n            /**\n             * Shader uniform values, shortcut for `uniformGroup.uniforms`\n             * @readonly\n             * @member {object}\n             */\n            readonly uniforms: any;\n        }\n        /**\n         * The ColorMatrixFilter class lets you apply a 5x4 matrix transformation on the RGBA\n         * color and alpha values of every pixel on your displayObject to produce a result\n         * with a new set of RGBA color and alpha values. It's pretty powerful!\n         *\n         * ```js\n         *  let colorMatrix = new PIXI.filters.ColorMatrixFilter();\n         *  container.filters = [colorMatrix];\n         *  colorMatrix.contrast(2);\n         * ```\n         * @author Clément Chenebault <clement@goodboydigital.com>\n         * @class\n         * @extends PIXI.Filter\n         * @memberof PIXI.filters\n         */\n        class ColorMatrixFilter extends PIXI.Filter {\n            constructor();\n            /**\n             * Transforms current matrix and set the new one\n             *\n             * @param {number[]} matrix - 5x4 matrix\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            _loadMatrix(matrix: number[], multiply: boolean): void;\n            /**\n             * Adjusts brightness\n             *\n             * @param {number} b - value of the brigthness (0-1, where 0 is black)\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            brightness(b: number, multiply: boolean): void;\n            /**\n             * Set the matrices in grey scales\n             *\n             * @param {number} scale - value of the grey (0-1, where 0 is black)\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            greyscale(scale: number, multiply: boolean): void;\n            /**\n             * Set the black and white matrice.\n             *\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            blackAndWhite(multiply: boolean): void;\n            /**\n             * Set the hue property of the color\n             *\n             * @param {number} rotation - in degrees\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            hue(rotation: number, multiply: boolean): void;\n            /**\n             * Set the contrast matrix, increase the separation between dark and bright\n             * Increase contrast : shadows darker and highlights brighter\n             * Decrease contrast : bring the shadows up and the highlights down\n             *\n             * @param {number} amount - value of the contrast (0-1)\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            contrast(amount: number, multiply: boolean): void;\n            /**\n             * Set the saturation matrix, increase the separation between colors\n             * Increase saturation : increase contrast, brightness, and sharpness\n             *\n             * @param {number} amount - The saturation amount (0-1)\n             * @param {boolean} [multiply] - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            saturate(amount: number, multiply?: boolean): void;\n            /**\n             * Desaturate image (remove color)\n             *\n             * Call the saturate function\n             *\n             */\n            desaturate(): void;\n            /**\n             * Negative image (inverse of classic rgb matrix)\n             *\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            negative(multiply: boolean): void;\n            /**\n             * Sepia image\n             *\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            sepia(multiply: boolean): void;\n            /**\n             * Color motion picture process invented in 1916 (thanks Dominic Szablewski)\n             *\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            technicolor(multiply: boolean): void;\n            /**\n             * Polaroid filter\n             *\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            polaroid(multiply: boolean): void;\n            /**\n             * Filter who transforms : Red -> Blue and Blue -> Red\n             *\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            toBGR(multiply: boolean): void;\n            /**\n             * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)\n             *\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            kodachrome(multiply: boolean): void;\n            /**\n             * Brown delicious browni filter (thanks Dominic Szablewski)\n             *\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            browni(multiply: boolean): void;\n            /**\n             * Vintage filter (thanks Dominic Szablewski)\n             *\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            vintage(multiply: boolean): void;\n            /**\n             * We don't know exactly what it does, kind of gradient map, but funny to play with!\n             *\n             * @param {number} desaturation - Tone values.\n             * @param {number} toned - Tone values.\n             * @param {number} lightColor - Tone values, example: `0xFFE580`\n             * @param {number} darkColor - Tone values, example: `0xFFE580`\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            colorTone(desaturation: number, toned: number, lightColor: number, darkColor: number, multiply: boolean): void;\n            /**\n             * Night effect\n             *\n             * @param {number} intensity - The intensity of the night effect.\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            night(intensity: number, multiply: boolean): void;\n            /**\n             * Predator effect\n             *\n             * Erase the current matrix by setting a new indepent one\n             *\n             * @param {number} amount - how much the predator feels his future victim\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            predator(amount: number, multiply: boolean): void;\n            /**\n             * LSD effect\n             *\n             * Multiply the current matrix\n             *\n             * @param {boolean} multiply - if true, current matrix and matrix are multiplied. If false,\n             *  just set the current matrix with @param matrix\n             */\n            lsd(multiply: boolean): void;\n            /**\n             * Erase the current matrix by setting the default one\n             *\n             */\n            reset(): void;\n            /**\n             * The matrix of the color matrix filter\n             *\n             * @member {number[]}\n             * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]\n             */\n            matrix: number[];\n            /**\n             * The opacity value to use when mixing the original and resultant colors.\n             *\n             * When the value is 0, the original color is used without modification.\n             * When the value is 1, the result color is used.\n             * When in the range (0, 1) the color is interpolated between the original and result by this amount.\n             *\n             * @member {number}\n             * @default 1\n             */\n            alpha: number;\n            /**\n             * The padding of the filter. Some filters require extra space to breath such as a blur.\n             * Increasing this will add extra width and height to the bounds of the object that the\n             * filter is applied to.\n             *\n             * @member {number} PIXI.Filter#padding\n             */\n            padding: number;\n            /**\n             * The resolution of the filter. Setting this to be lower will lower the quality but\n             * increase the performance of the filter.\n             *\n             * @member {number} PIXI.Filter#resolution\n             */\n            resolution: number;\n            /**\n             * If enabled is true the filter is applied, if false it will not.\n             *\n             * @member {boolean} PIXI.Filter#enabled\n             */\n            enabled: boolean;\n            /**\n             * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n             * Switch it off if it does not work for specific shader.\n             *\n             * @member {boolean} PIXI.Filter#autoFit\n             */\n            autoFit: boolean;\n            /**\n             * Legacy filters use position and uvs from attributes\n             * @member {boolean} PIXI.Filter#legacy\n             * @readonly\n             */\n            readonly legacy: boolean;\n            /**\n             * The WebGL state the filter requires to render\n             * @member {PIXI.State} PIXI.Filter#state\n             */\n            state: PIXI.State;\n            /**\n             * Applies the filter\n             *\n             * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from\n             * @param {PIXI.RenderTexture} input - The input render target.\n             * @param {PIXI.RenderTexture} output - The target to output to.\n             * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.\n             * @param {object} [currentState] - It's current state of filter.\n             *        There are some useful properties in the currentState :\n             *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n             */\n            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, currentState?: any): void;\n            /**\n             * Sets the blendmode of the filter\n             *\n             * @member {number}\n             * @default PIXI.BLEND_MODES.NORMAL\n             */\n            blendMode: number;\n            /**\n             * Program that the shader uses\n             *\n             * @member {PIXI.Program} PIXI.Shader#program\n             */\n            program: PIXI.Program;\n            /**\n             * Shader uniform values, shortcut for `uniformGroup.uniforms`\n             * @readonly\n             * @member {object}\n             */\n            readonly uniforms: any;\n        }\n        /**\n         * The DisplacementFilter class uses the pixel values from the specified texture\n         * (called the displacement map) to perform a displacement of an object.\n         *\n         * You can use this filter to apply all manor of crazy warping effects.\n         * Currently the `r` property of the texture is used to offset the `x`\n         * and the `g` property of the texture is used to offset the `y`.\n         *\n         * The way it works is it uses the values of the displacement map to look up the\n         * correct pixels to output. This means it's not technically moving the original.\n         * Instead, it's starting at the output and asking \"which pixel from the original goes here\".\n         * For example, if a displacement map pixel has `red = 1` and the filter scale is `20`,\n         * this filter will output the pixel approximately 20 pixels to the right of the original.\n         *\n         * @class\n         * @extends PIXI.Filter\n         * @memberof PIXI.filters\n         */\n        class DisplacementFilter extends PIXI.Filter {\n            constructor(sprite: PIXI.Sprite, scale?: number);\n            /**\n             * scaleX, scaleY for displacements\n             * @member {PIXI.Point} PIXI.filters.DisplacementFilter#scale\n             */\n            scale: PIXI.Point;\n            /**\n             * Applies the filter.\n             *\n             * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n             * @param {PIXI.RenderTexture} input - The input target.\n             * @param {PIXI.RenderTexture} output - The output target.\n             * @param {PIXI.CLEAR_MODES} clearMode - clearMode.\n             */\n            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES): void;\n            /**\n             * The texture used for the displacement map. Must be power of 2 sized texture.\n             *\n             * @member {PIXI.Texture}\n             */\n            map: PIXI.Texture;\n            /**\n             * The padding of the filter. Some filters require extra space to breath such as a blur.\n             * Increasing this will add extra width and height to the bounds of the object that the\n             * filter is applied to.\n             *\n             * @member {number} PIXI.Filter#padding\n             */\n            padding: number;\n            /**\n             * The resolution of the filter. Setting this to be lower will lower the quality but\n             * increase the performance of the filter.\n             *\n             * @member {number} PIXI.Filter#resolution\n             */\n            resolution: number;\n            /**\n             * If enabled is true the filter is applied, if false it will not.\n             *\n             * @member {boolean} PIXI.Filter#enabled\n             */\n            enabled: boolean;\n            /**\n             * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n             * Switch it off if it does not work for specific shader.\n             *\n             * @member {boolean} PIXI.Filter#autoFit\n             */\n            autoFit: boolean;\n            /**\n             * Legacy filters use position and uvs from attributes\n             * @member {boolean} PIXI.Filter#legacy\n             * @readonly\n             */\n            readonly legacy: boolean;\n            /**\n             * The WebGL state the filter requires to render\n             * @member {PIXI.State} PIXI.Filter#state\n             */\n            state: PIXI.State;\n            /**\n             * Sets the blendmode of the filter\n             *\n             * @member {number}\n             * @default PIXI.BLEND_MODES.NORMAL\n             */\n            blendMode: number;\n            /**\n             * Program that the shader uses\n             *\n             * @member {PIXI.Program} PIXI.Shader#program\n             */\n            program: PIXI.Program;\n            /**\n             * Shader uniform values, shortcut for `uniformGroup.uniforms`\n             * @readonly\n             * @member {object}\n             */\n            readonly uniforms: any;\n        }\n        /**\n         * Basic FXAA (Fast Approximate Anti-Aliasing) implementation based on the code on geeks3d.com\n         * with the modification that the texture2DLod stuff was removed since it is unsupported by WebGL.\n         *\n         * @see https://github.com/mitsuhiko/webgl-meincraft\n         *\n         * @class\n         * @extends PIXI.Filter\n         * @memberof PIXI.filters\n         *\n         */\n        class FXAAFilter extends PIXI.Filter {\n            constructor();\n            /**\n             * The padding of the filter. Some filters require extra space to breath such as a blur.\n             * Increasing this will add extra width and height to the bounds of the object that the\n             * filter is applied to.\n             *\n             * @member {number} PIXI.Filter#padding\n             */\n            padding: number;\n            /**\n             * The resolution of the filter. Setting this to be lower will lower the quality but\n             * increase the performance of the filter.\n             *\n             * @member {number} PIXI.Filter#resolution\n             */\n            resolution: number;\n            /**\n             * If enabled is true the filter is applied, if false it will not.\n             *\n             * @member {boolean} PIXI.Filter#enabled\n             */\n            enabled: boolean;\n            /**\n             * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n             * Switch it off if it does not work for specific shader.\n             *\n             * @member {boolean} PIXI.Filter#autoFit\n             */\n            autoFit: boolean;\n            /**\n             * Legacy filters use position and uvs from attributes\n             * @member {boolean} PIXI.Filter#legacy\n             * @readonly\n             */\n            readonly legacy: boolean;\n            /**\n             * The WebGL state the filter requires to render\n             * @member {PIXI.State} PIXI.Filter#state\n             */\n            state: PIXI.State;\n            /**\n             * Applies the filter\n             *\n             * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from\n             * @param {PIXI.RenderTexture} input - The input render target.\n             * @param {PIXI.RenderTexture} output - The target to output to.\n             * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.\n             * @param {object} [currentState] - It's current state of filter.\n             *        There are some useful properties in the currentState :\n             *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n             */\n            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, currentState?: any): void;\n            /**\n             * Sets the blendmode of the filter\n             *\n             * @member {number}\n             * @default PIXI.BLEND_MODES.NORMAL\n             */\n            blendMode: number;\n            /**\n             * Program that the shader uses\n             *\n             * @member {PIXI.Program} PIXI.Shader#program\n             */\n            program: PIXI.Program;\n            /**\n             * Shader uniform values, shortcut for `uniformGroup.uniforms`\n             * @readonly\n             * @member {object}\n             */\n            readonly uniforms: any;\n        }\n        /**\n         * A Noise effect filter.\n         *\n         * @class\n         * @extends PIXI.Filter\n         * @memberof PIXI.filters\n         */\n        class NoiseFilter extends PIXI.Filter {\n            constructor(noise?: number, seed?: number);\n            /**\n             * The amount of noise to apply, this value should be in the range (0, 1].\n             *\n             * @member {number}\n             * @default 0.5\n             */\n            noise: number;\n            /**\n             * A seed value to apply to the random noise generation. `Math.random()` is a good value to use.\n             *\n             * @member {number}\n             */\n            seed: number;\n            /**\n             * The padding of the filter. Some filters require extra space to breath such as a blur.\n             * Increasing this will add extra width and height to the bounds of the object that the\n             * filter is applied to.\n             *\n             * @member {number} PIXI.Filter#padding\n             */\n            padding: number;\n            /**\n             * The resolution of the filter. Setting this to be lower will lower the quality but\n             * increase the performance of the filter.\n             *\n             * @member {number} PIXI.Filter#resolution\n             */\n            resolution: number;\n            /**\n             * If enabled is true the filter is applied, if false it will not.\n             *\n             * @member {boolean} PIXI.Filter#enabled\n             */\n            enabled: boolean;\n            /**\n             * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n             * Switch it off if it does not work for specific shader.\n             *\n             * @member {boolean} PIXI.Filter#autoFit\n             */\n            autoFit: boolean;\n            /**\n             * Legacy filters use position and uvs from attributes\n             * @member {boolean} PIXI.Filter#legacy\n             * @readonly\n             */\n            readonly legacy: boolean;\n            /**\n             * The WebGL state the filter requires to render\n             * @member {PIXI.State} PIXI.Filter#state\n             */\n            state: PIXI.State;\n            /**\n             * Applies the filter\n             *\n             * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from\n             * @param {PIXI.RenderTexture} input - The input render target.\n             * @param {PIXI.RenderTexture} output - The target to output to.\n             * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.\n             * @param {object} [currentState] - It's current state of filter.\n             *        There are some useful properties in the currentState :\n             *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n             */\n            apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, currentState?: any): void;\n            /**\n             * Sets the blendmode of the filter\n             *\n             * @member {number}\n             * @default PIXI.BLEND_MODES.NORMAL\n             */\n            blendMode: number;\n            /**\n             * Program that the shader uses\n             *\n             * @member {PIXI.Program} PIXI.Shader#program\n             */\n            program: PIXI.Program;\n            /**\n             * Shader uniform values, shortcut for `uniformGroup.uniforms`\n             * @readonly\n             * @member {object}\n             */\n            readonly uniforms: any;\n        }\n    }\n    /**\n     * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n     * This is very important as it can possibly help people with disabilities access PixiJS content.\n     *\n     * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n     * events as if the mouse was being used, minimizing the effort required to implement.\n     *\n     * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class AccessibilityManager {\n        constructor(renderer: PIXI.Renderer);\n        /**\n         * Setting this to true will visually show the divs.\n         *\n         * @type {boolean}\n         */\n        debug: boolean;\n        /**\n         * The renderer this accessibility manager works for.\n         *\n         * @member {PIXI.AbstractRenderer} PIXI.AccessibilityManager#renderer\n         */\n        renderer: PIXI.AbstractRenderer;\n        /**\n         * A flag\n         * @member {boolean}\n         * @readonly\n         */\n        readonly isActive: boolean;\n        /**\n         * A flag\n         * @member {boolean}\n         * @readonly\n         */\n        readonly isMobileAccessibility: boolean;\n        /**\n         * private function that will visually add the information to the\n         * accessability div\n         *\n         * @param {HTMLElement} div\n         */\n        updateDebugHTML(div: HTMLElement): void;\n        /**\n         * Adjust the hit area based on the bounds of a display object\n         *\n         * @param {PIXI.Rectangle} hitArea - Bounds of the child\n         */\n        capHitArea(hitArea: PIXI.Rectangle): void;\n        /**\n         * Destroys the accessibility manager\n         *\n         */\n        destroy(): void;\n    }\n    /**\n     * Convenience class to create a new PIXI application.\n     *\n     * This class automatically creates the renderer, ticker and root container.\n     *\n     * @example\n     * // Create the application\n     * const app = new PIXI.Application();\n     *\n     * // Add the view to the DOM\n     * document.body.appendChild(app.view);\n     *\n     * // ex, add display objects\n     * app.stage.addChild(PIXI.Sprite.from('something.png'));\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Application {\n        constructor(options?: {\n            autoStart?: boolean;\n            width?: number;\n            height?: number;\n            view?: HTMLCanvasElement;\n            transparent?: boolean;\n            autoDensity?: boolean;\n            antialias?: boolean;\n            preserveDrawingBuffer?: boolean;\n            resolution?: number;\n            forceCanvas?: boolean;\n            backgroundColor?: number;\n            clearBeforeRender?: boolean;\n            powerPreference?: string;\n            sharedTicker?: boolean;\n            sharedLoader?: boolean;\n            resizeTo?: Window | HTMLElement;\n        });\n        /**\n         * WebGL renderer if available, otherwise CanvasRenderer.\n         * @member {PIXI.Renderer|PIXI.CanvasRenderer} PIXI.Application#renderer\n         */\n        renderer: PIXI.Renderer;\n        /**\n         * The root display container that's rendered.\n         * @member {PIXI.Container} PIXI.Application#stage\n         */\n        stage: PIXI.Container;\n        /**\n         * Register a middleware plugin for the application\n         * @static\n         * @param {PIXI.Application.Plugin} plugin - Plugin being installed\n         */\n        static registerPlugin(plugin: PIXI.Application.Plugin): void;\n        /**\n         * Render the current stage.\n         */\n        render(): void;\n        /**\n         * Reference to the renderer's canvas element.\n         * @member {HTMLCanvasElement}\n         * @readonly\n         */\n        readonly view: HTMLCanvasElement;\n        /**\n         * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n         * @member {PIXI.Rectangle}\n         * @readonly\n         */\n        readonly screen: PIXI.Rectangle;\n        /**\n         * Destroy and don't use after this.\n         * @param {Boolean} [removeView=false] - Automatically remove canvas from DOM.\n         * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n         *  have been set to that value\n         * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n         *  method called as well. 'stageOptions' will be passed on to those calls.\n         * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n         *  to true. Should it destroy the texture of the child sprite\n         * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n         *  to true. Should it destroy the base texture of the child sprite\n         */\n        destroy(removeView?: boolean, stageOptions?: {\n            children?: boolean;\n            texture?: boolean;\n            baseTexture?: boolean;\n        }): void;\n        /**\n         * The HTML element or window to automatically resize the\n         * renderer's view element to match width and height.\n         * @type {Window|HTMLElement}\n         * @name resizeTo\n         * @memberof PIXI.Application#\n         */\n        resizeTo: Window | HTMLElement;\n        /**\n         * Resize is throttled, so it's\n         * safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @method PIXI.Application#queueResize\n         */\n        queueResize(): void;\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @method PIXI.Application#resize\n         */\n        resize(): void;\n        /**\n         * Loader instance to help with asset loading.\n         * @name PIXI.Application#loader\n         * @type {PIXI.Loader}\n         * @readonly\n         */\n        readonly loader: PIXI.Loader;\n        /**\n         * Convenience method for stopping the render.\n         *\n         * @method PIXI.Application#stop\n         */\n        stop(): void;\n        /**\n         * Convenience method for starting the render.\n         *\n         * @method PIXI.Application#start\n         */\n        start(): void;\n        /**\n         * Ticker for doing render updates.\n         *\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */\n        ticker: PIXI.Ticker;\n    }\n    module Application {\n        /**\n         * @memberof PIXI.Application\n         * @typedef {object} Plugin\n         * @property {function} init - Called when Application is constructed, scoped to Application instance.\n         *  Passes in `options` as the only argument, which are Application constructor options.\n         * @property {function} destroy - Called when destroying Application, scoped to Application instance\n         */\n        type Plugin = {\n            init: (...params: any[]) => any;\n            destroy: (...params: any[]) => any;\n        };\n    }\n    /**\n     * Different types of environments for WebGL.\n     *\n     * @static\n     * @memberof PIXI\n     * @name ENV\n     * @enum {number}\n     * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility\n     *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.\n     * @property {number} WEBGL - Version 1 of WebGL\n     * @property {number} WEBGL2 - Version 2 of WebGL\n     */\n    enum ENV {\n        WEBGL_LEGACY,\n        WEBGL,\n        WEBGL2\n    }\n    /**\n     * Constant to identify the Renderer Type.\n     *\n     * @static\n     * @memberof PIXI\n     * @name RENDERER_TYPE\n     * @enum {number}\n     * @property {number} UNKNOWN - Unknown render type.\n     * @property {number} WEBGL - WebGL render type.\n     * @property {number} CANVAS - Canvas render type.\n     */\n    enum RENDERER_TYPE {\n        UNKNOWN,\n        WEBGL,\n        CANVAS\n    }\n    /**\n     * Bitwise OR of masks that indicate the buffers to be cleared.\n     *\n     * @static\n     * @memberof PIXI\n     * @name BUFFER_BITS\n     * @enum {number}\n     * @property {number} COLOR - Indicates the buffers currently enabled for color writing.\n     * @property {number} DEPTH - Indicates the depth buffer.\n     * @property {number} STENCIL - Indicates the stencil buffer.\n     */\n    enum BUFFER_BITS {\n        COLOR,\n        DEPTH,\n        STENCIL\n    }\n    /**\n     * Various blend modes supported by PIXI.\n     *\n     * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.\n     * Anything else will silently act like NORMAL.\n     *\n     * @memberof PIXI\n     * @name BLEND_MODES\n     * @enum {number}\n     * @property {number} NORMAL\n     * @property {number} ADD\n     * @property {number} MULTIPLY\n     * @property {number} SCREEN\n     * @property {number} OVERLAY\n     * @property {number} DARKEN\n     * @property {number} LIGHTEN\n     * @property {number} COLOR_DODGE\n     * @property {number} COLOR_BURN\n     * @property {number} HARD_LIGHT\n     * @property {number} SOFT_LIGHT\n     * @property {number} DIFFERENCE\n     * @property {number} EXCLUSION\n     * @property {number} HUE\n     * @property {number} SATURATION\n     * @property {number} COLOR\n     * @property {number} LUMINOSITY\n     * @property {number} NORMAL_NPM\n     * @property {number} ADD_NPM\n     * @property {number} SCREEN_NPM\n     * @property {number} NONE\n     * @property {number} SRC_IN\n     * @property {number} SRC_OUT\n     * @property {number} SRC_ATOP\n     * @property {number} DST_OVER\n     * @property {number} DST_IN\n     * @property {number} DST_OUT\n     * @property {number} DST_ATOP\n     * @property {number} SUBTRACT\n     * @property {number} SRC_OVER\n     * @property {number} ERASE\n     * @property {number} XOR\n     */\n    enum BLEND_MODES {\n        NORMAL,\n        ADD,\n        MULTIPLY,\n        SCREEN,\n        OVERLAY,\n        DARKEN,\n        LIGHTEN,\n        COLOR_DODGE,\n        COLOR_BURN,\n        HARD_LIGHT,\n        SOFT_LIGHT,\n        DIFFERENCE,\n        EXCLUSION,\n        HUE,\n        SATURATION,\n        COLOR,\n        LUMINOSITY,\n        NORMAL_NPM,\n        ADD_NPM,\n        SCREEN_NPM,\n        NONE,\n        SRC_IN,\n        SRC_OUT,\n        SRC_ATOP,\n        DST_OVER,\n        DST_IN,\n        DST_OUT,\n        DST_ATOP,\n        SUBTRACT,\n        SRC_OVER,\n        ERASE,\n        XOR\n    }\n    /**\n     * Various webgl draw modes. These can be used to specify which GL drawMode to use\n     * under certain situations and renderers.\n     *\n     * @memberof PIXI\n     * @static\n     * @name DRAW_MODES\n     * @enum {number}\n     * @property {number} POINTS\n     * @property {number} LINES\n     * @property {number} LINE_LOOP\n     * @property {number} LINE_STRIP\n     * @property {number} TRIANGLES\n     * @property {number} TRIANGLE_STRIP\n     * @property {number} TRIANGLE_FAN\n     */\n    enum DRAW_MODES {\n        POINTS,\n        LINES,\n        LINE_LOOP,\n        LINE_STRIP,\n        TRIANGLES,\n        TRIANGLE_STRIP,\n        TRIANGLE_FAN\n    }\n    /**\n     * Various GL texture/resources formats.\n     *\n     * @memberof PIXI\n     * @static\n     * @name FORMATS\n     * @enum {number}\n     * @property {number} RGBA=6408\n     * @property {number} RGB=6407\n     * @property {number} ALPHA=6406\n     * @property {number} LUMINANCE=6409\n     * @property {number} LUMINANCE_ALPHA=6410\n     * @property {number} DEPTH_COMPONENT=6402\n     * @property {number} DEPTH_STENCIL=34041\n     */\n    enum FORMATS {\n        RGBA,\n        RGB,\n        ALPHA,\n        LUMINANCE,\n        LUMINANCE_ALPHA,\n        DEPTH_COMPONENT,\n        DEPTH_STENCIL\n    }\n    /**\n     * Various GL target types.\n     *\n     * @memberof PIXI\n     * @static\n     * @name TARGETS\n     * @enum {number}\n     * @property {number} TEXTURE_2D=3553\n     * @property {number} TEXTURE_CUBE_MAP=34067\n     * @property {number} TEXTURE_2D_ARRAY=35866\n     * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069\n     * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070\n     * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071\n     * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072\n     * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073\n     * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074\n     */\n    enum TARGETS {\n        TEXTURE_2D,\n        TEXTURE_CUBE_MAP,\n        TEXTURE_2D_ARRAY,\n        TEXTURE_CUBE_MAP_POSITIVE_X,\n        TEXTURE_CUBE_MAP_NEGATIVE_X,\n        TEXTURE_CUBE_MAP_POSITIVE_Y,\n        TEXTURE_CUBE_MAP_NEGATIVE_Y,\n        TEXTURE_CUBE_MAP_POSITIVE_Z,\n        TEXTURE_CUBE_MAP_NEGATIVE_Z\n    }\n    /**\n     * Various GL data format types.\n     *\n     * @memberof PIXI\n     * @static\n     * @name TYPES\n     * @enum {number}\n     * @property {number} UNSIGNED_BYTE=5121\n     * @property {number} UNSIGNED_SHORT=5123\n     * @property {number} UNSIGNED_SHORT_5_6_5=33635\n     * @property {number} UNSIGNED_SHORT_4_4_4_4=32819\n     * @property {number} UNSIGNED_SHORT_5_5_5_1=32820\n     * @property {number} FLOAT=5126\n     * @property {number} HALF_FLOAT=36193\n     */\n    enum TYPES {\n        UNSIGNED_BYTE,\n        UNSIGNED_SHORT,\n        UNSIGNED_SHORT_5_6_5,\n        UNSIGNED_SHORT_4_4_4_4,\n        UNSIGNED_SHORT_5_5_5_1,\n        FLOAT,\n        HALF_FLOAT\n    }\n    /**\n     * The scale modes that are supported by pixi.\n     *\n     * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.\n     * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.\n     *\n     * @memberof PIXI\n     * @static\n     * @name SCALE_MODES\n     * @enum {number}\n     * @property {number} LINEAR Smooth scaling\n     * @property {number} NEAREST Pixelating scaling\n     */\n    enum SCALE_MODES {\n        LINEAR,\n        NEAREST\n    }\n    /**\n     * The wrap modes that are supported by pixi.\n     *\n     * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n     * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n     * If the texture is non power of two then clamp will be used regardless as WebGL can\n     * only use REPEAT if the texture is po2.\n     *\n     * This property only affects WebGL.\n     *\n     * @name WRAP_MODES\n     * @memberof PIXI\n     * @static\n     * @enum {number}\n     * @property {number} CLAMP - The textures uvs are clamped\n     * @property {number} REPEAT - The texture uvs tile and repeat\n     * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n     */\n    enum WRAP_MODES {\n        CLAMP,\n        REPEAT,\n        MIRRORED_REPEAT\n    }\n    /**\n     * Mipmap filtering modes that are supported by pixi.\n     *\n     * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.\n     * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,\n     * or its `POW2` and texture dimensions are powers of 2.\n     * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.\n     *\n     * This property only affects WebGL.\n     *\n     * @name MIPMAP_MODES\n     * @memberof PIXI\n     * @static\n     * @enum {number}\n     * @property {number} OFF - No mipmaps\n     * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2\n     * @property {number} ON - Always generate mipmaps\n     */\n    enum MIPMAP_MODES {\n        OFF,\n        POW2,\n        ON\n    }\n    /**\n     * How to treat textures with premultiplied alpha\n     *\n     * @name ALPHA_MODES\n     * @memberof PIXI\n     * @static\n     * @enum {number}\n     * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.\n     *  Option for compressed and data textures that are created from typed arrays.\n     * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.\n     *  Default option, used for all loaded images.\n     * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied\n     *  Example: spine atlases with `_pma` suffix.\n     * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.\n     * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.\n     * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.\n     */\n    enum ALPHA_MODES {\n        NO_PREMULTIPLIED_ALPHA,\n        PREMULTIPLY_ON_UPLOAD,\n        PREMULTIPLIED_ALPHA,\n        NPM,\n        UNPACK,\n        PMA\n    }\n    /**\n     * How to clear renderTextures in filter\n     *\n     * @name CLEAR_MODES\n     * @memberof PIXI\n     * @static\n     * @enum {number}\n     * @property {number} BLEND - Preserve the information in the texture, blend above\n     * @property {number} CLEAR - Must use `gl.clear` operation\n     * @property {number} BLIT - Clear or blit it, depends on device and level of paranoia\n     * @property {number} NO - Alias for BLEND, same as `false` in earlier versions\n     * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions\n     * @property {number} AUTO - Alias for BLIT\n     */\n    enum CLEAR_MODES {\n        BLEND,\n        CLEAR,\n        BLIT,\n        NO,\n        YES,\n        AUTO\n    }\n    /**\n     * The gc modes that are supported by pixi.\n     *\n     * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO\n     * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not\n     * used for a specified period of time they will be removed from the GPU. They will of course\n     * be uploaded again when they are required. This is a silent behind the scenes process that\n     * should ensure that the GPU does not  get filled up.\n     *\n     * Handy for mobile devices!\n     * This property only affects WebGL.\n     *\n     * @name GC_MODES\n     * @enum {number}\n     * @static\n     * @memberof PIXI\n     * @property {number} AUTO - Garbage collection will happen periodically automatically\n     * @property {number} MANUAL - Garbage collection will need to be called manually\n     */\n    enum GC_MODES {\n        AUTO,\n        MANUAL\n    }\n    /**\n     * Constants that specify float precision in shaders.\n     *\n     * @name PRECISION\n     * @memberof PIXI\n     * @constant\n     * @static\n     * @enum {string}\n     * @property {string} LOW='lowp'\n     * @property {string} MEDIUM='mediump'\n     * @property {string} HIGH='highp'\n     */\n    enum PRECISION {\n        LOW,\n        MEDIUM,\n        HIGH\n    }\n    /**\n     * Constants for mask implementations.\n     * We use `type` suffix because it leads to very different behaviours\n     *\n     * @name MASK_TYPES\n     * @memberof PIXI\n     * @static\n     * @enum {number}\n     * @property {number} NONE - Mask is ignored\n     * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap\n     * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil\n     * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture\n     */\n    enum MASK_TYPES {\n        NONE,\n        SCISSOR,\n        STENCIL,\n        SPRITE\n    }\n    /**\n     * Constants for multi-sampling antialiasing.\n     *\n     * @see PIXI.Framebuffer#multisample\n     *\n     * @name MSAA_QUALITY\n     * @memberof PIXI\n     * @static\n     * @enum {number}\n     * @property {number} NONE - No multisampling for this renderTexture\n     * @property {number} LOW - Try 2 samples\n     * @property {number} MEDIUM - Try 4 samples\n     * @property {number} HIGH - Try 8 samples\n     */\n    enum MSAA_QUALITY {\n        NONE,\n        LOW,\n        MEDIUM,\n        HIGH\n    }\n    /**\n     * The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}\n     * and {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.\n     *\n     * @abstract\n     * @class\n     * @extends PIXI.utils.EventEmitter\n     * @memberof PIXI\n     */\n    class AbstractRenderer extends PIXI.utils.EventEmitter {\n        constructor(system: string, options?: {\n            width?: number;\n            height?: number;\n            view?: HTMLCanvasElement;\n            transparent?: boolean;\n            autoDensity?: boolean;\n            antialias?: boolean;\n            resolution?: number;\n            preserveDrawingBuffer?: boolean;\n            clearBeforeRender?: boolean;\n            backgroundColor?: number;\n        });\n        /**\n         * The supplied constructor options.\n         *\n         * @member {Object} PIXI.AbstractRenderer#options\n         * @readOnly\n         */\n        readonly options: any;\n        /**\n         * The type of the renderer.\n         *\n         * @member {number} PIXI.AbstractRenderer#type\n         * @default PIXI.RENDERER_TYPE.UNKNOWN\n         * @see PIXI.RENDERER_TYPE\n         */\n        type: number;\n        /**\n         * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n         *\n         * Its safe to use as filterArea or hitArea for the whole stage.\n         *\n         * @member {PIXI.Rectangle} PIXI.AbstractRenderer#screen\n         */\n        screen: PIXI.Rectangle;\n        /**\n         * The canvas element that everything is drawn to.\n         *\n         * @member {HTMLCanvasElement} PIXI.AbstractRenderer#view\n         */\n        view: HTMLCanvasElement;\n        /**\n         * The resolution / device pixel ratio of the renderer.\n         *\n         * @member {number} PIXI.AbstractRenderer#resolution\n         * @default 1\n         */\n        resolution: number;\n        /**\n         * Whether the render view is transparent.\n         *\n         * @member {boolean} PIXI.AbstractRenderer#transparent\n         */\n        transparent: boolean;\n        /**\n         * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n         *\n         * @member {boolean} PIXI.AbstractRenderer#autoDensity\n         */\n        autoDensity: boolean;\n        /**\n         * The value of the preserveDrawingBuffer flag affects whether or not the contents of\n         * the stencil buffer is retained after rendering.\n         *\n         * @member {boolean} PIXI.AbstractRenderer#preserveDrawingBuffer\n         */\n        preserveDrawingBuffer: boolean;\n        /**\n         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n         * to clear the canvas every frame. Disable this by setting this to false. For example, if\n         * your game has a canvas filling background image you often don't need this set.\n         *\n         * @member {boolean} PIXI.AbstractRenderer#clearBeforeRender\n         * @default\n         */\n        clearBeforeRender: boolean;\n        /**\n         * The background color as a number.\n         *\n         * @member {number} PIXI.AbstractRenderer#_backgroundColor\n         * @protected\n         */\n        protected _backgroundColor: number;\n        /**\n         * The background color as an [R, G, B] array.\n         *\n         * @member {number[]} PIXI.AbstractRenderer#_backgroundColorRgba\n         * @protected\n         */\n        protected _backgroundColorRgba: number[];\n        /**\n         * The background color as a string.\n         *\n         * @member {string} PIXI.AbstractRenderer#_backgroundColorString\n         * @protected\n         */\n        protected _backgroundColorString: string;\n        /**\n         * The last root object that the renderer tried to render.\n         *\n         * @member {PIXI.DisplayObject} PIXI.AbstractRenderer#_lastObjectRendered\n         * @protected\n         */\n        protected _lastObjectRendered: PIXI.DisplayObject;\n        /**\n         * Collection of plugins.\n         * @readonly\n         * @member {object} PIXI.AbstractRenderer#plugins\n         */\n        readonly plugins: any;\n        /**\n         * Initialize the plugins.\n         *\n         * @protected\n         * @param {object} staticMap - The dictionary of statically saved plugins.\n         */\n        protected initPlugins(staticMap: any): void;\n        /**\n         * Same as view.width, actual number of pixels in the canvas by horizontal.\n         *\n         * @member {number}\n         * @readonly\n         * @default 800\n         */\n        readonly width: number;\n        /**\n         * Same as view.height, actual number of pixels in the canvas by vertical.\n         *\n         * @member {number}\n         * @readonly\n         * @default 600\n         */\n        readonly height: number;\n        /**\n         * Resizes the screen and canvas to the specified width and height.\n         * Canvas dimensions are multiplied by resolution.\n         *\n         * @param {number} screenWidth - The new width of the screen.\n         * @param {number} screenHeight - The new height of the screen.\n         */\n        resize(screenWidth: number, screenHeight: number): void;\n        /**\n         * Useful function that returns a texture of the display object that can then be used to create sprites\n         * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n         *\n         * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from.\n         * @param {PIXI.SCALE_MODES} scaleMode - The scale mode of the texture.\n         * @param {number} resolution - The resolution / device pixel ratio of the texture being generated.\n         * @param {PIXI.Rectangle} [region] - The region of the displayObject, that shall be rendered,\n         *        if no region is specified, defaults to the local bounds of the displayObject.\n         * @return {PIXI.RenderTexture} A texture of the graphics object.\n         */\n        generateTexture(displayObject: PIXI.DisplayObject, scaleMode: PIXI.SCALE_MODES, resolution: number, region?: PIXI.Rectangle): PIXI.RenderTexture;\n        /**\n         * Removes everything from the renderer and optionally removes the Canvas DOM element.\n         *\n         * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n         */\n        destroy(removeView?: boolean): void;\n        /**\n         * The background color to fill if not transparent\n         *\n         * @member {number}\n         */\n        backgroundColor: number;\n    }\n    /**\n     * The Renderer draws the scene and all its content onto a WebGL enabled canvas.\n     *\n     * This renderer should be used for browsers that support WebGL.\n     *\n     * This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.\n     * Don't forget to add the view to your DOM or you will not see anything!\n     *\n     * @class\n     * @memberof PIXI\n     * @extends PIXI.AbstractRenderer\n     */\n    class Renderer extends PIXI.AbstractRenderer {\n        constructor(options?: {\n            width?: number;\n            height?: number;\n            view?: HTMLCanvasElement;\n            transparent?: boolean;\n            autoDensity?: boolean;\n            antialias?: boolean;\n            resolution?: number;\n            clearBeforeRender?: boolean;\n            preserveDrawingBuffer?: boolean;\n            backgroundColor?: number;\n            powerPreference?: string;\n            context?: any;\n        });\n        /**\n         * WebGL context, set by the contextSystem (this.context)\n         *\n         * @readonly\n         * @member {WebGLRenderingContext} PIXI.Renderer#gl\n         */\n        readonly gl: WebGLRenderingContext;\n        /**\n         * Global uniforms\n         * @member {PIXI.UniformGroup} PIXI.Renderer#globalUniforms\n         */\n        globalUniforms: PIXI.UniformGroup;\n        /**\n         * Mask system instance\n         * @member {PIXI.systems.MaskSystem} mask\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly mask: PIXI.systems.MaskSystem;\n        /**\n         * Context system instance\n         * @member {PIXI.systems.ContextSystem} context\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly context: PIXI.systems.ContextSystem;\n        /**\n         * State system instance\n         * @member {PIXI.systems.StateSystem} state\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly state: PIXI.systems.StateSystem;\n        /**\n         * Shader system instance\n         * @member {PIXI.systems.ShaderSystem} shader\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly shader: PIXI.systems.ShaderSystem;\n        /**\n         * Texture system instance\n         * @member {PIXI.systems.TextureSystem} texture\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly texture: PIXI.systems.TextureSystem;\n        /**\n         * Geometry system instance\n         * @member {PIXI.systems.GeometrySystem} geometry\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly geometry: PIXI.systems.GeometrySystem;\n        /**\n         * Framebuffer system instance\n         * @member {PIXI.systems.FramebufferSystem} framebuffer\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly framebuffer: PIXI.systems.FramebufferSystem;\n        /**\n         * Scissor system instance\n         * @member {PIXI.systems.ScissorSystem} scissor\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly scissor: PIXI.systems.ScissorSystem;\n        /**\n         * Stencil system instance\n         * @member {PIXI.systems.StencilSystem} stencil\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly stencil: PIXI.systems.StencilSystem;\n        /**\n         * Projection system instance\n         * @member {PIXI.systems.ProjectionSystem} projection\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly projection: PIXI.systems.ProjectionSystem;\n        /**\n         * Texture garbage collector system instance\n         * @member {PIXI.systems.TextureGCSystem} textureGC\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly textureGC: PIXI.systems.TextureGCSystem;\n        /**\n         * Filter system instance\n         * @member {PIXI.systems.FilterSystem} filter\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly filter: PIXI.systems.FilterSystem;\n        /**\n         * RenderTexture system instance\n         * @member {PIXI.systems.RenderTextureSystem} renderTexture\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly renderTexture: PIXI.systems.RenderTextureSystem;\n        /**\n         * Batch system instance\n         * @member {PIXI.systems.BatchSystem} batch\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        readonly batch: PIXI.systems.BatchSystem;\n        /**\n         * Flag if we are rendering to the screen vs renderTexture\n         * @member {boolean} PIXI.Renderer#renderingToScreen\n         * @readonly\n         * @default true\n         */\n        readonly renderingToScreen: boolean;\n        /**\n         * Add a new system to the renderer.\n         * @param {Function} ClassRef - Class reference\n         * @param {string} [name] - Property name for system, if not specified\n         *        will use a static `name` property on the class itself. This\n         *        name will be assigned as s property on the Renderer so make\n         *        sure it doesn't collide with properties on Renderer.\n         * @return {PIXI.Renderer} Return instance of renderer\n         */\n        addSystem(ClassRef: (...params: any[]) => any, name?: string): PIXI.Renderer;\n        /**\n         * Renders the object to its WebGL view\n         *\n         * @param {PIXI.DisplayObject} displayObject - The object to be rendered.\n         * @param {PIXI.RenderTexture} [renderTexture] - The render texture to render to.\n         * @param {boolean} [clear=true] - Should the canvas be cleared before the new render.\n         * @param {PIXI.Matrix} [transform] - A transform to apply to the render texture before rendering.\n         * @param {boolean} [skipUpdateTransform=false] - Should we skip the update transform pass?\n         */\n        render(displayObject: PIXI.DisplayObject, renderTexture?: PIXI.RenderTexture, clear?: boolean, transform?: PIXI.Matrix, skipUpdateTransform?: boolean): void;\n        /**\n         * Resizes the WebGL view to the specified width and height.\n         *\n         * @param {number} screenWidth - The new width of the screen.\n         * @param {number} screenHeight - The new height of the screen.\n         */\n        resize(screenWidth: number, screenHeight: number): void;\n        /**\n         * Resets the WebGL state so you can render things however you fancy!\n         *\n         * @return {PIXI.Renderer} Returns itself.\n         */\n        reset(): PIXI.Renderer;\n        /**\n         * Clear the frame buffer\n         */\n        clear(): void;\n        /**\n         * Removes everything from the renderer (event listeners, spritebatch, etc...)\n         *\n         * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n         *  See: https://github.com/pixijs/pixi.js/issues/2233\n         */\n        destroy(removeView?: boolean): void;\n        /**\n         * Adds a plugin to the renderer.\n         *\n         * @method\n         * @param {string} pluginName - The name of the plugin.\n         * @param {Function} ctor - The constructor function or class for the plugin.\n         */\n        static registerPlugin(pluginName: string, ctor: (...params: any[]) => any): void;\n        /**\n         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n         *\n         * @member {PIXI.Extract} extract\n         * @memberof PIXI.Renderer#\n         * @see PIXI.Extract\n         */\n        extract: PIXI.Extract;\n        /**\n         * The supplied constructor options.\n         *\n         * @member {Object} PIXI.AbstractRenderer#options\n         * @readOnly\n         */\n        readonly options: any;\n        /**\n         * The type of the renderer.\n         *\n         * @member {number} PIXI.AbstractRenderer#type\n         * @default PIXI.RENDERER_TYPE.UNKNOWN\n         * @see PIXI.RENDERER_TYPE\n         */\n        type: number;\n        /**\n         * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n         *\n         * Its safe to use as filterArea or hitArea for the whole stage.\n         *\n         * @member {PIXI.Rectangle} PIXI.AbstractRenderer#screen\n         */\n        screen: PIXI.Rectangle;\n        /**\n         * The canvas element that everything is drawn to.\n         *\n         * @member {HTMLCanvasElement} PIXI.AbstractRenderer#view\n         */\n        view: HTMLCanvasElement;\n        /**\n         * The resolution / device pixel ratio of the renderer.\n         *\n         * @member {number} PIXI.AbstractRenderer#resolution\n         * @default 1\n         */\n        resolution: number;\n        /**\n         * Whether the render view is transparent.\n         *\n         * @member {boolean} PIXI.AbstractRenderer#transparent\n         */\n        transparent: boolean;\n        /**\n         * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n         *\n         * @member {boolean} PIXI.AbstractRenderer#autoDensity\n         */\n        autoDensity: boolean;\n        /**\n         * The value of the preserveDrawingBuffer flag affects whether or not the contents of\n         * the stencil buffer is retained after rendering.\n         *\n         * @member {boolean} PIXI.AbstractRenderer#preserveDrawingBuffer\n         */\n        preserveDrawingBuffer: boolean;\n        /**\n         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n         * to clear the canvas every frame. Disable this by setting this to false. For example, if\n         * your game has a canvas filling background image you often don't need this set.\n         *\n         * @member {boolean} PIXI.AbstractRenderer#clearBeforeRender\n         * @default\n         */\n        clearBeforeRender: boolean;\n        /**\n         * The background color as a number.\n         *\n         * @member {number} PIXI.AbstractRenderer#_backgroundColor\n         * @protected\n         */\n        protected _backgroundColor: number;\n        /**\n         * The background color as an [R, G, B] array.\n         *\n         * @member {number[]} PIXI.AbstractRenderer#_backgroundColorRgba\n         * @protected\n         */\n        protected _backgroundColorRgba: number[];\n        /**\n         * The background color as a string.\n         *\n         * @member {string} PIXI.AbstractRenderer#_backgroundColorString\n         * @protected\n         */\n        protected _backgroundColorString: string;\n        /**\n         * The last root object that the renderer tried to render.\n         *\n         * @member {PIXI.DisplayObject} PIXI.AbstractRenderer#_lastObjectRendered\n         * @protected\n         */\n        protected _lastObjectRendered: PIXI.DisplayObject;\n        /**\n         * Collection of plugins.\n         * @readonly\n         * @member {object} PIXI.AbstractRenderer#plugins\n         */\n        readonly plugins: any;\n        /**\n         * Initialize the plugins.\n         *\n         * @protected\n         * @param {object} staticMap - The dictionary of statically saved plugins.\n         */\n        protected initPlugins(staticMap: any): void;\n        /**\n         * Same as view.width, actual number of pixels in the canvas by horizontal.\n         *\n         * @member {number}\n         * @readonly\n         * @default 800\n         */\n        readonly width: number;\n        /**\n         * Same as view.height, actual number of pixels in the canvas by vertical.\n         *\n         * @member {number}\n         * @readonly\n         * @default 600\n         */\n        readonly height: number;\n        /**\n         * Useful function that returns a texture of the display object that can then be used to create sprites\n         * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n         *\n         * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from.\n         * @param {PIXI.SCALE_MODES} scaleMode - The scale mode of the texture.\n         * @param {number} resolution - The resolution / device pixel ratio of the texture being generated.\n         * @param {PIXI.Rectangle} [region] - The region of the displayObject, that shall be rendered,\n         *        if no region is specified, defaults to the local bounds of the displayObject.\n         * @return {PIXI.RenderTexture} A texture of the graphics object.\n         */\n        generateTexture(displayObject: PIXI.DisplayObject, scaleMode: PIXI.SCALE_MODES, resolution: number, region?: PIXI.Rectangle): PIXI.RenderTexture;\n        /**\n         * The background color to fill if not transparent\n         *\n         * @member {number}\n         */\n        backgroundColor: number;\n    }\n    /**\n     * System is a base class used for extending systems used by the {@link PIXI.Renderer}\n     *\n     * @see PIXI.Renderer#addSystem\n     * @class\n     * @memberof PIXI\n     */\n    class System {\n        constructor(renderer: PIXI.Renderer);\n        /**\n         * The renderer this manager works for.\n         *\n         * @member {PIXI.Renderer} PIXI.System#renderer\n         */\n        renderer: PIXI.Renderer;\n        /**\n         * Generic destroy methods to be overridden by the subclass\n         */\n        destroy(): void;\n    }\n    /**\n     * This helper function will automatically detect which renderer you should be using.\n     * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by\n     * the browser then this function will return a canvas renderer\n     *\n     * @memberof PIXI\n     * @function autoDetectRenderer\n     * @param {object} [options] - The optional renderer parameters\n     * @param {number} [options.width=800] - the width of the renderers view\n     * @param {number} [options.height=600] - the height of the renderers view\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1\n     * @param {boolean} [options.antialias=false] - sets antialias\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you\n     *  need to call toDataUrl on the webgl context\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *   not before the new render pass.\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer, retina would be 2\n     * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n     *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n     *   it is ignored.\n     * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n     *  for devices with dual graphics card **webgl only**\n     * @return {PIXI.Renderer|PIXI.CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer\n     */\n    function autoDetectRenderer(options?: {\n        width?: number;\n        height?: number;\n        view?: HTMLCanvasElement;\n        transparent?: boolean;\n        autoDensity?: boolean;\n        antialias?: boolean;\n        preserveDrawingBuffer?: boolean;\n        backgroundColor?: number;\n        clearBeforeRender?: boolean;\n        resolution?: number;\n        forceCanvas?: boolean;\n        powerPreference?: string;\n    }): PIXI.Renderer;\n    /**\n     * Renderer dedicated to drawing and batching sprites.\n     *\n     * This is the default batch renderer. It buffers objects\n     * with texture-based geometries and renders them in\n     * batches. It uploads multiple textures to the GPU to\n     * reduce to the number of draw calls.\n     *\n     * @class\n     * @protected\n     * @memberof PIXI\n     * @extends PIXI.ObjectRenderer\n     */\n    class AbstractBatchRenderer extends PIXI.ObjectRenderer {\n        constructor(renderer: PIXI.Renderer);\n        /**\n         * This is used to generate a shader that can\n         * color each vertex based on a `aTextureId`\n         * attribute that points to an texture in `uSampler`.\n         *\n         * This enables the objects with different textures\n         * to be drawn in the same draw call.\n         *\n         * You can customize your shader by creating your\n         * custom shader generator.\n         *\n         * @member {PIXI.BatchShaderGenerator} PIXI.AbstractBatchRenderer#shaderGenerator\n         * @protected\n         */\n        protected shaderGenerator: PIXI.BatchShaderGenerator;\n        /**\n         * The class that represents the geometry of objects\n         * that are going to be batched with this.\n         *\n         * @member {object} PIXI.AbstractBatchRenderer#geometryClass\n         * @default PIXI.BatchGeometry\n         * @protected\n         */\n        protected geometryClass: any;\n        /**\n         * Size of data being buffered per vertex in the\n         * attribute buffers (in floats). By default, the\n         * batch-renderer plugin uses 6:\n         *\n         * | aVertexPosition | 2 |\n         * |-----------------|---|\n         * | aTextureCoords  | 2 |\n         * | aColor          | 1 |\n         * | aTextureId      | 1 |\n         *\n         * @member {number} PIXI.AbstractBatchRenderer#vertexSize\n         * @readonly\n         */\n        readonly vertexSize: number;\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State} PIXI.AbstractBatchRenderer#state\n         * @readonly\n         */\n        readonly state: PIXI.State;\n        /**\n         * The number of bufferable objects before a flush\n         * occurs automatically.\n         *\n         * @member {number} PIXI.AbstractBatchRenderer#size\n         * @default settings.SPRITE_BATCH_SIZE * 4\n         */\n        size: number;\n        /**\n         * This shader is generated by `this.shaderGenerator`.\n         *\n         * It is generated specifically to handle the required\n         * number of textures being batched together.\n         *\n         * @member {PIXI.Shader} PIXI.AbstractBatchRenderer#_shader\n         * @protected\n         */\n        protected _shader: PIXI.Shader;\n        /**\n         * Maximum number of textures that can be uploaded to\n         * the GPU under the current context. It is initialized\n         * properly in `this.contextChange`.\n         *\n         * @member {number} PIXI.AbstractBatchRenderer#MAX_TEXTURES\n         * @see PIXI.AbstractBatchRenderer#contextChange\n         * @readonly\n         */\n        readonly MAX_TEXTURES: number;\n        /**\n         * Handles the `contextChange` signal.\n         *\n         * It calculates `this.MAX_TEXTURES` and allocating the\n         * packed-geometry object pool.\n         */\n        contextChange(): void;\n        /**\n         * Makes sure that static and dynamic flush pooled objects have correct dimensions\n         */\n        initFlushBuffers(): void;\n        /**\n         * Handles the `prerender` signal.\n         *\n         * It ensures that flushes start from the first geometry\n         * object again.\n         */\n        onPrerender(): void;\n        /**\n         * Buffers the \"batchable\" object. It need not be rendered\n         * immediately.\n         *\n         * @param {PIXI.DisplayObject} element - the element to render when\n         *    using this renderer\n         */\n        render(element: PIXI.DisplayObject): void;\n        /**\n         * Populating drawcalls for rendering\n         *\n         * @param {PIXI.BatchTextureArray} texArray\n         * @param {number} start\n         * @param {number} finish\n         */\n        buildDrawCalls(texArray: PIXI.BatchTextureArray, start: number, finish: number): void;\n        /**\n         * Bind textures for current rendering\n         *\n         * @param {PIXI.BatchTextureArray} texArray\n         */\n        bindAndClearTexArray(texArray: PIXI.BatchTextureArray): void;\n        /**\n         * Renders the content _now_ and empties the current batch.\n         */\n        flush(): void;\n        /**\n         * Starts a new sprite batch.\n         */\n        start(): void;\n        /**\n         * Stops and flushes the current batch.\n         */\n        stop(): void;\n        /**\n         * Destroys this `AbstractBatchRenderer`. It cannot be used again.\n         */\n        destroy(): void;\n        /**\n         * Takes the four batching parameters of `element`, interleaves\n         * and pushes them into the batching attribute/index buffers given.\n         *\n         * It uses these properties: `vertexData` `uvs`, `textureId` and\n         * `indicies`. It also uses the \"tint\" of the base-texture, if\n         * present.\n         *\n         * @param {PIXI.Sprite} element - element being rendered\n         * @param {PIXI.ViewableBuffer} attributeBuffer - attribute buffer.\n         * @param {Uint16Array} indexBuffer - index buffer\n         * @param {number} aIndex - number of floats already in the attribute buffer\n         * @param {number} iIndex - number of indices already in `indexBuffer`\n         */\n        packInterleavedGeometry(element: PIXI.Sprite, attributeBuffer: PIXI.ViewableBuffer, indexBuffer: Uint16Array, aIndex: number, iIndex: number): void;\n        /**\n         * Pool of `BatchDrawCall` objects that `flush` used\n         * to create \"batches\" of the objects being rendered.\n         *\n         * These are never re-allocated again.\n         * Shared between all batch renderers because it can be only one \"flush\" working at the moment.\n         *\n         * @static\n         * @member {PIXI.BatchDrawCall[]}\n         */\n        static _drawCallPool: PIXI.BatchDrawCall[];\n        /**\n         * Pool of `BatchDrawCall` objects that `flush` used\n         * to create \"batches\" of the objects being rendered.\n         *\n         * These are never re-allocated again.\n         * Shared between all batch renderers because it can be only one \"flush\" working at the moment.\n         *\n         * @static\n         * @member {PIXI.BatchTextureArray[]}\n         */\n        static _textureArrayPool: PIXI.BatchTextureArray[];\n        /**\n         * The renderer this manager works for.\n         *\n         * @member {PIXI.Renderer} PIXI.ObjectRenderer#renderer\n         */\n        renderer: PIXI.Renderer;\n    }\n    /**\n     * Used by the batcher to draw batches.\n     * Each one of these contains all information required to draw a bound geometry.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class BatchDrawCall {\n        constructor();\n        /**\n         * data for uniforms or custom webgl state\n         * @member {object} PIXI.BatchDrawCall#data\n         */\n        data: any;\n    }\n    /**\n     * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class BatchGeometry {\n        constructor(_static?: boolean);\n        /**\n         * Buffer used for position, color, texture IDs\n         *\n         * @member {PIXI.Buffer} PIXI.BatchGeometry#_buffer\n         * @protected\n         */\n        protected _buffer: PIXI.Buffer;\n        /**\n         * Index buffer data\n         *\n         * @member {PIXI.Buffer} PIXI.BatchGeometry#_indexBuffer\n         * @protected\n         */\n        protected _indexBuffer: PIXI.Buffer;\n    }\n    /**\n     * @class\n     * @memberof PIXI\n     * @hideconstructor\n     */\n    class BatchPluginFactory {\n        /**\n         * Create a new BatchRenderer plugin for Renderer. this convenience can provide an easy way\n         * to extend BatchRenderer with all the necessary pieces.\n         * @example\n         * const fragment = `\n         * varying vec2 vTextureCoord;\n         * varying vec4 vColor;\n         * varying float vTextureId;\n         * uniform sampler2D uSamplers[%count%];\n         *\n         * void main(void){\n         *     vec4 color;\n         *     %forloop%\n         *     gl_FragColor = vColor * vec4(color.a - color.rgb, color.a);\n         * }\n         * `;\n         * const InvertBatchRenderer = PIXI.BatchPluginFactory.create({ fragment });\n         * PIXI.Renderer.registerPlugin('invert', InvertBatchRenderer);\n         * const sprite = new PIXI.Sprite();\n         * sprite.pluginName = 'invert';\n         *\n         * @static\n         * @param {object} [options]\n         * @param {string} [options.vertex=PIXI.BatchPluginFactory.defaultVertexSrc] - Vertex shader source\n         * @param {string} [options.fragment=PIXI.BatchPluginFactory.defaultFragmentTemplate] - Fragment shader template\n         * @param {number} [options.vertexSize=6] - Vertex size\n         * @param {object} [options.geometryClass=PIXI.BatchGeometry]\n         * @return {*} New batch renderer plugin\n         */\n        static create(options?: {\n            vertex?: string;\n            fragment?: string;\n            vertexSize?: number;\n            geometryClass?: any;\n        }): any;\n        /**\n         * The default vertex shader source\n         *\n         * @static\n         * @type {string}\n         * @constant\n         */\n        static readonly defaultVertexSrc: string;\n        /**\n         * The default fragment shader source\n         *\n         * @static\n         * @type {string}\n         * @constant\n         */\n        static readonly defaultFragmentTemplate: string;\n    }\n    /**\n     * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class BatchShaderGenerator {\n        constructor(vertexSrc: string, fragTemplate: string);\n        /**\n         * Reference to the vertex shader source.\n         *\n         * @member {string} PIXI.BatchShaderGenerator#vertexSrc\n         */\n        vertexSrc: string;\n        /**\n         * Reference to the fragement shader template. Must contain \"%count%\" and \"%forloop%\".\n         *\n         * @member {string} PIXI.BatchShaderGenerator#fragTemplate\n         */\n        fragTemplate: string;\n    }\n    /**\n     * Used by the batcher to build texture batches.\n     * Holds list of textures and their respective locations.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class BatchTextureArray {\n        constructor();\n        /**\n         * inside textures array\n         * @member {PIXI.BaseTexture[]} PIXI.BatchTextureArray#elements\n         */\n        elements: PIXI.BaseTexture[];\n        /**\n         * Respective locations for textures\n         * @member {number[]} PIXI.BatchTextureArray#ids\n         */\n        ids: number[];\n        /**\n         * number of filled elements\n         * @member {number} PIXI.BatchTextureArray#count\n         */\n        count: number;\n    }\n    /**\n     * Base for a common object renderer that can be used as a\n     * system renderer plugin.\n     *\n     * @class\n     * @extends PIXI.System\n     * @memberof PIXI\n     */\n    class ObjectRenderer extends PIXI.System {\n        constructor(renderer: PIXI.Renderer);\n        /**\n         * The renderer this manager works for.\n         *\n         * @member {PIXI.Renderer} PIXI.ObjectRenderer#renderer\n         */\n        renderer: PIXI.Renderer;\n        /**\n         * Stub method that should be used to empty the current\n         * batch by rendering objects now.\n         */\n        flush(): void;\n        /**\n         * Generic destruction method that frees all resources. This\n         * should be called by subclasses.\n         */\n        destroy(): void;\n        /**\n         * Stub method that initializes any state required before\n         * rendering starts. It is different from the `prerender`\n         * signal, which occurs every frame, in that it is called\n         * whenever an object requests _this_ renderer specifically.\n         */\n        start(): void;\n        /**\n         * Stops the renderer. It should free up any state and\n         * become dormant.\n         */\n        stop(): void;\n        /**\n         * Keeps the object to render. It doesn't have to be\n         * rendered immediately.\n         *\n         * @param {PIXI.DisplayObject} object - The object to render.\n         */\n        render(object: PIXI.DisplayObject): void;\n    }\n    /**\n     * Filter is a special type of WebGL shader that is applied to the screen.\n     *\n     * {@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the\n     * {@link PIXI.filters.BlurFilter BlurFilter}.\n     *\n     * ### Usage\n     * Filters can be applied to any DisplayObject or Container.\n     * PixiJS' `FilterSystem` renders the container into temporary Framebuffer,\n     * then filter renders it to the screen.\n     * Multiple filters can be added to the `filters` array property and stacked on each other.\n     *\n     * ```\n     * const filter = new PIXI.Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });\n     * const container = new PIXI.Container();\n     * container.filters = [filter];\n     * ```\n     *\n     * ### Previous Version Differences\n     *\n     * In PixiJS **v3**, a filter was always applied to _whole screen_.\n     *\n     * In PixiJS **v4**, a filter can be applied _only part of the screen_.\n     * Developers had to create a set of uniforms to deal with coordinates.\n     *\n     * In PixiJS **v5** combines _both approaches_.\n     * Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,\n     * bringing those extra uniforms into account.\n     *\n     * Also be aware that we have changed default vertex shader, please consult\n     * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\n     *\n     * ### Built-in Uniforms\n     *\n     * PixiJS viewport uses screen (CSS) coordinates, `(0, 0, renderer.screen.width, renderer.screen.height)`,\n     * and `projectionMatrix` uniform maps it to the gl viewport.\n     *\n     * **uSampler**\n     *\n     * The most important uniform is the input texture that container was rendered into.\n     * _Important note: as with all Framebuffers in PixiJS, both input and output are\n     * premultiplied by alpha._\n     *\n     * By default, input normalized coordinates are passed to fragment shader with `vTextureCoord`.\n     * Use it to sample the input.\n     *\n     * ```\n     * const fragment = `\n     * varying vec2 vTextureCoord;\n     * uniform sampler2D uSampler;\n     * void main(void)\n     * {\n     *    gl_FragColor = texture2D(uSampler, vTextureCoord);\n     * }\n     * `;\n     *\n     * const myFilter = new PIXI.Filter(null, fragment);\n     * ```\n     *\n     * This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.\n     *\n     * **outputFrame**\n     *\n     * The `outputFrame` holds the rectangle where filter is applied in screen (CSS) coordinates.\n     * It's the same as `renderer.screen` for a fullscreen filter.\n     * Only a part of  `outputFrame.zw` size of temporary Framebuffer is used,\n     * `(0, 0, outputFrame.width, outputFrame.height)`,\n     *\n     * Filters uses this quad to normalized (0-1) space, its passed into `aVertexPosition` attribute.\n     * To calculate vertex position in screen space using normalized (0-1) space:\n     *\n     * ```\n     * vec4 filterVertexPosition( void )\n     * {\n     *     vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n     *     return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n     * }\n     * ```\n     *\n     * **inputSize**\n     *\n     * Temporary framebuffer is different, it can be either the size of screen, either power-of-two.\n     * The `inputSize.xy` are size of temporary framebuffer that holds input.\n     * The `inputSize.zw` is inverted, it's a shortcut to evade division inside the shader.\n     *\n     * Set `inputSize.xy = outputFrame.zw` for a fullscreen filter.\n     *\n     * To calculate input normalized coordinate, you have to map it to filter normalized space.\n     * Multiply by `outputFrame.zw` to get input coordinate.\n     * Divide by `inputSize.xy` to get input normalized coordinate.\n     *\n     * ```\n     * vec2 filterTextureCoord( void )\n     * {\n     *     return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy\n     * }\n     * ```\n     * **resolution**\n     *\n     * The `resolution` is the ratio of screen (CSS) pixels to real pixels.\n     *\n     * **inputPixel**\n     *\n     * `inputPixel.xy` is the size of framebuffer in real pixels, same as `inputSize.xy * resolution`\n     * `inputPixel.zw` is inverted `inputPixel.xy`.\n     *\n     * It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.\n     *\n     * **inputClamp**\n     *\n     * If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.\n     * For displacements, coordinates has to be clamped.\n     *\n     * The `inputClamp.xy` is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer\n     * `inputClamp.zw` is bottom-right pixel center.\n     *\n     * ```\n     * vec4 color = texture2D(uSampler, clamp(modifigedTextureCoord, inputClamp.xy, inputClamp.zw))\n     * ```\n     * OR\n     * ```\n     * vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw))\n     * ```\n     *\n     * ### Additional Information\n     *\n     * Complete documentation on Filter usage is located in the\n     * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\n     *\n     * Since PixiJS only had a handful of built-in filters, additional filters can be downloaded\n     * {@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.\n     *\n     * @class\n     * @memberof PIXI\n     * @extends PIXI.Shader\n     */\n    class Filter extends PIXI.Shader {\n        constructor(vertexSrc?: string, fragmentSrc?: string, uniforms?: any);\n        /**\n         * The padding of the filter. Some filters require extra space to breath such as a blur.\n         * Increasing this will add extra width and height to the bounds of the object that the\n         * filter is applied to.\n         *\n         * @member {number} PIXI.Filter#padding\n         */\n        padding: number;\n        /**\n         * The resolution of the filter. Setting this to be lower will lower the quality but\n         * increase the performance of the filter.\n         *\n         * @member {number} PIXI.Filter#resolution\n         */\n        resolution: number;\n        /**\n         * If enabled is true the filter is applied, if false it will not.\n         *\n         * @member {boolean} PIXI.Filter#enabled\n         */\n        enabled: boolean;\n        /**\n         * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n         * Switch it off if it does not work for specific shader.\n         *\n         * @member {boolean} PIXI.Filter#autoFit\n         */\n        autoFit: boolean;\n        /**\n         * Legacy filters use position and uvs from attributes\n         * @member {boolean} PIXI.Filter#legacy\n         * @readonly\n         */\n        readonly legacy: boolean;\n        /**\n         * The WebGL state the filter requires to render\n         * @member {PIXI.State} PIXI.Filter#state\n         */\n        state: PIXI.State;\n        /**\n         * Applies the filter\n         *\n         * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from\n         * @param {PIXI.RenderTexture} input - The input render target.\n         * @param {PIXI.RenderTexture} output - The target to output to.\n         * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.\n         * @param {object} [currentState] - It's current state of filter.\n         *        There are some useful properties in the currentState :\n         *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n         */\n        apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES, currentState?: any): void;\n        /**\n         * Sets the blendmode of the filter\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         */\n        blendMode: number;\n        /**\n         * The default vertex shader source\n         *\n         * @static\n         * @type {string}\n         * @constant\n         */\n        static readonly defaultVertexSrc: string;\n        /**\n         * The default fragment shader source\n         *\n         * @static\n         * @type {string}\n         * @constant\n         */\n        static readonly defaultFragmentSrc: string;\n        /**\n         * Program that the shader uses\n         *\n         * @member {PIXI.Program} PIXI.Shader#program\n         */\n        program: PIXI.Program;\n        /**\n         * Shader uniform values, shortcut for `uniformGroup.uniforms`\n         * @readonly\n         * @member {object}\n         */\n        readonly uniforms: any;\n    }\n    /**\n     * This handles a Sprite acting as a mask, as opposed to a Graphic.\n     *\n     * WebGL only.\n     *\n     * @class\n     * @extends PIXI.Filter\n     * @memberof PIXI\n     */\n    class SpriteMaskFilter extends PIXI.Filter {\n        constructor(sprite: PIXI.Sprite);\n        /**\n         * Sprite mask\n         * @member {PIXI.Sprite} PIXI.SpriteMaskFilter#maskSprite\n         */\n        maskSprite: PIXI.Sprite;\n        /**\n         * Mask matrix\n         * @member {PIXI.Matrix} PIXI.SpriteMaskFilter#maskMatrix\n         */\n        maskMatrix: PIXI.Matrix;\n        /**\n         * Applies the filter\n         *\n         * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from\n         * @param {PIXI.RenderTexture} input - The input render target.\n         * @param {PIXI.RenderTexture} output - The target to output to.\n         * @param {PIXI.CLEAR_MODES} clearMode - Should the output be cleared before rendering to it.\n         */\n        apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode: PIXI.CLEAR_MODES): void;\n        /**\n         * The padding of the filter. Some filters require extra space to breath such as a blur.\n         * Increasing this will add extra width and height to the bounds of the object that the\n         * filter is applied to.\n         *\n         * @member {number} PIXI.Filter#padding\n         */\n        padding: number;\n        /**\n         * The resolution of the filter. Setting this to be lower will lower the quality but\n         * increase the performance of the filter.\n         *\n         * @member {number} PIXI.Filter#resolution\n         */\n        resolution: number;\n        /**\n         * If enabled is true the filter is applied, if false it will not.\n         *\n         * @member {boolean} PIXI.Filter#enabled\n         */\n        enabled: boolean;\n        /**\n         * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n         * Switch it off if it does not work for specific shader.\n         *\n         * @member {boolean} PIXI.Filter#autoFit\n         */\n        autoFit: boolean;\n        /**\n         * Legacy filters use position and uvs from attributes\n         * @member {boolean} PIXI.Filter#legacy\n         * @readonly\n         */\n        readonly legacy: boolean;\n        /**\n         * The WebGL state the filter requires to render\n         * @member {PIXI.State} PIXI.Filter#state\n         */\n        state: PIXI.State;\n        /**\n         * Sets the blendmode of the filter\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         */\n        blendMode: number;\n        /**\n         * Program that the shader uses\n         *\n         * @member {PIXI.Program} PIXI.Shader#program\n         */\n        program: PIXI.Program;\n        /**\n         * Shader uniform values, shortcut for `uniformGroup.uniforms`\n         * @readonly\n         * @member {object}\n         */\n        readonly uniforms: any;\n    }\n    /**\n     * Default vertex shader\n     * @memberof PIXI\n     * @member {string} defaultVertex\n     */\n    var defaultVertex: string;\n    /**\n     * Default filter vertex shader\n     * @memberof PIXI\n     * @member {string} defaultFilterVertex\n     */\n    var defaultFilterVertex: string;\n    /**\n     * Frame buffer used by the BaseRenderTexture\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Framebuffer {\n        constructor(width: number, height: number);\n        /**\n         * Width of framebuffer in pixels\n         * @member {number} PIXI.Framebuffer#width\n         */\n        width: number;\n        /**\n         * Height of framebuffer in pixels\n         * @member {number} PIXI.Framebuffer#height\n         */\n        height: number;\n        /**\n         * Desired number of samples for antialiasing. 0 means AA should not be used.\n         *\n         * Experimental WebGL2 feature, allows to use antialiasing in individual renderTextures.\n         * Antialiasing is the same as for main buffer with renderer `antialias:true` options.\n         * Seriously affects GPU memory consumption and GPU performance.\n         *\n         *```js\n         * renderTexture.framebuffer.multisample = PIXI.MSAA_QUALITY.HIGH;\n         * //...\n         * renderer.render(renderTexture, myContainer);\n         * renderer.framebuffer.blit(); // copies data from MSAA framebuffer to texture\n         *  ```\n         *\n         * @member {PIXI.MSAA_QUALITY} PIXI.Framebuffer#multisample\n         * @default PIXI.MSAA_QUALITY.NONE\n         */\n        multisample: PIXI.MSAA_QUALITY;\n        /**\n         * Reference to the colorTexture.\n         *\n         * @member {PIXI.BaseTexture[]}\n         * @readonly\n         */\n        readonly colorTexture: PIXI.BaseTexture[];\n        /**\n         * Add texture to the colorTexture array\n         *\n         * @param {number} [index=0] - Index of the array to add the texture to\n         * @param {PIXI.BaseTexture} [texture] - Texture to add to the array\n         */\n        addColorTexture(index?: number, texture?: PIXI.BaseTexture): void;\n        /**\n         * Add a depth texture to the frame buffer\n         *\n         * @param {PIXI.BaseTexture} [texture] - Texture to add\n         */\n        addDepthTexture(texture?: PIXI.BaseTexture): void;\n        /**\n         * Enable depth on the frame buffer\n         */\n        enableDepth(): void;\n        /**\n         * Enable stencil on the frame buffer\n         */\n        enableStencil(): void;\n        /**\n         * Resize the frame buffer\n         *\n         * @param {number} width - Width of the frame buffer to resize to\n         * @param {number} height - Height of the frame buffer to resize to\n         */\n        resize(width: number, height: number): void;\n        /**\n         * Disposes WebGL resources that are connected to this geometry\n         */\n        dispose(): void;\n        /**\n         * Destroys and removes the depth texture added to this framebuffer.\n         */\n        destroyDepthTexture(): void;\n    }\n    /**\n     * Internal framebuffer for WebGL context\n     * @class\n     * @memberof PIXI\n     */\n    class GLFramebuffer {\n        constructor();\n        /**\n         * The WebGL framebuffer\n         * @member {WebGLFramebuffer} PIXI.GLFramebuffer#framebuffer\n         */\n        framebuffer: WebGLFramebuffer;\n        /**\n         * stencil+depth , usually costs 32bits per pixel\n         * @member {WebGLRenderbuffer} PIXI.GLFramebuffer#stencil\n         */\n        stencil: WebGLRenderbuffer;\n        /**\n         * latest known version of framebuffer\n         * @member {number} PIXI.GLFramebuffer#dirtyId\n         * @protected\n         */\n        protected dirtyId: number;\n        /**\n         * latest known version of framebuffer format\n         * @member {number} PIXI.GLFramebuffer#dirtyFormat\n         * @protected\n         */\n        protected dirtyFormat: number;\n        /**\n         * latest known version of framebuffer size\n         * @member {number} PIXI.GLFramebuffer#dirtySize\n         * @protected\n         */\n        protected dirtySize: number;\n        /**\n         * Detected AA samples number\n         * @member {PIXI.MSAA_QUALITY} PIXI.GLFramebuffer#multisample\n         */\n        multisample: PIXI.MSAA_QUALITY;\n        /**\n         * In case MSAA, we use this Renderbuffer instead of colorTextures[0] when we write info\n         * @member {WebGLRenderbuffer} PIXI.GLFramebuffer#msaaBuffer\n         */\n        msaaBuffer: WebGLRenderbuffer;\n        /**\n         * In case we use MSAA, this is actual framebuffer that has colorTextures[0]\n         * The contents of that framebuffer are read when we use that renderTexture in sprites\n         * @member {PIXI.Framebuffer} PIXI.GLFramebuffer#blitFramebuffer\n         */\n        blitFramebuffer: PIXI.Framebuffer;\n    }\n    /**\n     * Holds the information for a single attribute structure required to render geometry.\n     *\n     * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}\n     * This can include anything from positions, uvs, normals, colors etc.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Attribute {\n        constructor(buffer: string, size?: number, normalized?: boolean, type?: number, stride?: number, start?: number);\n        /**\n         * Destroys the Attribute.\n         */\n        destroy(): void;\n        /**\n         * Helper function that creates an Attribute based on the information provided\n         *\n         * @static\n         * @param {string} buffer - the id of the buffer that this attribute will look for\n         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n         * @param {Boolean} [normalized=false] - should the data be normalized.\n         * @param {Number} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n         * @param {Number} [stride=0] - How far apart (in floats) the start of each value is. (used for interleaving data)\n         *\n         * @returns {PIXI.Attribute} A new {@link PIXI.Attribute} based on the information provided\n         */\n        static from(buffer: string, size?: number, normalized?: boolean, type?: number, stride?: number): PIXI.Attribute;\n    }\n    /**\n     * A wrapper for data so that it can be used and uploaded by WebGL\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Buffer {\n        constructor(data: ArrayBuffer | SharedArrayBuffer | ArrayBufferView, _static?: boolean, index?: boolean);\n        /**\n         * The data in the buffer, as a typed array\n         *\n         * @member {ArrayBuffer| SharedArrayBuffer | ArrayBufferView} PIXI.Buffer#data\n         */\n        data: ArrayBuffer | SharedArrayBuffer | ArrayBufferView;\n        /**\n         * flags this buffer as requiring an upload to the GPU\n         * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView} [data] - the data to update in the buffer.\n         */\n        update(data?: ArrayBuffer | SharedArrayBuffer | ArrayBufferView): void;\n        /**\n         * disposes WebGL resources that are connected to this geometry\n         */\n        dispose(): void;\n        /**\n         * Destroys the buffer\n         */\n        destroy(): void;\n        /**\n         * Helper function that creates a buffer based on an array or TypedArray\n         *\n         * @static\n         * @param {ArrayBufferView | number[]} data - the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.\n         * @return {PIXI.Buffer} A new Buffer based on the data provided.\n         */\n        static from(data: ArrayBufferView | number[]): PIXI.Buffer;\n    }\n    /**\n     * The Geometry represents a model. It consists of two components:\n     * - GeometryStyle - The structure of the model such as the attributes layout\n     * - GeometryData - the data of the model - this consists of buffers.\n     * This can include anything from positions, uvs, normals, colors etc.\n     *\n     * Geometry can be defined without passing in a style or data if required (thats how I prefer!)\n     *\n     * ```js\n     * let geometry = new PIXI.Geometry();\n     *\n     * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n     * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1],2)\n     * geometry.addIndex([0,1,2,1,3,2])\n     *\n     * ```\n     * @class\n     * @memberof PIXI\n     */\n    class Geometry {\n        constructor(buffers?: PIXI.Buffer[], attributes?: any);\n        /**\n         * A map of renderer IDs to webgl VAOs\n         *\n         * @protected\n         * @type {object}\n         */\n        protected glVertexArrayObjects: any;\n        /**\n         * Number of instances in this geometry, pass it to `GeometrySystem.draw()`\n         * @member {number} PIXI.Geometry#instanceCount\n         * @default 1\n         */\n        instanceCount: number;\n        /**\n         * Count of existing (not destroyed) meshes that reference this geometry\n         * @member {number} PIXI.Geometry#refCount\n         */\n        refCount: number;\n        /**\n         *\n         * Adds an attribute to the geometry\n         * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!\n         *\n         * @param {String} id - the name of the attribute (matching up to a shader)\n         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.\n         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n         * @param {Boolean} [normalized=false] - should the data be normalized.\n         * @param {Number} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available\n         * @param {Number} [stride] - How far apart (in floats) the start of each value is. (used for interleaving data)\n         * @param {Number} [start] - How far into the array to start reading values (used for interleaving data)\n         * @param {boolean} [instance=false] - Instancing flag\n         *\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        addAttribute(id: string, buffer?: PIXI.Buffer | number[], size?: number, normalized?: boolean, type?: number, stride?: number, start?: number, instance?: boolean): PIXI.Geometry;\n        /**\n         * returns the requested attribute\n         *\n         * @param {String} id - the name of the attribute required\n         * @return {PIXI.Attribute} the attribute requested.\n         */\n        getAttribute(id: string): PIXI.Attribute;\n        /**\n         * returns the requested buffer\n         *\n         * @param {String} id - the name of the buffer required\n         * @return {PIXI.Buffer} the buffer requested.\n         */\n        getBuffer(id: string): PIXI.Buffer;\n        /**\n         *\n         * Adds an index buffer to the geometry\n         * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.\n         *\n         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        addIndex(buffer?: PIXI.Buffer | number[]): PIXI.Geometry;\n        /**\n         * returns the index buffer\n         *\n         * @return {PIXI.Buffer} the index buffer.\n         */\n        getIndex(): PIXI.Buffer;\n        /**\n         * this function modifies the structure so that all current attributes become interleaved into a single buffer\n         * This can be useful if your model remains static as it offers a little performance boost\n         *\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        interleave(): PIXI.Geometry;\n        /**\n         * disposes WebGL resources that are connected to this geometry\n         */\n        dispose(): void;\n        /**\n         * Destroys the geometry.\n         */\n        destroy(): void;\n        /**\n         * returns a clone of the geometry\n         *\n         * @returns {PIXI.Geometry} a new clone of this geometry\n         */\n        clone(): PIXI.Geometry;\n        /**\n         * merges an array of geometries into a new single one\n         * geometry attribute styles must match for this operation to work\n         *\n         * @param {PIXI.Geometry[]} geometries - array of geometries to merge\n         * @returns {PIXI.Geometry} shiny new geometry!\n         */\n        static merge(geometries: PIXI.Geometry[]): PIXI.Geometry;\n    }\n    /**\n     * Flexible wrapper around `ArrayBuffer` that also provides\n     * typed array views on demand.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class ViewableBuffer {\n        constructor(size: number);\n        /**\n         * Underlying `ArrayBuffer` that holds all the data\n         * and is of capacity `size`.\n         *\n         * @member {ArrayBuffer} PIXI.ViewableBuffer#rawBinaryData\n         */\n        rawBinaryData: ArrayBuffer;\n        /**\n         * View on the raw binary data as a `Uint32Array`.\n         *\n         * @member {Uint32Array} PIXI.ViewableBuffer#uint32View\n         */\n        uint32View: Uint32Array;\n        /**\n         * View on the raw binary data as a `Float32Array`.\n         *\n         * @member {Float32Array} PIXI.ViewableBuffer#float32View\n         */\n        float32View: Float32Array;\n        /**\n         * View on the raw binary data as a `Int8Array`.\n         *\n         * @member {Int8Array}\n         */\n        int8View: Int8Array;\n        /**\n         * View on the raw binary data as a `Uint8Array`.\n         *\n         * @member {Uint8Array}\n         */\n        uint8View: Uint8Array;\n        /**\n         * View on the raw binary data as a `Int16Array`.\n         *\n         * @member {Int16Array}\n         */\n        int16View: Int16Array;\n        /**\n         * View on the raw binary data as a `Uint16Array`.\n         *\n         * @member {Uint16Array}\n         */\n        uint16View: Uint16Array;\n        /**\n         * View on the raw binary data as a `Int32Array`.\n         *\n         * @member {Int32Array}\n         */\n        int32View: Int32Array;\n        /**\n         * Returns the view of the given type.\n         *\n         * @param {string} type - One of `int8`, `uint8`, `int16`,\n         *    `uint16`, `int32`, `uint32`, and `float32`.\n         * @return {object} typed array of given type\n         */\n        view(type: string): any;\n        /**\n         * Destroys all buffer references. Do not use after calling\n         * this.\n         */\n        destroy(): void;\n    }\n    /**\n     * Component for masked elements\n     *\n     * Holds mask mode and temporary data about current mask\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class MaskData {\n        constructor(maskObject?: PIXI.DisplayObject);\n        /**\n         * Mask type\n         * @member {PIXI.MASK_TYPES} PIXI.MaskData#type\n         */\n        type: PIXI.MASK_TYPES;\n        /**\n         * Whether we know the mask type beforehand\n         * @member {boolean} PIXI.MaskData#autoDetect\n         * @default true\n         */\n        autoDetect: boolean;\n        /**\n         * Which element we use to mask\n         * @member {PIXI.DisplayObject} PIXI.MaskData#maskObject\n         */\n        maskObject: PIXI.DisplayObject;\n        /**\n         * Whether it belongs to MaskSystem pool\n         * @member {boolean} PIXI.MaskData#pooled\n         */\n        pooled: boolean;\n        /**\n         * Indicator of the type\n         * @member {boolean} PIXI.MaskData#isMaskData\n         */\n        isMaskData: boolean;\n        /**\n         * Scissor operation above the mask in stack.\n         * Null if _scissorCounter is zero, rectangle instance if positive.\n         * @member {PIXI.Rectangle} PIXI.MaskData#_scissorRect\n         */\n        _scissorRect: PIXI.Rectangle;\n        /**\n         * resets the mask data after popMask()\n         */\n        reset(): void;\n        /**\n         * copies counters from maskData above, called from pushMask()\n         * @param {PIXI.MaskData|null} maskAbove\n         */\n        copyCountersOrReset(maskAbove: PIXI.MaskData | null): void;\n    }\n    /**\n     * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n     *\n     * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\n     * otherwise black rectangles will be drawn instead.\n     *\n     * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\n     * and rotation of the given Display Objects is ignored. For example:\n     *\n     * ```js\n     * let renderer = PIXI.autoDetectRenderer();\n     * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 800, height: 600 });\n     * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n     * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\n     *\n     * sprite.position.x = 800/2;\n     * sprite.position.y = 600/2;\n     * sprite.anchor.x = 0.5;\n     * sprite.anchor.y = 0.5;\n     *\n     * renderer.render(sprite, renderTexture);\n     * ```\n     *\n     * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n     * you can clear the transform\n     *\n     * ```js\n     *\n     * sprite.setTransform()\n     *\n     * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 100, height: 100 });\n     * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n     *\n     * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture\n     * ```\n     *\n     * @class\n     * @extends PIXI.BaseTexture\n     * @memberof PIXI\n     */\n    class BaseRenderTexture extends PIXI.BaseTexture {\n        constructor(options?: {\n            width?: number;\n            height?: number;\n            scaleMode?: PIXI.SCALE_MODES;\n            resolution?: number;\n        });\n        /**\n         * The data structure for the stencil masks.\n         *\n         * @member {PIXI.MaskData[]} PIXI.BaseRenderTexture#maskStack\n         */\n        maskStack: PIXI.MaskData[];\n        /**\n         * The data structure for the filters.\n         *\n         * @member {Object[]} PIXI.BaseRenderTexture#filterStack\n         */\n        filterStack: any[];\n        /**\n         * Resizes the BaseRenderTexture.\n         *\n         * @param {number} width - The width to resize to.\n         * @param {number} height - The height to resize to.\n         */\n        resize(width: number, height: number): void;\n        /**\n         * Frees the texture and framebuffer from WebGL memory without destroying this texture object.\n         * This means you can still use the texture later which will upload it to GPU\n         * memory again.\n         *\n         * @fires PIXI.BaseTexture#dispose\n         */\n        dispose(): void;\n        /**\n         * Destroys this texture.\n         */\n        destroy(): void;\n        /**\n         * The width of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number} PIXI.BaseTexture#width\n         */\n        readonly width: number;\n        /**\n         * The height of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number} PIXI.BaseTexture#height\n         */\n        readonly height: number;\n        /**\n         * The resolution / device pixel ratio of the texture\n         *\n         * @member {number} PIXI.BaseTexture#resolution\n         * @default PIXI.settings.RESOLUTION\n         */\n        resolution: number;\n        /**\n         * Mipmap mode of the texture, affects downscaled images\n         *\n         * @member {PIXI.MIPMAP_MODES} PIXI.BaseTexture#mipmap\n         * @default PIXI.settings.MIPMAP_TEXTURES\n         */\n        mipmap: PIXI.MIPMAP_MODES;\n        /**\n         * Anisotropic filtering level of texture\n         *\n         * @member {number} PIXI.BaseTexture#anisotropicLevel\n         * @default PIXI.settings.ANISOTROPIC_LEVEL\n         */\n        anisotropicLevel: number;\n        /**\n         * How the texture wraps\n         * @member {number} PIXI.BaseTexture#wrapMode\n         */\n        wrapMode: number;\n        /**\n         * The scale mode to apply when scaling this texture\n         *\n         * @member {PIXI.SCALE_MODES} PIXI.BaseTexture#scaleMode\n         * @default PIXI.settings.SCALE_MODE\n         */\n        scaleMode: PIXI.SCALE_MODES;\n        /**\n         * The pixel format of the texture\n         *\n         * @member {PIXI.FORMATS} PIXI.BaseTexture#format\n         * @default PIXI.FORMATS.RGBA\n         */\n        format: PIXI.FORMATS;\n        /**\n         * The type of resource data\n         *\n         * @member {PIXI.TYPES} PIXI.BaseTexture#type\n         * @default PIXI.TYPES.UNSIGNED_BYTE\n         */\n        type: PIXI.TYPES;\n        /**\n         * The target type\n         *\n         * @member {PIXI.TARGETS} PIXI.BaseTexture#target\n         * @default PIXI.TARGETS.TEXTURE_2D\n         */\n        target: PIXI.TARGETS;\n        /**\n         * How to treat premultiplied alpha, see {@link PIXI.ALPHA_MODES}.\n         *\n         * @member {PIXI.ALPHA_MODES} PIXI.BaseTexture#alphaMode\n         * @default PIXI.ALPHA_MODES.UNPACK\n         */\n        alphaMode: PIXI.ALPHA_MODES;\n        /**\n         * Global unique identifier for this BaseTexture\n         *\n         * @member {number} PIXI.BaseTexture#uid\n         * @protected\n         */\n        protected uid: number;\n        /**\n         * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n         *\n         * @member {number} PIXI.BaseTexture#touched\n         * @protected\n         */\n        protected touched: number;\n        /**\n         * Whether or not the texture is a power of two, try to use power of two textures as much\n         * as you can\n         *\n         * @readonly\n         * @member {boolean} PIXI.BaseTexture#isPowerOfTwo\n         * @default false\n         */\n        readonly isPowerOfTwo: boolean;\n        /**\n         * Used by TextureSystem to only update texture to the GPU when needed.\n         * Please call `update()` to increment it.\n         *\n         * @readonly\n         * @member {number} PIXI.BaseTexture#dirtyId\n         */\n        readonly dirtyId: number;\n        /**\n         * Used by TextureSystem to only update texture style when needed.\n         *\n         * @protected\n         * @member {number} PIXI.BaseTexture#dirtyStyleId\n         */\n        protected dirtyStyleId: number;\n        /**\n         * Currently default cache ID.\n         *\n         * @member {string} PIXI.BaseTexture#cacheId\n         */\n        cacheId: string;\n        /**\n         * Generally speaking means when resource is loaded.\n         * @readonly\n         * @member {boolean} PIXI.BaseTexture#valid\n         */\n        readonly valid: boolean;\n        /**\n         * The collection of alternative cache ids, since some BaseTextures\n         * can have more than one ID, short name and longer full URL\n         *\n         * @member {Array<string>} PIXI.BaseTexture#textureCacheIds\n         * @readonly\n         */\n        readonly textureCacheIds: string[];\n        /**\n         * Flag if BaseTexture has been destroyed.\n         *\n         * @member {boolean} PIXI.BaseTexture#destroyed\n         * @readonly\n         */\n        readonly destroyed: boolean;\n        /**\n         * The resource used by this BaseTexture, there can only\n         * be one resource per BaseTexture, but textures can share\n         * resources.\n         *\n         * @member {PIXI.resources.Resource} PIXI.BaseTexture#resource\n         * @readonly\n         */\n        readonly resource: PIXI.resources.Resource;\n        /**\n         * Number of the texture batch, used by multi-texture renderers\n         *\n         * @member {number} PIXI.BaseTexture#_batchEnabled\n         */\n        _batchEnabled: number;\n        /**\n         * Location inside texture batch, used by multi-texture renderers\n         *\n         * @member {number} PIXI.BaseTexture#_batchLocation\n         */\n        _batchLocation: number;\n        /**\n         * Whether its a part of another texture, handled by ArrayResource or CubeResource\n         *\n         * @member {PIXI.BaseTexture} PIXI.BaseTexture#parentTextureArray\n         */\n        parentTextureArray: PIXI.BaseTexture;\n        /**\n         * Pixel width of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        readonly realWidth: number;\n        /**\n         * Pixel height of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        readonly realHeight: number;\n        /**\n         * Changes style options of BaseTexture\n         *\n         * @param {PIXI.SCALE_MODES} [scaleMode] - Pixi scalemode\n         * @param {PIXI.MIPMAP_MODES} [mipmap] - enable mipmaps\n         * @returns {PIXI.BaseTexture} this\n         */\n        setStyle(scaleMode?: PIXI.SCALE_MODES, mipmap?: PIXI.MIPMAP_MODES): PIXI.BaseTexture;\n        /**\n         * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.\n         *\n         * @param {number} width - Visual width\n         * @param {number} height - Visual height\n         * @param {number} [resolution] - Optionally set resolution\n         * @returns {PIXI.BaseTexture} this\n         */\n        setSize(width: number, height: number, resolution?: number): PIXI.BaseTexture;\n        /**\n         * Sets real size of baseTexture, preserves current resolution.\n         *\n         * @param {number} realWidth - Full rendered width\n         * @param {number} realHeight - Full rendered height\n         * @param {number} [resolution] - Optionally set resolution\n         * @returns {PIXI.BaseTexture} this\n         */\n        setRealSize(realWidth: number, realHeight: number, resolution?: number): PIXI.BaseTexture;\n        /**\n         * Changes resolution\n         *\n         * @param {number} resolution - res\n         * @returns {PIXI.BaseTexture} this\n         */\n        setResolution(resolution: number): PIXI.BaseTexture;\n        /**\n         * Sets the resource if it wasn't set. Throws error if resource already present\n         *\n         * @param {PIXI.resources.Resource} resource - that is managing this BaseTexture\n         * @returns {PIXI.BaseTexture} this\n         */\n        setResource(resource: PIXI.resources.Resource): PIXI.BaseTexture;\n        /**\n         * Invalidates the object. Texture becomes valid if width and height are greater than zero.\n         */\n        update(): void;\n        /**\n         * Utility function for BaseTexture|Texture cast\n         */\n        castToBaseTexture(): void;\n    }\n    /**\n     * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n     *\n     * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded\n     * otherwise black rectangles will be drawn instead.\n     *\n     * __Hint-2__: The actual memory allocation will happen on first render.\n     * You shouldn't create renderTextures each frame just to delete them after, try to reuse them.\n     *\n     * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:\n     *\n     * ```js\n     * let renderer = PIXI.autoDetectRenderer();\n     * let renderTexture = PIXI.RenderTexture.create({ width: 800, height: 600 });\n     * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\n     *\n     * sprite.position.x = 800/2;\n     * sprite.position.y = 600/2;\n     * sprite.anchor.x = 0.5;\n     * sprite.anchor.y = 0.5;\n     *\n     * renderer.render(sprite, renderTexture);\n     * ```\n     *\n     * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n     * you can clear the transform\n     *\n     * ```js\n     *\n     * sprite.setTransform()\n     *\n     * let renderTexture = new PIXI.RenderTexture.create(100, 100);\n     *\n     * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture\n     * ```\n     *\n     * @class\n     * @extends PIXI.Texture\n     * @memberof PIXI\n     */\n    class RenderTexture extends PIXI.Texture {\n        constructor(baseRenderTexture: PIXI.BaseRenderTexture, frame?: PIXI.Rectangle);\n        /**\n         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.\n         *\n         * @member {boolean} PIXI.RenderTexture#valid\n         */\n        valid: boolean;\n        /**\n         * Stores `sourceFrame` when this texture is inside current filter stack.\n         * You can read it inside filters.\n         *\n         * @readonly\n         * @member {PIXI.Rectangle} PIXI.RenderTexture#filterFrame\n         */\n        readonly filterFrame: PIXI.Rectangle;\n        /**\n         * The key for pooled texture of FilterSystem\n         * @protected\n         * @member {string} PIXI.RenderTexture#filterPoolKey\n         */\n        protected filterPoolKey: string;\n        /**\n         * Shortcut to `this.baseTexture.framebuffer`, saves baseTexture cast.\n         * @member {PIXI.Framebuffer}\n         * @readonly\n         */\n        readonly framebuffer: PIXI.Framebuffer;\n        /**\n         * Resizes the RenderTexture.\n         *\n         * @param {number} width - The width to resize to.\n         * @param {number} height - The height to resize to.\n         * @param {boolean} [resizeBaseTexture=true] - Should the baseTexture.width and height values be resized as well?\n         */\n        resize(width: number, height: number, resizeBaseTexture?: boolean): void;\n        /**\n         * Changes the resolution of baseTexture, but does not change framebuffer size.\n         *\n         * @param {number} resolution - The new resolution to apply to RenderTexture\n         */\n        setResolution(resolution: number): void;\n        /**\n         * A short hand way of creating a render texture.\n         *\n         * @param {object} [options] - Options\n         * @param {number} [options.width=100] - The width of the render texture\n         * @param {number} [options.height=100] - The height of the render texture\n         * @param {number} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n         * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the texture being generated\n         * @return {PIXI.RenderTexture} The new render texture\n         */\n        static create(options?: {\n            width?: number;\n            height?: number;\n            scaleMode?: number;\n            resolution?: number;\n        }): PIXI.RenderTexture;\n        /**\n         * Does this Texture have any frame data assigned to it?\n         *\n         * This mode is enabled automatically if no frame was passed inside constructor.\n         *\n         * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n         *\n         * Beware, after loading or resize of baseTexture event can fired two times!\n         * If you want more control, subscribe on baseTexture itself.\n         *\n         * ```js\n         * texture.on('update', () => {});\n         * ```\n         *\n         * Any assignment of `frame` switches off `noFrame` mode.\n         *\n         * @member {boolean} PIXI.Texture#noFrame\n         */\n        noFrame: boolean;\n        /**\n         * The base texture that this texture uses.\n         *\n         * @member {PIXI.BaseTexture} PIXI.Texture#baseTexture\n         */\n        baseTexture: PIXI.BaseTexture;\n        /**\n         * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n         * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n         *\n         * @member {PIXI.Rectangle} PIXI.Texture#_frame\n         */\n        _frame: PIXI.Rectangle;\n        /**\n         * This is the trimmed area of original texture, before it was put in atlas\n         * Please call `updateUvs()` after you change coordinates of `trim` manually.\n         *\n         * @member {PIXI.Rectangle} PIXI.Texture#trim\n         */\n        trim: PIXI.Rectangle;\n        /**\n         * The WebGL UV data cache. Can be used as quad UV\n         *\n         * @member {PIXI.TextureUvs} PIXI.Texture#_uvs\n         * @protected\n         */\n        protected _uvs: PIXI.TextureUvs;\n        /**\n         * Default TextureMatrix instance for this texture\n         * By default that object is not created because its heavy\n         *\n         * @member {PIXI.TextureMatrix} PIXI.Texture#uvMatrix\n         */\n        uvMatrix: PIXI.TextureMatrix;\n        /**\n         * This is the area of original texture, before it was put in atlas\n         *\n         * @member {PIXI.Rectangle} PIXI.Texture#orig\n         */\n        orig: PIXI.Rectangle;\n        /**\n         * Anchor point that is used as default if sprite is created with this texture.\n         * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.\n         * @member {PIXI.Point} PIXI.Texture#defaultAnchor\n         * @default {0,0}\n         */\n        defaultAnchor: PIXI.Point;\n        /**\n         * Update ID is observed by sprites and TextureMatrix instances.\n         * Call updateUvs() to increment it.\n         *\n         * @member {number} PIXI.Texture#_updateID\n         * @protected\n         */\n        protected _updateID: number;\n        /**\n         * The ids under which this Texture has been added to the texture cache. This is\n         * automatically set as long as Texture.addToCache is used, but may not be set if a\n         * Texture is added directly to the TextureCache array.\n         *\n         * @member {string[]} PIXI.Texture#textureCacheIds\n         */\n        textureCacheIds: string[];\n        /**\n         * Updates this texture on the gpu.\n         *\n         * Calls the TextureResource update.\n         *\n         * If you adjusted `frame` manually, please call `updateUvs()` instead.\n         *\n         */\n        update(): void;\n        /**\n         * Called when the base texture is updated\n         *\n         * @protected\n         * @param {PIXI.BaseTexture} baseTexture - The base texture.\n         */\n        protected onBaseTextureUpdated(baseTexture: PIXI.BaseTexture): void;\n        /**\n         * Destroys this texture\n         *\n         * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n         */\n        destroy(destroyBase?: boolean): void;\n        /**\n         * Creates a new texture object that acts the same as this one.\n         *\n         * @return {PIXI.Texture} The new texture\n         */\n        clone(): PIXI.Texture;\n        /**\n         * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\n         * Call it after changing the frame\n         */\n        updateUvs(): void;\n        /**\n         * Returns resolution of baseTexture\n         *\n         * @member {number}\n         * @readonly\n         */\n        readonly resolution: number;\n        /**\n         * The frame specifies the region of the base texture that this texture uses.\n         * Please call `updateUvs()` after you change coordinates of `frame` manually.\n         *\n         * @member {PIXI.Rectangle}\n         */\n        frame: PIXI.Rectangle;\n        /**\n         * Indicates whether the texture is rotated inside the atlas\n         * set to 2 to compensate for texture packer rotation\n         * set to 6 to compensate for spine packer rotation\n         * can be used to rotate or mirror sprites\n         * See {@link PIXI.groupD8} for explanation\n         *\n         * @member {number}\n         */\n        rotate: number;\n        /**\n         * The width of the Texture in pixels.\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Texture in pixels.\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Utility function for BaseTexture|Texture cast\n         */\n        castToBaseTexture(): void;\n    }\n    /**\n     * Experimental!\n     *\n     * Texture pool, used by FilterSystem and plugins\n     * Stores collection of temporary pow2 or screen-sized renderTextures\n     *\n     * If you use custom RenderTexturePool for your filters, you can use methods\n     * `getFilterTexture` and `returnFilterTexture` same as in\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class RenderTexturePool {\n        constructor(textureOptions?: {\n            scaleMode?: PIXI.SCALE_MODES;\n        });\n        /**\n         * Allow renderTextures of the same size as screen, not just pow2\n         *\n         * Automatically sets to true after `setScreenSize`\n         *\n         * @member {boolean} PIXI.RenderTexturePool#enableFullScreen\n         * @default false\n         */\n        enableFullScreen: boolean;\n        /**\n         * creates of texture with params that were specified in pool constructor\n         *\n         * @param {number} realWidth - width of texture in pixels\n         * @param {number} realHeight - height of texture in pixels\n         * @returns {RenderTexture}\n         */\n        createTexture(realWidth: number, realHeight: number): RenderTexture;\n        /**\n         * Gets a Power-of-Two render texture or fullScreen texture\n         *\n         * @protected\n         * @param {number} minWidth - The minimum width of the render texture in real pixels.\n         * @param {number} minHeight - The minimum height of the render texture in real pixels.\n         * @param {number} [resolution=1] - The resolution of the render texture.\n         * @return {PIXI.RenderTexture} The new render texture.\n         */\n        protected getOptimalTexture(minWidth: number, minHeight: number, resolution?: number): PIXI.RenderTexture;\n        /**\n         * Gets extra texture of the same size as input renderTexture\n         *\n         * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`\n         *\n         * @param {PIXI.RenderTexture} input - renderTexture from which size and resolution will be copied\n         * @param {number} [resolution] - override resolution of the renderTexture\n         *  It overrides, it does not multiply\n         * @returns {PIXI.RenderTexture}\n         */\n        getFilterTexture(input: PIXI.RenderTexture, resolution?: number): PIXI.RenderTexture;\n        /**\n         * Place a render texture back into the pool.\n         * @param {PIXI.RenderTexture} renderTexture - The renderTexture to free\n         */\n        returnTexture(renderTexture: PIXI.RenderTexture): void;\n        /**\n         * Alias for returnTexture, to be compliant with FilterSystem interface\n         * @param {PIXI.RenderTexture} renderTexture - The renderTexture to free\n         */\n        returnFilterTexture(renderTexture: PIXI.RenderTexture): void;\n        /**\n         * Clears the pool\n         *\n         * @param {boolean} [destroyTextures=true] - destroy all stored textures\n         */\n        clear(destroyTextures?: boolean): void;\n        /**\n         * If screen size was changed, drops all screen-sized textures,\n         * sets new screen size, sets `enableFullScreen` to true\n         *\n         * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`\n         *\n         * @param {PIXI.ISize} size - Initial size of screen\n         */\n        setScreenSize(size: PIXI.ISize): void;\n        /**\n         * Key that is used to store fullscreen renderTextures in a pool\n         *\n         * @static\n         * @const {string}\n         */\n        static readonly SCREEN_KEY: string;\n    }\n    /**\n     * Helper class to create a WebGL Program\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class GLProgram {\n        constructor(program: WebGLProgram, uniformData: any);\n        /**\n         * Destroys this program\n         */\n        destroy(): void;\n    }\n    /**\n     * Helper class to create a shader program.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Program {\n        constructor(vertexSrc?: string, fragmentSrc?: string, name?: string);\n        /**\n         * The vertex shader.\n         *\n         * @member {string} PIXI.Program#vertexSrc\n         */\n        vertexSrc: string;\n        /**\n         * The fragment shader.\n         *\n         * @member {string} PIXI.Program#fragmentSrc\n         */\n        fragmentSrc: string;\n        /**\n         * Extracts the data for a buy creating a small test program\n         * or reading the src directly.\n         * @protected\n         *\n         * @param {string} [vertexSrc] - The source of the vertex shader.\n         * @param {string} [fragmentSrc] - The source of the fragment shader.\n         */\n        protected extractData(vertexSrc?: string, fragmentSrc?: string): void;\n        /**\n         * The default vertex shader source\n         *\n         * @static\n         * @constant\n         * @member {string}\n         */\n        static defaultVertexSrc: string;\n        /**\n         * The default fragment shader source\n         *\n         * @static\n         * @constant\n         * @member {string}\n         */\n        static defaultFragmentSrc: string;\n        /**\n         * A short hand function to create a program based of a vertex and fragment shader\n         * this method will also check to see if there is a cached program.\n         *\n         * @param {string} [vertexSrc] - The source of the vertex shader.\n         * @param {string} [fragmentSrc] - The source of the fragment shader.\n         * @param {string} [name=pixi-shader] - Name for shader\n         *\n         * @returns {PIXI.Program} an shiny new Pixi shader!\n         */\n        static from(vertexSrc?: string, fragmentSrc?: string, name?: string): PIXI.Program;\n    }\n    /**\n     * A helper class for shaders\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Shader {\n        constructor(program?: PIXI.Program, uniforms?: any);\n        /**\n         * Program that the shader uses\n         *\n         * @member {PIXI.Program} PIXI.Shader#program\n         */\n        program: PIXI.Program;\n        /**\n         * Shader uniform values, shortcut for `uniformGroup.uniforms`\n         * @readonly\n         * @member {object}\n         */\n        readonly uniforms: any;\n        /**\n         * A short hand function to create a shader based of a vertex and fragment shader\n         *\n         * @param {string} [vertexSrc] - The source of the vertex shader.\n         * @param {string} [fragmentSrc] - The source of the fragment shader.\n         * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.\n         *\n         * @returns {PIXI.Shader} an shiny new Pixi shader!\n         */\n        static from(vertexSrc?: string, fragmentSrc?: string, uniforms?: any): PIXI.Shader;\n    }\n    /**\n     * Uniform group holds uniform map and some ID's for work\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class UniformGroup {\n        constructor(uniforms?: any, _static?: boolean);\n        /**\n         * uniform values\n         * @member {object} PIXI.UniformGroup#uniforms\n         * @readonly\n         */\n        readonly uniforms: any;\n        /**\n         * Its a group and not a single uniforms\n         * @member {boolean} PIXI.UniformGroup#group\n         * @readonly\n         * @default true\n         */\n        readonly group: boolean;\n        /**\n         * dirty version\n         * @protected\n         * @member {number} PIXI.UniformGroup#dirtyId\n         */\n        protected dirtyId: number;\n        /**\n         * unique id\n         * @protected\n         * @member {number} PIXI.UniformGroup#id\n         */\n        protected id: number;\n        /**\n         * Uniforms wont be changed after creation\n         * @member {boolean} PIXI.UniformGroup#static\n         */\n        static: boolean;\n    }\n    /**\n     * This is a WebGL state, and is is passed The WebGL StateManager.\n     *\n     * Each mesh rendered may require WebGL to be in a different state.\n     * For example you may want different blend mode or to enable polygon offsets\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class State {\n        constructor();\n        /**\n         * Activates blending of the computed fragment color values\n         *\n         * @member {boolean}\n         */\n        blend: boolean;\n        /**\n         * Activates adding an offset to depth values of polygon's fragments\n         *\n         * @member {boolean}\n         * @default false\n         */\n        offsets: boolean;\n        /**\n         * Activates culling of polygons.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        culling: boolean;\n        /**\n         * Activates depth comparisons and updates to the depth buffer.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        depthTest: boolean;\n        /**\n         * Specifies whether or not front or back-facing polygons can be culled.\n         * @member {boolean}\n         * @default false\n         */\n        clockwiseFrontFace: boolean;\n        /**\n         * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n         *\n         * @member {number}\n         * @default 0\n         */\n        polygonOffset: number;\n    }\n    /**\n     * Systems are individual components to the Renderer pipeline.\n     * @namespace PIXI.systems\n     */\n    namespace systems {\n        /**\n         * System plugin to the renderer to manage batching.\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class BatchSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * An empty renderer.\n             *\n             * @member {PIXI.ObjectRenderer} PIXI.systems.BatchSystem#emptyRenderer\n             */\n            emptyRenderer: PIXI.ObjectRenderer;\n            /**\n             * The currently active ObjectRenderer.\n             *\n             * @member {PIXI.ObjectRenderer} PIXI.systems.BatchSystem#currentRenderer\n             */\n            currentRenderer: PIXI.ObjectRenderer;\n            /**\n             * Changes the current renderer to the one given in parameter\n             *\n             * @param {PIXI.ObjectRenderer} objectRenderer - The object renderer to use.\n             */\n            setObjectRenderer(objectRenderer: PIXI.ObjectRenderer): void;\n            /**\n             * This should be called if you wish to do some custom rendering\n             * It will basically render anything that may be batched up such as sprites\n             */\n            flush(): void;\n            /**\n             * Reset the system to an empty renderer\n             */\n            reset(): void;\n            /**\n             * Handy function for batch renderers: copies bound textures in first maxTextures locations to array\n             * sets actual _batchLocation for them\n             *\n             * @param {PIXI.BaseTexture[]} - arr copy destination\n             * @param {number} maxTextures - number of copied elements\n             */\n            copyBoundTextures(arr: PIXI.BaseTexture[], maxTextures: number): void;\n            /**\n             * Assigns batch locations to textures in array based on boundTextures state.\n             * All textures in texArray should have `_batchEnabled = _batchId`,\n             * and their count should be less than `maxTextures`.\n             *\n             * @param {PIXI.BatchTextureArray} texArray - textures to bound\n             * @param {PIXI.BaseTexture[]} boundTextures - current state of bound textures\n             * @param {number} batchId - marker for _batchEnabled param of textures in texArray\n             * @param {number} maxTextures - number of texture locations to manipulate\n             */\n            boundArray(texArray: PIXI.BatchTextureArray, boundTextures: PIXI.BaseTexture[], batchId: number, maxTextures: number): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage the context.\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class ContextSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * Either 1 or 2 to reflect the WebGL version being used\n             * @member {number} PIXI.systems.ContextSystem#webGLVersion\n             * @readonly\n             */\n            readonly webGLVersion: number;\n            /**\n             * Extensions being used\n             * @member {object} PIXI.systems.ContextSystem#extensions\n             * @readonly\n             * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n             * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n             * @property {OES_texture_float} floatTexture - WebGL v1 extension\n             * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n             * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n             * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n             */\n            readonly extensions: {\n                drawBuffers: WEBGL_draw_buffers;\n                depthTexture: WEBGL_depth_texture;\n                floatTexture: OES_texture_float;\n                loseContext: WEBGL_lose_context;\n                vertexArrayObject: OES_vertex_array_object;\n                anisotropicFiltering: EXT_texture_filter_anisotropic;\n            };\n            /**\n             * `true` if the context is lost\n             * @member {boolean}\n             * @readonly\n             */\n            readonly isLost: boolean;\n            /**\n             * Handle the context change event\n             * @param {WebGLRenderingContext} gl - new webgl context\n             */\n            contextChange(gl: WebGLRenderingContext): void;\n            /**\n             * Initialize the context\n             *\n             * @protected\n             * @param {WebGLRenderingContext} gl - WebGL context\n             */\n            protected initFromContext(gl: WebGLRenderingContext): void;\n            /**\n             * Initialize from context options\n             *\n             * @protected\n             * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n             * @param {object} options - context attributes\n             */\n            protected initFromOptions(options: any): void;\n            /**\n             * Helper class to create a WebGL Context\n             *\n             * @param canvas {HTMLCanvasElement} the canvas element that we will get the context from\n             * @param options {object} An options object that gets passed in to the canvas element containing the context attributes\n             * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n             * @return {WebGLRenderingContext} the WebGL context\n             */\n            createContext(canvas: HTMLCanvasElement, options: any): WebGLRenderingContext;\n            /**\n             * Auto-populate the extensions\n             *\n             * @protected\n             */\n            protected getExtensions(): void;\n            /**\n             * Handles a lost webgl context\n             *\n             * @protected\n             * @param {WebGLContextEvent} event - The context lost event.\n             */\n            protected handleContextLost(event: WebGLContextEvent): void;\n            /**\n             * Handles a restored webgl context\n             *\n             * @protected\n             */\n            protected handleContextRestored(): void;\n            /**\n             * Handle the post-render runner event\n             *\n             * @protected\n             */\n            protected postrender(): void;\n            /**\n             * Validate context\n             *\n             * @protected\n             * @param {WebGLRenderingContext} gl - Render context\n             */\n            protected validateContext(gl: WebGLRenderingContext): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage the filters.\n         *\n         * @class\n         * @memberof PIXI.systems\n         * @extends PIXI.System\n         */\n        class FilterSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * List of filters for the FilterSystem\n             * @member {Object[]} PIXI.systems.FilterSystem#defaultFilterStack\n             * @readonly\n             */\n            readonly defaultFilterStack: any[];\n            /**\n             * stores a bunch of PO2 textures used for filtering\n             * @member {Object} PIXI.systems.FilterSystem#texturePool\n             */\n            texturePool: any;\n            /**\n             * a pool for storing filter states, save us creating new ones each tick\n             * @member {Object[]} PIXI.systems.FilterSystem#statePool\n             */\n            statePool: any[];\n            /**\n             * A very simple geometry used when drawing a filter effect to the screen\n             * @member {PIXI.Quad} PIXI.systems.FilterSystem#quad\n             */\n            quad: PIXI.Quad;\n            /**\n             * Quad UVs\n             * @member {PIXI.QuadUv} PIXI.systems.FilterSystem#quadUv\n             */\n            quadUv: PIXI.QuadUv;\n            /**\n             * Temporary rect for maths\n             * @type {PIXI.Rectangle}\n             */\n            tempRect: PIXI.Rectangle;\n            /**\n             * Active state\n             * @member {object} PIXI.systems.FilterSystem#activeState\n             */\n            activeState: any;\n            /**\n             * This uniform group is attached to filter uniforms when used\n             * @member {PIXI.UniformGroup} PIXI.systems.FilterSystem#globalUniforms\n             * @property {PIXI.Rectangle} outputFrame\n             * @property {Float32Array} inputSize\n             * @property {Float32Array} inputPixel\n             * @property {Float32Array} inputClamp\n             * @property {Number} resolution\n             * @property {Float32Array} filterArea\n             * @property {Fload32Array} filterClamp\n             */\n            globalUniforms: PIXI.UniformGroup;\n            /**\n             * Whether to clear output renderTexture in AUTO/BLIT mode. See {@link PIXI.CLEAR_MODES}\n             * @member {boolean} PIXI.systems.FilterSystem#forceClear\n             */\n            forceClear: boolean;\n            /**\n             * Old padding behavior is to use the max amount instead of sum padding.\n             * Use this flag if you need the old behavior.\n             * @member {boolean} PIXI.systems.FilterSystem#useMaxPadding\n             * @default false\n             */\n            useMaxPadding: boolean;\n            /**\n             * Adds a new filter to the System.\n             *\n             * @param {PIXI.DisplayObject} target - The target of the filter to render.\n             * @param {PIXI.Filter[]} filters - The filters to apply.\n             */\n            push(target: PIXI.DisplayObject, filters: PIXI.Filter[]): void;\n            /**\n             * Pops off the filter and applies it.\n             *\n             */\n            pop(): void;\n            /**\n             * Binds a renderTexture with corresponding `filterFrame`, clears it if mode corresponds.\n             * @param {PIXI.RenderTexture} filterTexture - renderTexture to bind, should belong to filter pool or filter stack\n             * @param {PIXI.CLEAR_MODES} [clearMode] - clearMode, by default its CLEAR/YES. See {@link PIXI.CLEAR_MODES}\n             */\n            bindAndClear(filterTexture: PIXI.RenderTexture, clearMode?: PIXI.CLEAR_MODES): void;\n            /**\n             * Draws a filter.\n             *\n             * @param {PIXI.Filter} filter - The filter to draw.\n             * @param {PIXI.RenderTexture} input - The input render target.\n             * @param {PIXI.RenderTexture} output - The target to output to.\n             * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it\n             */\n            applyFilter(filter: PIXI.Filter, input: PIXI.RenderTexture, output: PIXI.RenderTexture, clearMode?: PIXI.CLEAR_MODES): void;\n            /**\n             * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n             *\n             * Use `outputMatrix * vTextureCoord` in the shader.\n             *\n             * @param {PIXI.Matrix} outputMatrix - The matrix to output to.\n             * @param {PIXI.Sprite} sprite - The sprite to map to.\n             * @return {PIXI.Matrix} The mapped matrix.\n             */\n            calculateSpriteMatrix(outputMatrix: PIXI.Matrix, sprite: PIXI.Sprite): PIXI.Matrix;\n            /**\n             * Destroys this Filter System.\n             */\n            destroy(): void;\n            /**\n             * Gets a Power-of-Two render texture or fullScreen texture\n             *\n             * @protected\n             * @param {number} minWidth - The minimum width of the render texture in real pixels.\n             * @param {number} minHeight - The minimum height of the render texture in real pixels.\n             * @param {number} [resolution=1] - The resolution of the render texture.\n             * @return {PIXI.RenderTexture} The new render texture.\n             */\n            protected getOptimalFilterTexture(minWidth: number, minHeight: number, resolution?: number): PIXI.RenderTexture;\n            /**\n             * Gets extra render texture to use inside current filter\n             * To be compliant with older filters, you can use params in any order\n             *\n             * @param {PIXI.RenderTexture} [input] - renderTexture from which size and resolution will be copied\n             * @param {number} [resolution] - override resolution of the renderTexture\n             * @returns {PIXI.RenderTexture}\n             */\n            getFilterTexture(input?: PIXI.RenderTexture, resolution?: number): PIXI.RenderTexture;\n            /**\n             * Frees a render texture back into the pool.\n             *\n             * @param {PIXI.RenderTexture} renderTexture - The renderTarget to free\n             */\n            returnFilterTexture(renderTexture: PIXI.RenderTexture): void;\n            /**\n             * Empties the texture pool.\n             */\n            emptyPool(): void;\n            /**\n             * calls `texturePool.resize()`, affects fullScreen renderTextures\n             */\n            resize(): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n        }\n        /**\n         * System plugin to the renderer to manage framebuffers.\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class FramebufferSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * A list of managed framebuffers\n             * @member {PIXI.Framebuffer[]} PIXI.systems.FramebufferSystem#managedFramebuffers\n             * @readonly\n             */\n            readonly managedFramebuffers: PIXI.Framebuffer[];\n            /**\n             * Framebuffer value that shows that we don't know what is bound\n             * @member {Framebuffer} PIXI.systems.FramebufferSystem#unknownFramebuffer\n             * @readonly\n             */\n            readonly unknownFramebuffer: Framebuffer;\n            /**\n             * Sets up the renderer context and necessary buffers.\n             */\n            contextChange(): void;\n            /**\n             * Bind a framebuffer\n             *\n             * @param {PIXI.Framebuffer} framebuffer\n             * @param {PIXI.Rectangle} [frame] frame, default is framebuffer size\n             */\n            bind(framebuffer: PIXI.Framebuffer, frame?: PIXI.Rectangle): void;\n            /**\n             * Set the WebGLRenderingContext's viewport.\n             *\n             * @param {Number} x - X position of viewport\n             * @param {Number} y - Y position of viewport\n             * @param {Number} width - Width of viewport\n             * @param {Number} height - Height of viewport\n             */\n            setViewport(x: number, y: number, width: number, height: number): void;\n            /**\n             * Get the size of the current width and height. Returns object with `width` and `height` values.\n             *\n             * @member {object}\n             * @readonly\n             */\n            readonly size: any;\n            /**\n             * Clear the color of the context\n             *\n             * @param {Number} r - Red value from 0 to 1\n             * @param {Number} g - Green value from 0 to 1\n             * @param {Number} b - Blue value from 0 to 1\n             * @param {Number} a - Alpha value from 0 to 1\n             * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n             *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n             */\n            clear(r: number, g: number, b: number, a: number, mask?: PIXI.BUFFER_BITS): void;\n            /**\n             * Initialize framebuffer for this context\n             *\n             * @protected\n             * @param {PIXI.Framebuffer} framebuffer\n             * @returns {PIXI.GLFramebuffer} created GLFramebuffer\n             */\n            protected initFramebuffer(framebuffer: PIXI.Framebuffer): PIXI.GLFramebuffer;\n            /**\n             * Resize the framebuffer\n             *\n             * @protected\n             * @param {PIXI.Framebuffer} framebuffer\n             */\n            protected resizeFramebuffer(framebuffer: PIXI.Framebuffer): void;\n            /**\n             * Update the framebuffer\n             *\n             * @protected\n             * @param {PIXI.Framebuffer} framebuffer\n             */\n            protected updateFramebuffer(framebuffer: PIXI.Framebuffer): void;\n            /**\n             * Detects number of samples that is not more than a param but as close to it as possible\n             *\n             * @param {PIXI.MSAA_QUALITY} samples - number of samples\n             * @returns {PIXI.MSAA_QUALITY} - recommended number of samples\n             */\n            detectSamples(samples: PIXI.MSAA_QUALITY): PIXI.MSAA_QUALITY;\n            /**\n             * Only works with WebGL2\n             *\n             * blits framebuffer to another of the same or bigger size\n             * after that target framebuffer is bound\n             *\n             * Fails with WebGL warning if blits multisample framebuffer to different size\n             *\n             * @param {PIXI.Framebuffer} [framebuffer] - by default it blits \"into itself\", from renderBuffer to texture.\n             * @param {PIXI.Rectangle} [sourcePixels] - source rectangle in pixels\n             * @param {PIXI.Rectangle} [destPixels] - dest rectangle in pixels, assumed to be the same as sourcePixels\n             */\n            blit(framebuffer?: PIXI.Framebuffer, sourcePixels?: PIXI.Rectangle, destPixels?: PIXI.Rectangle): void;\n            /**\n             * Disposes framebuffer\n             * @param {PIXI.Framebuffer} framebuffer - framebuffer that has to be disposed of\n             * @param {boolean} [contextLost=false] - If context was lost, we suppress all delete function calls\n             */\n            disposeFramebuffer(framebuffer: PIXI.Framebuffer, contextLost?: boolean): void;\n            /**\n             * Disposes all framebuffers, but not textures bound to them\n             * @param {boolean} [contextLost=false] - If context was lost, we suppress all delete function calls\n             */\n            disposeAll(contextLost?: boolean): void;\n            /**\n             * resets framebuffer stored state, binds screen framebuffer\n             *\n             * should be called before renderTexture reset()\n             */\n            reset(): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage geometry.\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class GeometrySystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * `true` if we has `*_vertex_array_object` extension\n             * @member {boolean} PIXI.systems.GeometrySystem#hasVao\n             * @readonly\n             */\n            readonly hasVao: boolean;\n            /**\n             * `true` if has `ANGLE_instanced_arrays` extension\n             * @member {boolean} PIXI.systems.GeometrySystem#hasInstance\n             * @readonly\n             */\n            readonly hasInstance: boolean;\n            /**\n             * `true` if support `gl.UNSIGNED_INT` in `gl.drawElements` or `gl.drawElementsInstanced`\n             * @member {boolean} PIXI.systems.GeometrySystem#canUseUInt32ElementIndex\n             * @readonly\n             */\n            readonly canUseUInt32ElementIndex: boolean;\n            /**\n             * Cache for all geometries by id, used in case renderer gets destroyed or for profiling\n             * @member {object} PIXI.systems.GeometrySystem#managedGeometries\n             * @readonly\n             */\n            readonly managedGeometries: any;\n            /**\n             * Cache for all buffers by id, used in case renderer gets destroyed or for profiling\n             * @member {object} PIXI.systems.GeometrySystem#managedBuffers\n             * @readonly\n             */\n            readonly managedBuffers: any;\n            /**\n             * Sets up the renderer context and necessary buffers.\n             */\n            contextChange(): void;\n            /**\n             * Binds geometry so that is can be drawn. Creating a Vao if required\n             *\n             * @param {PIXI.Geometry} geometry - instance of geometry to bind\n             * @param {PIXI.Shader} [shader] - instance of shader to use vao for\n             */\n            bind(geometry: PIXI.Geometry, shader?: PIXI.Shader): void;\n            /**\n             * Reset and unbind any active VAO and geometry\n             */\n            reset(): void;\n            /**\n             * Update buffers\n             * @protected\n             */\n            protected updateBuffers(): void;\n            /**\n             * Check compability between a geometry and a program\n             * @protected\n             * @param {PIXI.Geometry} geometry - Geometry instance\n             * @param {PIXI.Program} program - Program instance\n             */\n            protected checkCompatibility(geometry: PIXI.Geometry, program: PIXI.Program): void;\n            /**\n             * Takes a geometry and program and generates a unique signature for them.\n             *\n             * @param {PIXI.Geometry} geometry - to get signature from\n             * @param {PIXI.Program} program - to test geometry against\n             * @returns {String} Unique signature of the geometry and program\n             * @protected\n             */\n            protected getSignature(geometry: PIXI.Geometry, program: PIXI.Program): string;\n            /**\n             * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n             * If vao is created, it is bound automatically.\n             *\n             * @protected\n             * @param {PIXI.Geometry} geometry - Instance of geometry to to generate Vao for\n             * @param {PIXI.Program} program - Instance of program\n             */\n            protected initGeometryVao(geometry: PIXI.Geometry, program: PIXI.Program): void;\n            /**\n             * Disposes buffer\n             * @param {PIXI.Buffer} buffer - buffer with data\n             * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n             */\n            disposeBuffer(buffer: PIXI.Buffer, contextLost?: boolean): void;\n            /**\n             * Disposes geometry\n             * @param {PIXI.Geometry} geometry - Geometry with buffers. Only VAO will be disposed\n             * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n             */\n            disposeGeometry(geometry: PIXI.Geometry, contextLost?: boolean): void;\n            /**\n             * dispose all WebGL resources of all managed geometries and buffers\n             * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n             */\n            disposeAll(contextLost?: boolean): void;\n            /**\n             * Activate vertex array object\n             *\n             * @protected\n             * @param {PIXI.Geometry} geometry - Geometry instance\n             * @param {PIXI.Program} program - Shader program instance\n             */\n            protected activateVao(geometry: PIXI.Geometry, program: PIXI.Program): void;\n            /**\n             * Draw the geometry\n             *\n             * @param {Number} type - the type primitive to render\n             * @param {Number} [size] - the number of elements to be rendered\n             * @param {Number} [start] - Starting index\n             * @param {Number} [instanceCount] - the number of instances of the set of elements to execute\n             */\n            draw(type: number, size?: number, start?: number, instanceCount?: number): void;\n            /**\n             * Unbind/reset everything\n             * @protected\n             */\n            protected unbind(): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage masks of certain type\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class AbstractMaskSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * The mask stack\n             * @member {PIXI.MaskData[]} PIXI.systems.AbstractMaskSystem#maskStack\n             */\n            maskStack: PIXI.MaskData[];\n            /**\n             * gets count of masks of certain type\n             * @returns {number}\n             */\n            getStackLength(): number;\n            /**\n             * Changes the mask stack that is used by this System.\n             *\n             * @param {PIXI.MaskData[]} maskStack - The mask stack\n             */\n            setMaskStack(maskStack: PIXI.MaskData[]): void;\n            /**\n             * Destroys the mask stack.\n             *\n             */\n            destroy(): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n        }\n        /**\n         * System plugin to the renderer to manage masks.\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class MaskSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * Enable scissor\n             * @member {boolean} PIXI.systems.MaskSystem#enableScissor\n             * @readonly\n             */\n            readonly enableScissor: boolean;\n            /**\n             * Pool of used sprite mask filters\n             * @member {PIXI.SpriteMaskFilter[]} PIXI.systems.MaskSystem#alphaMaskPool\n             * @readonly\n             */\n            readonly alphaMaskPool: PIXI.SpriteMaskFilter[];\n            /**\n             * Pool of mask data\n             * @member {PIXI.MaskData[]} PIXI.systems.MaskSystem#maskDataPool\n             * @readonly\n             */\n            readonly maskDataPool: PIXI.MaskData[];\n            /**\n             * Current index of alpha mask pool\n             * @member {number} PIXI.systems.MaskSystem#alphaMaskIndex\n             * @default 0\n             * @readonly\n             */\n            readonly alphaMaskIndex: number;\n            /**\n             * Changes the mask stack that is used by this System.\n             *\n             * @param {PIXI.MaskData[]} maskStack - The mask stack\n             */\n            setMaskStack(maskStack: PIXI.MaskData[]): void;\n            /**\n             * Applies the Mask and adds it to the current filter stack.\n             * Renderer batch must be flushed beforehand.\n             *\n             * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n             * @param {PIXI.MaskData|PIXI.Sprite|PIXI.Graphics|PIXI.DisplayObject} maskData - The masking data.\n             */\n            push(target: PIXI.DisplayObject, maskData: PIXI.MaskData | PIXI.Sprite | PIXI.Graphics | PIXI.DisplayObject): void;\n            /**\n             * Removes the last mask from the mask stack and doesn't return it.\n             * Renderer batch must be flushed beforehand.\n             *\n             * @param {PIXI.DisplayObject} target - Display Object to pop the mask from\n             */\n            pop(target: PIXI.DisplayObject): void;\n            /**\n             * Sets type of MaskData based on its maskObject\n             * @param {PIXI.MaskData} maskData\n             */\n            detect(maskData: PIXI.MaskData): void;\n            /**\n             * Applies the Mask and adds it to the current filter stack.\n             *\n             * @param {PIXI.MaskData} maskData - Sprite to be used as the mask\n             */\n            pushSpriteMask(maskData: PIXI.MaskData): void;\n            /**\n             * Removes the last filter from the filter stack and doesn't return it.\n             */\n            popSpriteMask(): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage scissor rects (used for masks).\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class ScissorSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * Applies the Mask and adds it to the current stencil stack. @alvin\n             *\n             * @param {PIXI.MaskData} maskData - The mask data\n             */\n            push(maskData: PIXI.MaskData): void;\n            /**\n             * Pops scissor mask. MaskData is already removed from stack\n             */\n            pop(): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage stencils (used for masks).\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class StencilSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * Applies the Mask and adds it to the current stencil stack.\n             *\n             * @param {PIXI.MaskData} maskData - The mask data\n             */\n            push(maskData: PIXI.MaskData): void;\n            /**\n             * Pops stencil mask. MaskData is already removed from stack\n             *\n             * @param {PIXI.DisplayObject} maskObject - object of popped mask data\n             */\n            pop(maskObject: PIXI.DisplayObject): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage the projection matrix.\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class ProjectionSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * Destination frame\n             * @member {PIXI.Rectangle} PIXI.systems.ProjectionSystem#destinationFrame\n             * @readonly\n             */\n            readonly destinationFrame: PIXI.Rectangle;\n            /**\n             * Source frame\n             * @member {PIXI.Rectangle} PIXI.systems.ProjectionSystem#sourceFrame\n             * @readonly\n             */\n            readonly sourceFrame: PIXI.Rectangle;\n            /**\n             * Default destination frame\n             * @member {PIXI.Rectangle} PIXI.systems.ProjectionSystem#defaultFrame\n             * @readonly\n             */\n            readonly defaultFrame: PIXI.Rectangle;\n            /**\n             * Project matrix\n             * @member {PIXI.Matrix} PIXI.systems.ProjectionSystem#projectionMatrix\n             * @readonly\n             */\n            readonly projectionMatrix: PIXI.Matrix;\n            /**\n             * A transform that will be appended to the projection matrix\n             * if null, nothing will be applied\n             * @member {PIXI.Matrix} PIXI.systems.ProjectionSystem#transform\n             */\n            transform: PIXI.Matrix;\n            /**\n             * Updates the projection matrix based on a projection frame (which is a rectangle).\n             *\n             * Make sure to run `renderer.framebuffer.setViewport(destinationFrame)` after calling this.\n             *\n             * @param {PIXI.Rectangle} destinationFrame - The destination frame.\n             * @param {PIXI.Rectangle} sourceFrame - The source frame.\n             * @param {Number} resolution - Resolution\n             * @param {boolean} root - If is root\n             */\n            update(destinationFrame: PIXI.Rectangle, sourceFrame: PIXI.Rectangle, resolution: number, root: boolean): void;\n            /**\n             * Updates the projection matrix based on a projection frame (which is a rectangle)\n             *\n             * @param {PIXI.Rectangle} destinationFrame - The destination frame.\n             * @param {PIXI.Rectangle} sourceFrame - The source frame.\n             * @param {Number} resolution - Resolution\n             * @param {boolean} root - If is root\n             */\n            calculateProjection(destinationFrame: PIXI.Rectangle, sourceFrame: PIXI.Rectangle, resolution: number, root: boolean): void;\n            /**\n             * Sets the transform of the active render target to the given matrix\n             *\n             * @param {PIXI.Matrix} matrix - The transformation matrix\n             */\n            setTransform(matrix: PIXI.Matrix): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage render textures.\n         *\n         * Should be added after FramebufferSystem\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class RenderTextureSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * The clear background color as rgba\n             * @member {number[]} PIXI.systems.RenderTextureSystem#clearColor\n             */\n            clearColor: number[];\n            /**\n             * List of masks for the StencilSystem\n             * @member {PIXI.Graphics[]} PIXI.systems.RenderTextureSystem#defaultMaskStack\n             * @readonly\n             */\n            readonly defaultMaskStack: PIXI.Graphics[];\n            /**\n             * Render texture\n             * @member {PIXI.RenderTexture} PIXI.systems.RenderTextureSystem#current\n             * @readonly\n             */\n            readonly current: PIXI.RenderTexture;\n            /**\n             * Source frame\n             * @member {PIXI.Rectangle} PIXI.systems.RenderTextureSystem#sourceFrame\n             * @readonly\n             */\n            readonly sourceFrame: PIXI.Rectangle;\n            /**\n             * Destination frame\n             * @member {PIXI.Rectangle} PIXI.systems.RenderTextureSystem#destinationFrame\n             * @readonly\n             */\n            readonly destinationFrame: PIXI.Rectangle;\n            /**\n             * Bind the current render texture\n             *\n             * @param {PIXI.RenderTexture} [renderTexture] - RenderTexture to bind, by default its `null`, the screen\n             * @param {PIXI.Rectangle} [sourceFrame] - part of screen that is mapped to the renderTexture\n             * @param {PIXI.Rectangle} [destinationFrame] - part of renderTexture, by default it has the same size as sourceFrame\n             */\n            bind(renderTexture?: PIXI.RenderTexture, sourceFrame?: PIXI.Rectangle, destinationFrame?: PIXI.Rectangle): void;\n            /**\n             * Erases the render texture and fills the drawing area with a colour\n             *\n             * @param {number[]} [clearColor] - The color as rgba, default to use the renderer backgroundColor\n             * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n             *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n             * @return {PIXI.Renderer} Returns itself.\n             */\n            clear(clearColor?: number[], mask?: PIXI.BUFFER_BITS): PIXI.Renderer;\n            /**\n             * Resets renderTexture state\n             */\n            reset(): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage shaders.\n         *\n         * @class\n         * @memberof PIXI.systems\n         * @extends PIXI.System\n         */\n        class ShaderSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * The current WebGL rendering context\n             *\n             * @member {WebGLRenderingContext} PIXI.systems.ShaderSystem#gl\n             */\n            gl: WebGLRenderingContext;\n            /**\n             * Changes the current shader to the one given in parameter\n             *\n             * @param {PIXI.Shader} shader - the new shader\n             * @param {boolean} [dontSync] - false if the shader should automatically sync its uniforms.\n             * @returns {PIXI.GLProgram} the glProgram that belongs to the shader.\n             */\n            bind(shader: PIXI.Shader, dontSync?: boolean): PIXI.GLProgram;\n            /**\n             * Uploads the uniforms values to the currently bound shader.\n             *\n             * @param {object} uniforms - the uniforms values that be applied to the current shader\n             */\n            setUniforms(uniforms: any): void;\n            /**\n             *\n             * syncs uniforms on the group\n             * @param {*} group - the uniform group to sync\n             * @param {*} [syncData] - this is data that is passed to the sync function and any nested sync functions\n             */\n            syncUniformGroup(group: any, syncData?: any): void;\n            /**\n             * Returns the underlying GLShade rof the currently bound shader.\n             * This can be handy for when you to have a little more control over the setting of your uniforms.\n             *\n             * @return {PIXI.GLProgram} the glProgram for the currently bound Shader for this context\n             */\n            getglProgram(): PIXI.GLProgram;\n            /**\n             * Resets ShaderSystem state, does not affect WebGL state\n             */\n            reset(): void;\n            /**\n             * Destroys this System and removes all its textures\n             */\n            destroy(): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n        }\n        /**\n         * System plugin to the renderer to manage WebGL state machines.\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class StateSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * GL context\n             * @member {WebGLRenderingContext} PIXI.systems.StateSystem#gl\n             * @readonly\n             */\n            readonly gl: WebGLRenderingContext;\n            /**\n             * State ID\n             * @member {number} PIXI.systems.StateSystem#stateId\n             * @readonly\n             */\n            readonly stateId: number;\n            /**\n             * Polygon offset\n             * @member {number} PIXI.systems.StateSystem#polygonOffset\n             * @readonly\n             */\n            readonly polygonOffset: number;\n            /**\n             * Blend mode\n             * @member {number} PIXI.systems.StateSystem#blendMode\n             * @default PIXI.BLEND_MODES.NONE\n             * @readonly\n             */\n            readonly blendMode: number;\n            /**\n             * Whether current blend equation is different\n             * @member {boolean} PIXI.systems.StateSystem#_blendEq\n             * @protected\n             */\n            protected _blendEq: boolean;\n            /**\n             * Collection of calls\n             * @member {function[]} PIXI.systems.StateSystem#map\n             * @readonly\n             */\n            readonly map: ((...params: any[]) => any)[];\n            /**\n             * Collection of check calls\n             * @member {function[]} PIXI.systems.StateSystem#checks\n             * @readonly\n             */\n            readonly checks: ((...params: any[]) => any)[];\n            /**\n             * Default WebGL State\n             * @member {PIXI.State} PIXI.systems.StateSystem#defaultState\n             * @readonly\n             */\n            readonly defaultState: PIXI.State;\n            /**\n             * Sets the current state\n             *\n             * @param {*} state - The state to set.\n             */\n            set(state: any): void;\n            /**\n             * Sets the state, when previous state is unknown\n             *\n             * @param {*} state - The state to set\n             */\n            forceState(state: any): void;\n            /**\n             * Enables or disabled blending.\n             *\n             * @param {boolean} value - Turn on or off webgl blending.\n             */\n            setBlend(value: boolean): void;\n            /**\n             * Enables or disable polygon offset fill\n             *\n             * @param {boolean} value - Turn on or off webgl polygon offset testing.\n             */\n            setOffset(value: boolean): void;\n            /**\n             * Sets whether to enable or disable depth test.\n             *\n             * @param {boolean} value - Turn on or off webgl depth testing.\n             */\n            setDepthTest(value: boolean): void;\n            /**\n             * Sets whether to enable or disable cull face.\n             *\n             * @param {boolean} value - Turn on or off webgl cull face.\n             */\n            setCullFace(value: boolean): void;\n            /**\n             * Sets the gl front face.\n             *\n             * @param {boolean} value - true is clockwise and false is counter-clockwise\n             */\n            setFrontFace(value: boolean): void;\n            /**\n             * Sets the blend mode.\n             *\n             * @param {number} value - The blend mode to set to.\n             */\n            setBlendMode(value: number): void;\n            /**\n             * Sets the polygon offset.\n             *\n             * @param {number} value - the polygon offset\n             * @param {number} scale - the polygon offset scale\n             */\n            setPolygonOffset(value: number, scale: number): void;\n            /**\n             * Resets all the logic and disables the vaos\n             */\n            reset(): void;\n            /**\n             * checks to see which updates should be checked based on which settings have been activated.\n             * For example, if blend is enabled then we should check the blend modes each time the state is changed\n             * or if polygon fill is activated then we need to check if the polygon offset changes.\n             * The idea is that we only check what we have too.\n             *\n             * @param {Function} func - the checking function to add or remove\n             * @param {boolean} value - should the check function be added or removed.\n             */\n            updateCheck(func: (...params: any[]) => any, value: boolean): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage texture garbage collection on the GPU,\n         * ensuring that it does not get clogged up with textures that are no longer being used.\n         *\n         * @class\n         * @memberof PIXI.systems\n         * @extends PIXI.System\n         */\n        class TextureGCSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * Count\n             * @member {number} PIXI.systems.TextureGCSystem#count\n             * @readonly\n             */\n            readonly count: number;\n            /**\n             * Check count\n             * @member {number} PIXI.systems.TextureGCSystem#checkCount\n             * @readonly\n             */\n            readonly checkCount: number;\n            /**\n             * Maximum idle time, in seconds\n             * @member {number} PIXI.systems.TextureGCSystem#maxIdle\n             * @see PIXI.settings.GC_MAX_IDLE\n             */\n            maxIdle: number;\n            /**\n             * Maximum number of item to check\n             * @member {number} PIXI.systems.TextureGCSystem#checkCountMax\n             * @see PIXI.settings.GC_MAX_CHECK_COUNT\n             */\n            checkCountMax: number;\n            /**\n             * Current garabage collection mode\n             * @member {PIXI.GC_MODES} PIXI.systems.TextureGCSystem#mode\n             * @see PIXI.settings.GC_MODE\n             */\n            mode: PIXI.GC_MODES;\n            /**\n             * Checks to see when the last time a texture was used\n             * if the texture has not been used for a specified amount of time it will be removed from the GPU\n             */\n            postrender(): void;\n            /**\n             * Checks to see when the last time a texture was used\n             * if the texture has not been used for a specified amount of time it will be removed from the GPU\n             */\n            run(): void;\n            /**\n             * Removes all the textures within the specified displayObject and its children from the GPU\n             *\n             * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n             */\n            unload(displayObject: PIXI.DisplayObject): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n        /**\n         * System plugin to the renderer to manage textures.\n         *\n         * @class\n         * @extends PIXI.System\n         * @memberof PIXI.systems\n         */\n        class TextureSystem extends PIXI.System {\n            constructor(renderer: PIXI.Renderer);\n            /**\n             * Bound textures\n             * @member {PIXI.BaseTexture[]} PIXI.systems.TextureSystem#boundTextures\n             * @readonly\n             */\n            readonly boundTextures: PIXI.BaseTexture[];\n            /**\n             * Current location\n             * @member {number} PIXI.systems.TextureSystem#currentLocation\n             * @readonly\n             */\n            readonly currentLocation: number;\n            /**\n             * List of managed textures\n             * @member {PIXI.BaseTexture[]} PIXI.systems.TextureSystem#managedTextures\n             * @readonly\n             */\n            readonly managedTextures: PIXI.BaseTexture[];\n            /**\n             * BaseTexture value that shows that we don't know what is bound\n             * @member {PIXI.BaseTexture} PIXI.systems.TextureSystem#unknownTexture\n             * @readonly\n             */\n            readonly unknownTexture: PIXI.BaseTexture;\n            /**\n             * Sets up the renderer context and necessary buffers.\n             */\n            contextChange(): void;\n            /**\n             * Bind a texture to a specific location\n             *\n             * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`\n             *\n             * @param {PIXI.Texture|PIXI.BaseTexture} texture_ - Texture to bind\n             * @param {number} [location=0] - Location to bind at\n             */\n            bind(texture_: PIXI.Texture | PIXI.BaseTexture, location?: number): void;\n            /**\n             * Resets texture location and bound textures\n             *\n             * Actual `bind(null, i)` calls will be performed at next `unbind()` call\n             */\n            reset(): void;\n            /**\n             * Unbind a texture\n             * @param {PIXI.BaseTexture} texture - Texture to bind\n             */\n            unbind(texture: PIXI.BaseTexture): void;\n            /**\n             * The renderer this manager works for.\n             *\n             * @member {PIXI.Renderer} PIXI.System#renderer\n             */\n            renderer: PIXI.Renderer;\n            /**\n             * Generic destroy methods to be overridden by the subclass\n             */\n            destroy(): void;\n        }\n    }\n    /**\n     * A Texture stores the information that represents an image.\n     * All textures have a base texture, which contains information about the source.\n     * Therefore you can have many textures all using a single BaseTexture\n     *\n     * @class\n     * @extends PIXI.utils.EventEmitter\n     * @memberof PIXI\n     * @param {PIXI.resources.Resource|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [resource=null]\n     *        The current resource to use, for things that aren't Resource objects, will be converted\n     *        into a Resource.\n     * @param {Object} [options] - Collection of options\n     * @param {PIXI.MIPMAP_MODES} [options.mipmap=PIXI.settings.MIPMAP_TEXTURES] - If mipmapping is enabled for texture\n     * @param {number} [options.anisotropicLevel=PIXI.settings.ANISOTROPIC_LEVEL] - Anisotropic filtering level of texture\n     * @param {PIXI.WRAP_MODES} [options.wrapMode=PIXI.settings.WRAP_MODE] - Wrap mode for textures\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - Default scale mode, linear, nearest\n     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type\n     * @param {PIXI.TYPES} [options.type=PIXI.TYPES.UNSIGNED_BYTE] - GL data type\n     * @param {PIXI.TARGETS} [options.target=PIXI.TARGETS.TEXTURE_2D] - GL texture target\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Pre multiply the image alpha\n     * @param {number} [options.width=0] - Width of the texture\n     * @param {number} [options.height=0] - Height of the texture\n     * @param {number} [options.resolution] - Resolution of the base texture\n     * @param {object} [options.resourceOptions] - Optional resource options,\n     *        see {@link PIXI.resources.autoDetectResource autoDetectResource}\n     */\n    class BaseTexture extends PIXI.utils.EventEmitter {\n        constructor(resource?: PIXI.resources.Resource | string | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, options?: {\n            mipmap?: PIXI.MIPMAP_MODES;\n            anisotropicLevel?: number;\n            wrapMode?: PIXI.WRAP_MODES;\n            scaleMode?: PIXI.SCALE_MODES;\n            format?: PIXI.FORMATS;\n            type?: PIXI.TYPES;\n            target?: PIXI.TARGETS;\n            alphaMode?: PIXI.ALPHA_MODES;\n            width?: number;\n            height?: number;\n            resolution?: number;\n            resourceOptions?: any;\n        });\n        /**\n         * The width of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number} PIXI.BaseTexture#width\n         */\n        readonly width: number;\n        /**\n         * The height of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number} PIXI.BaseTexture#height\n         */\n        readonly height: number;\n        /**\n         * The resolution / device pixel ratio of the texture\n         *\n         * @member {number} PIXI.BaseTexture#resolution\n         * @default PIXI.settings.RESOLUTION\n         */\n        resolution: number;\n        /**\n         * Mipmap mode of the texture, affects downscaled images\n         *\n         * @member {PIXI.MIPMAP_MODES} PIXI.BaseTexture#mipmap\n         * @default PIXI.settings.MIPMAP_TEXTURES\n         */\n        mipmap: PIXI.MIPMAP_MODES;\n        /**\n         * Anisotropic filtering level of texture\n         *\n         * @member {number} PIXI.BaseTexture#anisotropicLevel\n         * @default PIXI.settings.ANISOTROPIC_LEVEL\n         */\n        anisotropicLevel: number;\n        /**\n         * How the texture wraps\n         * @member {number} PIXI.BaseTexture#wrapMode\n         */\n        wrapMode: number;\n        /**\n         * The scale mode to apply when scaling this texture\n         *\n         * @member {PIXI.SCALE_MODES} PIXI.BaseTexture#scaleMode\n         * @default PIXI.settings.SCALE_MODE\n         */\n        scaleMode: PIXI.SCALE_MODES;\n        /**\n         * The pixel format of the texture\n         *\n         * @member {PIXI.FORMATS} PIXI.BaseTexture#format\n         * @default PIXI.FORMATS.RGBA\n         */\n        format: PIXI.FORMATS;\n        /**\n         * The type of resource data\n         *\n         * @member {PIXI.TYPES} PIXI.BaseTexture#type\n         * @default PIXI.TYPES.UNSIGNED_BYTE\n         */\n        type: PIXI.TYPES;\n        /**\n         * The target type\n         *\n         * @member {PIXI.TARGETS} PIXI.BaseTexture#target\n         * @default PIXI.TARGETS.TEXTURE_2D\n         */\n        target: PIXI.TARGETS;\n        /**\n         * How to treat premultiplied alpha, see {@link PIXI.ALPHA_MODES}.\n         *\n         * @member {PIXI.ALPHA_MODES} PIXI.BaseTexture#alphaMode\n         * @default PIXI.ALPHA_MODES.UNPACK\n         */\n        alphaMode: PIXI.ALPHA_MODES;\n        /**\n         * Global unique identifier for this BaseTexture\n         *\n         * @member {number} PIXI.BaseTexture#uid\n         * @protected\n         */\n        protected uid: number;\n        /**\n         * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n         *\n         * @member {number} PIXI.BaseTexture#touched\n         * @protected\n         */\n        protected touched: number;\n        /**\n         * Whether or not the texture is a power of two, try to use power of two textures as much\n         * as you can\n         *\n         * @readonly\n         * @member {boolean} PIXI.BaseTexture#isPowerOfTwo\n         * @default false\n         */\n        readonly isPowerOfTwo: boolean;\n        /**\n         * Used by TextureSystem to only update texture to the GPU when needed.\n         * Please call `update()` to increment it.\n         *\n         * @readonly\n         * @member {number} PIXI.BaseTexture#dirtyId\n         */\n        readonly dirtyId: number;\n        /**\n         * Used by TextureSystem to only update texture style when needed.\n         *\n         * @protected\n         * @member {number} PIXI.BaseTexture#dirtyStyleId\n         */\n        protected dirtyStyleId: number;\n        /**\n         * Currently default cache ID.\n         *\n         * @member {string} PIXI.BaseTexture#cacheId\n         */\n        cacheId: string;\n        /**\n         * Generally speaking means when resource is loaded.\n         * @readonly\n         * @member {boolean} PIXI.BaseTexture#valid\n         */\n        readonly valid: boolean;\n        /**\n         * The collection of alternative cache ids, since some BaseTextures\n         * can have more than one ID, short name and longer full URL\n         *\n         * @member {Array<string>} PIXI.BaseTexture#textureCacheIds\n         * @readonly\n         */\n        readonly textureCacheIds: string[];\n        /**\n         * Flag if BaseTexture has been destroyed.\n         *\n         * @member {boolean} PIXI.BaseTexture#destroyed\n         * @readonly\n         */\n        readonly destroyed: boolean;\n        /**\n         * The resource used by this BaseTexture, there can only\n         * be one resource per BaseTexture, but textures can share\n         * resources.\n         *\n         * @member {PIXI.resources.Resource} PIXI.BaseTexture#resource\n         * @readonly\n         */\n        readonly resource: PIXI.resources.Resource;\n        /**\n         * Number of the texture batch, used by multi-texture renderers\n         *\n         * @member {number} PIXI.BaseTexture#_batchEnabled\n         */\n        _batchEnabled: number;\n        /**\n         * Location inside texture batch, used by multi-texture renderers\n         *\n         * @member {number} PIXI.BaseTexture#_batchLocation\n         */\n        _batchLocation: number;\n        /**\n         * Whether its a part of another texture, handled by ArrayResource or CubeResource\n         *\n         * @member {PIXI.BaseTexture} PIXI.BaseTexture#parentTextureArray\n         */\n        parentTextureArray: PIXI.BaseTexture;\n        /**\n         * Pixel width of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        readonly realWidth: number;\n        /**\n         * Pixel height of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        readonly realHeight: number;\n        /**\n         * Changes style options of BaseTexture\n         *\n         * @param {PIXI.SCALE_MODES} [scaleMode] - Pixi scalemode\n         * @param {PIXI.MIPMAP_MODES} [mipmap] - enable mipmaps\n         * @returns {PIXI.BaseTexture} this\n         */\n        setStyle(scaleMode?: PIXI.SCALE_MODES, mipmap?: PIXI.MIPMAP_MODES): PIXI.BaseTexture;\n        /**\n         * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.\n         *\n         * @param {number} width - Visual width\n         * @param {number} height - Visual height\n         * @param {number} [resolution] - Optionally set resolution\n         * @returns {PIXI.BaseTexture} this\n         */\n        setSize(width: number, height: number, resolution?: number): PIXI.BaseTexture;\n        /**\n         * Sets real size of baseTexture, preserves current resolution.\n         *\n         * @param {number} realWidth - Full rendered width\n         * @param {number} realHeight - Full rendered height\n         * @param {number} [resolution] - Optionally set resolution\n         * @returns {PIXI.BaseTexture} this\n         */\n        setRealSize(realWidth: number, realHeight: number, resolution?: number): PIXI.BaseTexture;\n        /**\n         * Changes resolution\n         *\n         * @param {number} resolution - res\n         * @returns {PIXI.BaseTexture} this\n         */\n        setResolution(resolution: number): PIXI.BaseTexture;\n        /**\n         * Sets the resource if it wasn't set. Throws error if resource already present\n         *\n         * @param {PIXI.resources.Resource} resource - that is managing this BaseTexture\n         * @returns {PIXI.BaseTexture} this\n         */\n        setResource(resource: PIXI.resources.Resource): PIXI.BaseTexture;\n        /**\n         * Invalidates the object. Texture becomes valid if width and height are greater than zero.\n         */\n        update(): void;\n        /**\n         * Destroys this base texture.\n         * The method stops if resource doesn't want this texture to be destroyed.\n         * Removes texture from all caches.\n         */\n        destroy(): void;\n        /**\n         * Frees the texture from WebGL memory without destroying this texture object.\n         * This means you can still use the texture later which will upload it to GPU\n         * memory again.\n         *\n         * @fires PIXI.BaseTexture#dispose\n         */\n        dispose(): void;\n        /**\n         * Utility function for BaseTexture|Texture cast\n         */\n        castToBaseTexture(): void;\n        /**\n         * Helper function that creates a base texture based on the source you provide.\n         * The source can be - image url, image element, canvas element. If the\n         * source is an image url or an image element and not in the base texture\n         * cache, it will be created and loaded.\n         *\n         * @static\n         * @param {string|HTMLImageElement|HTMLCanvasElement|SVGElement|HTMLVideoElement} source - The\n         *        source to create base texture from.\n         * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.\n         * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n         * @returns {PIXI.BaseTexture} The new base texture.\n         */\n        static from(source: string | HTMLImageElement | HTMLCanvasElement | SVGElement | HTMLVideoElement, options?: any, strict?: boolean): PIXI.BaseTexture;\n        /**\n         * Create a new BaseTexture with a BufferResource from a Float32Array.\n         * RGBA values are floats from 0 to 1.\n         * @static\n         * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n         *        is provided, a new Float32Array is created.\n         * @param {number} width - Width of the resource\n         * @param {number} height - Height of the resource\n         * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.\n         * @return {PIXI.BaseTexture} The resulting new BaseTexture\n         */\n        static fromBuffer(buffer: Float32Array | Uint8Array, width: number, height: number, options?: any): PIXI.BaseTexture;\n        /**\n         * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n         *\n         * @static\n         * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n         * @param {string} id - The id that the BaseTexture will be stored against.\n         */\n        static addToCache(baseTexture: PIXI.BaseTexture, id: string): void;\n        /**\n         * Remove a BaseTexture from the global BaseTextureCache.\n         *\n         * @static\n         * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n         * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.\n         */\n        static removeFromCache(baseTexture: string | PIXI.BaseTexture): PIXI.BaseTexture | null;\n        /**\n         * Global number of the texture batch, used by multi-texture renderers\n         *\n         * @static\n         * @member {number}\n         */\n        static _globalBatch: number;\n    }\n    /**\n     * Internal texture for WebGL context\n     * @class\n     * @memberof PIXI\n     */\n    class GLTexture {\n        constructor();\n        /**\n         * The WebGL texture\n         * @member {WebGLTexture} PIXI.GLTexture#texture\n         */\n        texture: WebGLTexture;\n        /**\n         * Width of texture that was used in texImage2D\n         * @member {number} PIXI.GLTexture#width\n         */\n        width: number;\n        /**\n         * Height of texture that was used in texImage2D\n         * @member {number} PIXI.GLTexture#height\n         */\n        height: number;\n        /**\n         * Texture contents dirty flag\n         * @member {number} PIXI.GLTexture#dirtyId\n         */\n        dirtyId: number;\n        /**\n         * Texture style dirty flag\n         * @member {number} PIXI.GLTexture#dirtyStyleId\n         */\n        dirtyStyleId: number;\n        /**\n         * Whether mip levels has to be generated\n         * @member {boolean} PIXI.GLTexture#mipmap\n         */\n        mipmap: boolean;\n        /**\n         * WrapMode copied from baseTexture\n         * @member {number} PIXI.GLTexture#wrapMode\n         */\n        wrapMode: number;\n        /**\n         * Type copied from baseTexture\n         * @member {number} PIXI.GLTexture#type\n         */\n        type: number;\n        /**\n         * Type copied from baseTexture\n         * @member {number} PIXI.GLTexture#internalFormat\n         */\n        internalFormat: number;\n    }\n    /**\n     * A texture stores the information that represents an image or part of an image.\n     *\n     * It cannot be added to the display list directly; instead use it as the texture for a Sprite.\n     * If no frame is provided for a texture, then the whole image is used.\n     *\n     * You can directly create a texture from an image and then reuse it multiple times like this :\n     *\n     * ```js\n     * let texture = PIXI.Texture.from('assets/image.png');\n     * let sprite1 = new PIXI.Sprite(texture);\n     * let sprite2 = new PIXI.Sprite(texture);\n     * ```\n     *\n     * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:\n     * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.\n     *\n     * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n     * You can check for this by checking the sprite's _textureID property.\n     * ```js\n     * var texture = PIXI.Texture.from('assets/image.svg');\n     * var sprite1 = new PIXI.Sprite(texture);\n     * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n     * ```\n     * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\n     *\n     * @class\n     * @extends PIXI.utils.EventEmitter\n     * @memberof PIXI\n     */\n    class Texture extends PIXI.utils.EventEmitter {\n        constructor(baseTexture: PIXI.BaseTexture, frame?: PIXI.Rectangle, orig?: PIXI.Rectangle, trim?: PIXI.Rectangle, rotate?: number, anchor?: PIXI.IPointData);\n        /**\n         * Does this Texture have any frame data assigned to it?\n         *\n         * This mode is enabled automatically if no frame was passed inside constructor.\n         *\n         * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n         *\n         * Beware, after loading or resize of baseTexture event can fired two times!\n         * If you want more control, subscribe on baseTexture itself.\n         *\n         * ```js\n         * texture.on('update', () => {});\n         * ```\n         *\n         * Any assignment of `frame` switches off `noFrame` mode.\n         *\n         * @member {boolean} PIXI.Texture#noFrame\n         */\n        noFrame: boolean;\n        /**\n         * The base texture that this texture uses.\n         *\n         * @member {PIXI.BaseTexture} PIXI.Texture#baseTexture\n         */\n        baseTexture: PIXI.BaseTexture;\n        /**\n         * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n         * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n         *\n         * @member {PIXI.Rectangle} PIXI.Texture#_frame\n         */\n        _frame: PIXI.Rectangle;\n        /**\n         * This is the trimmed area of original texture, before it was put in atlas\n         * Please call `updateUvs()` after you change coordinates of `trim` manually.\n         *\n         * @member {PIXI.Rectangle} PIXI.Texture#trim\n         */\n        trim: PIXI.Rectangle;\n        /**\n         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.\n         *\n         * @member {boolean} PIXI.Texture#valid\n         */\n        valid: boolean;\n        /**\n         * The WebGL UV data cache. Can be used as quad UV\n         *\n         * @member {PIXI.TextureUvs} PIXI.Texture#_uvs\n         * @protected\n         */\n        protected _uvs: PIXI.TextureUvs;\n        /**\n         * Default TextureMatrix instance for this texture\n         * By default that object is not created because its heavy\n         *\n         * @member {PIXI.TextureMatrix} PIXI.Texture#uvMatrix\n         */\n        uvMatrix: PIXI.TextureMatrix;\n        /**\n         * This is the area of original texture, before it was put in atlas\n         *\n         * @member {PIXI.Rectangle} PIXI.Texture#orig\n         */\n        orig: PIXI.Rectangle;\n        /**\n         * Anchor point that is used as default if sprite is created with this texture.\n         * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.\n         * @member {PIXI.Point} PIXI.Texture#defaultAnchor\n         * @default {0,0}\n         */\n        defaultAnchor: PIXI.Point;\n        /**\n         * Update ID is observed by sprites and TextureMatrix instances.\n         * Call updateUvs() to increment it.\n         *\n         * @member {number} PIXI.Texture#_updateID\n         * @protected\n         */\n        protected _updateID: number;\n        /**\n         * The ids under which this Texture has been added to the texture cache. This is\n         * automatically set as long as Texture.addToCache is used, but may not be set if a\n         * Texture is added directly to the TextureCache array.\n         *\n         * @member {string[]} PIXI.Texture#textureCacheIds\n         */\n        textureCacheIds: string[];\n        /**\n         * Updates this texture on the gpu.\n         *\n         * Calls the TextureResource update.\n         *\n         * If you adjusted `frame` manually, please call `updateUvs()` instead.\n         *\n         */\n        update(): void;\n        /**\n         * Called when the base texture is updated\n         *\n         * @protected\n         * @param {PIXI.BaseTexture} baseTexture - The base texture.\n         */\n        protected onBaseTextureUpdated(baseTexture: PIXI.BaseTexture): void;\n        /**\n         * Destroys this texture\n         *\n         * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n         */\n        destroy(destroyBase?: boolean): void;\n        /**\n         * Creates a new texture object that acts the same as this one.\n         *\n         * @return {PIXI.Texture} The new texture\n         */\n        clone(): PIXI.Texture;\n        /**\n         * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\n         * Call it after changing the frame\n         */\n        updateUvs(): void;\n        /**\n         * Helper function that creates a new Texture based on the source you provide.\n         * The source can be - frame id, image url, video url, canvas element, video element, base texture\n         *\n         * @static\n         * @param {string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture} source\n         *        Source to create texture from\n         * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.\n         * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n         * @return {PIXI.Texture} The newly created texture\n         */\n        static from(source: string | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | PIXI.BaseTexture, options?: any, strict?: boolean): PIXI.Texture;\n        /**\n         * Useful for loading textures via URLs. Use instead of `Texture.from` because\n         * it does a better job of handling failed URLs more effectively. This also ignores\n         * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.\n         * @param {string} url The remote URL to load.\n         * @param {object} [options] Optional options to include\n         * @return {Promise<PIXI.Texture>} A Promise that resolves to a Texture.\n         */\n        static fromURL(url: string, options?: any): Promise<PIXI.Texture>;\n        /**\n         * Create a new Texture with a BufferResource from a Float32Array.\n         * RGBA values are floats from 0 to 1.\n         * @static\n         * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n         *        is provided, a new Float32Array is created.\n         * @param {number} width - Width of the resource\n         * @param {number} height - Height of the resource\n         * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.\n         * @return {PIXI.Texture} The resulting new BaseTexture\n         */\n        static fromBuffer(buffer: Float32Array | Uint8Array, width: number, height: number, options?: any): PIXI.Texture;\n        /**\n         * Create a texture from a source and add to the cache.\n         *\n         * @static\n         * @param {HTMLImageElement|HTMLCanvasElement} source - The input source.\n         * @param {String} imageUrl - File name of texture, for cache and resolving resolution.\n         * @param {String} [name] - Human readable name for the texture cache. If no name is\n         *        specified, only `imageUrl` will be used as the cache ID.\n         * @return {PIXI.Texture} Output texture\n         */\n        static fromLoader(source: HTMLImageElement | HTMLCanvasElement, imageUrl: string, name?: string): PIXI.Texture;\n        /**\n         * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\n         *\n         * @static\n         * @param {PIXI.Texture} texture - The Texture to add to the cache.\n         * @param {string} id - The id that the Texture will be stored against.\n         */\n        static addToCache(texture: PIXI.Texture, id: string): void;\n        /**\n         * Remove a Texture from the global TextureCache.\n         *\n         * @static\n         * @param {string|PIXI.Texture} texture - id of a Texture to be removed, or a Texture instance itself\n         * @return {PIXI.Texture|null} The Texture that was removed\n         */\n        static removeFromCache(texture: string | PIXI.Texture): PIXI.Texture | null;\n        /**\n         * Returns resolution of baseTexture\n         *\n         * @member {number}\n         * @readonly\n         */\n        readonly resolution: number;\n        /**\n         * The frame specifies the region of the base texture that this texture uses.\n         * Please call `updateUvs()` after you change coordinates of `frame` manually.\n         *\n         * @member {PIXI.Rectangle}\n         */\n        frame: PIXI.Rectangle;\n        /**\n         * Indicates whether the texture is rotated inside the atlas\n         * set to 2 to compensate for texture packer rotation\n         * set to 6 to compensate for spine packer rotation\n         * can be used to rotate or mirror sprites\n         * See {@link PIXI.groupD8} for explanation\n         *\n         * @member {number}\n         */\n        rotate: number;\n        /**\n         * The width of the Texture in pixels.\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Texture in pixels.\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Utility function for BaseTexture|Texture cast\n         */\n        castToBaseTexture(): void;\n        /**\n         * An empty texture, used often to not have to create multiple empty textures.\n         * Can not be destroyed.\n         *\n         * @static\n         * @constant\n         * @member {PIXI.Texture}\n         */\n        static EMPTY: PIXI.Texture;\n        /**\n         * A white texture of 16x16 size, used for graphics and other things\n         * Can not be destroyed.\n         *\n         * @static\n         * @constant\n         * @member {PIXI.Texture}\n         */\n        static WHITE: PIXI.Texture;\n    }\n    /**\n     * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n     *\n     * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n     *\n     * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n     * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n     *\n     * Takes track of Texture changes through `_lastTextureID` private field.\n     * Use `update()` method call to track it from outside.\n     *\n     * @see PIXI.Texture\n     * @see PIXI.Mesh\n     * @see PIXI.TilingSprite\n     * @class\n     * @memberof PIXI\n     */\n    class TextureMatrix {\n        constructor(texture: PIXI.Texture, clampMargin?: number);\n        /**\n         * Matrix operation that converts texture region coords to texture coords\n         * @member {PIXI.Matrix} PIXI.TextureMatrix#mapCoord\n         * @readonly\n         */\n        readonly mapCoord: PIXI.Matrix;\n        /**\n         * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n         * Calculated based on clampOffset.\n         * @member {Float32Array} PIXI.TextureMatrix#uClampFrame\n         * @readonly\n         */\n        readonly uClampFrame: Float32Array;\n        /**\n         * Normalized clamp offset.\n         * Calculated based on clampOffset.\n         * @member {Float32Array} PIXI.TextureMatrix#uClampOffset\n         * @readonly\n         */\n        readonly uClampOffset: Float32Array;\n        /**\n         * Tracks Texture frame changes\n         * @member {number} PIXI.TextureMatrix#_textureID\n         * @protected\n         */\n        protected _textureID: number;\n        /**\n         * Tracks Texture frame changes\n         * @member {number} PIXI.TextureMatrix#_updateID\n         * @protected\n         */\n        protected _updateID: number;\n        /**\n         * Changes frame clamping\n         * Works with TilingSprite and Mesh\n         * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n         *\n         * @default 0\n         * @member {number} PIXI.TextureMatrix#clampOffset\n         */\n        clampOffset: number;\n        /**\n         * Changes frame clamping\n         * Works with TilingSprite and Mesh\n         * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n         *\n         * @default 0.5\n         * @member {number} PIXI.TextureMatrix#clampMargin\n         */\n        clampMargin: number;\n        /**\n         * If texture size is the same as baseTexture\n         * @member {boolean} PIXI.TextureMatrix#isSimple\n         * @default false\n         * @readonly\n         */\n        readonly isSimple: boolean;\n        /**\n         * texture property\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * Multiplies uvs array to transform\n         * @param {Float32Array} uvs - mesh uvs\n         * @param {Float32Array} [out=uvs] output\n         * @returns {Float32Array} output\n         */\n        multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array;\n        /**\n         * updates matrices if texture was changed\n         * @param {boolean} [forceUpdate=false] - if true, matrices will be updated any case\n         * @returns {boolean} whether or not it was updated\n         */\n        update(forceUpdate?: boolean): boolean;\n    }\n    /**\n     * Stores a texture's frame in UV coordinates, in\n     * which everything lies in the rectangle `[(0,0), (1,0),\n     * (1,1), (0,1)]`.\n     *\n     * | Corner       | Coordinates |\n     * |--------------|-------------|\n     * | Top-Left     | `(x0,y0)`   |\n     * | Top-Right    | `(x1,y1)`   |\n     * | Bottom-Right | `(x2,y2)`   |\n     * | Bottom-Left  | `(x3,y3)`   |\n     *\n     * @class\n     * @protected\n     * @memberof PIXI\n     */\n    class TextureUvs {\n        constructor();\n        /**\n         * X-component of top-left corner `(x0,y0)`.\n         *\n         * @member {number} PIXI.TextureUvs#x0\n         */\n        x0: number;\n        /**\n         * Y-component of top-left corner `(x0,y0)`.\n         *\n         * @member {number} PIXI.TextureUvs#y0\n         */\n        y0: number;\n        /**\n         * X-component of top-right corner `(x1,y1)`.\n         *\n         * @member {number} PIXI.TextureUvs#x1\n         */\n        x1: number;\n        /**\n         * Y-component of top-right corner `(x1,y1)`.\n         *\n         * @member {number} PIXI.TextureUvs#y1\n         */\n        y1: number;\n        /**\n         * X-component of bottom-right corner `(x2,y2)`.\n         *\n         * @member {number} PIXI.TextureUvs#x2\n         */\n        x2: number;\n        /**\n         * Y-component of bottom-right corner `(x2,y2)`.\n         *\n         * @member {number} PIXI.TextureUvs#y2\n         */\n        y2: number;\n        /**\n         * X-component of bottom-left corner `(x3,y3)`.\n         *\n         * @member {number} PIXI.TextureUvs#x3\n         */\n        x3: number;\n        /**\n         * Y-component of bottom-right corner `(x3,y3)`.\n         *\n         * @member {number} PIXI.TextureUvs#y3\n         */\n        y3: number;\n        /**\n         * Sets the texture Uvs based on the given frame information.\n         *\n         * @protected\n         * @param {PIXI.Rectangle} frame - The frame of the texture\n         * @param {PIXI.Rectangle} baseFrame - The base frame of the texture\n         * @param {number} rotate - Rotation of frame, see {@link PIXI.groupD8}\n         */\n        protected set(frame: PIXI.Rectangle, baseFrame: PIXI.Rectangle, rotate: number): void;\n    }\n    /**\n     * Collection of base resource types supported by PixiJS.\n     *\n     * Resources are used by {@link PIXI.BaseTexture} to handle different media types\n     * such as images, video, SVG graphics, etc. In most use-cases, you should not\n     * instantiate the resources directly. The easy thing is to use\n     * {@link PIXI.BaseTexture.from}.\n     * @example\n     * const baseTexture = PIXI.BaseTexture.from('path/to/image.jpg');\n     * @namespace PIXI.resources\n     */\n    namespace resources {\n        /**\n         * Resource that can manage several resource (items) inside.\n         * All resources need to have the same pixel size.\n         * Parent class for CubeResource and ArrayResource\n         *\n         * @class\n         * @extends PIXI.resources.Resource\n         * @memberof PIXI.resources\n         * @param {object} [options] Options to for Resource constructor\n         * @param {number} [options.width] - Width of the resource\n         * @param {number} [options.height] - Height of the resource\n         */\n        class AbstractMultiResource extends PIXI.resources.Resource {\n            constructor(options?: {\n                width?: number;\n                height?: number;\n            });\n            /**\n             * Collection of partial baseTextures that correspond to resources\n             * @member {Array<PIXI.BaseTexture>} PIXI.resources.AbstractMultiResource#items\n             * @readonly\n             */\n            readonly items: PIXI.BaseTexture[];\n            /**\n             * Dirty IDs for each part\n             * @member {Array<number>} PIXI.resources.AbstractMultiResource#itemDirtyIds\n             * @readonly\n             */\n            readonly itemDirtyIds: number[];\n            /**\n             * Number of elements in array\n             *\n             * @member {number} PIXI.resources.AbstractMultiResource#length\n             * @readonly\n             */\n            readonly length: number;\n            /**\n             * Bound baseTexture, there can only be one\n             * @member {PIXI.BaseTexture} PIXI.resources.AbstractMultiResource#baseTexture\n             */\n            baseTexture: PIXI.BaseTexture;\n            /**\n             * used from ArrayResource and CubeResource constructors\n             * @param {Array<*>} resources - Can be resources, image elements, canvas, etc. ,\n             *  length should be same as constructor length\n             * @param {object} [options] - detect options for resources\n             * @protected\n             */\n            protected initFromArray(resources: any[], options?: any): void;\n            /**\n             * Set a resource by ID\n             *\n             * @param {PIXI.resources.Resource} resource\n             * @param {number} index - Zero-based index of resource to set\n             * @return {PIXI.resources.ArrayResource} Instance for chaining\n             */\n            addResourceAt(resource: PIXI.resources.Resource, index: number): PIXI.resources.ArrayResource;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * Has been updated trigger event\n             */\n            update(): void;\n            /**\n             * This can be overridden to start preloading a resource\n             * or do any other prepare step.\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * A resource that contains a number of sources.\n         *\n         * @class\n         * @extends PIXI.resources.Resource\n         * @memberof PIXI.resources\n         * @param {number|Array<*>} source - Number of items in array or the collection\n         *        of image URLs to use. Can also be resources, image elements, canvas, etc.\n         * @param {object} [options] - Options to apply to {@link PIXI.resources.autoDetectResource}\n         * @param {number} [options.width] - Width of the resource\n         * @param {number} [options.height] - Height of the resource\n         */\n        class ArrayResource extends PIXI.resources.Resource {\n            constructor(source: number | any[], options?: {\n                width?: number;\n                height?: number;\n            });\n            /**\n             * Set a baseTexture by ID,\n             * ArrayResource just takes resource from it, nothing more\n             *\n             * @param {PIXI.BaseTexture} baseTexture\n             * @param {number} index - Zero-based index of resource to set\n             * @return {PIXI.resources.ArrayResource} Instance for chaining\n             */\n            addBaseTextureAt(baseTexture: PIXI.BaseTexture, index: number): PIXI.resources.ArrayResource;\n            /**\n             * Upload the resources to the GPU.\n             * @param {PIXI.Renderer} renderer\n             * @param {PIXI.BaseTexture} texture\n             * @param {PIXI.GLTexture} glTexture\n             * @returns {boolean} whether texture was uploaded\n             */\n            upload(renderer: PIXI.Renderer, texture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * Has been updated trigger event\n             */\n            update(): void;\n            /**\n             * This can be overridden to start preloading a resource\n             * or do any other prepare step.\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * Base for all the image/canvas resources\n         * @class\n         * @extends PIXI.resources.Resource\n         * @memberof PIXI.resources\n         */\n        class BaseImageResource extends PIXI.resources.Resource {\n            constructor(source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement);\n            /**\n             * The source element\n             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source\n             * @readonly\n             */\n            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;\n            /**\n             * Set cross origin based detecting the url and the crossorigin\n             * @protected\n             * @param {HTMLElement} element - Element to apply crossOrigin\n             * @param {string} url - URL to check\n             * @param {boolean|string} [crossorigin=true] - Cross origin value to use\n             */\n            protected static crossOrigin(element: HTMLElement, url: string, crossorigin?: boolean | string): void;\n            /**\n             * Upload the texture to the GPU.\n             * @param {PIXI.Renderer} renderer - Upload to the renderer\n             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture\n             * @param {PIXI.GLTexture} glTexture\n             * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)\n             * @returns {boolean} true is success\n             */\n            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture, source?: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement): boolean;\n            /**\n             * Checks if source width/height was changed, resize can cause extra baseTexture update.\n             * Triggers one update in any case.\n             */\n            update(): void;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * This can be overridden to start preloading a resource\n             * or do any other prepare step.\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * Buffer resource with data of typed array.\n         * @class\n         * @extends PIXI.resources.Resource\n         * @memberof PIXI.resources\n         */\n        class BufferResource extends PIXI.resources.Resource {\n            constructor(source: Float32Array | Uint8Array | Uint32Array, options: {\n                width: number;\n                height: number;\n            });\n            /**\n             * Source array\n             * Cannot be ClampedUint8Array because it cant be uploaded to WebGL\n             *\n             * @member {Float32Array|Uint8Array|Uint32Array} PIXI.resources.BufferResource#data\n             */\n            data: Float32Array | Uint8Array | Uint32Array;\n            /**\n             * Upload the texture to the GPU.\n             * @param {PIXI.Renderer} renderer - Upload to the renderer\n             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture\n             * @param {PIXI.GLTexture} glTexture - glTexture\n             * @returns {boolean} true is success\n             */\n            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Used to auto-detect the type of resource.\n             *\n             * @static\n             * @param {*} source - The source object\n             * @return {boolean} `true` if <canvas>\n             */\n            static test(source: any): boolean;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * Has been updated trigger event\n             */\n            update(): void;\n            /**\n             * This can be overridden to start preloading a resource\n             * or do any other prepare step.\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * Resource type for HTMLCanvasElement.\n         * @class\n         * @extends PIXI.resources.BaseImageResource\n         * @memberof PIXI.resources\n         * @param {HTMLCanvasElement} source - Canvas element to use\n         */\n        class CanvasResource extends PIXI.resources.BaseImageResource {\n            constructor(source: HTMLCanvasElement);\n            /**\n             * Used to auto-detect the type of resource.\n             *\n             * @static\n             * @param {HTMLCanvasElement|OffscreenCanvas} source - The source object\n             * @return {boolean} `true` if source is HTMLCanvasElement or OffscreenCanvas\n             */\n            static test(source: HTMLCanvasElement | OffscreenCanvas): boolean;\n            /**\n             * The source element\n             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source\n             * @readonly\n             */\n            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;\n            /**\n             * Upload the texture to the GPU.\n             * @param {PIXI.Renderer} renderer - Upload to the renderer\n             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture\n             * @param {PIXI.GLTexture} glTexture\n             * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)\n             * @returns {boolean} true is success\n             */\n            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture, source?: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement): boolean;\n            /**\n             * Checks if source width/height was changed, resize can cause extra baseTexture update.\n             * Triggers one update in any case.\n             */\n            update(): void;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * This can be overridden to start preloading a resource\n             * or do any other prepare step.\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * Resource for a CubeTexture which contains six resources.\n         *\n         * @class\n         * @extends PIXI.resources.ArrayResource\n         * @memberof PIXI.resources\n         * @param {Array<string|PIXI.resources.Resource>} [source] - Collection of URLs or resources\n         *        to use as the sides of the cube.\n         * @param {object} [options] - ImageResource options\n         * @param {number} [options.width] - Width of resource\n         * @param {number} [options.height] - Height of resource\n         * @param {number} [options.autoLoad=true] - Whether to auto-load resources\n         * @param {number} [options.linkBaseTexture=true] - In case BaseTextures are supplied,\n         *   whether to copy them or use\n         */\n        class CubeResource extends PIXI.resources.ArrayResource {\n            constructor(source?: (string | PIXI.resources.Resource)[], options?: {\n                width?: number;\n                height?: number;\n                autoLoad?: number;\n                linkBaseTexture?: number;\n            });\n            /**\n             * In case BaseTextures are supplied, whether to use same resource or bind baseTexture itself\n             * @member {boolean} PIXI.resources.CubeResource#linkBaseTexture\n             * @protected\n             */\n            protected linkBaseTexture: boolean;\n            /**\n             * Upload the resource\n             *\n             * @returns {boolean} true is success\n             */\n            upload(): boolean;\n            /**\n             * Used to auto-detect the type of resource.\n             *\n             * @static\n             * @param {object} source - The source object\n             * @return {boolean} `true` if source is an array of 6 elements\n             */\n            static test(source: any): boolean;\n            /**\n             * Number of texture sides to store for CubeResources\n             *\n             * @name PIXI.resources.CubeResource.SIDES\n             * @static\n             * @member {number}\n             * @default 6\n             */\n            static SIDES: number;\n            /**\n             * Set a baseTexture by ID,\n             * ArrayResource just takes resource from it, nothing more\n             *\n             * @param {PIXI.BaseTexture} baseTexture\n             * @param {number} index - Zero-based index of resource to set\n             * @return {PIXI.resources.ArrayResource} Instance for chaining\n             */\n            addBaseTextureAt(baseTexture: PIXI.BaseTexture, index: number): PIXI.resources.ArrayResource;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * Has been updated trigger event\n             */\n            update(): void;\n            /**\n             * This can be overridden to start preloading a resource\n             * or do any other prepare step.\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * Resource type for DepthTexture.\n         * @class\n         * @extends PIXI.resources.BufferResource\n         * @memberof PIXI.resources\n         */\n        class DepthResource extends PIXI.resources.BufferResource {\n            /**\n             * Upload the texture to the GPU.\n             * @param {PIXI.Renderer} renderer - Upload to the renderer\n             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture\n             * @param {PIXI.GLTexture} glTexture - glTexture\n             * @returns {boolean} true is success\n             */\n            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Source array\n             * Cannot be ClampedUint8Array because it cant be uploaded to WebGL\n             *\n             * @member {Float32Array|Uint8Array|Uint32Array} PIXI.resources.BufferResource#data\n             */\n            data: Float32Array | Uint8Array | Uint32Array;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * Has been updated trigger event\n             */\n            update(): void;\n            /**\n             * This can be overridden to start preloading a resource\n             * or do any other prepare step.\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * Resource type for ImageBitmap.\n         * @class\n         * @extends PIXI.resources.BaseImageResource\n         * @memberof PIXI.resources\n         * @param {ImageBitmap} source - Image element to use\n         */\n        class ImageBitmapResource extends PIXI.resources.BaseImageResource {\n            constructor(source: ImageBitmap);\n            /**\n             * Used to auto-detect the type of resource.\n             *\n             * @static\n             * @param {ImageBitmap} source - The source object\n             * @return {boolean} `true` if source is an ImageBitmap\n             */\n            static test(source: ImageBitmap): boolean;\n            /**\n             * The source element\n             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source\n             * @readonly\n             */\n            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;\n            /**\n             * Upload the texture to the GPU.\n             * @param {PIXI.Renderer} renderer - Upload to the renderer\n             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture\n             * @param {PIXI.GLTexture} glTexture\n             * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)\n             * @returns {boolean} true is success\n             */\n            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture, source?: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement): boolean;\n            /**\n             * Checks if source width/height was changed, resize can cause extra baseTexture update.\n             * Triggers one update in any case.\n             */\n            update(): void;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * This can be overridden to start preloading a resource\n             * or do any other prepare step.\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * Resource type for HTMLImageElement.\n         * @class\n         * @extends PIXI.resources.BaseImageResource\n         * @memberof PIXI.resources\n         */\n        class ImageResource extends PIXI.resources.BaseImageResource {\n            constructor(source: HTMLImageElement | string, options?: {\n                autoLoad?: boolean;\n                createBitmap?: boolean;\n                crossorigin?: boolean;\n                alphaMode?: PIXI.ALPHA_MODES;\n            });\n            /**\n             * URL of the image source\n             * @member {string} PIXI.resources.ImageResource#url\n             */\n            url: string;\n            /**\n             * If the image should be disposed after upload\n             * @member {boolean} PIXI.resources.ImageResource#preserveBitmap\n             * @default false\n             */\n            preserveBitmap: boolean;\n            /**\n             * If capable, convert the image using createImageBitmap API\n             * @member {boolean} PIXI.resources.ImageResource#createBitmap\n             * @default PIXI.settings.CREATE_IMAGE_BITMAP\n             */\n            createBitmap: boolean;\n            /**\n             * Controls texture alphaMode field\n             * Copies from options\n             * Default is `null`, copies option from baseTexture\n             *\n             * @member {PIXI.ALPHA_MODES|null} PIXI.resources.ImageResource#alphaMode\n             * @readonly\n             */\n            readonly alphaMode: PIXI.ALPHA_MODES | null;\n            /**\n             * The ImageBitmap element created for HTMLImageElement\n             * @member {ImageBitmap} PIXI.resources.ImageResource#bitmap\n             * @default null\n             */\n            bitmap: ImageBitmap;\n            /**\n             * returns a promise when image will be loaded and processed\n             *\n             * @param {boolean} [createBitmap] - whether process image into bitmap\n             * @returns {Promise<void>}\n             */\n            load(createBitmap?: boolean): Promise<void>;\n            /**\n             * Called when we need to convert image into BitmapImage.\n             * Can be called multiple times, real promise is cached inside.\n             *\n             * @returns {Promise<void>} cached promise to fill that bitmap\n             */\n            process(): Promise<void>;\n            /**\n             * Upload the image resource to GPU.\n             *\n             * @param {PIXI.Renderer} renderer - Renderer to upload to\n             * @param {PIXI.BaseTexture} baseTexture - BaseTexture for this resource\n             * @param {PIXI.GLTexture} glTexture - GLTexture to use\n             * @returns {boolean} true is success\n             */\n            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Used to auto-detect the type of resource.\n             *\n             * @static\n             * @param {string|HTMLImageElement} source - The source object\n             * @return {boolean} `true` if source is string or HTMLImageElement\n             */\n            static test(source: string | HTMLImageElement): boolean;\n            /**\n             * The source element\n             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source\n             * @readonly\n             */\n            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;\n            /**\n             * Checks if source width/height was changed, resize can cause extra baseTexture update.\n             * Triggers one update in any case.\n             */\n            update(): void;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * Base resource class for textures that manages validation and uploading, depending on its type.\n         *\n         * Uploading of a base texture to the GPU is required.\n         *\n         * @class\n         * @memberof PIXI.resources\n         */\n        class Resource {\n            constructor(width?: number, height?: number);\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * Has been updated trigger event\n             */\n            update(): void;\n            /**\n             * This can be overridden to start preloading a resource\n             * or do any other prepare step.\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n            /**\n             * Abstract, used to auto-detect resource type\n             *\n             * @static\n             * @param {*} source - The source object\n             * @param {string} extension - The extension of source, if set\n             */\n            static test(source: any, extension: string): void;\n        }\n        /**\n         * Resource type for SVG elements and graphics.\n         * @class\n         * @extends PIXI.resources.BaseImageResource\n         * @memberof PIXI.resources\n         * @param {string} source - Base64 encoded SVG element or URL for SVG file.\n         * @param {object} [options] - Options to use\n         * @param {number} [options.scale=1] - Scale to apply to SVG. Overridden by...\n         * @param {number} [options.width] - Rasterize SVG this wide. Aspect ratio preserved if height not specified.\n         * @param {number} [options.height] - Rasterize SVG this high. Aspect ratio preserved if width not specified.\n         * @param {boolean} [options.autoLoad=true] - Start loading right away.\n         */\n        class SVGResource extends PIXI.resources.BaseImageResource {\n            constructor(source: string, options?: {\n                scale?: number;\n                width?: number;\n                height?: number;\n                autoLoad?: boolean;\n            });\n            /**\n             * Base64 encoded SVG element or URL for SVG file\n             * @readonly\n             * @member {string} PIXI.resources.SVGResource#svg\n             */\n            readonly svg: string;\n            /**\n             * The source scale to apply when rasterizing on load\n             * @readonly\n             * @member {number} PIXI.resources.SVGResource#scale\n             */\n            readonly scale: number;\n            /**\n             * A width override for rasterization on load\n             * @readonly\n             * @member {number} PIXI.resources.SVGResource#_overrideWidth\n             */\n            readonly _overrideWidth: number;\n            /**\n             * A height override for rasterization on load\n             * @readonly\n             * @member {number} PIXI.resources.SVGResource#_overrideHeight\n             */\n            readonly _overrideHeight: number;\n            /**\n             * Get size from an svg string using regexp.\n             *\n             * @method\n             * @param {string} svgString - a serialized svg element\n             * @return {PIXI.ISize} image extension\n             */\n            static getSize(svgString: string): PIXI.ISize;\n            /**\n             * Used to auto-detect the type of resource.\n             *\n             * @static\n             * @param {*} source - The source object\n             * @param {string} extension - The extension of source, if set\n             */\n            static test(source: any, extension: string): void;\n            /**\n             * RegExp for SVG size.\n             *\n             * @static\n             * @constant {RegExp|string} SVG_SIZE\n             * @memberof PIXI.resources.SVGResource\n             * @example &lt;svg width=\"100\" height=\"100\"&gt;&lt;/svg&gt;\n             */\n            static readonly SVG_SIZE: RegExp | string;\n            /**\n             * The source element\n             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source\n             * @readonly\n             */\n            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;\n            /**\n             * Upload the texture to the GPU.\n             * @param {PIXI.Renderer} renderer - Upload to the renderer\n             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture\n             * @param {PIXI.GLTexture} glTexture\n             * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)\n             * @returns {boolean} true is success\n             */\n            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture, source?: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement): boolean;\n            /**\n             * Checks if source width/height was changed, resize can cause extra baseTexture update.\n             * Triggers one update in any case.\n             */\n            update(): void;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * This can be overridden to start preloading a resource\n             * or do any other prepare step.\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * Resource type for HTMLVideoElement.\n         * @class\n         * @extends PIXI.resources.BaseImageResource\n         * @memberof PIXI.resources\n         * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.\n         * @param {object} [options] - Options to use\n         * @param {boolean} [options.autoLoad=true] - Start loading the video immediately\n         * @param {boolean} [options.autoPlay=true] - Start playing video immediately\n         * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.\n         * Leave at 0 to update at every render.\n         * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n         */\n        class VideoResource extends PIXI.resources.BaseImageResource {\n            constructor(source: HTMLVideoElement | any | string | (string | any)[], options?: {\n                autoLoad?: boolean;\n                autoPlay?: boolean;\n                updateFPS?: number;\n                crossorigin?: boolean;\n            });\n            /**\n             * When set to true will automatically play videos used by this texture once\n             * they are loaded. If false, it will not modify the playing state.\n             *\n             * @member {boolean} PIXI.resources.VideoResource#autoPlay\n             * @default true\n             */\n            autoPlay: boolean;\n            /**\n             * Trigger updating of the texture\n             *\n             * @param {number} [deltaTime=0] - time delta since last tick\n             */\n            update(deltaTime?: number): void;\n            /**\n             * Start preloading the video resource.\n             *\n             * @protected\n             * @return {Promise<void>} Handle the validate event\n             */\n            protected load(): Promise<void>;\n            /**\n             * Should the base texture automatically update itself, set to true by default\n             *\n             * @member {boolean}\n             */\n            autoUpdate: boolean;\n            /**\n             * How many times a second to update the texture from the video. Leave at 0 to update at every render.\n             * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n             *\n             * @member {number}\n             */\n            updateFPS: number;\n            /**\n             * Used to auto-detect the type of resource.\n             *\n             * @static\n             * @param {*} source - The source object\n             * @param {string} extension - The extension of source, if set\n             * @return {boolean} `true` if video source\n             */\n            static test(source: any, extension: string): boolean;\n            /**\n             * List of common video file extensions supported by VideoResource.\n             * @constant\n             * @member {Array<string>}\n             * @static\n             * @readonly\n             */\n            static readonly TYPES: string[];\n            /**\n             * Map of video MIME types that can't be directly derived from file extensions.\n             * @constant\n             * @member {object}\n             * @static\n             * @readonly\n             */\n            static readonly MIME_TYPES: any;\n            /**\n             * The source element\n             * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} PIXI.resources.BaseImageResource#source\n             * @readonly\n             */\n            readonly source: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement;\n            /**\n             * Upload the texture to the GPU.\n             * @param {PIXI.Renderer} renderer - Upload to the renderer\n             * @param {PIXI.BaseTexture} baseTexture - Reference to parent texture\n             * @param {PIXI.GLTexture} glTexture\n             * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)\n             * @returns {boolean} true is success\n             */\n            upload(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture, source?: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | SVGElement): boolean;\n            /**\n             * Clean up anything, this happens when destroying is ready.\n             *\n             * @protected\n             */\n            protected dispose(): void;\n            /**\n             * Internal width of the resource\n             * @member {number} PIXI.resources.Resource#_width\n             * @protected\n             */\n            protected _width: number;\n            /**\n             * Internal height of the resource\n             * @member {number} PIXI.resources.Resource#_height\n             * @protected\n             */\n            protected _height: number;\n            /**\n             * If resource has been destroyed\n             * @member {boolean} PIXI.resources.Resource#destroyed\n             * @readonly\n             * @default false\n             */\n            readonly destroyed: boolean;\n            /**\n             * `true` if resource is created by BaseTexture\n             * useful for doing cleanup with BaseTexture destroy\n             * and not cleaning up resources that were created\n             * externally.\n             * @member {boolean} PIXI.resources.Resource#internal\n             * @protected\n             */\n            protected internal: boolean;\n            /**\n             * Bind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            bind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Unbind to a parent BaseTexture\n             *\n             * @param {PIXI.BaseTexture} baseTexture - Parent texture\n             */\n            unbind(baseTexture: PIXI.BaseTexture): void;\n            /**\n             * Trigger a resize event\n             * @param {number} width - X dimension\n             * @param {number} height - Y dimension\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Has been validated\n             * @readonly\n             * @member {boolean}\n             */\n            readonly valid: boolean;\n            /**\n             * The width of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly width: number;\n            /**\n             * The height of the resource.\n             *\n             * @member {number}\n             * @readonly\n             */\n            readonly height: number;\n            /**\n             * Set the style, optional to override\n             *\n             * @param {PIXI.Renderer} renderer - yeah, renderer!\n             * @param {PIXI.BaseTexture} baseTexture - the texture\n             * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n             * @returns {boolean} `true` is success\n             */\n            style(renderer: PIXI.Renderer, baseTexture: PIXI.BaseTexture, glTexture: PIXI.GLTexture): boolean;\n            /**\n             * Call when destroying resource, unbind any BaseTexture object\n             * before calling this method, as reference counts are maintained\n             * internally.\n             */\n            destroy(): void;\n        }\n        /**\n         * Collection of installed resource types, class must extend {@link PIXI.resources.Resource}.\n         * @example\n         * class CustomResource extends PIXI.resources.Resource {\n         *   // MUST have source, options constructor signature\n         *   // for auto-detected resources to be created.\n         *   constructor(source, options) {\n         *     super();\n         *   }\n         *   upload(renderer, baseTexture, glTexture) {\n         *     // upload with GL\n         *     return true;\n         *   }\n         *   // used to auto-detect resource\n         *   static test(source, extension) {\n         *     return extension === 'xyz'|| source instanceof SomeClass;\n         *   }\n         * }\n         * // Install the new resource type\n         * PIXI.resources.INSTALLED.push(CustomResource);\n         *\n         * @name PIXI.resources.INSTALLED\n         * @type {Array<*>}\n         * @static\n         * @readonly\n         */\n        var INSTALLED: any[];\n        /**\n         * Create a resource element from a single source element. This\n         * auto-detects which type of resource to create. All resources that\n         * are auto-detectable must have a static `test` method and a constructor\n         * with the arguments `(source, options?)`. Currently, the supported\n         * resources for auto-detection include:\n         *  - {@link PIXI.resources.ImageResource}\n         *  - {@link PIXI.resources.CanvasResource}\n         *  - {@link PIXI.resources.VideoResource}\n         *  - {@link PIXI.resources.SVGResource}\n         *  - {@link PIXI.resources.BufferResource}\n         * @static\n         * @function PIXI.resources.autoDetectResource\n         * @param {string|*} source - Resource source, this can be the URL to the resource,\n         *        a typed-array (for BufferResource), HTMLVideoElement, SVG data-uri\n         *        or any other resource that can be auto-detected. If not resource is\n         *        detected, it's assumed to be an ImageResource.\n         * @param {object} [options] - Pass-through options to use for Resource\n         * @param {number} [options.width] - Width of BufferResource or SVG rasterization\n         * @param {number} [options.height] - Height of BufferResource or SVG rasterization\n         * @param {boolean} [options.autoLoad=true] - Image, SVG and Video flag to start loading\n         * @param {number} [options.scale=1] - SVG source scale. Overridden by width, height\n         * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - Image option to create Bitmap object\n         * @param {boolean} [options.crossorigin=true] - Image and Video option to set crossOrigin\n         * @param {boolean} [options.autoPlay=true] - Video option to start playing video immediately\n         * @param {number} [options.updateFPS=0] - Video option to update how many times a second the\n         *        texture should be updated from the video. Leave at 0 to update at every render\n         * @return {PIXI.resources.Resource} The created resource.\n         */\n        function autoDetectResource(source: string | any, options?: {\n            width?: number;\n            height?: number;\n            autoLoad?: boolean;\n            scale?: number;\n            createBitmap?: boolean;\n            crossorigin?: boolean;\n            autoPlay?: boolean;\n            updateFPS?: number;\n        }): PIXI.resources.Resource;\n    }\n    /**\n     * Helper class to create a quad\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Quad {\n        constructor();\n    }\n    /**\n     * Helper class to create a quad with uvs like in v4\n     *\n     * @class\n     * @memberof PIXI\n     * @extends PIXI.Geometry\n     */\n    class QuadUv extends PIXI.Geometry {\n        constructor();\n        /**\n         * An array of vertices\n         *\n         * @member {Float32Array} PIXI.QuadUv#vertices\n         */\n        vertices: Float32Array;\n        /**\n         * The Uvs of the quad\n         *\n         * @member {Float32Array} PIXI.QuadUv#uvs\n         */\n        uvs: Float32Array;\n        /**\n         * Maps two Rectangle to the quad.\n         *\n         * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle\n         * @param {PIXI.Rectangle} destinationFrame - the second rectangle\n         * @return {PIXI.Quad} Returns itself.\n         */\n        map(targetTextureFrame: PIXI.Rectangle, destinationFrame: PIXI.Rectangle): PIXI.Quad;\n        /**\n         * legacy upload method, just marks buffers dirty\n         * @returns {PIXI.QuadUv} Returns itself.\n         */\n        invalidate(): PIXI.QuadUv;\n        /**\n         * A map of renderer IDs to webgl VAOs\n         *\n         * @protected\n         * @type {object}\n         */\n        protected glVertexArrayObjects: any;\n        /**\n         * Number of instances in this geometry, pass it to `GeometrySystem.draw()`\n         * @member {number} PIXI.Geometry#instanceCount\n         * @default 1\n         */\n        instanceCount: number;\n        /**\n         * Count of existing (not destroyed) meshes that reference this geometry\n         * @member {number} PIXI.Geometry#refCount\n         */\n        refCount: number;\n        /**\n         *\n         * Adds an attribute to the geometry\n         * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!\n         *\n         * @param {String} id - the name of the attribute (matching up to a shader)\n         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.\n         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n         * @param {Boolean} [normalized=false] - should the data be normalized.\n         * @param {Number} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available\n         * @param {Number} [stride] - How far apart (in floats) the start of each value is. (used for interleaving data)\n         * @param {Number} [start] - How far into the array to start reading values (used for interleaving data)\n         * @param {boolean} [instance=false] - Instancing flag\n         *\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        addAttribute(id: string, buffer?: PIXI.Buffer | number[], size?: number, normalized?: boolean, type?: number, stride?: number, start?: number, instance?: boolean): PIXI.Geometry;\n        /**\n         * returns the requested attribute\n         *\n         * @param {String} id - the name of the attribute required\n         * @return {PIXI.Attribute} the attribute requested.\n         */\n        getAttribute(id: string): PIXI.Attribute;\n        /**\n         * returns the requested buffer\n         *\n         * @param {String} id - the name of the buffer required\n         * @return {PIXI.Buffer} the buffer requested.\n         */\n        getBuffer(id: string): PIXI.Buffer;\n        /**\n         *\n         * Adds an index buffer to the geometry\n         * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.\n         *\n         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        addIndex(buffer?: PIXI.Buffer | number[]): PIXI.Geometry;\n        /**\n         * returns the index buffer\n         *\n         * @return {PIXI.Buffer} the index buffer.\n         */\n        getIndex(): PIXI.Buffer;\n        /**\n         * this function modifies the structure so that all current attributes become interleaved into a single buffer\n         * This can be useful if your model remains static as it offers a little performance boost\n         *\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        interleave(): PIXI.Geometry;\n        /**\n         * disposes WebGL resources that are connected to this geometry\n         */\n        dispose(): void;\n        /**\n         * Destroys the geometry.\n         */\n        destroy(): void;\n        /**\n         * returns a clone of the geometry\n         *\n         * @returns {PIXI.Geometry} a new clone of this geometry\n         */\n        clone(): PIXI.Geometry;\n    }\n    /**\n     * 'Builder' pattern for bounds rectangles.\n     *\n     * This could be called an Axis-Aligned Bounding Box.\n     * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Bounds {\n        constructor();\n        /**\n         * @member {number} PIXI.Bounds#minX\n         * @default 0\n         */\n        minX: number;\n        /**\n         * @member {number} PIXI.Bounds#minY\n         * @default 0\n         */\n        minY: number;\n        /**\n         * @member {number} PIXI.Bounds#maxX\n         * @default 0\n         */\n        maxX: number;\n        /**\n         * @member {number} PIXI.Bounds#maxY\n         * @default 0\n         */\n        maxY: number;\n        /**\n         * It is updated to _boundsID of corresponding object to keep bounds in sync with content.\n         * Updated from outside, thus public modifier.\n         *\n         * @member {number} PIXI.Bounds#updateID\n         * @public\n         */\n        public updateID: number;\n        /**\n         * Checks if bounds are empty.\n         *\n         * @return {boolean} True if empty.\n         */\n        isEmpty(): boolean;\n        /**\n         * Clears the bounds and resets.\n         *\n         */\n        clear(): void;\n        /**\n         * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n         * It is not guaranteed that it will return tempRect\n         *\n         * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty\n         * @returns {PIXI.Rectangle} A rectangle of the bounds\n         */\n        getRectangle(rect: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * This function should be inlined when its possible.\n         *\n         * @param {PIXI.IPointData} point - The point to add.\n         */\n        addPoint(point: PIXI.IPointData): void;\n        /**\n         * Adds a quad, not transformed\n         *\n         * @param {Float32Array} vertices - The verts to add.\n         */\n        addQuad(vertices: Float32Array): void;\n        /**\n         * Adds sprite frame, transformed.\n         *\n         * @param {PIXI.Transform} transform - transform to apply\n         * @param {number} x0 - left X of frame\n         * @param {number} y0 - top Y of frame\n         * @param {number} x1 - right X of frame\n         * @param {number} y1 - bottom Y of frame\n         */\n        addFrame(transform: PIXI.Transform, x0: number, y0: number, x1: number, y1: number): void;\n        /**\n         * Adds sprite frame, multiplied by matrix\n         *\n         * @param {PIXI.Matrix} matrix - matrix to apply\n         * @param {number} x0 - left X of frame\n         * @param {number} y0 - top Y of frame\n         * @param {number} x1 - right X of frame\n         * @param {number} y1 - bottom Y of frame\n         */\n        addFrameMatrix(matrix: PIXI.Matrix, x0: number, y0: number, x1: number, y1: number): void;\n        /**\n         * Adds screen vertices from array\n         *\n         * @param {Float32Array} vertexData - calculated vertices\n         * @param {number} beginOffset - begin offset\n         * @param {number} endOffset - end offset, excluded\n         */\n        addVertexData(vertexData: Float32Array, beginOffset: number, endOffset: number): void;\n        /**\n         * Add an array of mesh vertices\n         *\n         * @param {PIXI.Transform} transform - mesh transform\n         * @param {Float32Array} vertices - mesh coordinates in array\n         * @param {number} beginOffset - begin offset\n         * @param {number} endOffset - end offset, excluded\n         */\n        addVertices(transform: PIXI.Transform, vertices: Float32Array, beginOffset: number, endOffset: number): void;\n        /**\n         * Add an array of mesh vertices.\n         *\n         * @param {PIXI.Matrix} matrix - mesh matrix\n         * @param {Float32Array} vertices - mesh coordinates in array\n         * @param {number} beginOffset - begin offset\n         * @param {number} endOffset - end offset, excluded\n         * @param {number} [padX=0] - x padding\n         * @param {number} [padY=0] - y padding\n         */\n        addVerticesMatrix(matrix: PIXI.Matrix, vertices: Float32Array, beginOffset: number, endOffset: number, padX?: number, padY?: number): void;\n        /**\n         * Adds other Bounds.\n         *\n         * @param {PIXI.Bounds} bounds - The Bounds to be added\n         */\n        addBounds(bounds: PIXI.Bounds): void;\n        /**\n         * Adds other Bounds, masked with Bounds.\n         *\n         * @param {PIXI.Bounds} bounds - The Bounds to be added.\n         * @param {PIXI.Bounds} mask - TODO\n         */\n        addBoundsMask(bounds: PIXI.Bounds, mask: PIXI.Bounds): void;\n        /**\n         * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.\n         *\n         * @param {PIXI.Bounds} bounds - other bounds\n         * @param {PIXI.Matrix} matrix - multiplicator\n         */\n        addBoundsMatrix(bounds: PIXI.Bounds, matrix: PIXI.Matrix): void;\n        /**\n         * Adds other Bounds, masked with Rectangle.\n         *\n         * @param {PIXI.Bounds} bounds - TODO\n         * @param {PIXI.Rectangle} area - TODO\n         */\n        addBoundsArea(bounds: PIXI.Bounds, area: PIXI.Rectangle): void;\n        /**\n         * Pads bounds object, making it grow in all directions.\n         * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n         *\n         * @param {number} [paddingX=0] - The horizontal padding amount.\n         * @param {number} [paddingY=0] - The vertical padding amount.\n         */\n        pad(paddingX?: number, paddingY?: number): void;\n        /**\n         * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)\n         *\n         * @param {number} x0 - left X of frame\n         * @param {number} y0 - top Y of frame\n         * @param {number} x1 - right X of frame\n         * @param {number} y1 - bottom Y of frame\n         * @param {number} padX - padding X\n         * @param {number} padY - padding Y\n         */\n        addFramePad(x0: number, y0: number, x1: number, y1: number, padX: number, padY: number): void;\n    }\n    /**\n     * A Container represents a collection of display objects.\n     *\n     * It is the base class of all display objects that act as a container for other objects (like Sprites).\n     *\n     *```js\n     * let container = new PIXI.Container();\n     * container.addChild(sprite);\n     * ```\n     *\n     * @class\n     * @extends PIXI.DisplayObject\n     * @memberof PIXI\n     */\n    class Container extends PIXI.DisplayObject {\n        constructor();\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Retrieves the local bounds of the displayObject as a rectangle object.\n         *\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,\n         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;\n        /**\n         * Recalculates the bounds of the object. Override this to\n         * calculate the bounds of the specific object (not including children).\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * To be overridden by the subclasses.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Removes all internal references and listeners as well as removes children from the display list.\n         * Do not use a Container after calling `destroy`.\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n         *  have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n         *  method called as well. 'options' will be passed on to those calls.\n         * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n         *  Should it destroy the texture of the child sprite\n         * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n         *  Should it destroy the base texture of the child sprite\n         */\n        destroy(options?: {\n            children?: boolean;\n            texture?: boolean;\n            baseTexture?: boolean;\n        }): void;\n        /**\n         * The width of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.DisplayObject#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * The base class for all objects that are rendered on the screen.\n     *\n     * This is an abstract class and should not be used on its own; rather it should b e extended.\n     *\n     * @class\n     * @extends PIXI.utils.EventEmitter\n     * @memberof PIXI\n     */\n    class DisplayObject extends PIXI.utils.EventEmitter {\n        constructor();\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.DisplayObject#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Mixes all enumerable properties and methods from a source object to DisplayObject.\n         *\n         * @param {object} source - The source of properties and methods to mix in.\n         */\n        static mixin(source: any): void;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Updates the object transform for rendering.\n         *\n         * TODO - Optimization pass!\n         */\n        updateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Retrieves the local bounds of the displayObject as a rectangle object.\n         *\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * Base destroy method for generic display objects. This will automatically\n         * remove the display object from its parent Container as well as remove\n         * all current event listeners and internal references. Do not use a DisplayObject\n         * after calling `destroy()`.\n         *\n         */\n        destroy(): void;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * This class provides renderer-specific plugins for exporting content from a renderer.\n     * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n     *\n     * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n     * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n     * @example\n     * // Create a new app (will auto-add extract plugin to renderer)\n     * const app = new PIXI.Application();\n     *\n     * // Draw a red circle\n     * const graphics = new PIXI.Graphics()\n     *     .beginFill(0xFF0000)\n     *     .drawCircle(0, 0, 50);\n     *\n     * // Render the graphics as an HTMLImageElement\n     * const image = app.renderer.plugins.extract.image(graphics);\n     * document.body.appendChild(image);\n     * @class\n     * @memberof PIXI\n     */\n    class Extract {\n        constructor(renderer: PIXI.Renderer);\n        /**\n         * Will return a HTML Image of the target\n         *\n         * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n         *  to convert. If left empty will use the main renderer\n         * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n         * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n         * @return {HTMLImageElement} HTML Image of the target\n         */\n        image(target: PIXI.DisplayObject | PIXI.RenderTexture, format?: string, quality?: number): HTMLImageElement;\n        /**\n         * Will return a a base64 encoded string of this target. It works by calling\n         *  `Extract.getCanvas` and then running toDataURL on that.\n         *\n         * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n         *  to convert. If left empty will use the main renderer\n         * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n         * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n         * @return {string} A base64 encoded string of the texture.\n         */\n        base64(target: PIXI.DisplayObject | PIXI.RenderTexture, format?: string, quality?: number): string;\n        /**\n         * Creates a Canvas element, renders this target to it and then returns it.\n         *\n         * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n         *  to convert. If left empty will use the main renderer\n         * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n         */\n        canvas(target: PIXI.DisplayObject | PIXI.RenderTexture): HTMLCanvasElement;\n        /**\n         * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n         * order, with integer values between 0 and 255 (included).\n         *\n         * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n         *  to convert. If left empty will use the main renderer\n         * @return {Uint8Array} One-dimensional array containing the pixel data of the entire texture\n         */\n        pixels(target: PIXI.DisplayObject | PIXI.RenderTexture): Uint8Array;\n        /**\n         * Destroys the extract\n         *\n         */\n        destroy(): void;\n    }\n    /**\n     * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n     * rectangles to the display, and to color and fill them.\n     *\n     * Note that because Graphics can share a GraphicsGeometry with other instances,\n     * it is necessary to call `destroy()` to properly dereference the underlying\n     * GraphicsGeometry and avoid a memory leak. Alternatively, keep using the same\n     * Graphics instance and call `clear()` between redraws.\n     *\n     * @class\n     * @extends PIXI.Container\n     * @memberof PIXI\n     */\n    class Graphics extends PIXI.Container {\n        constructor(geometry?: PIXI.GraphicsGeometry);\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Graphics objects.\n         *\n         * @member {PIXI.Shader} PIXI.Graphics#shader\n         */\n        shader: PIXI.Shader;\n        /**\n         * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         *\n         * @member {PIXI.State} PIXI.Graphics#state\n         */\n        state: PIXI.State;\n        /**\n         * Current fill style\n         *\n         * @member {PIXI.FillStyle} PIXI.Graphics#_fillStyle\n         * @protected\n         */\n        protected _fillStyle: PIXI.FillStyle;\n        /**\n         * Current line style\n         *\n         * @member {PIXI.LineStyle} PIXI.Graphics#_lineStyle\n         * @protected\n         */\n        protected _lineStyle: PIXI.LineStyle;\n        /**\n         * Current shape transform matrix.\n         *\n         * @member {PIXI.Matrix} PIXI.Graphics#_matrix\n         * @protected\n         */\n        protected _matrix: PIXI.Matrix;\n        /**\n         * Current hole mode is enabled.\n         *\n         * @member {boolean} PIXI.Graphics#_holeMode\n         * @default false\n         * @protected\n         */\n        protected _holeMode: boolean;\n        /**\n         * Current path\n         *\n         * @member {PIXI.Polygon} PIXI.Graphics#currentPath\n         * @protected\n         */\n        protected currentPath: PIXI.Polygon;\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         *\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * A collections of batches! These can be drawn by the renderer batch system.\n         *\n         * @protected\n         * @member {object[]} PIXI.Graphics#batches\n         */\n        protected batches: any[];\n        /**\n         * Update dirty for limiting calculating tints for batches.\n         *\n         * @protected\n         * @member {number} PIXI.Graphics#batchTint\n         * @default -1\n         */\n        protected batchTint: number;\n        /**\n         * Update dirty for limiting calculating batches.\n         *\n         * @protected\n         * @member {number} PIXI.Graphics#batchDirty\n         * @default -1\n         */\n        protected batchDirty: number;\n        /**\n         * Copy of the object vertex data.\n         *\n         * @protected\n         * @member {Float32Array} PIXI.Graphics#vertexData\n         */\n        protected vertexData: Float32Array;\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string} PIXI.Graphics#pluginName\n         * @default 'batch'\n         */\n        pluginName: string;\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n         *\n         * @member {PIXI.GraphicsGeometry}\n         * @readonly\n         */\n        readonly geometry: PIXI.GraphicsGeometry;\n        /**\n         * Creates a new Graphics object with the same values as this one.\n         * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)\n         *\n         * @return {PIXI.Graphics} A clone of the graphics object\n         */\n        clone(): PIXI.Graphics;\n        /**\n         * The blend mode to be applied to the graphic shape. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * The tint applied to the graphic shape. This is a hex value. A value of\n         * 0xFFFFFF will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * The current fill style.\n         *\n         * @member {PIXI.FillStyle}\n         * @readonly\n         */\n        readonly fill: PIXI.FillStyle;\n        /**\n         * The current line style.\n         *\n         * @member {PIXI.LineStyle}\n         * @readonly\n         */\n        readonly line: PIXI.LineStyle;\n        /**\n         * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n         * method or the drawCircle() method.\n         *\n         * @method PIXI.Graphics#lineStyle\n         * @param {number} [width=0] - width of the line to draw, will update the objects stored style\n         * @param {number} [color=0x0] - color of the line to draw, will update the objects stored style\n         * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n         * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n         * @param {boolean} [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        lineStyle(width?: number, color?: number, alpha?: number, alignment?: number, native?: boolean): PIXI.Graphics;\n        /**\n         * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n         * method or the drawCircle() method.\n         *\n         * @method PIXI.Graphics#lineStyle\n         * @param {number} [width=0] - width of the line to draw, will update the objects stored style\n         * @param {number} [color=0x0] - color of the line to draw, will update the objects stored style\n         * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n         * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n         * @param {boolean} [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        lineStyle(width?: number, color?: number, alpha?: number, alignment?: number, native?: boolean): PIXI.Graphics;\n        /**\n         * Like line style but support texture for line fill.\n         *\n         * @param {object} [options] - Collection of options for setting line style.\n         * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n         * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use\n         * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.\n         *  Default 0xFFFFFF if texture present.\n         * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n         * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture\n         * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n         * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n         * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n         * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n         * @param {number}[options.miterLimit=10] - miter limit ratio\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        lineTextureStyle(options?: {\n            width?: number;\n            texture?: PIXI.Texture;\n            color?: number;\n            alpha?: number;\n            matrix?: PIXI.Matrix;\n            alignment?: number;\n            native?: boolean;\n            cap?: PIXI.LINE_CAP;\n            join?: PIXI.LINE_JOIN;\n            miterLimit?: number;\n        }): PIXI.Graphics;\n        /**\n         * Start a polygon object internally\n         * @protected\n         */\n        protected startPoly(): void;\n        /**\n         * Finish the polygon object.\n         * @protected\n         */\n        protected finishPoly(): void;\n        /**\n         * Moves the current drawing position to x, y.\n         *\n         * @param {number} x - the X coordinate to move to\n         * @param {number} y - the Y coordinate to move to\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        moveTo(x: number, y: number): PIXI.Graphics;\n        /**\n         * Draws a line using the current line style from the current drawing position to (x, y);\n         * The current drawing position is then set to (x, y).\n         *\n         * @param {number} x - the X coordinate to draw to\n         * @param {number} y - the Y coordinate to draw to\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        lineTo(x: number, y: number): PIXI.Graphics;\n        /**\n         * Initialize the curve\n         *\n         * @protected\n         * @param {number} [x=0]\n         * @param {number} [y=0]\n         */\n        protected _initCurve(x?: number, y?: number): void;\n        /**\n         * Calculate the points for a quadratic bezier curve and then draws it.\n         * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n         *\n         * @param {number} cpX - Control point x\n         * @param {number} cpY - Control point y\n         * @param {number} toX - Destination point x\n         * @param {number} toY - Destination point y\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        quadraticCurveTo(cpX: number, cpY: number, toX: number, toY: number): PIXI.Graphics;\n        /**\n         * Calculate the points for a bezier curve and then draws it.\n         *\n         * @param {number} cpX - Control point x\n         * @param {number} cpY - Control point y\n         * @param {number} cpX2 - Second Control point x\n         * @param {number} cpY2 - Second Control point y\n         * @param {number} toX - Destination point x\n         * @param {number} toY - Destination point y\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        bezierCurveTo(cpX: number, cpY: number, cpX2: number, cpY2: number, toX: number, toY: number): PIXI.Graphics;\n        /**\n         * The arcTo() method creates an arc/curve between two tangents on the canvas.\n         *\n         * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n         *\n         * @param {number} x1 - The x-coordinate of the first tangent point of the arc\n         * @param {number} y1 - The y-coordinate of the first tangent point of the arc\n         * @param {number} x2 - The x-coordinate of the end of the arc\n         * @param {number} y2 - The y-coordinate of the end of the arc\n         * @param {number} radius - The radius of the arc\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): PIXI.Graphics;\n        /**\n         * The arc method creates an arc/curve (used to create circles, or parts of circles).\n         *\n         * @param {number} cx - The x-coordinate of the center of the circle\n         * @param {number} cy - The y-coordinate of the center of the circle\n         * @param {number} radius - The radius of the circle\n         * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n         *  of the arc's circle)\n         * @param {number} endAngle - The ending angle, in radians\n         * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n         *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n         *  indicates counter-clockwise.\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        arc(cx: number, cy: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): PIXI.Graphics;\n        /**\n         * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n         * (such as lineTo() or drawCircle()) use when drawing.\n         *\n         * @param {number} [color=0] - the color of the fill\n         * @param {number} [alpha=1] - the alpha of the fill\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        beginFill(color?: number, alpha?: number): PIXI.Graphics;\n        /**\n         * Begin the texture fill\n         *\n         * @param {object} [options] - Object object.\n         * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill\n         * @param {number} [options.color=0xffffff] - Background to fill behind texture\n         * @param {number} [options.alpha=1] - Alpha of fill\n         * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        beginTextureFill(options?: {\n            texture?: PIXI.Texture;\n            color?: number;\n            alpha?: number;\n            matrix?: PIXI.Matrix;\n        }): PIXI.Graphics;\n        /**\n         * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n         *\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        endFill(): PIXI.Graphics;\n        /**\n         * Draws a rectangle shape.\n         *\n         * @param {number} x - The X coord of the top-left of the rectangle\n         * @param {number} y - The Y coord of the top-left of the rectangle\n         * @param {number} width - The width of the rectangle\n         * @param {number} height - The height of the rectangle\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        drawRect(x: number, y: number, width: number, height: number): PIXI.Graphics;\n        /**\n         * Draw a rectangle shape with rounded/beveled corners.\n         *\n         * @param {number} x - The X coord of the top-left of the rectangle\n         * @param {number} y - The Y coord of the top-left of the rectangle\n         * @param {number} width - The width of the rectangle\n         * @param {number} height - The height of the rectangle\n         * @param {number} radius - Radius of the rectangle corners\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        drawRoundedRect(x: number, y: number, width: number, height: number, radius: number): PIXI.Graphics;\n        /**\n         * Draws a circle.\n         *\n         * @param {number} x - The X coordinate of the center of the circle\n         * @param {number} y - The Y coordinate of the center of the circle\n         * @param {number} radius - The radius of the circle\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        drawCircle(x: number, y: number, radius: number): PIXI.Graphics;\n        /**\n         * Draws an ellipse.\n         *\n         * @param {number} x - The X coordinate of the center of the ellipse\n         * @param {number} y - The Y coordinate of the center of the ellipse\n         * @param {number} width - The half width of the ellipse\n         * @param {number} height - The half height of the ellipse\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        drawEllipse(x: number, y: number, width: number, height: number): PIXI.Graphics;\n        /**\n         * Draws a polygon using the given path.\n         *\n         * @param {number[]|PIXI.Point[]|PIXI.Polygon} path - The path data used to construct the polygon.\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        drawPolygon(...path: (number[] | PIXI.Point[] | PIXI.Polygon)[]): PIXI.Graphics;\n        /**\n         * Draw any shape.\n         *\n         * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        drawShape(shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle): PIXI.Graphics;\n        /**\n         * Draw a star shape with an arbitrary number of points.\n         *\n         * @param {number} x - Center X position of the star\n         * @param {number} y - Center Y position of the star\n         * @param {number} points - The number of points of the star, must be > 1\n         * @param {number} radius - The outer radius of the star\n         * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n         * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        drawStar(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number): PIXI.Graphics;\n        /**\n         * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n         *\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        clear(): PIXI.Graphics;\n        /**\n         * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n         * masked with gl.scissor.\n         *\n         * @returns {boolean} True if only 1 rect.\n         */\n        isFastRect(): boolean;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Populating batches for rendering\n         *\n         * @protected\n         */\n        protected _populateBatches(): void;\n        /**\n         * Renders the batches using the BathedRenderer plugin\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected _renderBatched(renderer: PIXI.Renderer): void;\n        /**\n         * Renders the graphics direct\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected _renderDirect(renderer: PIXI.Renderer): void;\n        /**\n         * Renders specific DrawCall\n         *\n         * @param {PIXI.Renderer} renderer\n         * @param {PIXI.BatchDrawCall} drawCall\n         */\n        _renderDrawCallDirect(renderer: PIXI.Renderer, drawCall: PIXI.BatchDrawCall): void;\n        /**\n         * Resolves shader for direct rendering\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected _resolveDirectShader(renderer: PIXI.Renderer): void;\n        /**\n         * Retrieves the bounds of the graphic shape as a rectangle object\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Tests if a point is inside this graphics object\n         *\n         * @param {PIXI.IPointData} point - the point to test\n         * @return {boolean} the result of the test\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * Recalcuate the tint by applying tin to batches using Graphics tint.\n         * @protected\n         */\n        protected calculateTints(): void;\n        /**\n         * If there's a transform update or a change to the shape of the\n         * geometry, recaculate the vertices.\n         * @protected\n         */\n        protected calculateVertices(): void;\n        /**\n         * Closes the current path.\n         *\n         * @return {PIXI.Graphics} Returns itself.\n         */\n        closePath(): PIXI.Graphics;\n        /**\n         * Apply a matrix to the positional data.\n         *\n         * @param {PIXI.Matrix} matrix - Matrix to use for transform current shape.\n         * @return {PIXI.Graphics} Returns itself.\n         */\n        setMatrix(matrix: PIXI.Matrix): PIXI.Graphics;\n        /**\n         * Begin adding holes to the last draw shape\n         * IMPORTANT: holes must be fully inside a shape to work\n         * Also weirdness ensues if holes overlap!\n         * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n         * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n         * @return {PIXI.Graphics} Returns itself.\n         */\n        beginHole(): PIXI.Graphics;\n        /**\n         * End adding holes to the last draw shape\n         * @return {PIXI.Graphics} Returns itself.\n         */\n        endHole(): PIXI.Graphics;\n        /**\n         * Destroys the Graphics object.\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n         *  options have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have\n         *  their destroy method called as well. 'options' will be passed on to those calls.\n         * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n         *  Should it destroy the texture of the child sprite\n         * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n         *  Should it destroy the base texture of the child sprite\n         */\n        destroy(options?: {\n            children?: boolean;\n            texture?: boolean;\n            baseTexture?: boolean;\n        }): void;\n        /**\n         * Draw Rectangle with chamfer corners.\n         *\n         * _Note: Only available with **@pixi/graphics-extras**._\n         *\n         * @method PIXI.Graphics#drawChamferRect\n         * @param {number} x - Upper left corner of rect\n         * @param {number} y - Upper right corner of rect\n         * @param {number} width - Width of rect\n         * @param {number} height - Height of rect\n         * @param {number} chamfer - accept negative or positive values\n         * @return {PIXI.Graphics} Returns self.\n         */\n        drawChamferRect(x: number, y: number, width: number, height: number, chamfer: number): PIXI.Graphics;\n        /**\n         * Draw Rectangle with fillet corners.\n         *\n         * _Note: Only available with **@pixi/graphics-extras**._\n         *\n         * @method PIXI.Graphics#drawFilletRect\n         * @param {number} x - Upper left corner of rect\n         * @param {number} y - Upper right corner of rect\n         * @param {number} width - Width of rect\n         * @param {number} height - Height of rect\n         * @param {number} fillet - non-zero real number, size of corner cutout\n         * @return {PIXI.Graphics} Returns self.\n         */\n        drawFilletRect(x: number, y: number, width: number, height: number, fillet: number): PIXI.Graphics;\n        /**\n         * Draw a regular polygon where all sides are the same length.\n         *\n         * _Note: Only available with **@pixi/graphics-extras**._\n         *\n         * @method PIXI.Graphics#drawRegularPolygon\n         * @param {number} x - X position\n         * @param {number} y - Y position\n         * @param {number} radius - Polygon radius\n         * @param {number} sides - Minimum value is 3\n         * @param {number} rotation - Starting rotation values in radians..\n         * @return {PIXI.Graphics}\n         */\n        drawRegularPolygon(x: number, y: number, radius: number, sides: number, rotation: number): PIXI.Graphics;\n        /**\n         * Draw a torus shape, like a donut. Can be used for something like a circle loader.\n         *\n         * _Note: Only available with **@pixi/graphics-extras**._\n         *\n         * @method PIXI.Graphics#drawTorus\n         * @param {number} x - X position\n         * @param {number} y - Y position\n         * @param {number} innerRadius - Inner circle radius\n         * @param {number} outerRadius - Outer circle radius\n         * @param {number} sweep - How much of the circle to fill, in radius\n         * @return {PIXI.Graphics}\n         */\n        drawTorus(x: number, y: number, innerRadius: number, outerRadius: number, sweep: number): PIXI.Graphics;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Retrieves the local bounds of the displayObject as a rectangle object.\n         *\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,\n         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * The width of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.DisplayObject#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * A class to contain data useful for Graphics objects\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class GraphicsData {\n        constructor(shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle, fillStyle?: PIXI.FillStyle, lineStyle?: PIXI.LineStyle, matrix?: PIXI.Matrix);\n        /**\n         * The shape object to draw.\n         * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} PIXI.GraphicsData#shape\n         */\n        shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle;\n        /**\n         * The style of the line.\n         * @member {PIXI.LineStyle} PIXI.GraphicsData#lineStyle\n         */\n        lineStyle: PIXI.LineStyle;\n        /**\n         * The style of the fill.\n         * @member {PIXI.FillStyle} PIXI.GraphicsData#fillStyle\n         */\n        fillStyle: PIXI.FillStyle;\n        /**\n         * The transform matrix.\n         * @member {PIXI.Matrix} PIXI.GraphicsData#matrix\n         */\n        matrix: PIXI.Matrix;\n        /**\n         * The type of the shape, see the Const.Shapes file for all the existing types,\n         * @member {number} PIXI.GraphicsData#type\n         */\n        type: number;\n        /**\n         * The collection of points.\n         * @member {number[]} PIXI.GraphicsData#points\n         */\n        points: number[];\n        /**\n         * The collection of holes.\n         * @member {PIXI.GraphicsData[]} PIXI.GraphicsData#holes\n         */\n        holes: PIXI.GraphicsData[];\n        /**\n         * Creates a new GraphicsData object with the same values as this one.\n         *\n         * @return {PIXI.GraphicsData} Cloned GraphicsData object\n         */\n        clone(): PIXI.GraphicsData;\n        /**\n         * Destroys the Graphics data.\n         *\n         */\n        destroy(): void;\n    }\n    /**\n     * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n     * rectangles to the display, and to color and fill them.\n     *\n     * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive\n     * to re-tesselate using **earcut**. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.\n     *\n     * @class\n     * @extends PIXI.BatchGeometry\n     * @memberof PIXI\n     */\n    class GraphicsGeometry extends PIXI.BatchGeometry {\n        constructor();\n        /**\n         * An array of points to draw, 2 numbers per point\n         *\n         * @member {number[]} PIXI.GraphicsGeometry#points\n         * @protected\n         */\n        protected points: number[];\n        /**\n         * The collection of colors\n         *\n         * @member {number[]} PIXI.GraphicsGeometry#colors\n         * @protected\n         */\n        protected colors: number[];\n        /**\n         * The UVs collection\n         *\n         * @member {number[]} PIXI.GraphicsGeometry#uvs\n         * @protected\n         */\n        protected uvs: number[];\n        /**\n         * The indices of the vertices\n         *\n         * @member {number[]} PIXI.GraphicsGeometry#indices\n         * @protected\n         */\n        protected indices: number[];\n        /**\n         * Reference to the texture IDs.\n         *\n         * @member {number[]} PIXI.GraphicsGeometry#textureIds\n         * @protected\n         */\n        protected textureIds: number[];\n        /**\n         * The collection of drawn shapes.\n         *\n         * @member {PIXI.GraphicsData[]} PIXI.GraphicsGeometry#graphicsData\n         * @protected\n         */\n        protected graphicsData: PIXI.GraphicsData[];\n        /**\n         * Used to detect if the graphics object has changed.\n         *\n         * @member {number} PIXI.GraphicsGeometry#dirty\n         * @protected\n         */\n        protected dirty: number;\n        /**\n         * Batches need to regenerated if the geometry is updated.\n         *\n         * @member {number} PIXI.GraphicsGeometry#batchDirty\n         * @protected\n         */\n        protected batchDirty: number;\n        /**\n         * Used to check if the cache is dirty.\n         *\n         * @member {number} PIXI.GraphicsGeometry#cacheDirty\n         * @protected\n         */\n        protected cacheDirty: number;\n        /**\n         * Used to detect if we cleared the graphicsData.\n         *\n         * @member {number} PIXI.GraphicsGeometry#clearDirty\n         * @default 0\n         * @protected\n         */\n        protected clearDirty: number;\n        /**\n         * List of current draw calls drived from the batches.\n         *\n         * @member {object[]} PIXI.GraphicsGeometry#drawCalls\n         * @protected\n         */\n        protected drawCalls: any[];\n        /**\n         * Intermediate abstract format sent to batch system.\n         * Can be converted to drawCalls or to batchable objects.\n         *\n         * @member {PIXI.graphicsUtils.BatchPart[]} PIXI.GraphicsGeometry#batches\n         * @protected\n         */\n        protected batches: PIXI.graphicsUtils.BatchPart[];\n        /**\n         * Index of the last batched shape in the stack of calls.\n         *\n         * @member {number} PIXI.GraphicsGeometry#shapeIndex\n         * @protected\n         */\n        protected shapeIndex: number;\n        /**\n         * Cached bounds.\n         *\n         * @member {PIXI.Bounds} PIXI.GraphicsGeometry#_bounds\n         * @protected\n         */\n        protected _bounds: PIXI.Bounds;\n        /**\n         * The bounds dirty flag.\n         *\n         * @member {number} PIXI.GraphicsGeometry#boundsDirty\n         * @protected\n         */\n        protected boundsDirty: number;\n        /**\n         * Padding to add to the bounds.\n         *\n         * @member {number} PIXI.GraphicsGeometry#boundsPadding\n         * @default 0\n         */\n        boundsPadding: number;\n        /**\n         * Minimal distance between points that are considered different.\n         * Affects line tesselation.\n         *\n         * @member {number} PIXI.GraphicsGeometry#closePointEps\n         */\n        closePointEps: number;\n        /**\n         * Get the current bounds of the graphic geometry.\n         *\n         * @member {PIXI.Bounds}\n         * @readonly\n         */\n        readonly bounds: PIXI.Bounds;\n        /**\n         * Call if you changed graphicsData manually.\n         * Empties all batch buffers.\n         */\n        invalidate(): void;\n        /**\n         * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n         *\n         * @return {PIXI.GraphicsGeometry} This GraphicsGeometry object. Good for chaining method calls\n         */\n        clear(): PIXI.GraphicsGeometry;\n        /**\n         * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n         *\n         * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n         * @param {PIXI.FillStyle} fillStyle - Defines style of the fill.\n         * @param {PIXI.LineStyle} lineStyle - Defines style of the lines.\n         * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n         * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n         */\n        drawShape(shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle, fillStyle: PIXI.FillStyle, lineStyle: PIXI.LineStyle, matrix: PIXI.Matrix): PIXI.GraphicsGeometry;\n        /**\n         * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n         *\n         * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n         * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n         * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n         */\n        drawHole(shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle, matrix: PIXI.Matrix): PIXI.GraphicsGeometry;\n        /**\n         * Destroys the GraphicsGeometry object.\n         *\n         */\n        destroy(): void;\n        /**\n         * Check to see if a point is contained within this geometry.\n         *\n         * @param {PIXI.IPointData} point - Point to check if it's contained.\n         * @return {Boolean} `true` if the point is contained within geometry.\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * Generates intermediate batch data. Either gets converted to drawCalls\n         * or used to convert to batch objects directly by the Graphics object.\n         *\n         * @param {boolean} [aloow32Indices] - Allow using 32-bit indices for preventings artefacts when more that 65535 vertices\n         */\n        updateBatches(aloow32Indices?: boolean): void;\n        /**\n         * Affinity check\n         *\n         * @param {PIXI.FillStyle | PIXI.LineStyle} styleA\n         * @param {PIXI.FillStyle | PIXI.LineStyle} styleB\n         */\n        _compareStyles(styleA: PIXI.FillStyle | PIXI.LineStyle, styleB: PIXI.FillStyle | PIXI.LineStyle): void;\n        /**\n         * Test geometry for batching process.\n         *\n         * @protected\n         */\n        protected validateBatching(): void;\n        /**\n         * Offset the indices so that it works with the batcher.\n         *\n         * @protected\n         */\n        protected packBatches(): void;\n        /**\n         * Checks to see if this graphics geometry can be batched.\n         * Currently it needs to be small enough and not contain any native lines.\n         *\n         * @protected\n         */\n        protected isBatchable(): void;\n        /**\n         * Converts intermediate batches data to drawCalls.\n         *\n         * @protected\n         */\n        protected buildDrawCalls(): void;\n        /**\n         * Packs attributes to single buffer.\n         *\n         * @protected\n         */\n        protected packAttributes(): void;\n        /**\n         * Process fill part of Graphics.\n         *\n         * @param {PIXI.GraphicsData} data\n         * @protected\n         */\n        protected processFill(data: PIXI.GraphicsData): void;\n        /**\n         * Process line part of Graphics.\n         *\n         * @param {PIXI.GraphicsData} data\n         * @protected\n         */\n        protected processLine(data: PIXI.GraphicsData): void;\n        /**\n         * Process the holes data.\n         *\n         * @param {PIXI.GraphicsData[]} holes - Holes to render\n         * @protected\n         */\n        protected processHoles(holes: PIXI.GraphicsData[]): void;\n        /**\n         * Update the local bounds of the object. Expensive to use performance-wise.\n         *\n         * @protected\n         */\n        protected calculateBounds(): void;\n        /**\n         * Transform points using matrix.\n         *\n         * @protected\n         * @param {number[]} points - Points to transform\n         * @param {PIXI.Matrix} matrix - Transform matrix\n         */\n        protected transformPoints(points: number[], matrix: PIXI.Matrix): void;\n        /**\n         * Add colors.\n         *\n         * @protected\n         * @param {number[]} colors - List of colors to add to\n         * @param {number} color - Color to add\n         * @param {number} alpha - Alpha to use\n         * @param {number} size - Number of colors to add\n         */\n        protected addColors(colors: number[], color: number, alpha: number, size: number): void;\n        /**\n         * Add texture id that the shader/fragment wants to use.\n         *\n         * @protected\n         * @param {number[]} textureIds\n         * @param {number} id\n         * @param {number} size\n         */\n        protected addTextureIds(textureIds: number[], id: number, size: number): void;\n        /**\n         * Generates the UVs for a shape.\n         *\n         * @protected\n         * @param {number[]} verts - Vertices\n         * @param {number[]} uvs - UVs\n         * @param {PIXI.Texture} texture - Reference to Texture\n         * @param {number} start - Index buffer start index.\n         * @param {number} size - The size/length for index buffer.\n         * @param {PIXI.Matrix} [matrix] - Optional transform for all points.\n         */\n        protected addUvs(verts: number[], uvs: number[], texture: PIXI.Texture, start: number, size: number, matrix?: PIXI.Matrix): void;\n        /**\n         * Modify uvs array according to position of texture region\n         * Does not work with rotated or trimmed textures\n         *\n         * @param {number[]} uvs - array\n         * @param {PIXI.Texture} texture - region\n         * @param {number} start - starting index for uvs\n         * @param {number} size - how many points to adjust\n         */\n        adjustUvs(uvs: number[], texture: PIXI.Texture, start: number, size: number): void;\n        /**\n         * The maximum number of points to consider an object \"batchable\",\n         * able to be batched by the renderer's batch system.\n         *\n         * @memberof PIXI.GraphicsGeometry\n         * @static\n         * @member {number} BATCHABLE_SIZE\n         * @default 100\n         */\n        static BATCHABLE_SIZE: number;\n        /**\n         * Buffer used for position, color, texture IDs\n         *\n         * @member {PIXI.Buffer} PIXI.BatchGeometry#_buffer\n         * @protected\n         */\n        protected _buffer: PIXI.Buffer;\n        /**\n         * Index buffer data\n         *\n         * @member {PIXI.Buffer} PIXI.BatchGeometry#_indexBuffer\n         * @protected\n         */\n        protected _indexBuffer: PIXI.Buffer;\n    }\n    /**\n     * Supported line joints in `PIXI.LineStyle` for graphics.\n     *\n     * @see PIXI.Graphics#lineStyle\n     * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator\n     *\n     * @name LINE_JOIN\n     * @memberof PIXI\n     * @static\n     * @enum {string}\n     * @property {string} MITER - 'miter': make a sharp corner where outer part of lines meet\n     * @property {string} BEVEL - 'bevel': add a square butt at each end of line segment and fill the triangle at turn\n     * @property {string} ROUND - 'round': add an arc at the joint\n     */\n    enum LINE_JOIN {\n        MITER,\n        BEVEL,\n        ROUND\n    }\n    /**\n     * Support line caps in `PIXI.LineStyle` for graphics.\n     *\n     * @see PIXI.Graphics#lineStyle\n     *\n     * @name LINE_CAP\n     * @memberof PIXI\n     * @static\n     * @enum {string}\n     * @property {string} BUTT - 'butt': don't add any cap at line ends (leaves orthogonal edges)\n     * @property {string} ROUND - 'round': add semicircle at ends\n     * @property {string} SQUARE - 'square': add square at end (like `BUTT` except more length at end)\n     */\n    enum LINE_CAP {\n        BUTT,\n        ROUND,\n        SQUARE\n    }\n    /**\n     * Graphics curves resolution settings. If `adaptive` flag is set to `true`,\n     * the resolution is calculated based on the curve's length to ensure better visual quality.\n     * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.\n     *\n     * @static\n     * @constant\n     * @memberof PIXI\n     * @name GRAPHICS_CURVES\n     * @type {object}\n     * @property {boolean} adaptive=false - flag indicating if the resolution should be adaptive\n     * @property {number} maxLength=10 - maximal length of a single segment of the curve (if adaptive = false, ignored)\n     * @property {number} minSegments=8 - minimal number of segments in the curve (if adaptive = false, ignored)\n     * @property {number} maxSegments=2048 - maximal number of segments in the curve (if adaptive = false, ignored)\n     */\n    var GRAPHICS_CURVES: {\n        adaptive: boolean;\n        maxLength: number;\n        minSegments: number;\n        maxSegments: number;\n    };\n    /**\n     * Fill style object for Graphics.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class FillStyle {\n        constructor();\n        /**\n         * The hex color value used when coloring the Graphics object.\n         *\n         * @member {number} PIXI.FillStyle#color\n         * @default 0xFFFFFF\n         */\n        color: number;\n        /**\n         * The alpha value used when filling the Graphics object.\n         *\n         * @member {number} PIXI.FillStyle#alpha\n         * @default 1\n         */\n        alpha: number;\n        /**\n         * The texture to be used for the fill.\n         *\n         * @member {PIXI.Texture} PIXI.FillStyle#texture\n         * @default 0\n         */\n        texture: PIXI.Texture;\n        /**\n         * The transform aplpied to the texture.\n         *\n         * @member {PIXI.Matrix} PIXI.FillStyle#matrix\n         * @default null\n         */\n        matrix: PIXI.Matrix;\n        /**\n         * If the current fill is visible.\n         *\n         * @member {boolean} PIXI.FillStyle#visible\n         * @default false\n         */\n        visible: boolean;\n        /**\n         * Clones the object\n         *\n         * @return {PIXI.FillStyle}\n         */\n        clone(): PIXI.FillStyle;\n        /**\n         * Reset\n         */\n        reset(): void;\n        /**\n         * Destroy and don't use after this\n         */\n        destroy(): void;\n    }\n    /**\n     * Represents the line style for Graphics.\n     * @memberof PIXI\n     * @class\n     * @extends PIXI.FillStyle\n     */\n    class LineStyle extends PIXI.FillStyle {\n        constructor();\n        /**\n         * The width (thickness) of any lines drawn.\n         *\n         * @member {number} PIXI.LineStyle#width\n         * @default 0\n         */\n        width: number;\n        /**\n         * The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner).\n         *\n         * @member {number} PIXI.LineStyle#alignment\n         * @default 0.5\n         */\n        alignment: number;\n        /**\n         * If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n         *\n         * @member {boolean} PIXI.LineStyle#native\n         * @default false\n         */\n        native: boolean;\n        /**\n         * Line cap style.\n         *\n         * @member {PIXI.LINE_CAP} PIXI.LineStyle#cap\n         * @default PIXI.LINE_CAP.BUTT\n         */\n        cap: PIXI.LINE_CAP;\n        /**\n         * Line join style.\n         *\n         * @member {PIXI.LINE_JOIN} PIXI.LineStyle#join\n         * @default PIXI.LINE_JOIN.MITER\n         */\n        join: PIXI.LINE_JOIN;\n        /**\n         * Miter limit.\n         *\n         * @member {number} PIXI.LineStyle#miterLimit\n         * @default 10\n         */\n        miterLimit: number;\n        /**\n         * Clones the object\n         *\n         * @return {PIXI.LineStyle}\n         */\n        clone(): PIXI.LineStyle;\n        /**\n         * Reset the line style to default.\n         */\n        reset(): void;\n        /**\n         * The hex color value used when coloring the Graphics object.\n         *\n         * @member {number} PIXI.FillStyle#color\n         * @default 0xFFFFFF\n         */\n        color: number;\n        /**\n         * The alpha value used when filling the Graphics object.\n         *\n         * @member {number} PIXI.FillStyle#alpha\n         * @default 1\n         */\n        alpha: number;\n        /**\n         * The texture to be used for the fill.\n         *\n         * @member {PIXI.Texture} PIXI.FillStyle#texture\n         * @default 0\n         */\n        texture: PIXI.Texture;\n        /**\n         * The transform aplpied to the texture.\n         *\n         * @member {PIXI.Matrix} PIXI.FillStyle#matrix\n         * @default null\n         */\n        matrix: PIXI.Matrix;\n        /**\n         * If the current fill is visible.\n         *\n         * @member {boolean} PIXI.FillStyle#visible\n         * @default false\n         */\n        visible: boolean;\n        /**\n         * Destroy and don't use after this\n         */\n        destroy(): void;\n    }\n    /**\n     * Generalized convenience utilities for Graphics.\n     *\n     * @namespace graphicsUtils\n     * @memberof PIXI\n     */\n    namespace graphicsUtils {\n        /**\n         * A structure to hold interim batch objects for Graphics.\n         * @class\n         * @memberof PIXI.graphicsUtils\n         */\n        class BatchPart {\n            constructor();\n            /**\n             * Begin batch part\n             *\n             * @param {PIXI.FillStyle | PIXI.LineStyle} style\n             * @param {number} startIndex\n             * @param {number} attribStart\n             */\n            begin(style: PIXI.FillStyle | PIXI.LineStyle, startIndex: number, attribStart: number): void;\n            /**\n             * End batch part\n             *\n             * @param {number} endIndex\n             * @param {number} endAttrib\n             */\n            end(endIndex: number, endAttrib: number): void;\n        }\n        /**\n         * Draw a star shape with an arbitrary number of points.\n         *\n         * @class\n         * @extends PIXI.Polygon\n         * @memberof PIXI.graphicsUtils\n         * @param {number} x - Center X position of the star\n         * @param {number} y - Center Y position of the star\n         * @param {number} points - The number of points of the star, must be > 1\n         * @param {number} radius - The outer radius of the star\n         * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n         * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n         * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n         */\n        class Star extends PIXI.Polygon {\n            constructor(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number);\n            /**\n             * An array of the points of this polygon\n             *\n             * @member {number[]} PIXI.Polygon#points\n             */\n            points: number[];\n            /**\n             * The type of the object, mainly used to avoid `instanceof` checks\n             *\n             * @member {number} PIXI.Polygon#type\n             * @readOnly\n             * @default PIXI.SHAPES.POLY\n             * @see PIXI.SHAPES\n             */\n            readonly type: number;\n            /**\n             * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.\n             * @member {boolean} PIXI.Polygon#closeStroke\n             * @default true\n             */\n            closeStroke: boolean;\n            /**\n             * Creates a clone of this polygon\n             *\n             * @return {PIXI.Polygon} a copy of the polygon\n             */\n            clone(): PIXI.Polygon;\n            /**\n             * Checks whether the x and y coordinates passed to this function are contained within this polygon\n             *\n             * @param {number} x - The X coordinate of the point to test\n             * @param {number} y - The Y coordinate of the point to test\n             * @return {boolean} Whether the x/y coordinates are within this polygon\n             */\n            contains(x: number, y: number): boolean;\n        }\n        /**\n         * Map of fill commands for each shape type.\n         *\n         * @memberof PIXI.graphicsUtils\n         * @member {Object} FILL_COMMANDS\n         */\n        var FILL_COMMANDS: any;\n        /**\n         * Batch pool, stores unused batches for preventing allocations.\n         *\n         * @memberof PIXI.graphicsUtils\n         * @member {Array<PIXI.graphicsUtils.BatchPart>} BATCH_POOL\n         */\n        var BATCH_POOL: PIXI.graphicsUtils.BatchPart[];\n        /**\n         * Draw call pool, stores unused draw calls for preventing allocations.\n         *\n         * @memberof PIXI.graphicsUtils\n         * @member {Array<PIXI.BatchDrawCall>} DRAW_CALL_POOL\n         */\n        var DRAW_CALL_POOL: PIXI.BatchDrawCall[];\n    }\n    /**\n     * Holds all information related to an Interaction event\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class InteractionData {\n        constructor();\n        /**\n         * This point stores the global coords of where the touch/mouse event happened\n         *\n         * @member {PIXI.Point} PIXI.InteractionData#global\n         */\n        global: PIXI.Point;\n        /**\n         * The target Sprite that was interacted with\n         *\n         * @member {PIXI.Sprite} PIXI.InteractionData#target\n         */\n        target: PIXI.Sprite;\n        /**\n         * When passed to an event handler, this will be the original DOM Event that was captured\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent\n         * @member {MouseEvent|TouchEvent|PointerEvent} PIXI.InteractionData#originalEvent\n         */\n        originalEvent: MouseEvent | TouchEvent | PointerEvent;\n        /**\n         * Unique identifier for this interaction\n         *\n         * @member {number} PIXI.InteractionData#identifier\n         */\n        identifier: number;\n        /**\n         * Indicates whether or not the pointer device that created the event is the primary pointer.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n         * @type {Boolean}\n         */\n        isPrimary: boolean;\n        /**\n         * Indicates which button was pressed on the mouse or pointer device to trigger the event.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n         * @type {number}\n         */\n        button: number;\n        /**\n         * Indicates which buttons are pressed on the mouse or pointer device when the event is triggered.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n         * @type {number}\n         */\n        buttons: number;\n        /**\n         * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n         * radiusX of TouchEvents will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n         * @type {number}\n         */\n        width: number;\n        /**\n         * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n         * radiusY of TouchEvents will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n         * @type {number}\n         */\n        height: number;\n        /**\n         * The angle, in degrees, between the pointer device and the screen.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n         * @type {number}\n         */\n        tiltX: number;\n        /**\n         * The angle, in degrees, between the pointer device and the screen.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n         * @type {number}\n         */\n        tiltY: number;\n        /**\n         * The type of pointer that triggered the event.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n         * @type {string}\n         */\n        pointerType: string;\n        /**\n         * Pressure applied by the pointing device during the event. A Touch's force property\n         * will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n         * @type {number}\n         */\n        pressure: number;\n        /**\n         * From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle\n         * @type {number}\n         */\n        rotationAngle: number;\n        /**\n         * Twist of a stylus pointer.\n         * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n         * @type {number}\n         */\n        twist: number;\n        /**\n         * Barrel pressure on a stylus pointer.\n         * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n         * @type {number}\n         */\n        tangentialPressure: number;\n        /**\n         * The unique identifier of the pointer. It will be the same as `identifier`.\n         * @readonly\n         * @member {number}\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId\n         */\n        readonly pointerId: number;\n        /**\n         * This will return the local coordinates of the specified displayObject for this InteractionData\n         *\n         * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local\n         *  coords off\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional (otherwise\n         *  will create a new point)\n         * @param {PIXI.Point} [globalPos] - A Point object containing your custom global coords, optional\n         *  (otherwise will use the current global coords)\n         * @return {PIXI.Point} A point containing the coordinates of the InteractionData position relative\n         *  to the DisplayObject\n         */\n        getLocalPosition(displayObject: PIXI.DisplayObject, point?: PIXI.Point, globalPos?: PIXI.Point): PIXI.Point;\n        /**\n         * Copies properties from normalized event data.\n         *\n         * @param {Touch|MouseEvent|PointerEvent} event - The normalized event data\n         */\n        copyEvent(event: Touch | MouseEvent | PointerEvent): void;\n        /**\n         * Resets the data for pooling.\n         */\n        reset(): void;\n    }\n    /**\n     * Event class that mimics native DOM events.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class InteractionEvent {\n        constructor();\n        /**\n         * Whether this event will continue propagating in the tree.\n         *\n         * Remaining events for the {@link stopsPropagatingAt} object\n         * will still be dispatched.\n         *\n         * @member {boolean} PIXI.InteractionEvent#stopped\n         */\n        stopped: boolean;\n        /**\n         * The object which caused this event to be dispatched.\n         * For listener callback see {@link PIXI.InteractionEvent.currentTarget}.\n         *\n         * @member {PIXI.DisplayObject} PIXI.InteractionEvent#target\n         */\n        target: PIXI.DisplayObject;\n        /**\n         * The object whose event listener’s callback is currently being invoked.\n         *\n         * @member {PIXI.DisplayObject} PIXI.InteractionEvent#currentTarget\n         */\n        currentTarget: PIXI.DisplayObject;\n        /**\n         * Type of the event\n         *\n         * @member {string} PIXI.InteractionEvent#type\n         */\n        type: string;\n        /**\n         * InteractionData related to this event\n         *\n         * @member {PIXI.InteractionData} PIXI.InteractionEvent#data\n         */\n        data: PIXI.InteractionData;\n        /**\n         * Prevents event from reaching any objects other than the current object.\n         *\n         */\n        stopPropagation(): void;\n        /**\n         * Resets the event.\n         */\n        reset(): void;\n    }\n    /**\n     * The interaction manager deals with mouse, touch and pointer events.\n     *\n     * Any DisplayObject can be interactive if its `interactive` property is set to true.\n     *\n     * This manager also supports multitouch.\n     *\n     * An instance of this class is automatically created by default, and can be found at `renderer.plugins.interaction`\n     *\n     * @class\n     * @extends PIXI.utils.EventEmitter\n     * @memberof PIXI\n     */\n    class InteractionManager extends PIXI.utils.EventEmitter {\n        constructor(renderer: PIXI.Renderer, options?: {\n            autoPreventDefault?: boolean;\n            interactionFrequency?: number;\n            useSystemTicker?: number;\n        });\n        /**\n         * The renderer this interaction manager works for.\n         *\n         * @member {PIXI.AbstractRenderer} PIXI.InteractionManager#renderer\n         */\n        renderer: PIXI.AbstractRenderer;\n        /**\n         * Should default browser actions automatically be prevented.\n         * Does not apply to pointer events for backwards compatibility\n         * preventDefault on pointer events stops mouse events from firing\n         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n         *\n         * @member {boolean} PIXI.InteractionManager#autoPreventDefault\n         * @default true\n         */\n        autoPreventDefault: boolean;\n        /**\n         * Maximum requency in milliseconds at which pointer over/out states will be checked by {@link tickerUpdate}.\n         *\n         * @member {number} PIXI.InteractionManager#interactionFrequency\n         * @default 10\n         */\n        interactionFrequency: number;\n        /**\n         * The mouse data\n         *\n         * @member {PIXI.InteractionData} PIXI.InteractionManager#mouse\n         */\n        mouse: PIXI.InteractionData;\n        /**\n         * An event data object to handle all the event tracking/dispatching\n         *\n         * @member {object} PIXI.InteractionManager#eventData\n         */\n        eventData: any;\n        /**\n         * The DOM element to bind to.\n         *\n         * @protected\n         * @member {HTMLElement} PIXI.InteractionManager#interactionDOMElement\n         */\n        protected interactionDOMElement: HTMLElement;\n        /**\n         * This property determines if mousemove and touchmove events are fired only when the cursor\n         * is over the object.\n         * Setting to true will make things work more in line with how the DOM version works.\n         * Setting to false can make things easier for things like dragging\n         * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n         * future versions of pixi.\n         *\n         * @member {boolean} PIXI.InteractionManager#moveWhenInside\n         * @default false\n         */\n        moveWhenInside: boolean;\n        /**\n         * Have events been attached to the dom element?\n         *\n         * @protected\n         * @member {boolean} PIXI.InteractionManager#eventsAdded\n         */\n        protected eventsAdded: boolean;\n        /**\n         * Has the system ticker been added?\n         *\n         * @protected\n         * @member {boolean} PIXI.InteractionManager#tickerAdded\n         */\n        protected tickerAdded: boolean;\n        /**\n         * Is the mouse hovering over the renderer?\n         *\n         * @protected\n         * @member {boolean} PIXI.InteractionManager#mouseOverRenderer\n         */\n        protected mouseOverRenderer: boolean;\n        /**\n         * Does the device support touch events\n         * https://www.w3.org/TR/touch-events/\n         *\n         * @readonly\n         * @member {boolean} PIXI.InteractionManager#supportsTouchEvents\n         */\n        readonly supportsTouchEvents: boolean;\n        /**\n         * Does the device support pointer events\n         * https://www.w3.org/Submission/pointer-events/\n         *\n         * @readonly\n         * @member {boolean} PIXI.InteractionManager#supportsPointerEvents\n         */\n        readonly supportsPointerEvents: boolean;\n        /**\n         * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n         * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n         * and functions are called instead of changing the CSS.\n         * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n         * @member {Object.<string, Object>} PIXI.InteractionManager#cursorStyles\n         */\n        cursorStyles: {\n            [key: string]: any;\n        };\n        /**\n         * The mode of the cursor that is being used.\n         * The value of this is a key from the cursorStyles dictionary.\n         *\n         * @member {string} PIXI.InteractionManager#currentCursorMode\n         */\n        currentCursorMode: string;\n        /**\n         * The current resolution / device pixel ratio.\n         *\n         * @member {number} PIXI.InteractionManager#resolution\n         * @default 1\n         */\n        resolution: number;\n        /**\n         * Should the InteractionManager automatically add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        useSystemTicker: boolean;\n        /**\n         * Last rendered object or temp object\n         * @readonly\n         * @protected\n         * @member {PIXI.DisplayObject}\n         */\n        protected readonly lastObjectRendered: PIXI.DisplayObject;\n        /**\n         * Hit tests a point against the display tree, returning the first interactive object that is hit.\n         *\n         * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.\n         * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults\n         * to the last rendered root of the associated renderer.\n         * @return {PIXI.DisplayObject} The hit display object, if any.\n         */\n        hitTest(globalPoint: PIXI.Point, root?: PIXI.Container): PIXI.DisplayObject;\n        /**\n         * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n         * other DOM elements on top of the renderers Canvas element. With this you'll be bale to delegate\n         * another DOM element to receive those events.\n         *\n         * @param {HTMLElement} element - the DOM element which will receive mouse and touch events.\n         * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n         */\n        setTargetElement(element: HTMLElement, resolution?: number): void;\n        /**\n         * Updates the state of interactive objects if at least {@link interactionFrequency}\n         * milliseconds have passed since the last invocation.\n         *\n         * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n         *\n         * @param {number} deltaTime - time delta since the last call\n         */\n        tickerUpdate(deltaTime: number): void;\n        /**\n         * Updates the state of interactive objects.\n         */\n        update(): void;\n        /**\n         * Sets the current cursor mode, handling any callbacks or CSS style changes.\n         *\n         * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n         */\n        setCursorMode(mode: string): void;\n        /**\n         * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n         * resulting value is stored in the point. This takes into account the fact that the DOM\n         * element could be scaled and positioned anywhere on the screen.\n         *\n         * @param  {PIXI.IPointData} point - the point that the result will be stored in\n         * @param  {number} x - the x coord of the position to map\n         * @param  {number} y - the y coord of the position to map\n         */\n        mapPositionToPoint(point: PIXI.IPointData, x: number, y: number): void;\n        /**\n         * This function is provides a neat way of crawling through the scene graph and running a\n         * specified function on all interactive objects it finds. It will also take care of hit\n         * testing the interactive objects and passes the hit across in the function.\n         *\n         * @protected\n         * @param {PIXI.InteractionEvent} interactionEvent - event containing the point that\n         *  is tested for collision\n         * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n         *  that will be hit test (recursively crawls its children)\n         * @param {Function} [func] - the function that will be called on each interactive object. The\n         *  interactionEvent, displayObject and hit will be passed to the function\n         * @param {boolean} [hitTest] - indicates whether we want to calculate hits\n         *  or just iterate through all interactive objects\n         */\n        protected processInteractive(interactionEvent: PIXI.InteractionEvent, displayObject: PIXI.Container | PIXI.Sprite | PIXI.TilingSprite, func?: (...params: any[]) => any, hitTest?: boolean): void;\n        /**\n         * Destroys the interaction manager\n         *\n         */\n        destroy(): void;\n    }\n    /**\n     * Interface for classes that represent a hit area.\n     *\n     * It is implemented by the following classes:\n     * - {@link PIXI.Circle}\n     * - {@link PIXI.Ellipse}\n     * - {@link PIXI.Polygon}\n     * - {@link PIXI.RoundedRectangle}\n     *\n     * @interface IHitArea\n     * @memberof PIXI\n     */\n    interface IHitArea {\n        /**\n         * Checks whether the x and y coordinates given are contained within this area\n         *\n         * @method\n         * @name contains\n         * @memberof PIXI.IHitArea#\n         * @param {number} x - The X coordinate of the point to test\n         * @param {number} y - The Y coordinate of the point to test\n         * @return {boolean} Whether the x/y coordinates are within this area\n         */\n        contains(x: number, y: number): boolean;\n    }\n    /**\n     * Application plugin for supporting loader option. Installing the LoaderPlugin\n     * is not necessary if using **pixi.js** or **pixi.js-legacy**.\n     * @example\n     * import {AppLoaderPlugin} from '@pixi/loaders';\n     * import {Application} from '@pixi/app';\n     * Application.registerPlugin(AppLoaderPlugin);\n     * @class\n     * @memberof PIXI\n     */\n    class AppLoaderPlugin {\n    }\n    /**\n     * Plugin to be installed for handling specific Loader resources.\n     *\n     * @memberof PIXI\n     * @typedef {object} ILoaderPlugin\n     * @property {function} [add] - Function to call immediate after registering plugin.\n     * @property {PIXI.Loader.loaderMiddleware} [pre] - Middleware function to run before load, the\n     *           arguments for this are `(resource, next)`\n     * @property {PIXI.Loader.loaderMiddleware} [use] - Middleware function to run after load, the\n     *           arguments for this are `(resource, next)`\n     */\n    type ILoaderPlugin = {\n        add?: (...params: any[]) => any;\n        pre?: PIXI.Loader.loaderMiddleware;\n        use?: PIXI.Loader.loaderMiddleware;\n    };\n    module Loader {\n        /**\n         * @memberof PIXI.Loader\n         * @typedef {object} ICallbackID\n         */\n        type ICallbackID = any;\n        /**\n         * @memberof PIXI.Loader\n         * @typedef {function} ISignalCallback\n         * @param {function} callback - Callback function\n         * @param {object} [context] - Context\n         * @returns {ICallbackID} - CallbackID\n         */\n        type ISignalCallback = (callback: (...params: any[]) => any, context?: any) => ICallbackID;\n        /**\n         * @memberof PIXI.Loader\n         * @typedef {function} ISignalDetach\n         * @param {ICallbackID} id - CallbackID returned by `add`/`once` methods\n         */\n        type ISignalDetach = (id: ICallbackID) => void;\n        /**\n         * @memberof PIXI.Loader\n         * @typedef ILoaderSignal\n         * @property {ISignalCallback} add - Register callback\n         * @property {ISignalCallback} once - Register oneshot callback\n         * @property {ISignalDetach} detach - Detach specific callback by ID\n         */\n        type ILoaderSignal = {\n            add: ISignalCallback;\n            once: ISignalCallback;\n            detach: ISignalDetach;\n        };\n        /**\n         * @memberof PIXI.Loader\n         * @callback loaderMiddleware\n         * @param {PIXI.LoaderResource} resource\n         * @param {function} next\n         */\n        type loaderMiddleware = (resource: PIXI.LoaderResource, next: (...params: any[]) => any) => void;\n    }\n    /**\n     * The new loader, extends Resource Loader by Chad Engler: https://github.com/englercj/resource-loader\n     *\n     * ```js\n     * const loader = PIXI.Loader.shared; // PixiJS exposes a premade instance for you to use.\n     * //or\n     * const loader = new PIXI.Loader(); // you can also create your own if you want\n     *\n     * const sprites = {};\n     *\n     * // Chainable `add` to enqueue a resource\n     * loader.add('bunny', 'data/bunny.png')\n     *       .add('spaceship', 'assets/spritesheet.json');\n     * loader.add('scoreFont', 'assets/score.fnt');\n     *\n     * // Chainable `pre` to add a middleware that runs for each resource, *before* loading that resource.\n     * // This is useful to implement custom caching modules (using filesystem, indexeddb, memory, etc).\n     * loader.pre(cachingMiddleware);\n     *\n     * // Chainable `use` to add a middleware that runs for each resource, *after* loading that resource.\n     * // This is useful to implement custom parsing modules (like spritesheet parsers, spine parser, etc).\n     * loader.use(parsingMiddleware);\n     *\n     * // The `load` method loads the queue of resources, and calls the passed in callback called once all\n     * // resources have loaded.\n     * loader.load((loader, resources) => {\n     *     // resources is an object where the key is the name of the resource loaded and the value is the resource object.\n     *     // They have a couple default properties:\n     *     // - `url`: The URL that the resource was loaded from\n     *     // - `error`: The error that happened when trying to load (if any)\n     *     // - `data`: The raw data that was loaded\n     *     // also may contain other properties based on the middleware that runs.\n     *     sprites.bunny = new PIXI.TilingSprite(resources.bunny.texture);\n     *     sprites.spaceship = new PIXI.TilingSprite(resources.spaceship.texture);\n     *     sprites.scoreFont = new PIXI.TilingSprite(resources.scoreFont.texture);\n     * });\n     *\n     * // throughout the process multiple signals can be dispatched.\n     * loader.onProgress.add(() => {}); // called once per loaded/errored file\n     * loader.onError.add(() => {}); // called once per errored file\n     * loader.onLoad.add(() => {}); // called once per loaded file\n     * loader.onComplete.add(() => {}); // called once when the queued resources all load.\n     * ```\n     *\n     * @see https://github.com/englercj/resource-loader\n     *\n     * @class Loader\n     * @memberof PIXI\n     * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n     * @param {number} [concurrency=10] - The number of resources to load concurrently.\n     */\n    class Loader {\n        constructor(baseUrl?: string, concurrency?: number);\n        /**\n         * @memberof PIXI.Loader#\n         * @description Dispatched when the loader begins to loading process.\n         * @member {PIXI.Loader.ILoaderSignal} onStart\n         */\n        onStart: PIXI.Loader.ILoaderSignal;\n        /**\n         * @memberof PIXI.Loader#\n         * @description Dispatched once per loaded or errored resource.\n         * @member {PIXI.Loader.ILoaderSignal} onProgress\n         */\n        onProgress: PIXI.Loader.ILoaderSignal;\n        /**\n         * @memberof PIXI.Loader#\n         * @description Dispatched once per errored resource.\n         * @member {PIXI.Loader.ILoaderSignal} onError\n         */\n        onError: PIXI.Loader.ILoaderSignal;\n        /**\n         * @memberof PIXI.Loader#\n         * @description Dispatched once per loaded resource.\n         * @member {PIXI.Loader.ILoaderSignal} onLoad\n         */\n        onLoad: PIXI.Loader.ILoaderSignal;\n        /**\n         * @memberof PIXI.Loader#\n         * @description Dispatched when completely loaded all resources.\n         * @member {PIXI.Loader.ILoaderSignal} onComplete\n         */\n        onComplete: PIXI.Loader.ILoaderSignal;\n        /**\n         * Destroy the loader, removes references.\n         * @memberof PIXI.Loader#\n         * @method destroy\n         * @public\n         */\n        public destroy(): void;\n        /**\n         * A premade instance of the loader that can be used to load resources.\n         * @name shared\n         * @type {PIXI.Loader}\n         * @static\n         * @memberof PIXI.Loader\n         */\n        static shared: PIXI.Loader;\n        /**\n         * Adds a Loader plugin for the global shared loader and all\n         * new Loader instances created.\n         *\n         * @static\n         * @method registerPlugin\n         * @memberof PIXI.Loader\n         * @param {PIXI.ILoaderPlugin} plugin - The plugin to add\n         * @return {PIXI.Loader} Reference to PIXI.Loader for chaining\n         */\n        static registerPlugin(plugin: PIXI.ILoaderPlugin): PIXI.Loader;\n    }\n    /**\n    * Reference to **{@link https://github.com/englercj/resource-loader\n    * resource-loader}**'s Resource class.\n    * @see http://englercj.github.io/resource-loader/Resource.html\n    * @class LoaderResource\n    * @memberof PIXI\n     */\n    class LoaderResource {\n    }\n    interface TextureLoader extends PIXI.ILoaderPlugin {\n    }\n    /**\n     * Loader plugin for handling Texture resources.\n     * @class\n     * @memberof PIXI\n     * @implements PIXI.ILoaderPlugin\n     */\n    class TextureLoader implements PIXI.ILoaderPlugin {\n        /**\n         * Called after a resource is loaded.\n         * @see PIXI.Loader.loaderMiddleware\n         * @param {PIXI.LoaderResource} resource\n         * @param {function} next\n         */\n        static use(resource: PIXI.LoaderResource, next: (...params: any[]) => any): void;\n    }\n    /**\n     * Common interface for points. Both Point and ObservablePoint implement it\n     * @memberof PIXI\n     * @interface IPoint\n     * @extends PIXI.IPointData\n     */\n    interface IPoint extends PIXI.IPointData {\n        /**\n         * Sets the point to a new x and y position.\n         * If y is omitted, both x and y will be set to x.\n         *\n         * @method set\n         * @memberof PIXI.IPoint#\n         * @param {number} [x=0] - position of the point on the x axis\n         * @param {number} [y=x] - position of the point on the y axis\n         */\n        set(x?: number, y?: number): void;\n        /**\n         * Copies x and y from the given point\n         * @method copyFrom\n         * @memberof PIXI.IPoint#\n         * @param {PIXI.IPointData} p - The point to copy from\n         * @returns {this} Returns itself.\n         */\n        copyFrom(p: PIXI.IPointData): this;\n        /**\n         * Copies x and y into the given point\n         * @method copyTo\n         * @memberof PIXI.IPoint#\n         * @param {PIXI.IPoint} p - The point to copy.\n         * @returns {PIXI.IPoint} Given point with values updated\n         */\n        copyTo(p: PIXI.IPoint): PIXI.IPoint;\n        /**\n         * Returns true if the given point is equal to this point\n         *\n         * @method equals\n         * @memberof PIXI.IPoint#\n         * @param {PIXI.IPointData} p - The point to check\n         * @returns {boolean} Whether the given point equal to this point\n         */\n        equals(p: PIXI.IPointData): boolean;\n        /**\n         * X coord\n         * @memberof PIXI.IPointData#\n         * @member {number} x\n         */\n        x: number;\n        /**\n         * Y coord\n         * @memberof PIXI.IPointData#\n         * @member {number} y\n         */\n        y: number;\n    }\n    /**\n     * Common interface for points. Both Point and ObservablePoint implement it\n     * @memberof PIXI\n     * @interface IPointData\n     */\n    interface IPointData {\n        /**\n         * X coord\n         * @memberof PIXI.IPointData#\n         * @member {number} x\n         */\n        x: number;\n        /**\n         * Y coord\n         * @memberof PIXI.IPointData#\n         * @member {number} y\n         */\n        y: number;\n    }\n    /**\n     * The PixiJS Matrix as a class makes it a lot faster.\n     *\n     * Here is a representation of it:\n     * ```js\n     * | a | c | tx|\n     * | b | d | ty|\n     * | 0 | 0 | 1 |\n     * ```\n     * @class\n     * @memberof PIXI\n     */\n    class Matrix {\n        constructor(a?: number, b?: number, c?: number, d?: number, tx?: number, ty?: number);\n        /**\n         * @member {number} PIXI.Matrix#a\n         * @default 1\n         */\n        a: number;\n        /**\n         * @member {number} PIXI.Matrix#b\n         * @default 0\n         */\n        b: number;\n        /**\n         * @member {number} PIXI.Matrix#c\n         * @default 0\n         */\n        c: number;\n        /**\n         * @member {number} PIXI.Matrix#d\n         * @default 1\n         */\n        d: number;\n        /**\n         * @member {number} PIXI.Matrix#tx\n         * @default 0\n         */\n        tx: number;\n        /**\n         * @member {number} PIXI.Matrix#ty\n         * @default 0\n         */\n        ty: number;\n        /**\n         * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n         *\n         * a = array[0]\n         * b = array[1]\n         * c = array[3]\n         * d = array[4]\n         * tx = array[2]\n         * ty = array[5]\n         *\n         * @param {number[]} array - The array that the matrix will be populated from.\n         */\n        fromArray(array: number[]): void;\n        /**\n         * sets the matrix properties\n         *\n         * @param {number} a - Matrix component\n         * @param {number} b - Matrix component\n         * @param {number} c - Matrix component\n         * @param {number} d - Matrix component\n         * @param {number} tx - Matrix component\n         * @param {number} ty - Matrix component\n         *\n         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n         */\n        set(a: number, b: number, c: number, d: number, tx: number, ty: number): PIXI.Matrix;\n        /**\n         * Creates an array from the current Matrix object.\n         *\n         * @param {boolean} transpose - Whether we need to transpose the matrix or not\n         * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out\n         * @return {number[]} the newly created array which contains the matrix\n         */\n        toArray(transpose: boolean, out?: Float32Array): number[];\n        /**\n         * Get a new position with the current transformation applied.\n         * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n         *\n         * @param {PIXI.IPointData} pos - The origin\n         * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n         * @return {PIXI.Point} The new point, transformed through this matrix\n         */\n        apply(pos: PIXI.IPointData, newPos?: PIXI.Point): PIXI.Point;\n        /**\n         * Get a new position with the inverse of the current transformation applied.\n         * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n         *\n         * @param {PIXI.IPointData} pos - The origin\n         * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n         * @return {PIXI.Point} The new point, inverse-transformed through this matrix\n         */\n        applyInverse(pos: PIXI.IPointData, newPos?: PIXI.Point): PIXI.Point;\n        /**\n         * Translates the matrix on the x and y.\n         *\n         * @param {number} x - How much to translate x by\n         * @param {number} y - How much to translate y by\n         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n         */\n        translate(x: number, y: number): PIXI.Matrix;\n        /**\n         * Applies a scale transformation to the matrix.\n         *\n         * @param {number} x - The amount to scale horizontally\n         * @param {number} y - The amount to scale vertically\n         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n         */\n        scale(x: number, y: number): PIXI.Matrix;\n        /**\n         * Applies a rotation transformation to the matrix.\n         *\n         * @param {number} angle - The angle in radians.\n         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n         */\n        rotate(angle: number): PIXI.Matrix;\n        /**\n         * Appends the given Matrix to this Matrix.\n         *\n         * @param {PIXI.Matrix} matrix - The matrix to append.\n         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n         */\n        append(matrix: PIXI.Matrix): PIXI.Matrix;\n        /**\n         * Sets the matrix based on all the available properties\n         *\n         * @param {number} x - Position on the x axis\n         * @param {number} y - Position on the y axis\n         * @param {number} pivotX - Pivot on the x axis\n         * @param {number} pivotY - Pivot on the y axis\n         * @param {number} scaleX - Scale on the x axis\n         * @param {number} scaleY - Scale on the y axis\n         * @param {number} rotation - Rotation in radians\n         * @param {number} skewX - Skew on the x axis\n         * @param {number} skewY - Skew on the y axis\n         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n         */\n        setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number, scaleY: number, rotation: number, skewX: number, skewY: number): PIXI.Matrix;\n        /**\n         * Prepends the given Matrix to this Matrix.\n         *\n         * @param {PIXI.Matrix} matrix - The matrix to prepend\n         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n         */\n        prepend(matrix: PIXI.Matrix): PIXI.Matrix;\n        /**\n         * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n         *\n         * @param {PIXI.Transform} transform - The transform to apply the properties to.\n         * @return {PIXI.Transform} The transform with the newly applied properties\n         */\n        decompose(transform: PIXI.Transform): PIXI.Transform;\n        /**\n         * Inverts this matrix\n         *\n         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n         */\n        invert(): PIXI.Matrix;\n        /**\n         * Resets this Matrix to an identity (default) matrix.\n         *\n         * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n         */\n        identity(): PIXI.Matrix;\n        /**\n         * Creates a new Matrix object with the same values as this one.\n         *\n         * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.\n         */\n        clone(): PIXI.Matrix;\n        /**\n         * Changes the values of the given matrix to be the same as the ones in this matrix\n         *\n         * @param {PIXI.Matrix} matrix - The matrix to copy to.\n         * @return {PIXI.Matrix} The matrix given in parameter with its values updated.\n         */\n        copyTo(matrix: PIXI.Matrix): PIXI.Matrix;\n        /**\n         * Changes the values of the matrix to be the same as the ones in given matrix\n         *\n         * @param {PIXI.Matrix} matrix - The matrix to copy from.\n         * @return {PIXI.Matrix} this\n         */\n        copyFrom(matrix: PIXI.Matrix): PIXI.Matrix;\n        /**\n         * A default (identity) matrix\n         *\n         * @static\n         * @const\n         * @member {PIXI.Matrix}\n         */\n        static IDENTITY: PIXI.Matrix;\n        /**\n         * A temp matrix\n         *\n         * @static\n         * @const\n         * @member {PIXI.Matrix}\n         */\n        static TEMP_MATRIX: PIXI.Matrix;\n    }\n    interface ObservablePoint extends IPoint {\n    }\n    /**\n     * The Point object represents a location in a two-dimensional coordinate system, where x represents\n     * the horizontal axis and y represents the vertical axis.\n     *\n     * An ObservablePoint is a point that triggers a callback when the point's position is changed.\n     *\n     * @class\n     * @memberof PIXI\n     * @implements IPoint\n     */\n    class ObservablePoint implements IPoint {\n        constructor(cb: (...params: any[]) => any, scope: any, x?: number, y?: number);\n        /**\n         * Creates a clone of this point.\n         * The callback and scope params can be overidden otherwise they will default\n         * to the clone object's values.\n         *\n         * @override\n         * @param {Function} [cb=null] - callback when changed\n         * @param {object} [scope=null] - owner of callback\n         * @return {PIXI.ObservablePoint} a copy of the point\n         */\n        clone(cb?: (...params: any[]) => any, scope?: any): PIXI.ObservablePoint;\n        /**\n         * Sets the point to a new x and y position.\n         * If y is omitted, both x and y will be set to x.\n         *\n         * @param {number} [x=0] - position of the point on the x axis\n         * @param {number} [y=x] - position of the point on the y axis\n         * @returns {this} Returns itself.\n         */\n        set(x?: number, y?: number): this;\n        /**\n         * Copies x and y from the given point\n         *\n         * @param {PIXI.IPointData} p - The point to copy from.\n         * @returns {this} Returns itself.\n         */\n        copyFrom(p: PIXI.IPointData): this;\n        /**\n         * Copies x and y into the given point\n         *\n         * @param {PIXI.IPoint} p - The point to copy.\n         * @returns {PIXI.IPoint} Given point with values updated\n         */\n        copyTo(p: PIXI.IPoint): PIXI.IPoint;\n        /**\n         * Returns true if the given point is equal to this point\n         *\n         * @param {PIXI.IPointData} p - The point to check\n         * @returns {boolean} Whether the given point equal to this point\n         */\n        equals(p: PIXI.IPointData): boolean;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         *\n         * @member {number}\n         */\n        y: number;\n    }\n    interface Point extends IPoint {\n    }\n    /**\n     * The Point object represents a location in a two-dimensional coordinate system, where x represents\n     * the horizontal axis and y represents the vertical axis.\n     *\n     * @class\n     * @memberof PIXI\n     * @implements IPoint\n     */\n    class Point implements IPoint {\n        constructor(x?: number, y?: number);\n        /**\n         * @member {number} PIXI.Point#x\n         * @default 0\n         */\n        x: number;\n        /**\n         * @member {number} PIXI.Point#y\n         * @default 0\n         */\n        y: number;\n        /**\n         * Creates a clone of this point\n         *\n         * @return {PIXI.Point} a copy of the point\n         */\n        clone(): PIXI.Point;\n        /**\n         * Copies x and y from the given point\n         *\n         * @param {PIXI.IPointData} p - The point to copy from\n         * @returns {this} Returns itself.\n         */\n        copyFrom(p: PIXI.IPointData): this;\n        /**\n         * Copies x and y into the given point\n         *\n         * @param {PIXI.IPoint} p - The point to copy.\n         * @returns {PIXI.IPoint} Given point with values updated\n         */\n        copyTo(p: PIXI.IPoint): PIXI.IPoint;\n        /**\n         * Returns true if the given point is equal to this point\n         *\n         * @param {PIXI.IPointData} p - The point to check\n         * @returns {boolean} Whether the given point equal to this point\n         */\n        equals(p: PIXI.IPointData): boolean;\n        /**\n         * Sets the point to a new x and y position.\n         * If y is omitted, both x and y will be set to x.\n         *\n         * @param {number} [x=0] - position of the point on the x axis\n         * @param {number} [y=x] - position of the point on the y axis\n         * @returns {this} Returns itself.\n         */\n        set(x?: number, y?: number): this;\n    }\n    /**\n     * Transform that takes care about its versions\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Transform {\n        constructor();\n        /**\n         * The world transformation matrix.\n         *\n         * @member {PIXI.Matrix} PIXI.Transform#worldTransform\n         */\n        worldTransform: PIXI.Matrix;\n        /**\n         * The local transformation matrix.\n         *\n         * @member {PIXI.Matrix} PIXI.Transform#localTransform\n         */\n        localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.ObservablePoint} PIXI.Transform#position\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.ObservablePoint} PIXI.Transform#scale\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         *\n         * @member {PIXI.ObservablePoint} PIXI.Transform#pivot\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint} PIXI.Transform#skew\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation amount.\n         *\n         * @protected\n         * @member {number} PIXI.Transform#_rotation\n         */\n        protected _rotation: number;\n        /**\n         * The X-coordinate value of the normalized local X axis,\n         * the first column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number} PIXI.Transform#_cx\n         */\n        protected _cx: number;\n        /**\n         * The Y-coordinate value of the normalized local X axis,\n         * the first column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number} PIXI.Transform#_sx\n         */\n        protected _sx: number;\n        /**\n         * The X-coordinate value of the normalized local Y axis,\n         * the second column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number} PIXI.Transform#_cy\n         */\n        protected _cy: number;\n        /**\n         * The Y-coordinate value of the normalized local Y axis,\n         * the second column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number} PIXI.Transform#_sy\n         */\n        protected _sy: number;\n        /**\n         * The locally unique ID of the local transform.\n         *\n         * @protected\n         * @member {number} PIXI.Transform#_localID\n         */\n        protected _localID: number;\n        /**\n         * The locally unique ID of the local transform\n         * used to calculate the current local transformation matrix.\n         *\n         * @protected\n         * @member {number} PIXI.Transform#_currentLocalID\n         */\n        protected _currentLocalID: number;\n        /**\n         * The locally unique ID of the world transform.\n         *\n         * @protected\n         * @member {number} PIXI.Transform#_worldID\n         */\n        protected _worldID: number;\n        /**\n         * The locally unique ID of the parent's world transform\n         * used to calculate the current world transformation matrix.\n         *\n         * @protected\n         * @member {number} PIXI.Transform#_parentID\n         */\n        protected _parentID: number;\n        /**\n         * Called when a value changes.\n         *\n         * @protected\n         */\n        protected onChange(): void;\n        /**\n         * Called when the skew or the rotation changes.\n         *\n         * @protected\n         */\n        protected updateSkew(): void;\n        /**\n         * Updates the local transformation matrix.\n         */\n        updateLocalTransform(): void;\n        /**\n         * Updates the local and the world transformation matrices.\n         *\n         * @param {PIXI.Transform} parentTransform - The parent transform\n         */\n        updateTransform(parentTransform: PIXI.Transform): void;\n        /**\n         * Decomposes a matrix and sets the transforms properties based on it.\n         *\n         * @param {PIXI.Matrix} matrix - The matrix to decompose\n         */\n        setFromMatrix(matrix: PIXI.Matrix): void;\n        /**\n         * The rotation of the object in radians.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * A default (identity) transform\n         *\n         * @static\n         * @constant\n         * @member {PIXI.Transform}\n         */\n        static IDENTITY: PIXI.Transform;\n    }\n    /**\n     * Constants that identify shapes, mainly to prevent `instanceof` calls.\n     *\n     * @static\n     * @constant\n     * @name SHAPES\n     * @memberof PIXI\n     * @type {enum}\n     * @property {number} POLY Polygon\n     * @property {number} RECT Rectangle\n     * @property {number} CIRC Circle\n     * @property {number} ELIP Ellipse\n     * @property {number} RREC Rounded Rectangle\n     * @enum {number}\n     */\n    enum SHAPES {\n        POLY,\n        RECT,\n        CIRC,\n        ELIP,\n        RREC\n    }\n    /**\n     * Two Pi.\n     *\n     * @static\n     * @constant {number} PI_2\n     * @memberof PIXI\n     */\n    var PI_2: number;\n    /**\n     * Conversion factor for converting radians to degrees.\n     *\n     * @static\n     * @constant {number} RAD_TO_DEG\n     * @memberof PIXI\n     */\n    var RAD_TO_DEG: number;\n    /**\n     * Conversion factor for converting degrees to radians.\n     *\n     * @static\n     * @constant {number} DEG_TO_RAD\n     * @memberof PIXI\n     */\n    var DEG_TO_RAD: number;\n    /**\n     * @memberof PIXI\n     * @typedef {number} GD8Symmetry\n     * @see PIXI.groupD8\n     */\n    type GD8Symmetry = number;\n    /**\n     * Implements the dihedral group D8, which is similar to\n     * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n     * D8 is the same but with diagonals, and it is used for texture\n     * rotations.\n     *\n     * The directions the U- and V- axes after rotation\n     * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n     * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n     *\n     * **Origin:**<br>\n     *  This is the small part of gameofbombs.com portal system. It works.\n     *\n     * @see PIXI.groupD8.E\n     * @see PIXI.groupD8.SE\n     * @see PIXI.groupD8.S\n     * @see PIXI.groupD8.SW\n     * @see PIXI.groupD8.W\n     * @see PIXI.groupD8.NW\n     * @see PIXI.groupD8.N\n     * @see PIXI.groupD8.NE\n     * @author Ivan @ivanpopelyshev\n     * @namespace PIXI.groupD8\n     * @memberof PIXI\n     */\n    namespace groupD8 {\n        /**\n         * | Rotation | Direction |\n         * |----------|-----------|\n         * | 0°       | East      |\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var E: PIXI.GD8Symmetry;\n        /**\n         * | Rotation | Direction |\n         * |----------|-----------|\n         * | 45°↻     | Southeast |\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var SE: PIXI.GD8Symmetry;\n        /**\n         * | Rotation | Direction |\n         * |----------|-----------|\n         * | 90°↻     | South     |\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var S: PIXI.GD8Symmetry;\n        /**\n         * | Rotation | Direction |\n         * |----------|-----------|\n         * | 135°↻    | Southwest |\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var SW: PIXI.GD8Symmetry;\n        /**\n         * | Rotation | Direction |\n         * |----------|-----------|\n         * | 180°     | West      |\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var W: PIXI.GD8Symmetry;\n        /**\n         * | Rotation    | Direction    |\n         * |-------------|--------------|\n         * | -135°/225°↻ | Northwest    |\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var NW: PIXI.GD8Symmetry;\n        /**\n         * | Rotation    | Direction    |\n         * |-------------|--------------|\n         * | -90°/270°↻  | North        |\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var N: PIXI.GD8Symmetry;\n        /**\n         * | Rotation    | Direction    |\n         * |-------------|--------------|\n         * | -45°/315°↻  | Northeast    |\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var NE: PIXI.GD8Symmetry;\n        /**\n         * Reflection about Y-axis.\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var MIRROR_VERTICAL: PIXI.GD8Symmetry;\n        /**\n         * Reflection about the main diagonal.\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var MAIN_DIAGONAL: PIXI.GD8Symmetry;\n        /**\n         * Reflection about X-axis.\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var MIRROR_HORIZONTAL: PIXI.GD8Symmetry;\n        /**\n         * Reflection about reverse diagonal.\n         *\n         * @memberof PIXI.groupD8\n         * @constant {PIXI.GD8Symmetry}\n         */\n        var REVERSE_DIAGONAL: PIXI.GD8Symmetry;\n        /**\n         * @memberof PIXI.groupD8\n         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n         * @return {PIXI.GD8Symmetry} The X-component of the U-axis\n         *    after rotating the axes.\n         */\n        function uX(ind: PIXI.GD8Symmetry): PIXI.GD8Symmetry;\n        /**\n         * @memberof PIXI.groupD8\n         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n         * @return {PIXI.GD8Symmetry} The Y-component of the U-axis\n         *    after rotating the axes.\n         */\n        function uY(ind: PIXI.GD8Symmetry): PIXI.GD8Symmetry;\n        /**\n         * @memberof PIXI.groupD8\n         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n         * @return {PIXI.GD8Symmetry} The X-component of the V-axis\n         *    after rotating the axes.\n         */\n        function vX(ind: PIXI.GD8Symmetry): PIXI.GD8Symmetry;\n        /**\n         * @memberof PIXI.groupD8\n         * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n         * @return {PIXI.GD8Symmetry} The Y-component of the V-axis\n         *    after rotating the axes.\n         */\n        function vY(ind: PIXI.GD8Symmetry): PIXI.GD8Symmetry;\n        /**\n         * @memberof PIXI.groupD8\n         * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n         *   is needed. Only rotations have opposite symmetries while\n         *   reflections don't.\n         * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n         */\n        function inv(rotation: PIXI.GD8Symmetry): PIXI.GD8Symmetry;\n        /**\n         * Composes the two D8 operations.\n         *\n         * Taking `^` as reflection:\n         *\n         * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n         * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n         * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n         * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n         * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n         * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n         * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n         * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n         * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n         * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n         *\n         * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n         * @memberof PIXI.groupD8\n         * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n         *   is the row in the above cayley table.\n         * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n         *   is the column in the above cayley table.\n         * @return {PIXI.GD8Symmetry} Composed operation\n         */\n        function add(rotationSecond: PIXI.GD8Symmetry, rotationFirst: PIXI.GD8Symmetry): PIXI.GD8Symmetry;\n        /**\n         * Reverse of `add`.\n         *\n         * @memberof PIXI.groupD8\n         * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n         * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n         * @return {PIXI.GD8Symmetry} Result\n         */\n        function sub(rotationSecond: PIXI.GD8Symmetry, rotationFirst: PIXI.GD8Symmetry): PIXI.GD8Symmetry;\n        /**\n         * Adds 180 degrees to rotation, which is a commutative\n         * operation.\n         *\n         * @memberof PIXI.groupD8\n         * @param {number} rotation - The number to rotate.\n         * @returns {number} Rotated number\n         */\n        function rotate180(rotation: number): number;\n        /**\n         * Checks if the rotation angle is vertical, i.e. south\n         * or north. It doesn't work for reflections.\n         *\n         * @memberof PIXI.groupD8\n         * @param {PIXI.GD8Symmetry} rotation - The number to check.\n         * @returns {boolean} Whether or not the direction is vertical\n         */\n        function isVertical(rotation: PIXI.GD8Symmetry): boolean;\n        /**\n         * Approximates the vector `V(dx,dy)` into one of the\n         * eight directions provided by `groupD8`.\n         *\n         * @memberof PIXI.groupD8\n         * @param {number} dx - X-component of the vector\n         * @param {number} dy - Y-component of the vector\n         * @return {PIXI.GD8Symmetry} Approximation of the vector into\n         *  one of the eight symmetries.\n         */\n        function byDirection(dx: number, dy: number): PIXI.GD8Symmetry;\n        /**\n         * Helps sprite to compensate texture packer rotation.\n         *\n         * @memberof PIXI.groupD8\n         * @param {PIXI.Matrix} matrix - sprite world matrix\n         * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n         * @param {number} tx - sprite anchoring\n         * @param {number} ty - sprite anchoring\n         */\n        function matrixAppendRotationInv(matrix: PIXI.Matrix, rotation: PIXI.GD8Symmetry, tx: number, ty: number): void;\n    }\n    /**\n     * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Circle {\n        constructor(x?: number, y?: number, radius?: number);\n        /**\n         * @member {number} PIXI.Circle#x\n         * @default 0\n         */\n        x: number;\n        /**\n         * @member {number} PIXI.Circle#y\n         * @default 0\n         */\n        y: number;\n        /**\n         * @member {number} PIXI.Circle#radius\n         * @default 0\n         */\n        radius: number;\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number} PIXI.Circle#type\n         * @readOnly\n         * @default PIXI.SHAPES.CIRC\n         * @see PIXI.SHAPES\n         */\n        readonly type: number;\n        /**\n         * Creates a clone of this Circle instance\n         *\n         * @return {PIXI.Circle} a copy of the Circle\n         */\n        clone(): PIXI.Circle;\n        /**\n         * Checks whether the x and y coordinates given are contained within this circle\n         *\n         * @param {number} x - The X coordinate of the point to test\n         * @param {number} y - The Y coordinate of the point to test\n         * @return {boolean} Whether the x/y coordinates are within this Circle\n         */\n        contains(x: number, y: number): boolean;\n        /**\n         * Returns the framing rectangle of the circle as a Rectangle object\n         *\n         * @return {PIXI.Rectangle} the framing rectangle\n         */\n        getBounds(): PIXI.Rectangle;\n    }\n    /**\n     * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Ellipse {\n        constructor(x?: number, y?: number, halfWidth?: number, halfHeight?: number);\n        /**\n         * @member {number} PIXI.Ellipse#x\n         * @default 0\n         */\n        x: number;\n        /**\n         * @member {number} PIXI.Ellipse#y\n         * @default 0\n         */\n        y: number;\n        /**\n         * @member {number} PIXI.Ellipse#width\n         * @default 0\n         */\n        width: number;\n        /**\n         * @member {number} PIXI.Ellipse#height\n         * @default 0\n         */\n        height: number;\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number} PIXI.Ellipse#type\n         * @readOnly\n         * @default PIXI.SHAPES.ELIP\n         * @see PIXI.SHAPES\n         */\n        readonly type: number;\n        /**\n         * Creates a clone of this Ellipse instance\n         *\n         * @return {PIXI.Ellipse} a copy of the ellipse\n         */\n        clone(): PIXI.Ellipse;\n        /**\n         * Checks whether the x and y coordinates given are contained within this ellipse\n         *\n         * @param {number} x - The X coordinate of the point to test\n         * @param {number} y - The Y coordinate of the point to test\n         * @return {boolean} Whether the x/y coords are within this ellipse\n         */\n        contains(x: number, y: number): boolean;\n        /**\n         * Returns the framing rectangle of the ellipse as a Rectangle object\n         *\n         * @return {PIXI.Rectangle} the framing rectangle\n         */\n        getBounds(): PIXI.Rectangle;\n    }\n    /**\n     * A class to define a shape via user defined co-orinates.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Polygon {\n        constructor(...points: (PIXI.IPoint[] | number[])[]);\n        /**\n         * An array of the points of this polygon\n         *\n         * @member {number[]} PIXI.Polygon#points\n         */\n        points: number[];\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number} PIXI.Polygon#type\n         * @readOnly\n         * @default PIXI.SHAPES.POLY\n         * @see PIXI.SHAPES\n         */\n        readonly type: number;\n        /**\n         * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.\n         * @member {boolean} PIXI.Polygon#closeStroke\n         * @default true\n         */\n        closeStroke: boolean;\n        /**\n         * Creates a clone of this polygon\n         *\n         * @return {PIXI.Polygon} a copy of the polygon\n         */\n        clone(): PIXI.Polygon;\n        /**\n         * Checks whether the x and y coordinates passed to this function are contained within this polygon\n         *\n         * @param {number} x - The X coordinate of the point to test\n         * @param {number} y - The Y coordinate of the point to test\n         * @return {boolean} Whether the x/y coordinates are within this polygon\n         */\n        contains(x: number, y: number): boolean;\n    }\n    /**\n     * Size object, contains width and height\n     *\n     * @memberof PIXI\n     * @typedef {object} ISize\n     * @property {number} width - Width component\n     * @property {number} height - Height component\n     */\n    type ISize = {\n        width: number;\n        height: number;\n    };\n    /**\n     * Rectangle object is an area defined by its position, as indicated by its top-left corner\n     * point (x, y) and by its width and its height.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Rectangle {\n        constructor(x?: number, y?: number, width?: number, height?: number);\n        /**\n         * @member {number} PIXI.Rectangle#x\n         * @default 0\n         */\n        x: number;\n        /**\n         * @member {number} PIXI.Rectangle#y\n         * @default 0\n         */\n        y: number;\n        /**\n         * @member {number} PIXI.Rectangle#width\n         * @default 0\n         */\n        width: number;\n        /**\n         * @member {number} PIXI.Rectangle#height\n         * @default 0\n         */\n        height: number;\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number} PIXI.Rectangle#type\n         * @readOnly\n         * @default PIXI.SHAPES.RECT\n         * @see PIXI.SHAPES\n         */\n        readonly type: number;\n        /**\n         * returns the left edge of the rectangle\n         *\n         * @member {number}\n         */\n        left: number;\n        /**\n         * returns the right edge of the rectangle\n         *\n         * @member {number}\n         */\n        right: number;\n        /**\n         * returns the top edge of the rectangle\n         *\n         * @member {number}\n         */\n        top: number;\n        /**\n         * returns the bottom edge of the rectangle\n         *\n         * @member {number}\n         */\n        bottom: number;\n        /**\n         * A constant empty rectangle.\n         *\n         * @static\n         * @constant\n         * @member {PIXI.Rectangle}\n         * @return {PIXI.Rectangle} An empty rectangle\n         */\n        static EMPTY: PIXI.Rectangle;\n        /**\n         * Creates a clone of this Rectangle\n         *\n         * @return {PIXI.Rectangle} a copy of the rectangle\n         */\n        clone(): PIXI.Rectangle;\n        /**\n         * Copies another rectangle to this one.\n         *\n         * @param {PIXI.Rectangle} rectangle - The rectangle to copy from.\n         * @return {PIXI.Rectangle} Returns itself.\n         */\n        copyFrom(rectangle: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Copies this rectangle to another one.\n         *\n         * @param {PIXI.Rectangle} rectangle - The rectangle to copy to.\n         * @return {PIXI.Rectangle} Returns given parameter.\n         */\n        copyTo(rectangle: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Checks whether the x and y coordinates given are contained within this Rectangle\n         *\n         * @param {number} x - The X coordinate of the point to test\n         * @param {number} y - The Y coordinate of the point to test\n         * @return {boolean} Whether the x/y coordinates are within this Rectangle\n         */\n        contains(x: number, y: number): boolean;\n        /**\n         * Pads the rectangle making it grow in all directions.\n         * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n         *\n         * @param {number} [paddingX=0] - The horizontal padding amount.\n         * @param {number} [paddingY=0] - The vertical padding amount.\n         * @return {PIXI.Rectangle} Returns itself.\n         */\n        pad(paddingX?: number, paddingY?: number): PIXI.Rectangle;\n        /**\n         * Fits this rectangle around the passed one.\n         *\n         * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n         * @return {PIXI.Rectangle} Returns itself.\n         */\n        fit(rectangle: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Enlarges rectangle that way its corners lie on grid\n         *\n         * @param {number} [resolution=1] resolution\n         * @param {number} [eps=0.001] precision\n         * @return {PIXI.Rectangle} Returns itself.\n         */\n        ceil(resolution?: number, eps?: number): PIXI.Rectangle;\n        /**\n         * Enlarges this rectangle to include the passed rectangle.\n         *\n         * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n         * @return {PIXI.Rectangle} Returns itself.\n         */\n        enlarge(rectangle: PIXI.Rectangle): PIXI.Rectangle;\n    }\n    /**\n     * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n     * top-left corner point (x, y) and by its width and its height and its radius.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class RoundedRectangle {\n        constructor(x?: number, y?: number, width?: number, height?: number, radius?: number);\n        /**\n         * @member {number} PIXI.RoundedRectangle#x\n         * @default 0\n         */\n        x: number;\n        /**\n         * @member {number} PIXI.RoundedRectangle#y\n         * @default 0\n         */\n        y: number;\n        /**\n         * @member {number} PIXI.RoundedRectangle#width\n         * @default 0\n         */\n        width: number;\n        /**\n         * @member {number} PIXI.RoundedRectangle#height\n         * @default 0\n         */\n        height: number;\n        /**\n         * @member {number} PIXI.RoundedRectangle#radius\n         * @default 20\n         */\n        radius: number;\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number} PIXI.RoundedRectangle#type\n         * @readonly\n         * @default PIXI.SHAPES.RREC\n         * @see PIXI.SHAPES\n         */\n        readonly type: number;\n        /**\n         * Creates a clone of this Rounded Rectangle\n         *\n         * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle\n         */\n        clone(): PIXI.RoundedRectangle;\n        /**\n         * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n         *\n         * @param {number} x - The X coordinate of the point to test\n         * @param {number} y - The Y coordinate of the point to test\n         * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle\n         */\n        contains(x: number, y: number): boolean;\n    }\n    /**\n     * Base mesh class.\n     *\n     * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n     * This class assumes a certain level of WebGL knowledge.\n     * If you know a bit this should abstract enough away to make you life easier!\n     *\n     * Pretty much ALL WebGL can be broken down into the following:\n     * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n     * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n     * - State - This is the state of WebGL required to render the mesh.\n     *\n     * Through a combination of the above elements you can render anything you want, 2D or 3D!\n     *\n     * @class\n     * @extends PIXI.Container\n     * @memberof PIXI\n     */\n    class Mesh extends PIXI.Container {\n        constructor(geometry: PIXI.Geometry, shader: PIXI.MeshMaterial, state?: PIXI.State, drawMode?: number);\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry} PIXI.Mesh#geometry\n         * @readonly\n         */\n        readonly geometry: PIXI.Geometry;\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial} PIXI.Mesh#shader\n         */\n        shader: PIXI.Shader | PIXI.MeshMaterial;\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State} PIXI.Mesh#state\n         */\n        state: PIXI.State;\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number} PIXI.Mesh#drawMode\n         * @see PIXI.DRAW_MODES\n         */\n        drawMode: number;\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number} PIXI.Mesh#start\n         * @default 0\n         */\n        start: number;\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number} PIXI.Mesh#size\n         * @default 0\n         */\n        size: number;\n        /**\n         * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        readonly uvBuffer: PIXI.Buffer;\n        /**\n         * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n         * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        readonly verticesBuffer: PIXI.Buffer;\n        /**\n         * Alias for {@link PIXI.Mesh#shader}.\n         * @member {PIXI.MeshMaterial}\n         */\n        material: PIXI.MeshMaterial;\n        /**\n         * The blend mode to be applied to the Mesh. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        roundPixels: boolean;\n        /**\n         * The multiply tint applied to the Mesh. This is a hex value. A value of\n         * `0xFFFFFF` will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * The texture that the Mesh uses.\n         *\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * Standard renderer draw.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Standard non-batching way of rendering.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _renderDefault(renderer: PIXI.Renderer): void;\n        /**\n         * Rendering by using the Batch system.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _renderToBatch(renderer: PIXI.Renderer): void;\n        /**\n         * Updates vertexData field based on transform and vertices\n         */\n        calculateVertices(): void;\n        /**\n         * Updates uv field based on from geometry uv's or batchUvs\n         */\n        calculateUvs(): void;\n        /**\n         * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n         * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n         *\n         * @param {PIXI.IPointData} point - the point to test\n         * @return {boolean} the result of the test\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * Destroys the Mesh object.\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n         *  options have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have\n         *  their destroy method called as well. 'options' will be passed on to those calls.\n         */\n        destroy(options?: {\n            children?: boolean;\n        }): void;\n        /**\n         * The maximum number of vertices to consider batchable. Generally, the complexity\n         * of the geometry.\n         * @memberof PIXI.Mesh\n         * @static\n         * @member {number} BATCHABLE_SIZE\n         */\n        static BATCHABLE_SIZE: number;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Retrieves the local bounds of the displayObject as a rectangle object.\n         *\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,\n         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * The width of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.DisplayObject#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class MeshBatchUvs {\n        constructor(uvBuffer: PIXI.Buffer, uvMatrix: PIXI.TextureMatrix);\n        /**\n         * Buffer with normalized UV's\n         * @member {PIXI.Buffer} PIXI.MeshBatchUvs#uvBuffer\n         */\n        uvBuffer: PIXI.Buffer;\n        /**\n         * Material UV matrix\n         * @member {PIXI.TextureMatrix} PIXI.MeshBatchUvs#uvMatrix\n         */\n        uvMatrix: PIXI.TextureMatrix;\n        /**\n         * UV Buffer data\n         * @member {Float32Array} PIXI.MeshBatchUvs#data\n         * @readonly\n         */\n        readonly data: Float32Array;\n        /**\n         * updates\n         *\n         * @param {boolean} [forceUpdate] - force the update\n         */\n        update(forceUpdate?: boolean): void;\n    }\n    /**\n     * Standard 2D geometry used in PixiJS.\n     *\n     * Geometry can be defined without passing in a style or data if required.\n     *\n     * ```js\n     * const geometry = new PIXI.Geometry();\n     *\n     * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n     * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n     * geometry.addIndex([0,1,2,1,3,2]);\n     *\n     * ```\n     * @class\n     * @memberof PIXI\n     * @extends PIXI.Geometry\n     */\n    class MeshGeometry extends PIXI.Geometry {\n        constructor(vertices?: Float32Array | number[], uvs?: Float32Array | number[], index?: Uint16Array | number[]);\n        /**\n         * A map of renderer IDs to webgl VAOs\n         *\n         * @protected\n         * @type {object}\n         */\n        protected glVertexArrayObjects: any;\n        /**\n         * Number of instances in this geometry, pass it to `GeometrySystem.draw()`\n         * @member {number} PIXI.Geometry#instanceCount\n         * @default 1\n         */\n        instanceCount: number;\n        /**\n         * Count of existing (not destroyed) meshes that reference this geometry\n         * @member {number} PIXI.Geometry#refCount\n         */\n        refCount: number;\n        /**\n         *\n         * Adds an attribute to the geometry\n         * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!\n         *\n         * @param {String} id - the name of the attribute (matching up to a shader)\n         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.\n         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n         * @param {Boolean} [normalized=false] - should the data be normalized.\n         * @param {Number} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available\n         * @param {Number} [stride] - How far apart (in floats) the start of each value is. (used for interleaving data)\n         * @param {Number} [start] - How far into the array to start reading values (used for interleaving data)\n         * @param {boolean} [instance=false] - Instancing flag\n         *\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        addAttribute(id: string, buffer?: PIXI.Buffer | number[], size?: number, normalized?: boolean, type?: number, stride?: number, start?: number, instance?: boolean): PIXI.Geometry;\n        /**\n         * returns the requested attribute\n         *\n         * @param {String} id - the name of the attribute required\n         * @return {PIXI.Attribute} the attribute requested.\n         */\n        getAttribute(id: string): PIXI.Attribute;\n        /**\n         * returns the requested buffer\n         *\n         * @param {String} id - the name of the buffer required\n         * @return {PIXI.Buffer} the buffer requested.\n         */\n        getBuffer(id: string): PIXI.Buffer;\n        /**\n         *\n         * Adds an index buffer to the geometry\n         * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.\n         *\n         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        addIndex(buffer?: PIXI.Buffer | number[]): PIXI.Geometry;\n        /**\n         * returns the index buffer\n         *\n         * @return {PIXI.Buffer} the index buffer.\n         */\n        getIndex(): PIXI.Buffer;\n        /**\n         * this function modifies the structure so that all current attributes become interleaved into a single buffer\n         * This can be useful if your model remains static as it offers a little performance boost\n         *\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        interleave(): PIXI.Geometry;\n        /**\n         * disposes WebGL resources that are connected to this geometry\n         */\n        dispose(): void;\n        /**\n         * Destroys the geometry.\n         */\n        destroy(): void;\n        /**\n         * returns a clone of the geometry\n         *\n         * @returns {PIXI.Geometry} a new clone of this geometry\n         */\n        clone(): PIXI.Geometry;\n    }\n    /**\n     * Slightly opinionated default shader for PixiJS 2D objects.\n     * @class\n     * @memberof PIXI\n     * @extends PIXI.Shader\n     */\n    class MeshMaterial extends PIXI.Shader {\n        constructor(uSampler: PIXI.Texture, options?: {\n            alpha?: number;\n            tint?: number;\n            pluginName?: string;\n            program?: PIXI.Program;\n            uniforms?: any;\n        });\n        /**\n         * TextureMatrix instance for this Mesh, used to track Texture changes\n         *\n         * @member {PIXI.TextureMatrix} PIXI.MeshMaterial#uvMatrix\n         * @readonly\n         */\n        readonly uvMatrix: PIXI.TextureMatrix;\n        /**\n         * `true` if shader can be batch with the renderer's batch system.\n         * @member {boolean} PIXI.MeshMaterial#batchable\n         * @default true\n         */\n        batchable: boolean;\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string} PIXI.MeshMaterial#pluginName\n         * @default 'batch'\n         */\n        pluginName: string;\n        /**\n         * Reference to the texture being rendered.\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * This gets automatically set by the object using this.\n         *\n         * @default 1\n         * @member {number}\n         */\n        alpha: number;\n        /**\n         * Multiply tint for the material.\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * Gets called automatically by the Mesh. Intended to be overridden for custom\n         * MeshMaterial objects.\n         */\n        update(): void;\n        /**\n         * Program that the shader uses\n         *\n         * @member {PIXI.Program} PIXI.Shader#program\n         */\n        program: PIXI.Program;\n        /**\n         * Shader uniform values, shortcut for `uniformGroup.uniforms`\n         * @readonly\n         * @member {object}\n         */\n        readonly uniforms: any;\n    }\n    /**\n     * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n     * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n     *\n     *```js\n     * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n     *  ```\n     * <pre>\n     *      A                          B\n     *    +---+----------------------+---+\n     *  C | 1 |          2           | 3 |\n     *    +---+----------------------+---+\n     *    |   |                      |   |\n     *    | 4 |          5           | 6 |\n     *    |   |                      |   |\n     *    +---+----------------------+---+\n     *  D | 7 |          8           | 9 |\n     *    +---+----------------------+---+\n    \n     *  When changing this objects width and/or height:\n     *     areas 1 3 7 and 9 will remain unscaled.\n     *     areas 2 and 8 will be stretched horizontally\n     *     areas 4 and 6 will be stretched vertically\n     *     area 5 will be stretched both horizontally and vertically\n     * </pre>\n     *\n     * @class\n     * @extends PIXI.SimplePlane\n     * @memberof PIXI\n     *\n     */\n    class NineSlicePlane extends PIXI.SimplePlane {\n        constructor(texture: PIXI.Texture, leftWidth?: number, topHeight?: number, rightWidth?: number, bottomHeight?: number);\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number} PIXI.NineSlicePlane#_width\n         * @override\n         */\n        _width: number;\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number} PIXI.NineSlicePlane#_height\n         * @override\n         */\n        _height: number;\n        /**\n         * Updates the horizontal vertices.\n         *\n         */\n        updateHorizontalVertices(): void;\n        /**\n         * Updates the vertical vertices.\n         *\n         */\n        updateVerticalVertices(): void;\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * The width of the left column\n         *\n         * @member {number}\n         */\n        leftWidth: number;\n        /**\n         * The width of the right column\n         *\n         * @member {number}\n         */\n        rightWidth: number;\n        /**\n         * The height of the top row\n         *\n         * @member {number}\n         */\n        topHeight: number;\n        /**\n         * The height of the bottom row\n         *\n         * @member {number}\n         */\n        bottomHeight: number;\n        /**\n         * Refreshes NineSlicePlane coords. All of them.\n         */\n        _refresh(): void;\n        /**\n         * Method used for overrides, to do something in case texture frame was changed.\n         * Meshes based on plane can override it and change more details based on texture.\n         */\n        textureUpdated(): void;\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry} PIXI.Mesh#geometry\n         * @readonly\n         */\n        readonly geometry: PIXI.Geometry;\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial} PIXI.Mesh#shader\n         */\n        shader: PIXI.Shader | PIXI.MeshMaterial;\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State} PIXI.Mesh#state\n         */\n        state: PIXI.State;\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number} PIXI.Mesh#drawMode\n         * @see PIXI.DRAW_MODES\n         */\n        drawMode: number;\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number} PIXI.Mesh#start\n         * @default 0\n         */\n        start: number;\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number} PIXI.Mesh#size\n         * @default 0\n         */\n        size: number;\n        /**\n         * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        readonly uvBuffer: PIXI.Buffer;\n        /**\n         * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n         * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        readonly verticesBuffer: PIXI.Buffer;\n        /**\n         * Alias for {@link PIXI.Mesh#shader}.\n         * @member {PIXI.MeshMaterial}\n         */\n        material: PIXI.MeshMaterial;\n        /**\n         * The blend mode to be applied to the Mesh. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        roundPixels: boolean;\n        /**\n         * The multiply tint applied to the Mesh. This is a hex value. A value of\n         * `0xFFFFFF` will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * The texture that the Mesh uses.\n         *\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * Standard renderer draw.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Standard non-batching way of rendering.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _renderDefault(renderer: PIXI.Renderer): void;\n        /**\n         * Rendering by using the Batch system.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _renderToBatch(renderer: PIXI.Renderer): void;\n        /**\n         * Updates vertexData field based on transform and vertices\n         */\n        calculateVertices(): void;\n        /**\n         * Updates uv field based on from geometry uv's or batchUvs\n         */\n        calculateUvs(): void;\n        /**\n         * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n         * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n         *\n         * @param {PIXI.IPointData} point - the point to test\n         * @return {boolean} the result of the test\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * Destroys the Mesh object.\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n         *  options have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have\n         *  their destroy method called as well. 'options' will be passed on to those calls.\n         */\n        destroy(options?: {\n            children?: boolean;\n        }): void;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Retrieves the local bounds of the displayObject as a rectangle object.\n         *\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,\n         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.DisplayObject#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n     * For more robust customization, use {@link PIXI.Mesh}.\n     *\n     * @class\n     * @extends PIXI.Mesh\n     * @memberof PIXI\n     */\n    class SimpleMesh extends PIXI.Mesh {\n        constructor(texture?: PIXI.Texture, vertices?: Float32Array, uvs?: Float32Array, indices?: Uint16Array, drawMode?: number);\n        /**\n         * upload vertices buffer each frame\n         * @member {boolean} PIXI.SimpleMesh#autoUpdate\n         */\n        autoUpdate: boolean;\n        /**\n         * Collection of vertices data.\n         * @member {Float32Array}\n         */\n        vertices: Float32Array;\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry} PIXI.Mesh#geometry\n         * @readonly\n         */\n        readonly geometry: PIXI.Geometry;\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial} PIXI.Mesh#shader\n         */\n        shader: PIXI.Shader | PIXI.MeshMaterial;\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State} PIXI.Mesh#state\n         */\n        state: PIXI.State;\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number} PIXI.Mesh#drawMode\n         * @see PIXI.DRAW_MODES\n         */\n        drawMode: number;\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number} PIXI.Mesh#start\n         * @default 0\n         */\n        start: number;\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number} PIXI.Mesh#size\n         * @default 0\n         */\n        size: number;\n        /**\n         * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        readonly uvBuffer: PIXI.Buffer;\n        /**\n         * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n         * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        readonly verticesBuffer: PIXI.Buffer;\n        /**\n         * Alias for {@link PIXI.Mesh#shader}.\n         * @member {PIXI.MeshMaterial}\n         */\n        material: PIXI.MeshMaterial;\n        /**\n         * The blend mode to be applied to the Mesh. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        roundPixels: boolean;\n        /**\n         * The multiply tint applied to the Mesh. This is a hex value. A value of\n         * `0xFFFFFF` will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * The texture that the Mesh uses.\n         *\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * Standard renderer draw.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Standard non-batching way of rendering.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _renderDefault(renderer: PIXI.Renderer): void;\n        /**\n         * Rendering by using the Batch system.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _renderToBatch(renderer: PIXI.Renderer): void;\n        /**\n         * Updates vertexData field based on transform and vertices\n         */\n        calculateVertices(): void;\n        /**\n         * Updates uv field based on from geometry uv's or batchUvs\n         */\n        calculateUvs(): void;\n        /**\n         * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n         * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n         *\n         * @param {PIXI.IPointData} point - the point to test\n         * @return {boolean} the result of the test\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * Destroys the Mesh object.\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n         *  options have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have\n         *  their destroy method called as well. 'options' will be passed on to those calls.\n         */\n        destroy(options?: {\n            children?: boolean;\n        }): void;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Retrieves the local bounds of the displayObject as a rectangle object.\n         *\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,\n         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * The width of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.DisplayObject#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n     *\n     *```js\n     * for (let i = 0; i < 20; i++) {\n     *     points.push(new PIXI.Point(i * 50, 0));\n     * };\n     * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n     *  ```\n     *\n     * @class\n     * @extends PIXI.Mesh\n     * @memberof PIXI\n     *\n     */\n    class SimplePlane extends PIXI.Mesh {\n        constructor(texture: PIXI.Texture, verticesX: number, verticesY: number);\n        /**\n         * Method used for overrides, to do something in case texture frame was changed.\n         * Meshes based on plane can override it and change more details based on texture.\n         */\n        textureUpdated(): void;\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry} PIXI.Mesh#geometry\n         * @readonly\n         */\n        readonly geometry: PIXI.Geometry;\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial} PIXI.Mesh#shader\n         */\n        shader: PIXI.Shader | PIXI.MeshMaterial;\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State} PIXI.Mesh#state\n         */\n        state: PIXI.State;\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number} PIXI.Mesh#drawMode\n         * @see PIXI.DRAW_MODES\n         */\n        drawMode: number;\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number} PIXI.Mesh#start\n         * @default 0\n         */\n        start: number;\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number} PIXI.Mesh#size\n         * @default 0\n         */\n        size: number;\n        /**\n         * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        readonly uvBuffer: PIXI.Buffer;\n        /**\n         * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n         * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        readonly verticesBuffer: PIXI.Buffer;\n        /**\n         * Alias for {@link PIXI.Mesh#shader}.\n         * @member {PIXI.MeshMaterial}\n         */\n        material: PIXI.MeshMaterial;\n        /**\n         * The blend mode to be applied to the Mesh. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        roundPixels: boolean;\n        /**\n         * The multiply tint applied to the Mesh. This is a hex value. A value of\n         * `0xFFFFFF` will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * The texture that the Mesh uses.\n         *\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * Standard renderer draw.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Standard non-batching way of rendering.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _renderDefault(renderer: PIXI.Renderer): void;\n        /**\n         * Rendering by using the Batch system.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _renderToBatch(renderer: PIXI.Renderer): void;\n        /**\n         * Updates vertexData field based on transform and vertices\n         */\n        calculateVertices(): void;\n        /**\n         * Updates uv field based on from geometry uv's or batchUvs\n         */\n        calculateUvs(): void;\n        /**\n         * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n         * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n         *\n         * @param {PIXI.IPointData} point - the point to test\n         * @return {boolean} the result of the test\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * Destroys the Mesh object.\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n         *  options have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have\n         *  their destroy method called as well. 'options' will be passed on to those calls.\n         */\n        destroy(options?: {\n            children?: boolean;\n        }): void;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Retrieves the local bounds of the displayObject as a rectangle object.\n         *\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,\n         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * The width of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.DisplayObject#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * The rope allows you to draw a texture across several points and then manipulate these points\n     *\n     *```js\n     * for (let i = 0; i < 20; i++) {\n     *     points.push(new PIXI.Point(i * 50, 0));\n     * };\n     * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n     *  ```\n     *\n     * @class\n     * @extends PIXI.Mesh\n     * @memberof PIXI\n     *\n     */\n    class SimpleRope extends PIXI.Mesh {\n        constructor(texture: PIXI.Texture, points: PIXI.Point[], textureScale?: number);\n        /**\n         * re-calculate vertices by rope points each frame\n         *\n         * @member {boolean} PIXI.SimpleRope#autoUpdate\n         */\n        autoUpdate: boolean;\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry} PIXI.Mesh#geometry\n         * @readonly\n         */\n        readonly geometry: PIXI.Geometry;\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial} PIXI.Mesh#shader\n         */\n        shader: PIXI.Shader | PIXI.MeshMaterial;\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State} PIXI.Mesh#state\n         */\n        state: PIXI.State;\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number} PIXI.Mesh#drawMode\n         * @see PIXI.DRAW_MODES\n         */\n        drawMode: number;\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number} PIXI.Mesh#start\n         * @default 0\n         */\n        start: number;\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number} PIXI.Mesh#size\n         * @default 0\n         */\n        size: number;\n        /**\n         * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        readonly uvBuffer: PIXI.Buffer;\n        /**\n         * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n         * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        readonly verticesBuffer: PIXI.Buffer;\n        /**\n         * Alias for {@link PIXI.Mesh#shader}.\n         * @member {PIXI.MeshMaterial}\n         */\n        material: PIXI.MeshMaterial;\n        /**\n         * The blend mode to be applied to the Mesh. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        roundPixels: boolean;\n        /**\n         * The multiply tint applied to the Mesh. This is a hex value. A value of\n         * `0xFFFFFF` will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * The texture that the Mesh uses.\n         *\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * Standard renderer draw.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Standard non-batching way of rendering.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _renderDefault(renderer: PIXI.Renderer): void;\n        /**\n         * Rendering by using the Batch system.\n         * @protected\n         * @param {PIXI.Renderer} renderer - Instance to renderer.\n         */\n        protected _renderToBatch(renderer: PIXI.Renderer): void;\n        /**\n         * Updates vertexData field based on transform and vertices\n         */\n        calculateVertices(): void;\n        /**\n         * Updates uv field based on from geometry uv's or batchUvs\n         */\n        calculateUvs(): void;\n        /**\n         * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n         * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n         *\n         * @param {PIXI.IPointData} point - the point to test\n         * @return {boolean} the result of the test\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * Destroys the Mesh object.\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n         *  options have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have\n         *  their destroy method called as well. 'options' will be passed on to those calls.\n         */\n        destroy(options?: {\n            children?: boolean;\n        }): void;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Retrieves the local bounds of the displayObject as a rectangle object.\n         *\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,\n         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * The width of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.DisplayObject#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n     *\n     * ```js\n     * for (let i = 0; i < 20; i++) {\n     *     points.push(new PIXI.Point(i * 50, 0));\n     * };\n     * const rope = new PIXI.RopeGeometry(100, points);\n     * ```\n     *\n     * @class\n     * @extends PIXI.MeshGeometry\n     * @memberof PIXI\n     *\n     */\n    class RopeGeometry extends PIXI.MeshGeometry {\n        constructor(width?: number, points?: PIXI.Point[], textureScale?: number);\n        /**\n         * An array of points that determine the rope\n         * @member {PIXI.Point[]} PIXI.RopeGeometry#points\n         */\n        points: PIXI.Point[];\n        /**\n         * The width (i.e., thickness) of the rope.\n         * @member {number} PIXI.RopeGeometry#_width\n         * @readOnly\n         */\n        readonly _width: number;\n        /**\n         * Rope texture scale, if zero then the rope texture is stretched.\n         * @member {number} PIXI.RopeGeometry#textureScale\n         * @readOnly\n         */\n        readonly textureScale: number;\n        /**\n         * The width (i.e., thickness) of the rope.\n         * @member {number}\n         * @readOnly\n         */\n        readonly width: number;\n        /**\n         * refreshes vertices of Rope mesh\n         */\n        updateVertices(): void;\n        /**\n         * A map of renderer IDs to webgl VAOs\n         *\n         * @protected\n         * @type {object}\n         */\n        protected glVertexArrayObjects: any;\n        /**\n         * Number of instances in this geometry, pass it to `GeometrySystem.draw()`\n         * @member {number} PIXI.Geometry#instanceCount\n         * @default 1\n         */\n        instanceCount: number;\n        /**\n         * Count of existing (not destroyed) meshes that reference this geometry\n         * @member {number} PIXI.Geometry#refCount\n         */\n        refCount: number;\n        /**\n         *\n         * Adds an attribute to the geometry\n         * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!\n         *\n         * @param {String} id - the name of the attribute (matching up to a shader)\n         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.\n         * @param {Number} [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n         * @param {Boolean} [normalized=false] - should the data be normalized.\n         * @param {Number} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available\n         * @param {Number} [stride] - How far apart (in floats) the start of each value is. (used for interleaving data)\n         * @param {Number} [start] - How far into the array to start reading values (used for interleaving data)\n         * @param {boolean} [instance=false] - Instancing flag\n         *\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        addAttribute(id: string, buffer?: PIXI.Buffer | number[], size?: number, normalized?: boolean, type?: number, stride?: number, start?: number, instance?: boolean): PIXI.Geometry;\n        /**\n         * returns the requested attribute\n         *\n         * @param {String} id - the name of the attribute required\n         * @return {PIXI.Attribute} the attribute requested.\n         */\n        getAttribute(id: string): PIXI.Attribute;\n        /**\n         * returns the requested buffer\n         *\n         * @param {String} id - the name of the buffer required\n         * @return {PIXI.Buffer} the buffer requested.\n         */\n        getBuffer(id: string): PIXI.Buffer;\n        /**\n         *\n         * Adds an index buffer to the geometry\n         * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.\n         *\n         * @param {PIXI.Buffer|number[]} [buffer] - the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        addIndex(buffer?: PIXI.Buffer | number[]): PIXI.Geometry;\n        /**\n         * returns the index buffer\n         *\n         * @return {PIXI.Buffer} the index buffer.\n         */\n        getIndex(): PIXI.Buffer;\n        /**\n         * this function modifies the structure so that all current attributes become interleaved into a single buffer\n         * This can be useful if your model remains static as it offers a little performance boost\n         *\n         * @return {PIXI.Geometry} returns self, useful for chaining.\n         */\n        interleave(): PIXI.Geometry;\n        /**\n         * disposes WebGL resources that are connected to this geometry\n         */\n        dispose(): void;\n        /**\n         * Destroys the geometry.\n         */\n        destroy(): void;\n        /**\n         * returns a clone of the geometry\n         *\n         * @returns {PIXI.Geometry} a new clone of this geometry\n         */\n        clone(): PIXI.Geometry;\n    }\n    /**\n     * The ParticleContainer class is a really fast version of the Container built solely for speed,\n     * so use when you need a lot of sprites or particles.\n     *\n     * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n     * ParticleContainer implements the basic object transform (position, scale, rotation)\n     * and some advanced functionality like tint (as of v4.5.6).\n     *\n     * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n     *\n     * It's extremely easy to use:\n     * ```js\n     * let container = new ParticleContainer();\n     *\n     * for (let i = 0; i < 100; ++i)\n     * {\n     *     let sprite = PIXI.Sprite.from(\"myImage.png\");\n     *     container.addChild(sprite);\n     * }\n     * ```\n     *\n     * And here you have a hundred sprites that will be rendered at the speed of light.\n     *\n     * @class\n     * @extends PIXI.Container\n     * @memberof PIXI\n     */\n    class ParticleContainer extends PIXI.Container {\n        constructor(maxSize?: number, properties?: {\n            vertices?: boolean;\n            position?: boolean;\n            rotation?: boolean;\n            uvs?: boolean;\n            tint?: boolean;\n        }, batchSize?: number, autoResize?: boolean);\n        /**\n         * @member {boolean} PIXI.ParticleContainer#interactiveChildren\n         *\n         */\n        interactiveChildren: boolean;\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n         * to reset the blend mode.\n         *\n         * @member {number} PIXI.ParticleContainer#blendMode\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * If true, container allocates more batches in case there are more than `maxSize` particles.\n         * @member {boolean} PIXI.ParticleContainer#autoResize\n         * @default false\n         */\n        autoResize: boolean;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * Default to true here as performance is usually the priority for particles.\n         *\n         * @member {boolean} PIXI.ParticleContainer#roundPixels\n         * @default true\n         */\n        roundPixels: boolean;\n        /**\n         * The texture used to render the children.\n         *\n         * @readonly\n         * @member {PIXI.BaseTexture} PIXI.ParticleContainer#baseTexture\n         */\n        readonly baseTexture: PIXI.BaseTexture;\n        /**\n         * Sets the private properties array to dynamic / static based on the passed properties object\n         *\n         * @param {object} properties - The properties to be uploaded\n         */\n        setProperties(properties: any): void;\n        /**\n         * The tint applied to the container. This is a hex value.\n         * A value of 0xFFFFFF will remove any tint effect.\n         ** IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * Destroys the container\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n         *  have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have their\n         *  destroy method called as well. 'options' will be passed on to those calls.\n         * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n         *  Should it destroy the texture of the child sprite\n         * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n         *  Should it destroy the base texture of the child sprite\n         */\n        destroy(options?: {\n            children?: boolean;\n            texture?: boolean;\n            baseTexture?: boolean;\n        }): void;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Retrieves the local bounds of the displayObject as a rectangle object.\n         *\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,\n         *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle, skipChildrenUpdate?: boolean): PIXI.Rectangle;\n        /**\n         * Recalculates the bounds of the object. Override this to\n         * calculate the bounds of the specific object (not including children).\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * To be overridden by the subclasses.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * The width of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.DisplayObject#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * Renderer for Particles that is designer for speed over feature set.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class ParticleRenderer {\n        constructor(renderer: PIXI.Renderer);\n        /**\n         * The default shader that is used if a sprite doesn't have a more specific one.\n         *\n         * @member {PIXI.Shader} PIXI.ParticleRenderer#shader\n         */\n        shader: PIXI.Shader;\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State} PIXI.ParticleRenderer#state\n         * @readonly\n         */\n        readonly state: PIXI.State;\n        /**\n         * Renders the particle container object.\n         *\n         * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n         */\n        render(container: PIXI.ParticleContainer): void;\n        /**\n         * Uploads the vertices.\n         *\n         * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n         * @param {number} startIndex - the index to start from in the children array\n         * @param {number} amount - the amount of children that will have their vertices uploaded\n         * @param {number[]} array - The vertices to upload.\n         * @param {number} stride - Stride to use for iteration.\n         * @param {number} offset - Offset to start at.\n         */\n        uploadVertices(children: PIXI.DisplayObject[], startIndex: number, amount: number, array: number[], stride: number, offset: number): void;\n        /**\n         * Uploads the position.\n         *\n         * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n         * @param {number} startIndex - the index to start from in the children array\n         * @param {number} amount - the amount of children that will have their positions uploaded\n         * @param {number[]} array - The vertices to upload.\n         * @param {number} stride - Stride to use for iteration.\n         * @param {number} offset - Offset to start at.\n         */\n        uploadPosition(children: PIXI.DisplayObject[], startIndex: number, amount: number, array: number[], stride: number, offset: number): void;\n        /**\n         * Uploads the rotation.\n         *\n         * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n         * @param {number} startIndex - the index to start from in the children array\n         * @param {number} amount - the amount of children that will have their rotation uploaded\n         * @param {number[]} array - The vertices to upload.\n         * @param {number} stride - Stride to use for iteration.\n         * @param {number} offset - Offset to start at.\n         */\n        uploadRotation(children: PIXI.DisplayObject[], startIndex: number, amount: number, array: number[], stride: number, offset: number): void;\n        /**\n         * Uploads the Uvs\n         *\n         * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n         * @param {number} startIndex - the index to start from in the children array\n         * @param {number} amount - the amount of children that will have their rotation uploaded\n         * @param {number[]} array - The vertices to upload.\n         * @param {number} stride - Stride to use for iteration.\n         * @param {number} offset - Offset to start at.\n         */\n        uploadUvs(children: PIXI.DisplayObject[], startIndex: number, amount: number, array: number[], stride: number, offset: number): void;\n        /**\n         * Uploads the tint.\n         *\n         * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n         * @param {number} startIndex - the index to start from in the children array\n         * @param {number} amount - the amount of children that will have their rotation uploaded\n         * @param {number[]} array - The vertices to upload.\n         * @param {number} stride - Stride to use for iteration.\n         * @param {number} offset - Offset to start at.\n         */\n        uploadTint(children: PIXI.DisplayObject[], startIndex: number, amount: number, array: number[], stride: number, offset: number): void;\n        /**\n         * Destroys the ParticleRenderer.\n         */\n        destroy(): void;\n    }\n    /**\n     * The prepare manager provides functionality to upload content to the GPU.\n     *\n     * BasePrepare handles basic queuing functionality and is extended by\n     * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n     * to provide preparation capabilities specific to their respective renderers.\n     *\n     * @example\n     * // Create a sprite\n     * const sprite = PIXI.Sprite.from('something.png');\n     *\n     * // Load object into GPU\n     * app.renderer.plugins.prepare.upload(sprite, () => {\n     *\n     *     //Texture(s) has been uploaded to GPU\n     *     app.stage.addChild(sprite);\n     *\n     * })\n     *\n     * @abstract\n     * @class\n     * @memberof PIXI\n     */\n    class BasePrepare {\n        constructor(renderer: PIXI.AbstractRenderer);\n        /**\n         * The limiter to be used to control how quickly items are prepared.\n         * @type {PIXI.CountLimiter|PIXI.TimeLimiter}\n         */\n        limiter: PIXI.CountLimiter | PIXI.TimeLimiter;\n        /**\n         * Reference to the renderer.\n         * @type {PIXI.AbstractRenderer}\n         * @protected\n         */\n        protected renderer: PIXI.AbstractRenderer;\n        /**\n         * The only real difference between CanvasPrepare and Prepare is what they pass\n         * to upload hooks. That different parameter is stored here.\n         * @type {object}\n         * @protected\n         */\n        protected uploadHookHelper: any;\n        /**\n         * Upload all the textures and graphics to the GPU.\n         *\n         * @param {Function|PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} item -\n         *        Either the container or display object to search for items to upload, the items to upload themselves,\n         *        or the callback function, if items have been added using `prepare.add`.\n         * @param {Function} [done] - Optional callback when all queued uploads have completed\n         */\n        upload(item: ((...params: any[]) => any) | PIXI.DisplayObject | PIXI.Container | PIXI.BaseTexture | PIXI.Texture | PIXI.Graphics | PIXI.Text, done?: (...params: any[]) => any): void;\n        /**\n         * Adds hooks for finding items.\n         *\n         * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n         *          function must return `true` if it was able to add item to the queue.\n         * @return {this} Instance of plugin for chaining.\n         */\n        registerFindHook(addHook: (...params: any[]) => any): this;\n        /**\n         * Adds hooks for uploading items.\n         *\n         * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n         *          function must return `true` if it was able to handle upload of item.\n         * @return {this} Instance of plugin for chaining.\n         */\n        registerUploadHook(uploadHook: (...params: any[]) => any): this;\n        /**\n         * Manually add an item to the uploading queue.\n         *\n         * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n         *        add to the queue\n         * @return {this} Instance of plugin for chaining.\n         */\n        add(item: PIXI.DisplayObject | PIXI.Container | PIXI.BaseTexture | PIXI.Texture | PIXI.Graphics | PIXI.Text | any): this;\n        /**\n         * Destroys the plugin, don't use after this.\n         *\n         */\n        destroy(): void;\n    }\n    /**\n     * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n     * number of items per frame.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class CountLimiter {\n        constructor(maxItemsPerFrame: number);\n        /**\n         * Resets any counting properties to start fresh on a new frame.\n         */\n        beginFrame(): void;\n        /**\n         * Checks to see if another item can be uploaded. This should only be called once per item.\n         * @return {boolean} If the item is allowed to be uploaded.\n         */\n        allowedToUpload(): boolean;\n    }\n    /**\n     * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n     * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n     *\n     * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n     * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n     * @example\n     * // Create a new application\n     * const app = new PIXI.Application();\n     * document.body.appendChild(app.view);\n     *\n     * // Don't start rendering right away\n     * app.stop();\n     *\n     * // create a display object\n     * const rect = new PIXI.Graphics()\n     *     .beginFill(0x00ff00)\n     *     .drawRect(40, 40, 200, 200);\n     *\n     * // Add to the stage\n     * app.stage.addChild(rect);\n     *\n     * // Don't start rendering until the graphic is uploaded to the GPU\n     * app.renderer.plugins.prepare.upload(app.stage, () => {\n     *     app.start();\n     * });\n     *\n     * @class\n     * @extends PIXI.BasePrepare\n     * @memberof PIXI\n     */\n    class Prepare extends PIXI.BasePrepare {\n        constructor(renderer: PIXI.Renderer);\n        /**\n         * The limiter to be used to control how quickly items are prepared.\n         * @type {PIXI.CountLimiter|PIXI.TimeLimiter}\n         */\n        limiter: PIXI.CountLimiter | PIXI.TimeLimiter;\n        /**\n         * Reference to the renderer.\n         * @type {PIXI.AbstractRenderer}\n         * @protected\n         */\n        protected renderer: PIXI.AbstractRenderer;\n        /**\n         * The only real difference between CanvasPrepare and Prepare is what they pass\n         * to upload hooks. That different parameter is stored here.\n         * @type {object}\n         * @protected\n         */\n        protected uploadHookHelper: any;\n        /**\n         * Upload all the textures and graphics to the GPU.\n         *\n         * @param {Function|PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} item -\n         *        Either the container or display object to search for items to upload, the items to upload themselves,\n         *        or the callback function, if items have been added using `prepare.add`.\n         * @param {Function} [done] - Optional callback when all queued uploads have completed\n         */\n        upload(item: ((...params: any[]) => any) | PIXI.DisplayObject | PIXI.Container | PIXI.BaseTexture | PIXI.Texture | PIXI.Graphics | PIXI.Text, done?: (...params: any[]) => any): void;\n        /**\n         * Adds hooks for finding items.\n         *\n         * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n         *          function must return `true` if it was able to add item to the queue.\n         * @return {this} Instance of plugin for chaining.\n         */\n        registerFindHook(addHook: (...params: any[]) => any): this;\n        /**\n         * Adds hooks for uploading items.\n         *\n         * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n         *          function must return `true` if it was able to handle upload of item.\n         * @return {this} Instance of plugin for chaining.\n         */\n        registerUploadHook(uploadHook: (...params: any[]) => any): this;\n        /**\n         * Manually add an item to the uploading queue.\n         *\n         * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n         *        add to the queue\n         * @return {this} Instance of plugin for chaining.\n         */\n        add(item: PIXI.DisplayObject | PIXI.Container | PIXI.BaseTexture | PIXI.Texture | PIXI.Graphics | PIXI.Text | any): this;\n        /**\n         * Destroys the plugin, don't use after this.\n         *\n         */\n        destroy(): void;\n    }\n    /**\n     * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n     * number of milliseconds per frame.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class TimeLimiter {\n        constructor(maxMilliseconds: number);\n        /**\n         * Resets any counting properties to start fresh on a new frame.\n         */\n        beginFrame(): void;\n        /**\n         * Checks to see if another item can be uploaded. This should only be called once per item.\n         * @return {boolean} If the item is allowed to be uploaded.\n         */\n        allowedToUpload(): boolean;\n    }\n    /**\n     * A Runner is a highly performant and simple alternative to signals. Best used in situations\n     * where events are dispatched to many objects at high frequency (say every frame!)\n     *\n     *\n     * like a signal..\n     * ```\n     * import { Runner } from '@pixi/runner';\n     *\n     * const myObject = {\n     *     loaded: new Runner('loaded')\n     * }\n     *\n     * const listener = {\n     *     loaded: function(){\n     *         // thin\n     *     }\n     * }\n     *\n     * myObject.update.add(listener);\n     *\n     * myObject.loaded.emit();\n     * ```\n     *\n     * Or for handling calling the same function on many items\n     * ```\n     * import { Runner } from '@pixi/runner';\n     *\n     * const myGame = {\n     *     update: new Runner('update')\n     * }\n     *\n     * const gameObject = {\n     *     update: function(time){\n     *         // update my gamey state\n     *     }\n     * }\n     *\n     * myGame.update.add(gameObject1);\n     *\n     * myGame.update.emit(time);\n     * ```\n     * @class\n     * @memberof PIXI\n     */\n    class Runner {\n        constructor(name: string);\n        /**\n         * Dispatch/Broadcast Runner to all listeners added to the queue.\n         * @param {...any} params - optional parameters to pass to each listener\n         * @return {PIXI.Runner}\n         */\n        emit(...params: any[]): PIXI.Runner;\n        /**\n         * Add a listener to the Runner\n         *\n         * Runners do not need to have scope or functions passed to them.\n         * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n         * as the name provided to the Runner when it was created.\n         *\n         * Eg A listener passed to this Runner will require a 'complete' function.\n         *\n         * ```\n         * import { Runner } from '@pixi/runner';\n         *\n         * const complete = new Runner('complete');\n         * ```\n         *\n         * The scope used will be the object itself.\n         *\n         * @param {any} item - The object that will be listening.\n         * @return {PIXI.Runner}\n         */\n        add(item: any): PIXI.Runner;\n        /**\n         * Remove a single listener from the dispatch queue.\n         * @param {any} item - The listenr that you would like to remove.\n         * @return {PIXI.Runner}\n         */\n        remove(item: any): PIXI.Runner;\n        /**\n         * Check to see if the listener is already in the Runner\n         * @param {any} item - The listener that you would like to check.\n         */\n        contains(item: any): void;\n        /**\n         * Remove all listeners from the Runner\n         * @return {PIXI.Runner}\n         */\n        removeAll(): PIXI.Runner;\n        /**\n         * Remove all references, don't use after this.\n         */\n        destroy(): void;\n        /**\n         * `true` if there are no this Runner contains no listeners\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly empty: boolean;\n        /**\n         * The name of the runner.\n         *\n         * @member {string}\n         * @readonly\n         */\n        readonly name: string;\n        /**\n         * Alias for `emit`\n         * @memberof PIXI.Runner#\n         * @method dispatch\n         * @see PIXI.Runner#emit\n         */\n        dispatch(): void;\n        /**\n         * Alias for `emit`\n         * @memberof PIXI.Runner#\n         * @method run\n         * @see PIXI.Runner#emit\n         */\n        run(): void;\n    }\n    /**\n     * User's customizable globals for overriding the default PIXI settings, such\n     * as a renderer's default resolution, framerate, float precision, etc.\n     * @example\n     * // Use the native window resolution as the default resolution\n     * // will support high-density displays when rendering\n     * PIXI.settings.RESOLUTION = window.devicePixelRatio;\n     *\n     * // Disable interpolation when scaling, will make texture be pixelated\n     * PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n     * @namespace PIXI.settings\n     */\n    namespace settings {\n        /**\n         * The maximum support for using WebGL. If a device does not\n         * support WebGL version, for instance WebGL 2, it will still\n         * attempt to fallback support to WebGL 1. If you want to\n         * explicitly remove feature support to target a more stable\n         * baseline, prefer a lower environment.\n         *\n         * Due to {@link https://bugs.chromium.org/p/chromium/issues/detail?id=934823|bug in chromium}\n         * we disable webgl2 by default for all non-apple mobile devices.\n         *\n         * @static\n         * @name PREFER_ENV\n         * @memberof PIXI.settings\n         * @type {number}\n         * @default PIXI.ENV.WEBGL2\n         */\n        var PREFER_ENV: number;\n        /**\n         * If set to `true`, *only* Textures and BaseTexture objects stored\n         * in the caches ({@link PIXI.utils.TextureCache TextureCache} and\n         * {@link PIXI.utils.BaseTextureCache BaseTextureCache}) can be\n         * used when calling {@link PIXI.Texture.from Texture.from} or\n         * {@link PIXI.BaseTexture.from BaseTexture.from}.\n         * Otherwise, these `from` calls throw an exception. Using this property\n         * can be useful if you want to enforce preloading all assets with\n         * {@link PIXI.Loader Loader}.\n         *\n         * @static\n         * @name STRICT_TEXTURE_CACHE\n         * @memberof PIXI.settings\n         * @type {boolean}\n         * @default false\n         */\n        var STRICT_TEXTURE_CACHE: boolean;\n        /**\n         * Sets the default value for the container property 'sortableChildren'.\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @static\n         * @constant\n         * @name SORTABLE_CHILDREN\n         * @memberof PIXI.settings\n         * @type {boolean}\n         * @default false\n         */\n        var SORTABLE_CHILDREN: boolean;\n        /**\n         * Default number of uploads per frame using prepare plugin.\n         *\n         * @static\n         * @memberof PIXI.settings\n         * @name UPLOADS_PER_FRAME\n         * @type {number}\n         * @default 4\n         */\n        var UPLOADS_PER_FRAME: number;\n        /**\n         * If set to true WebGL will attempt make textures mimpaped by default.\n         * Mipmapping will only succeed if the base texture uploaded has power of two dimensions.\n         *\n         * @static\n         * @name MIPMAP_TEXTURES\n         * @memberof PIXI.settings\n         * @type {PIXI.MIPMAP_MODES}\n         * @default PIXI.MIPMAP_MODES.POW2\n         */\n        var MIPMAP_TEXTURES: PIXI.MIPMAP_MODES;\n        /**\n         * Default anisotropic filtering level of textures.\n         * Usually from 0 to 16\n         *\n         * @static\n         * @name ANISOTROPIC_LEVEL\n         * @memberof PIXI.settings\n         * @type {number}\n         * @default 0\n         */\n        var ANISOTROPIC_LEVEL: number;\n        /**\n         * Default resolution / device pixel ratio of the renderer.\n         *\n         * @static\n         * @name RESOLUTION\n         * @memberof PIXI.settings\n         * @type {number}\n         * @default 1\n         */\n        var RESOLUTION: number;\n        /**\n         * Default filter resolution.\n         *\n         * @static\n         * @name FILTER_RESOLUTION\n         * @memberof PIXI.settings\n         * @type {number}\n         * @default 1\n         */\n        var FILTER_RESOLUTION: number;\n        /**\n         * The maximum textures that this device supports.\n         *\n         * @static\n         * @name SPRITE_MAX_TEXTURES\n         * @memberof PIXI.settings\n         * @type {number}\n         * @default 32\n         */\n        var SPRITE_MAX_TEXTURES: number;\n        /**\n         * The default sprite batch size.\n         *\n         * The default aims to balance desktop and mobile devices.\n         *\n         * @static\n         * @name SPRITE_BATCH_SIZE\n         * @memberof PIXI.settings\n         * @type {number}\n         * @default 4096\n         */\n        var SPRITE_BATCH_SIZE: number;\n        /**\n         * The default render options if none are supplied to {@link PIXI.Renderer}\n         * or {@link PIXI.CanvasRenderer}.\n         *\n         * @static\n         * @name RENDER_OPTIONS\n         * @memberof PIXI.settings\n         * @type {object}\n         * @property {HTMLCanvasElement} view=null\n         * @property {number} resolution=1\n         * @property {boolean} antialias=false\n         * @property {boolean} autoDensity=false\n         * @property {boolean} transparent=false\n         * @property {number} backgroundColor=0x000000\n         * @property {boolean} clearBeforeRender=true\n         * @property {boolean} preserveDrawingBuffer=false\n         * @property {number} width=800\n         * @property {number} height=600\n         * @property {boolean} legacy=false\n         */\n        var RENDER_OPTIONS: {\n            view: HTMLCanvasElement;\n            resolution: number;\n            antialias: boolean;\n            autoDensity: boolean;\n            transparent: boolean;\n            backgroundColor: number;\n            clearBeforeRender: boolean;\n            preserveDrawingBuffer: boolean;\n            width: number;\n            height: number;\n            legacy: boolean;\n        };\n        /**\n         * Default Garbage Collection mode.\n         *\n         * @static\n         * @name GC_MODE\n         * @memberof PIXI.settings\n         * @type {PIXI.GC_MODES}\n         * @default PIXI.GC_MODES.AUTO\n         */\n        var GC_MODE: PIXI.GC_MODES;\n        /**\n         * Default Garbage Collection max idle.\n         *\n         * @static\n         * @name GC_MAX_IDLE\n         * @memberof PIXI.settings\n         * @type {number}\n         * @default 3600\n         */\n        var GC_MAX_IDLE: number;\n        /**\n         * Default Garbage Collection maximum check count.\n         *\n         * @static\n         * @name GC_MAX_CHECK_COUNT\n         * @memberof PIXI.settings\n         * @type {number}\n         * @default 600\n         */\n        var GC_MAX_CHECK_COUNT: number;\n        /**\n         * Default wrap modes that are supported by pixi.\n         *\n         * @static\n         * @name WRAP_MODE\n         * @memberof PIXI.settings\n         * @type {PIXI.WRAP_MODES}\n         * @default PIXI.WRAP_MODES.CLAMP\n         */\n        var WRAP_MODE: PIXI.WRAP_MODES;\n        /**\n         * Default scale mode for textures.\n         *\n         * @static\n         * @name SCALE_MODE\n         * @memberof PIXI.settings\n         * @type {PIXI.SCALE_MODES}\n         * @default PIXI.SCALE_MODES.LINEAR\n         */\n        var SCALE_MODE: PIXI.SCALE_MODES;\n        /**\n         * Default specify float precision in vertex shader.\n         *\n         * @static\n         * @name PRECISION_VERTEX\n         * @memberof PIXI.settings\n         * @type {PIXI.PRECISION}\n         * @default PIXI.PRECISION.HIGH\n         */\n        var PRECISION_VERTEX: PIXI.PRECISION;\n        /**\n         * Default specify float precision in fragment shader.\n         * iOS is best set at highp due to https://github.com/pixijs/pixi.js/issues/3742\n         *\n         * @static\n         * @name PRECISION_FRAGMENT\n         * @memberof PIXI.settings\n         * @type {PIXI.PRECISION}\n         * @default PIXI.PRECISION.MEDIUM\n         */\n        var PRECISION_FRAGMENT: PIXI.PRECISION;\n        /**\n         * Can we upload the same buffer in a single frame?\n         *\n         * @static\n         * @name CAN_UPLOAD_SAME_BUFFER\n         * @memberof PIXI.settings\n         * @type {boolean}\n         */\n        var CAN_UPLOAD_SAME_BUFFER: boolean;\n        /**\n         * Enables bitmap creation before image load. This feature is experimental.\n         *\n         * @static\n         * @name CREATE_IMAGE_BITMAP\n         * @memberof PIXI.settings\n         * @type {boolean}\n         * @default false\n         */\n        var CREATE_IMAGE_BITMAP: boolean;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         *\n         * @static\n         * @constant\n         * @memberof PIXI.settings\n         * @type {boolean}\n         * @default false\n         */\n        var ROUND_PIXELS: boolean;\n        /**\n         * Target frames per millisecond.\n         *\n         * @static\n         * @name TARGET_FPMS\n         * @memberof PIXI.settings\n         * @type {number}\n         * @default 0.06\n         */\n        var TARGET_FPMS: number;\n        /**\n         * The prefix that denotes a URL is for a retina asset.\n         *\n         * @static\n         * @name RETINA_PREFIX\n         * @memberof PIXI.settings\n         * @type {RegExp}\n         * @default /@([0-9\\.]+)x/\n         * @example `@2x`\n         */\n        var RETINA_PREFIX: RegExp;\n        /**\n         * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported` function.\n         * For most scenarios this should be left as true, as otherwise the user may have a poor experience.\n         * However, it can be useful to disable under certain scenarios, such as headless unit tests.\n         *\n         * @static\n         * @name FAIL_IF_MAJOR_PERFORMANCE_CAVEAT\n         * @memberof PIXI.settings\n         * @type {boolean}\n         * @default true\n         */\n        var FAIL_IF_MAJOR_PERFORMANCE_CAVEAT: boolean;\n    }\n    /**\n     * The Sprite object is the base for all textured objects that are rendered to the screen\n    *\n     * A sprite can be created directly from an image like this:\n     *\n     * ```js\n     * let sprite = PIXI.Sprite.from('assets/image.png');\n     * ```\n     *\n     * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n     * as swapping base textures when rendering to the screen is inefficient.\n     *\n     * ```js\n     * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n     *\n     * function setup() {\n     *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n     *   let sprite = new PIXI.Sprite(sheet.textures[\"image.png\"]);\n     *   ...\n     * }\n     * ```\n     *\n     * @class\n     * @extends PIXI.Container\n     * @memberof PIXI\n     */\n    class Sprite extends PIXI.Container {\n        constructor(texture?: PIXI.Texture);\n        /**\n         * The width of the sprite (this is initially set by the texture)\n         *\n         * @protected\n         * @member {number} PIXI.Sprite#_width\n         */\n        protected _width: number;\n        /**\n         * The height of the sprite (this is initially set by the texture)\n         *\n         * @protected\n         * @member {number} PIXI.Sprite#_height\n         */\n        protected _height: number;\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number} PIXI.Sprite#blendMode\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * Cached tint value so we can tell when the tint is changed.\n         * Value is used for 2d CanvasRenderer.\n         *\n         * @protected\n         * @member {number} PIXI.Sprite#_cachedTint\n         * @default 0xFFFFFF\n         */\n        protected _cachedTint: number;\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n         *\n         * @member {string} PIXI.Sprite#pluginName\n         * @default 'batch'\n         */\n        pluginName: string;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.Sprite#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * When the texture is updated, this event will fire to update the scale and frame\n         *\n         * @protected\n         */\n        protected _onTextureUpdate(): void;\n        /**\n         * calculates worldTransform * vertices, store it in vertexData\n         */\n        calculateVertices(): void;\n        /**\n         * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n         * This is used to ensure that the true width and height of a trimmed texture is respected\n         */\n        calculateTrimmedVertices(): void;\n        /**\n         *\n         * Renders the object using the WebGL renderer\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The webgl renderer to use.\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Updates the bounds of the sprite.\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Gets the local bounds of the sprite object.\n         *\n         * @param {PIXI.Rectangle} [rect] - The output rectangle.\n         * @return {PIXI.Rectangle} The bounds.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Tests if a point is inside this sprite\n         *\n         * @param {PIXI.IPointData} point - the point to test\n         * @return {boolean} the result of the test\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * Destroys this sprite and optionally its texture and children\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n         *  have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n         *      method called as well. 'options' will be passed on to those calls.\n         * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n         * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n         */\n        destroy(options?: {\n            children?: boolean;\n            texture?: boolean;\n            baseTexture?: boolean;\n        }): void;\n        /**\n         * Helper function that creates a new sprite based on the source you provide.\n         * The source can be - frame id, image url, video url, canvas element, video element, base texture\n         *\n         * @static\n         * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n         * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n         * @return {PIXI.Sprite} The newly created sprite\n         */\n        static from(source: string | PIXI.Texture | HTMLCanvasElement | HTMLVideoElement, options?: any): PIXI.Sprite;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        roundPixels: boolean;\n        /**\n         * The width of the sprite, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the sprite, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n         * and passed to the constructor.\n         *\n         * The default is `(0,0)`, this means the sprite's origin is the top left.\n         *\n         * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n         *\n         * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n         *\n         * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        anchor: PIXI.ObservablePoint;\n        /**\n         * The tint applied to the sprite. This is a hex value.\n         * A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * The texture that the sprite is using\n         *\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    module AnimatedSprite {\n        /**\n         * @memberof PIXI.AnimatedSprite\n         * @typedef {object} FrameObject\n         * @type {object}\n         * @property {PIXI.Texture} texture - The {@link PIXI.Texture} of the frame\n         * @property {number} time - the duration of the frame in ms\n         */\n        type FrameObject = {\n            texture: PIXI.Texture;\n            time: number;\n        };\n    }\n    /**\n     * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n     *\n     * ```js\n     * let alienImages = [\"image_sequence_01.png\",\"image_sequence_02.png\",\"image_sequence_03.png\",\"image_sequence_04.png\"];\n     * let textureArray = [];\n     *\n     * for (let i=0; i < 4; i++)\n     * {\n     *      let texture = PIXI.Texture.from(alienImages[i]);\n     *      textureArray.push(texture);\n     * };\n     *\n     * let animatedSprite = new PIXI.AnimatedSprite(textureArray);\n     * ```\n     *\n     * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\n     * containing the animation definitions:\n     *\n     * ```js\n     * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n     *\n     * function setup() {\n     *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n     *   animatedSprite = new PIXI.AnimatedSprite(sheet.animations[\"image_sequence\"]);\n     *   ...\n     * }\n     * ```\n     *\n     * @class\n     * @extends PIXI.Sprite\n     * @memberof PIXI\n     */\n    class AnimatedSprite extends PIXI.Sprite {\n        constructor(textures: PIXI.Texture[] | PIXI.AnimatedSprite.FrameObject[], autoUpdate?: boolean);\n        /**\n         * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower.\n         *\n         * @member {number} PIXI.AnimatedSprite#animationSpeed\n         * @default 1\n         */\n        animationSpeed: number;\n        /**\n         * Whether or not the animate sprite repeats after playing.\n         *\n         * @member {boolean} PIXI.AnimatedSprite#loop\n         * @default true\n         */\n        loop: boolean;\n        /**\n         * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.\n         *\n         * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\n         * Changing anchor for each frame allows to pin sprite origin to certain moving feature\n         * of the frame (e.g. left foot).\n         *\n         * Note: Enabling this will override any previously set `anchor` on each frame change.\n         *\n         * @member {boolean} PIXI.AnimatedSprite#updateAnchor\n         * @default false\n         */\n        updateAnchor: boolean;\n        /**\n         * User-assigned function to call when an AnimatedSprite finishes playing.\n         *\n         * @example\n         * animation.onComplete = function () {\n         *   // finished!\n         * };\n         * @member {Function} PIXI.AnimatedSprite#onComplete\n         */\n        onComplete: (...params: any[]) => any;\n        /**\n         * User-assigned function to call when an AnimatedSprite changes which texture is being rendered.\n         *\n         * @example\n         * animation.onFrameChange = function () {\n         *   // updated!\n         * };\n         * @member {Function} PIXI.AnimatedSprite#onFrameChange\n         */\n        onFrameChange: (...params: any[]) => any;\n        /**\n         * User-assigned function to call when `loop` is true, and an AnimatedSprite is played and\n         * loops around to start again.\n         *\n         * @example\n         * animation.onLoop = function () {\n         *   // looped!\n         * };\n         * @member {Function} PIXI.AnimatedSprite#onLoop\n         */\n        onLoop: (...params: any[]) => any;\n        /**\n         * Stops the AnimatedSprite.\n         *\n         */\n        stop(): void;\n        /**\n         * Plays the AnimatedSprite.\n         *\n         */\n        play(): void;\n        /**\n         * Stops the AnimatedSprite and goes to a specific frame.\n         *\n         * @param {number} frameNumber - Frame index to stop at.\n         */\n        gotoAndStop(frameNumber: number): void;\n        /**\n         * Goes to a specific frame and begins playing the AnimatedSprite.\n         *\n         * @param {number} frameNumber - Frame index to start at.\n         */\n        gotoAndPlay(frameNumber: number): void;\n        /**\n         * Updates the object transform for rendering.\n         *\n         * @param {number} deltaTime - Time since last tick.\n         */\n        update(deltaTime: number): void;\n        /**\n         * Stops the AnimatedSprite and destroys it.\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n         *  have been set to that value.\n         * @param {boolean} [options.children=false] - If set to true, all the children will have their destroy\n         *      method called as well. 'options' will be passed on to those calls.\n         * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well.\n         * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well.\n         */\n        destroy(options?: {\n            children?: boolean;\n            texture?: boolean;\n            baseTexture?: boolean;\n        }): void;\n        /**\n         * A short hand way of creating an AnimatedSprite from an array of frame ids.\n         *\n         * @static\n         * @param {string[]} frames - The array of frames ids the AnimatedSprite will use as its texture frames.\n         * @return {PIXI.AnimatedSprite} The new animated sprite with the specified frames.\n         */\n        static fromFrames(frames: string[]): PIXI.AnimatedSprite;\n        /**\n         * A short hand way of creating an AnimatedSprite from an array of image ids.\n         *\n         * @static\n         * @param {string[]} images - The array of image urls the AnimatedSprite will use as its texture frames.\n         * @return {PIXI.AnimatedSprite} The new animate sprite with the specified images as frames.\n         */\n        static fromImages(images: string[]): PIXI.AnimatedSprite;\n        /**\n         * The total number of frames in the AnimatedSprite. This is the same as number of textures\n         * assigned to the AnimatedSprite.\n         *\n         * @readonly\n         * @member {number}\n         * @default 0\n         */\n        readonly totalFrames: number;\n        /**\n         * The array of textures used for this AnimatedSprite.\n         *\n         * @member {PIXI.Texture[]}\n         */\n        textures: PIXI.Texture[];\n        /**\n         * The AnimatedSprites current frame index.\n         *\n         * @member {number}\n         * @readonly\n         */\n        readonly currentFrame: number;\n        /**\n         * Indicates if the AnimatedSprite is currently playing.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly playing: boolean;\n        /**\n         * Whether to use PIXI.Ticker.shared to auto update animation time\n         *\n         * @member {boolean}\n         */\n        autoUpdate: boolean;\n        /**\n         * The width of the sprite (this is initially set by the texture)\n         *\n         * @protected\n         * @member {number} PIXI.Sprite#_width\n         */\n        protected _width: number;\n        /**\n         * The height of the sprite (this is initially set by the texture)\n         *\n         * @protected\n         * @member {number} PIXI.Sprite#_height\n         */\n        protected _height: number;\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number} PIXI.Sprite#blendMode\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * Cached tint value so we can tell when the tint is changed.\n         * Value is used for 2d CanvasRenderer.\n         *\n         * @protected\n         * @member {number} PIXI.Sprite#_cachedTint\n         * @default 0xFFFFFF\n         */\n        protected _cachedTint: number;\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n         *\n         * @member {string} PIXI.Sprite#pluginName\n         * @default 'batch'\n         */\n        pluginName: string;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.Sprite#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * When the texture is updated, this event will fire to update the scale and frame\n         *\n         * @protected\n         */\n        protected _onTextureUpdate(): void;\n        /**\n         * calculates worldTransform * vertices, store it in vertexData\n         */\n        calculateVertices(): void;\n        /**\n         * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n         * This is used to ensure that the true width and height of a trimmed texture is respected\n         */\n        calculateTrimmedVertices(): void;\n        /**\n         *\n         * Renders the object using the WebGL renderer\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The webgl renderer to use.\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Updates the bounds of the sprite.\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Gets the local bounds of the sprite object.\n         *\n         * @param {PIXI.Rectangle} [rect] - The output rectangle.\n         * @return {PIXI.Rectangle} The bounds.\n         */\n        getLocalBounds(rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Tests if a point is inside this sprite\n         *\n         * @param {PIXI.IPointData} point - the point to test\n         * @return {boolean} the result of the test\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        roundPixels: boolean;\n        /**\n         * The width of the sprite, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the sprite, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n         * and passed to the constructor.\n         *\n         * The default is `(0,0)`, this means the sprite's origin is the top left.\n         *\n         * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n         *\n         * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n         *\n         * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        anchor: PIXI.ObservablePoint;\n        /**\n         * The tint applied to the sprite. This is a hex value.\n         * A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * The texture that the sprite is using\n         *\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * A tiling sprite is a fast way of rendering a tiling image\n     *\n     * @class\n     * @extends PIXI.Sprite\n     * @memberof PIXI\n     */\n    class TilingSprite extends PIXI.Sprite {\n        static from(source: number | string | PIXI.Texture | HTMLCanvasElement | HTMLVideoElement, options?: any): PIXI.Sprite;\n        static fromFrame(): PIXI.Sprite;\n        static fromImage(): PIXI.Sprite;\n        constructor(texture: PIXI.Texture, width?: number, height?: number);\n        /**\n         * Tile transform\n         *\n         * @member {PIXI.Transform} PIXI.TilingSprite#tileTransform\n         */\n        tileTransform: PIXI.Transform;\n        /**\n         * matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space\n         *\n         * @member {PIXI.TextureMatrix} PIXI.TilingSprite#uvMatrix\n         */\n        uvMatrix: PIXI.TextureMatrix;\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' method.\n         *\n         * @member {string} PIXI.TilingSprite#pluginName\n         * @default 'tilingSprite'\n         */\n        pluginName: string;\n        /**\n         * Whether or not anchor affects uvs\n         *\n         * @member {boolean} PIXI.TilingSprite#uvRespectAnchor\n         * @default false\n         */\n        uvRespectAnchor: boolean;\n        /**\n         * Changes frame clamping in corresponding textureTransform, shortcut\n         * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n         *\n         * @default 0.5\n         * @member {number}\n         */\n        clampMargin: number;\n        /**\n         * The scaling of the image that is being tiled\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        tileScale: PIXI.ObservablePoint;\n        /**\n         * The offset of the image that is being tiled\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        tilePosition: PIXI.ObservablePoint;\n        /**\n         * @protected\n         */\n        protected _onTextureUpdate(): void;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Updates the bounds of the tiling sprite.\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Gets the local bounds of the sprite object.\n         *\n         * @param {PIXI.Rectangle} rect - The output rectangle.\n         * @return {PIXI.Rectangle} The bounds.\n         */\n        getLocalBounds(rect: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Checks if a point is inside this tiling sprite.\n         *\n         * @param {PIXI.IPointData} point - the point to check\n         * @return {boolean} Whether or not the sprite contains the point.\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * Destroys this sprite and optionally its texture and children\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n         *  have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n         *      method called as well. 'options' will be passed on to those calls.\n         * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n         * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n         */\n        destroy(options?: {\n            children?: boolean;\n            texture?: boolean;\n            baseTexture?: boolean;\n        }): void;\n        /**\n         * Helper function that creates a new tiling sprite based on the source you provide.\n         * The source can be - frame id, image url, video url, canvas element, video element, base texture\n         *\n         * @static\n         * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n         * @param {Object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n         * @param {number} options.width - required width of the tiling sprite\n         * @param {number} options.height - required height of the tiling sprite\n         * @return {PIXI.TilingSprite} The newly created texture\n         */\n        static from(source: string | PIXI.Texture | HTMLCanvasElement | HTMLVideoElement, options: {\n            width: number;\n            height: number;\n        }): PIXI.TilingSprite;\n        /**\n         * The width of the sprite, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the TilingSprite, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number} PIXI.Sprite#blendMode\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * Cached tint value so we can tell when the tint is changed.\n         * Value is used for 2d CanvasRenderer.\n         *\n         * @protected\n         * @member {number} PIXI.Sprite#_cachedTint\n         * @default 0xFFFFFF\n         */\n        protected _cachedTint: number;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.Sprite#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * calculates worldTransform * vertices, store it in vertexData\n         */\n        calculateVertices(): void;\n        /**\n         * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n         * This is used to ensure that the true width and height of a trimmed texture is respected\n         */\n        calculateTrimmedVertices(): void;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        roundPixels: boolean;\n        /**\n         * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n         * and passed to the constructor.\n         *\n         * The default is `(0,0)`, this means the sprite's origin is the top left.\n         *\n         * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n         *\n         * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n         *\n         * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        anchor: PIXI.ObservablePoint;\n        /**\n         * The tint applied to the sprite. This is a hex value.\n         * A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * The texture that the sprite is using\n         *\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * WebGL renderer plugin for tiling sprites\n     *\n     * @class\n     * @memberof PIXI\n     * @extends PIXI.ObjectRenderer\n     */\n    class TilingSpriteRenderer extends PIXI.ObjectRenderer {\n        constructor(renderer: PIXI.Renderer);\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State} PIXI.TilingSpriteRenderer#state\n         * @readonly\n         */\n        readonly state: PIXI.State;\n        /**\n         *\n         * @param {PIXI.TilingSprite} ts - tilingSprite to be rendered\n         */\n        render(ts: PIXI.TilingSprite): void;\n        /**\n         * The renderer this manager works for.\n         *\n         * @member {PIXI.Renderer} PIXI.ObjectRenderer#renderer\n         */\n        renderer: PIXI.Renderer;\n        /**\n         * Stub method that should be used to empty the current\n         * batch by rendering objects now.\n         */\n        flush(): void;\n        /**\n         * Generic destruction method that frees all resources. This\n         * should be called by subclasses.\n         */\n        destroy(): void;\n        /**\n         * Stub method that initializes any state required before\n         * rendering starts. It is different from the `prerender`\n         * signal, which occurs every frame, in that it is called\n         * whenever an object requests _this_ renderer specifically.\n         */\n        start(): void;\n        /**\n         * Stops the renderer. It should free up any state and\n         * become dormant.\n         */\n        stop(): void;\n    }\n    /**\n     * Utility class for maintaining reference to a collection\n     * of Textures on a single Spritesheet.\n     *\n     * To access a sprite sheet from your code pass its JSON data file to Pixi's loader:\n     *\n     * ```js\n     * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n     *\n     * function setup() {\n     *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n     *   ...\n     * }\n     * ```\n     * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n     *\n     * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n     * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n     * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n     * supported by TexturePacker.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Spritesheet {\n        constructor(baseTexture: PIXI.BaseTexture | PIXI.Texture, data: any, resolutionFilename?: string);\n        /**\n         * Reference to ths source texture.\n         * @type {PIXI.BaseTexture}\n         */\n        baseTexture: PIXI.BaseTexture;\n        /**\n         * A map containing all textures of the sprite sheet.\n         * Can be used to create a {@link PIXI.Sprite|Sprite}:\n         * ```js\n         * new PIXI.Sprite(sheet.textures[\"image.png\"]);\n         * ```\n         * @member {Object} PIXI.Spritesheet#textures\n         */\n        textures: any;\n        /**\n         * A map containing the textures for each animation.\n         * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n         * ```js\n         * new PIXI.AnimatedSprite(sheet.animations[\"anim_name\"])\n         * ```\n         * @member {Object} PIXI.Spritesheet#animations\n         */\n        animations: any;\n        /**\n         * Reference to the original JSON data.\n         * @type {Object}\n         */\n        data: any;\n        /**\n         * The resolution of the spritesheet.\n         * @type {number}\n         */\n        resolution: number;\n        /**\n         * Parser spritesheet from loaded data. This is done asynchronously\n         * to prevent creating too many Texture within a single process.\n         *\n         * @param {Function} callback - Callback when complete returns\n         *        a map of the Textures for this spritesheet.\n         */\n        parse(callback: (...params: any[]) => any): void;\n        /**\n         * Destroy Spritesheet and don't use after this.\n         *\n         * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n         */\n        destroy(destroyBase?: boolean): void;\n        /**\n         * The maximum number of Textures to build per process.\n         *\n         * @type {number}\n         * @default 1000\n         */\n        static BATCH_SIZE: number;\n    }\n    interface SpritesheetLoader extends PIXI.ILoaderPlugin {\n    }\n    /**\n     * {@link PIXI.Loader Loader} middleware for loading texture atlases that have been created with\n     * TexturePacker or similar JSON-based spritesheet.\n     *\n     * This middleware automatically generates Texture resources.\n     *\n     * @class\n     * @memberof PIXI\n     * @implements PIXI.ILoaderPlugin\n     */\n    class SpritesheetLoader implements PIXI.ILoaderPlugin {\n        /**\n         * Called after a resource is loaded.\n         * @see PIXI.Loader.loaderMiddleware\n         * @param {PIXI.LoaderResource} resource\n         * @param {function} next\n         */\n        static use(resource: PIXI.LoaderResource, next: (...params: any[]) => any): void;\n        /**\n         * Get the spritesheets root path\n         * @param {PIXI.LoaderResource} resource - Resource to check path\n         * @param {string} baseUrl - Base root url\n         */\n        static getResourcePath(resource: PIXI.LoaderResource, baseUrl: string): void;\n    }\n    /**\n     * A Text Object will create a line or multiple lines of text.\n     *\n     * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n     *\n     * The primary advantage of this class over BitmapText is that you have great control over the style of the next,\n     * which you can change at runtime.\n     *\n     * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n     * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n     *\n     * To split a line you can use '\\n' in your text string, or, on the `style` object,\n     * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n     *\n     * A Text can be created directly from a string and a style object,\n     * which can be generated [here](https://pixijs.io/pixi-text-style).\n     *\n     * ```js\n     * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n     * ```\n     *\n     * @class\n     * @extends PIXI.Sprite\n     * @memberof PIXI\n     */\n    class Text extends PIXI.Sprite {\n        constructor(text: string, style?: any | PIXI.TextStyle, canvas?: HTMLCanvasElement);\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement} PIXI.Text#canvas\n         */\n        canvas: HTMLCanvasElement;\n        /**\n         * The canvas 2d context that everything is drawn with\n         * @member {CanvasRenderingContext2D} PIXI.Text#context\n         */\n        context: CanvasRenderingContext2D;\n        /**\n         * The resolution / device pixel ratio of the canvas.\n         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n         * @member {number} PIXI.Text#_resolution\n         * @default 1\n         */\n        _resolution: number;\n        /**\n         * Renders text to its canvas, and updates its texture.\n         * By default this is used internally to ensure the texture is correct before rendering,\n         * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n         * and then shared across multiple Sprites.\n         *\n         * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n         */\n        updateText(respectDirty: boolean): void;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Gets the local bounds of the text object.\n         *\n         * @param {PIXI.Rectangle} rect - The output rectangle.\n         * @return {PIXI.Rectangle} The bounds.\n         */\n        getLocalBounds(rect: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Destroys this text object.\n         * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n         * the majority of the time the texture will not be shared with any other Sprites.\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n         *  have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have their\n         *  destroy method called as well. 'options' will be passed on to those calls.\n         * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n         * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n         */\n        destroy(options?: {\n            children?: boolean;\n            texture?: boolean;\n            baseTexture?: boolean;\n        }): void;\n        /**\n         * The width of the Text, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Text, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Set the style of the text. Set up an event listener to listen for changes on the style\n         * object and mark the text as dirty.\n         *\n         * @member {object|PIXI.TextStyle}\n         */\n        style: any | PIXI.TextStyle;\n        /**\n         * Set the copy for the text object. To split a line you can use '\\n'.\n         *\n         * @member {string}\n         */\n        text: string;\n        /**\n         * The resolution / device pixel ratio of the canvas.\n         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n         * @member {number}\n         * @default 1\n         */\n        resolution: number;\n        /**\n         * The width of the sprite (this is initially set by the texture)\n         *\n         * @protected\n         * @member {number} PIXI.Sprite#_width\n         */\n        protected _width: number;\n        /**\n         * The height of the sprite (this is initially set by the texture)\n         *\n         * @protected\n         * @member {number} PIXI.Sprite#_height\n         */\n        protected _height: number;\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number} PIXI.Sprite#blendMode\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        blendMode: number;\n        /**\n         * Cached tint value so we can tell when the tint is changed.\n         * Value is used for 2d CanvasRenderer.\n         *\n         * @protected\n         * @member {number} PIXI.Sprite#_cachedTint\n         * @default 0xFFFFFF\n         */\n        protected _cachedTint: number;\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n         *\n         * @member {string} PIXI.Sprite#pluginName\n         * @default 'batch'\n         */\n        pluginName: string;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.Sprite#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * When the texture is updated, this event will fire to update the scale and frame\n         *\n         * @protected\n         */\n        protected _onTextureUpdate(): void;\n        /**\n         * calculates worldTransform * vertices, store it in vertexData\n         */\n        calculateVertices(): void;\n        /**\n         * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n         * This is used to ensure that the true width and height of a trimmed texture is respected\n         */\n        calculateTrimmedVertices(): void;\n        /**\n         * Tests if a point is inside this sprite\n         *\n         * @param {PIXI.IPointData} point - the point to test\n         * @return {boolean} the result of the test\n         */\n        containsPoint(point: PIXI.IPointData): boolean;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        roundPixels: boolean;\n        /**\n         * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n         * and passed to the constructor.\n         *\n         * The default is `(0,0)`, this means the sprite's origin is the top left.\n         *\n         * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n         *\n         * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n         *\n         * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        anchor: PIXI.ObservablePoint;\n        /**\n         * The tint applied to the sprite. This is a hex value.\n         * A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        tint: number;\n        /**\n         * The texture that the sprite is using\n         *\n         * @member {PIXI.Texture}\n         */\n        texture: PIXI.Texture;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Updates the transform on all children of this container for rendering\n         */\n        updateTransform(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * A number, or a string containing a number.\n     *\n     * @memberof PIXI\n     * @typedef IFontMetrics\n     * @property {number} ascent - Font ascent\n     * @property {number} descent - Font descent\n     * @property {number} fontSize - Font size\n     */\n    type IFontMetrics = {\n        ascent: number;\n        descent: number;\n        fontSize: number;\n    };\n    /**\n     * The TextMetrics object represents the measurement of a block of text with a specified style.\n     *\n     * ```js\n     * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n     * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n     * ```\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class TextMetrics {\n        constructor(text: string, style: PIXI.TextStyle, width: number, height: number, lines: string[], lineWidths: number[], lineHeight: number, maxLineWidth: number, fontProperties: any);\n        /**\n         * The text that was measured\n         *\n         * @member {string} PIXI.TextMetrics#text\n         */\n        text: string;\n        /**\n         * The style that was measured\n         *\n         * @member {PIXI.TextStyle} PIXI.TextMetrics#style\n         */\n        style: PIXI.TextStyle;\n        /**\n         * The measured width of the text\n         *\n         * @member {number} PIXI.TextMetrics#width\n         */\n        width: number;\n        /**\n         * The measured height of the text\n         *\n         * @member {number} PIXI.TextMetrics#height\n         */\n        height: number;\n        /**\n         * An array of lines of the text broken by new lines and wrapping is specified in style\n         *\n         * @member {string[]} PIXI.TextMetrics#lines\n         */\n        lines: string[];\n        /**\n         * An array of the line widths for each line matched to `lines`\n         *\n         * @member {number[]} PIXI.TextMetrics#lineWidths\n         */\n        lineWidths: number[];\n        /**\n         * The measured line height for this style\n         *\n         * @member {number} PIXI.TextMetrics#lineHeight\n         */\n        lineHeight: number;\n        /**\n         * The maximum line width for all measured lines\n         *\n         * @member {number} PIXI.TextMetrics#maxLineWidth\n         */\n        maxLineWidth: number;\n        /**\n         * The font properties object from TextMetrics.measureFont\n         *\n         * @member {PIXI.IFontMetrics} PIXI.TextMetrics#fontProperties\n         */\n        fontProperties: PIXI.IFontMetrics;\n        /**\n         * Measures the supplied string of text and returns a Rectangle.\n         *\n         * @param {string} text - the text to measure.\n         * @param {PIXI.TextStyle} style - the text style to use for measuring\n         * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n         * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n         * @return {PIXI.TextMetrics} measured width and height of the text.\n         */\n        static measureText(text: string, style: PIXI.TextStyle, wordWrap?: boolean, canvas?: HTMLCanvasElement): PIXI.TextMetrics;\n        /**\n         * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n         *\n         * It allows one to customise which words should break\n         * Examples are if the token is CJK or numbers.\n         * It must return a boolean.\n         *\n         * @param  {string}  token       - The token\n         * @param  {boolean}  breakWords - The style attr break words\n         * @return {boolean} whether to break word or not\n         */\n        static canBreakWords(token: string, breakWords: boolean): boolean;\n        /**\n         * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n         *\n         * It allows one to determine whether a pair of characters\n         * should be broken by newlines\n         * For example certain characters in CJK langs or numbers.\n         * It must return a boolean.\n         *\n         * @param  {string}  char        - The character\n         * @param  {string}  nextChar    - The next character\n         * @param  {string}  token       - The token/word the characters are from\n         * @param  {number}  index       - The index in the token of the char\n         * @param  {boolean}  breakWords - The style attr break words\n         * @return {boolean} whether to break word or not\n         */\n        static canBreakChars(char: string, nextChar: string, token: string, index: number, breakWords: boolean): boolean;\n        /**\n         * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n         *\n         * It is called when a token (usually a word) has to be split into separate pieces\n         * in order to determine the point to break a word.\n         * It must return an array of characters.\n         *\n         * @example\n         * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n         * TextMetrics.wordWrapSplit = (token) => [...token];\n         *\n         * @param  {string}  token - The token to split\n         * @return {string[]} The characters of the token\n         */\n        static wordWrapSplit(token: string): string[];\n        /**\n         * Calculates the ascent, descent and fontSize of a given font-style\n         *\n         * @static\n         * @param {string} font - String representing the style of the font\n         * @return {PIXI.IFontMetrics} Font properties object\n         */\n        static measureFont(font: string): PIXI.IFontMetrics;\n        /**\n         * Clear font metrics in metrics cache.\n         *\n         * @static\n         * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n         */\n        static clearMetrics(font?: string): void;\n        /**\n         * String used for calculate font metrics.\n         * These characters are all tall to help calculate the height required for text.\n         *\n         * @static\n         * @memberof PIXI.TextMetrics\n         * @name METRICS_STRING\n         * @type {string}\n         * @default |ÉqÅ\n         */\n        static METRICS_STRING: string;\n        /**\n         * Baseline symbol for calculate font metrics.\n         *\n         * @static\n         * @memberof PIXI.TextMetrics\n         * @name BASELINE_SYMBOL\n         * @type {string}\n         * @default M\n         */\n        static BASELINE_SYMBOL: string;\n        /**\n         * Baseline multiplier for calculate font metrics.\n         *\n         * @static\n         * @memberof PIXI.TextMetrics\n         * @name BASELINE_MULTIPLIER\n         * @type {number}\n         * @default 1.4\n         */\n        static BASELINE_MULTIPLIER: number;\n    }\n    /**\n     * A TextStyle Object contains information to decorate a Text objects.\n     *\n     * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n     *\n     * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class TextStyle {\n        constructor(style?: {\n            align?: string;\n            breakWords?: boolean;\n            dropShadow?: boolean;\n            dropShadowAlpha?: number;\n            dropShadowAngle?: number;\n            dropShadowBlur?: number;\n            dropShadowColor?: string | number;\n            dropShadowDistance?: number;\n            fill?: string | string[] | number | number[] | CanvasGradient | CanvasPattern;\n            fillGradientType?: number;\n            fillGradientStops?: number[];\n            fontFamily?: string | string[];\n            fontSize?: number | string;\n            fontStyle?: string;\n            fontVariant?: string;\n            fontWeight?: string;\n            leading?: number;\n            letterSpacing?: number;\n            lineHeight?: number;\n            lineJoin?: string;\n            miterLimit?: number;\n            padding?: number;\n            stroke?: string | number;\n            strokeThickness?: number;\n            trim?: boolean;\n            textBaseline?: string;\n            whiteSpace?: string;\n            wordWrap?: boolean;\n            wordWrapWidth?: number;\n        });\n        /**\n         * Creates a new TextStyle object with the same values as this one.\n         * Note that the only the properties of the object are cloned.\n         *\n         * @return {PIXI.TextStyle} New cloned TextStyle object\n         */\n        clone(): PIXI.TextStyle;\n        /**\n         * Resets all properties to the defaults specified in TextStyle.prototype._default\n         */\n        reset(): void;\n        /**\n         * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n         *\n         * @member {string}\n         */\n        align: string;\n        /**\n         * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n         *\n         * @member {boolean}\n         */\n        breakWords: boolean;\n        /**\n         * Set a drop shadow for the text\n         *\n         * @member {boolean}\n         */\n        dropShadow: boolean;\n        /**\n         * Set alpha for the drop shadow\n         *\n         * @member {number}\n         */\n        dropShadowAlpha: number;\n        /**\n         * Set a angle of the drop shadow\n         *\n         * @member {number}\n         */\n        dropShadowAngle: number;\n        /**\n         * Set a shadow blur radius\n         *\n         * @member {number}\n         */\n        dropShadowBlur: number;\n        /**\n         * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n         *\n         * @member {string|number}\n         */\n        dropShadowColor: string | number;\n        /**\n         * Set a distance of the drop shadow\n         *\n         * @member {number}\n         */\n        dropShadowDistance: number;\n        /**\n         * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n         * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n         * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n         *\n         * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        fill: string | string[] | number | number[] | CanvasGradient | CanvasPattern;\n        /**\n         * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n         * See {@link PIXI.TEXT_GRADIENT}\n         *\n         * @member {number}\n         */\n        fillGradientType: number;\n        /**\n         * If fill is an array of colours to create a gradient, this array can set the stop points\n         * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n         *\n         * @member {number[]}\n         */\n        fillGradientStops: number[];\n        /**\n         * The font family\n         *\n         * @member {string|string[]}\n         */\n        fontFamily: string | string[];\n        /**\n         * The font size\n         * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n         *\n         * @member {number|string}\n         */\n        fontSize: number | string;\n        /**\n         * The font style\n         * ('normal', 'italic' or 'oblique')\n         *\n         * @member {string}\n         */\n        fontStyle: string;\n        /**\n         * The font variant\n         * ('normal' or 'small-caps')\n         *\n         * @member {string}\n         */\n        fontVariant: string;\n        /**\n         * The font weight\n         * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n         *\n         * @member {string}\n         */\n        fontWeight: string;\n        /**\n         * The amount of spacing between letters, default is 0\n         *\n         * @member {number}\n         */\n        letterSpacing: number;\n        /**\n         * The line height, a number that represents the vertical space that a letter uses\n         *\n         * @member {number}\n         */\n        lineHeight: number;\n        /**\n         * The space between lines\n         *\n         * @member {number}\n         */\n        leading: number;\n        /**\n         * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n         * Default is 'miter' (creates a sharp corner).\n         *\n         * @member {string}\n         */\n        lineJoin: string;\n        /**\n         * The miter limit to use when using the 'miter' lineJoin mode\n         * This can reduce or increase the spikiness of rendered text.\n         *\n         * @member {number}\n         */\n        miterLimit: number;\n        /**\n         * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n         * by adding padding to all sides of the text.\n         *\n         * @member {number}\n         */\n        padding: number;\n        /**\n         * A canvas fillstyle that will be used on the text stroke\n         * e.g 'blue', '#FCFF00'\n         *\n         * @member {string|number}\n         */\n        stroke: string | number;\n        /**\n         * A number that represents the thickness of the stroke.\n         * Default is 0 (no stroke)\n         *\n         * @member {number}\n         */\n        strokeThickness: number;\n        /**\n         * The baseline of the text that is rendered.\n         *\n         * @member {string}\n         */\n        textBaseline: string;\n        /**\n         * Trim transparent borders\n         *\n         * @member {boolean}\n         */\n        trim: boolean;\n        /**\n         * How newlines and spaces should be handled.\n         * Default is 'pre' (preserve, preserve).\n         *\n         *  value       | New lines     |   Spaces\n         *  ---         | ---           |   ---\n         * 'normal'     | Collapse      |   Collapse\n         * 'pre'        | Preserve      |   Preserve\n         * 'pre-line'   | Preserve      |   Collapse\n         *\n         * @member {string}\n         */\n        whiteSpace: string;\n        /**\n         * Indicates if word wrap should be used\n         *\n         * @member {boolean}\n         */\n        wordWrap: boolean;\n        /**\n         * The width at which text will wrap, it needs wordWrap to be set to true\n         *\n         * @member {number}\n         */\n        wordWrapWidth: number;\n        /**\n         * Generates a font style string to use for `TextMetrics.measureFont()`.\n         *\n         * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n         */\n        toFontString(): string;\n    }\n    /**\n     * Constants that define the type of gradient on text.\n     *\n     * @static\n     * @constant\n     * @name TEXT_GRADIENT\n     * @memberof PIXI\n     * @type {object}\n     * @property {number} LINEAR_VERTICAL Vertical gradient\n     * @property {number} LINEAR_HORIZONTAL Linear gradient\n     */\n    var TEXT_GRADIENT: {\n        LINEAR_VERTICAL: number;\n        LINEAR_HORIZONTAL: number;\n    };\n    /**\n     * @memberof PIXI\n     * @interface IBitmapFontOptions\n     * @property {string | string[] | string[][]} [chars=PIXI.BitmapFont.ALPHANUMERIC] - the character set to generate\n     * @property {number} [resolution=1] - the resolution for rendering\n     * @property {number} [padding=4] - the padding between glyphs in the atlas\n     * @property {number} [textureWidth=512] - the width of the texture atlas\n     * @property {number} [textureHeight=512] - the height of the texture atlas\n     */\n    interface IBitmapFontOptions {\n    }\n    /**\n     * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n     * method for adding a font to be used.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class BitmapFont {\n        constructor(data: PIXI.BitmapFontData, textures: PIXI.Texture[] | {\n            [key: string]: PIXI.Texture;\n        });\n        /**\n         * The name of the font face.\n         *\n         * @member {string} PIXI.BitmapFont#font\n         * @readonly\n         */\n        readonly font: string;\n        /**\n         * The size of the font face in pixels.\n         *\n         * @member {number} PIXI.BitmapFont#size\n         * @readonly\n         */\n        readonly size: number;\n        /**\n         * The line-height of the font face in pixels.\n         *\n         * @member {number} PIXI.BitmapFont#lineHeight\n         * @readonly\n         */\n        readonly lineHeight: number;\n        /**\n         * The map of characters by character code.\n         *\n         * @member {object} PIXI.BitmapFont#chars\n         * @readonly\n         */\n        readonly chars: any;\n        /**\n         * Remove references to created glyph textures.\n         */\n        destroy(): void;\n        /**\n         * Register a new bitmap font.\n         *\n         * @static\n         * @param {XMLDocument|string|PIXI.BitmapFontData} data - The\n         *        characters map that could be provided as xml or raw string.\n         * @param {Object.<string, PIXI.Texture>|PIXI.Texture|PIXI.Texture[]}\n         *        textures - List of textures for each page.\n         * @return {PIXI.BitmapFont} Result font object with font, size, lineHeight\n         *         and char fields.\n         */\n        static install(data: XMLDocument | string | PIXI.BitmapFontData, textures: {\n            [key: string]: PIXI.Texture;\n        } | PIXI.Texture | PIXI.Texture[]): PIXI.BitmapFont;\n        /**\n         * Remove bitmap font by name.\n         *\n         * @static\n         * @param {string} name\n         */\n        static uninstall(name: string): void;\n        /**\n         * Generates a bitmap-font for the given style and character set. This does not support\n         * kernings yet. With `style` properties, only the following non-layout properties are used:\n         *\n         * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n         * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n         * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n         * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n         * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n         * - {@link PIXI.TextStyle#fill|fill}\n         * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n         * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n         * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n         * - {@link PIXI.TextStyle#fontSize|fontSize}\n         * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n         * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n         * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n         * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n         * - {@link PIXI.TextStyle#stroke|stroke}\n         * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n         * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n         *\n         * @param {string} name - The name of the custom font to use with BitmapText.\n         * @param {object|PIXI.TextStyle} [style] - Style options to render with BitmapFont.\n         * @param {PIXI.IBitmapFontOptions} [options] - Setup options for font or name of the font.\n         * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n         *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n         *      Don't forget to include spaces ' ' in your character set!\n         * @param {number} [options.resolution=1] - Render resolution for glyphs.\n         * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n         * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n         * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n         * @return {PIXI.BitmapFont} Font generated by style options.\n         * @static\n         * @example\n         * PIXI.BitmapFont.from(\"TitleFont\", {\n         *     fontFamily: \"Arial\",\n         *     fontSize: 12,\n         *     strokeThickness: 2,\n         *     fill: \"purple\"\n         * });\n         *\n         * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n         */\n        static from(name: string, style?: any | PIXI.TextStyle, options?: {\n            chars?: string | string[] | string[][];\n            resolution?: number;\n            textureWidth?: number;\n            textureHeight?: number;\n            padding?: number;\n        }): PIXI.BitmapFont;\n        /**\n         * This character set includes all the letters in the alphabet (both lower- and upper- case).\n         * @readonly\n         * @static\n         * @member {string[][]}\n         * @example\n         * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n         */\n        static readonly ALPHA: string[][];\n        /**\n         * This character set includes all decimal digits (from 0 to 9).\n         * @readonly\n         * @static\n         * @member {string[][]}\n         * @example\n         * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n         */\n        static readonly NUMERIC: string[][];\n        /**\n         * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n         * @readonly\n         * @static\n         * @member {string[][]}\n         */\n        static readonly ALPHANUMERIC: string[][];\n        /**\n         * This character set consists of all the ASCII table.\n         * @readonly\n         * @static\n         * @member {string[][]}\n         * @see http://www.asciitable.com/\n         */\n        static readonly ASCII: string[][];\n        /**\n         * Collection of default options when using `BitmapFont.from`.\n         *\n         * @readonly\n         * @static\n         * @member {PIXI.IBitmapFontOptions}\n         * @property {number} resolution=1\n         * @property {number} textureWidth=512\n         * @property {number} textureHeight=512\n         * @property {number} padding=4\n         * @property {string|string[]|string[][]} chars=PIXI.BitmapFont.ALPHANUMERIC\n         */\n        static readonly defaultOptions: PIXI.IBitmapFontOptions;\n        /**\n         * Collection of available/installed fonts.\n         *\n         * @readonly\n         * @static\n         * @member {Object.<string, PIXI.BitmapFont>}\n         */\n        static readonly available: {\n            [key: string]: PIXI.BitmapFont;\n        };\n    }\n    /**\n     * @memberof PIXI\n     * @typedef {object} IBitmapFontDataInfo\n     * @property {string} face\n     * @property {number} size\n     */\n    type IBitmapFontDataInfo = {\n        face: string;\n        size: number;\n    };\n    /**\n     * @memberof PIXI\n     * @typedef {object} IBitmapFontDataCommon\n     * @property {number} lineHeight\n     */\n    type IBitmapFontDataCommon = {\n        lineHeight: number;\n    };\n    /**\n     * @memberof PIXI\n     * @typedef {object} IBitmapFontDataPage\n     * @property {number} id\n     * @property {string} file\n     */\n    type IBitmapFontDataPage = {\n        id: number;\n        file: string;\n    };\n    /**\n     * @memberof PIXI\n     * @typedef {object} IBitmapFontDataChar\n     * @property {string} id\n     * @property {number} page\n     * @property {number} x\n     * @property {number} y\n     * @property {number} width\n     * @property {number} height\n     * @property {number} xoffset\n     * @property {number} yoffset\n     * @property {number} xadvance\n     */\n    type IBitmapFontDataChar = {\n        id: string;\n        page: number;\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        xoffset: number;\n        yoffset: number;\n        xadvance: number;\n    };\n    /**\n     * @memberof PIXI\n     * @typedef {object} IBitmapFontDataKerning\n     * @property {number} first\n     * @property {number} second\n     * @property {number} amount\n     */\n    type IBitmapFontDataKerning = {\n        first: number;\n        second: number;\n        amount: number;\n    };\n    /**\n     * Normalized parsed data from .fnt files.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class BitmapFontData {\n        constructor();\n        /**\n         * @member {PIXI.IBitmapFontDataInfo[]} PIXI.BitmapFontData#info\n         * @readOnly\n         */\n        readonly info: PIXI.IBitmapFontDataInfo[];\n        /**\n         * @member {PIXI.IBitmapFontDataCommon[]} PIXI.BitmapFontData#common\n         * @readOnly\n         */\n        readonly common: PIXI.IBitmapFontDataCommon[];\n        /**\n         * @member {PIXI.IBitmapFontDataPage[]} PIXI.BitmapFontData#page\n         * @readOnly\n         */\n        readonly page: PIXI.IBitmapFontDataPage[];\n        /**\n         * @member {PIXI.IBitmapFontDataChar[]} PIXI.BitmapFontData#char\n         * @readOnly\n         */\n        readonly char: PIXI.IBitmapFontDataChar[];\n        /**\n         * @member {PIXI.IBitmapFontDataKerning[]} PIXI.BitmapFontData#kerning\n         * @readOnly\n         */\n        readonly kerning: PIXI.IBitmapFontDataKerning[];\n    }\n    interface BitmapFontLoader extends PIXI.ILoaderPlugin {\n    }\n    /**\n     * {@link PIXI.Loader Loader} middleware for loading\n     * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n     * @class\n     * @memberof PIXI\n     * @implements PIXI.ILoaderPlugin\n     */\n    class BitmapFontLoader implements PIXI.ILoaderPlugin {\n        /**\n         * Called when the plugin is installed.\n         *\n         * @see PIXI.Loader.registerPlugin\n         */\n        static add(): void;\n        /**\n         * Called after a resource is loaded.\n         * @see PIXI.Loader.loaderMiddleware\n         * @param {PIXI.LoaderResource} resource\n         * @param {function} next\n         */\n        static use(resource: PIXI.LoaderResource, next: (...params: any[]) => any): void;\n    }\n    /**\n     * A BitmapText object will create a line or multiple lines of text using bitmap font.\n     *\n     * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n     * meaning that rendering is fast, and changing text has no performance implications.\n     *\n     * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n     *\n     * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n     *\n     * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n     * http://www.angelcode.com/products/bmfont/ for Windows or\n     * http://www.bmglyph.com/ for Mac.\n     *\n     * A BitmapText can only be created when the font is loaded.\n     *\n     * ```js\n     * // in this case the font is in a file called 'desyrel.fnt'\n     * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {font: \"35px Desyrel\", align: \"right\"});\n     * ```\n     *\n     * @class\n     * @extends PIXI.Container\n     * @memberof PIXI\n     */\n    class BitmapText extends PIXI.Container {\n        constructor(text: string, style: {\n            fontName: string;\n            fontSize?: number;\n            align?: string;\n            tint?: number;\n            letterSpacing?: number;\n            maxWidth?: number;\n        });\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean} PIXI.BitmapText#roundPixels\n         * @default PIXI.settings.ROUND_PIXELS\n         */\n        roundPixels: boolean;\n        /**\n         * Set to `true` if the BitmapText needs to be redrawn.\n         *\n         * @member {boolean} PIXI.BitmapText#dirty\n         */\n        dirty: boolean;\n        /**\n         * Renders text and updates it when needed. This should only be called\n         * if the BitmapFont is regenerated.\n         */\n        updateText(): void;\n        /**\n         * Validates text before calling parent's getLocalBounds\n         *\n         * @return {PIXI.Rectangle} The rectangular bounding area\n         */\n        getLocalBounds(): PIXI.Rectangle;\n        /**\n         * The tint of the BitmapText object.\n         *\n         * @member {number}\n         * @default 0xffffff\n         */\n        tint: number;\n        /**\n         * The alignment of the BitmapText object.\n         *\n         * @member {string}\n         * @default 'left'\n         */\n        align: string;\n        /**\n         * The name of the BitmapFont.\n         *\n         * @member {string}\n         */\n        fontName: string;\n        /**\n         * The size of the font to display.\n         *\n         * @member {number}\n         */\n        fontSize: number;\n        /**\n         * The anchor sets the origin point of the text.\n         *\n         * The default is `(0,0)`, this means the text's origin is the top left.\n         *\n         * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n         *\n         * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n         *\n         * @member {PIXI.Point | number}\n         */\n        anchor: PIXI.Point | number;\n        /**\n         * The text of the BitmapText object.\n         *\n         * @member {string}\n         */\n        text: string;\n        /**\n         * The max width of this bitmap text in pixels. If the text provided is longer than the\n         * value provided, line breaks will be automatically inserted in the last whitespace.\n         * Disable by setting the value to 0.\n         *\n         * @member {number}\n         */\n        maxWidth: number;\n        /**\n         * The max line height. This is useful when trying to use the total height of the Text,\n         * i.e. when trying to vertically align.\n         *\n         * @member {number}\n         * @readonly\n         */\n        readonly maxLineHeight: number;\n        /**\n         * The width of the overall text, different from fontSize,\n         * which is defined in the style object.\n         *\n         * @member {number}\n         * @readonly\n         */\n        readonly textWidth: number;\n        /**\n         * Additional space between characters.\n         *\n         * @member {number}\n         */\n        letterSpacing: number;\n        /**\n         * The height of the overall text, different from fontSize,\n         * which is defined in the style object.\n         *\n         * @member {number}\n         * @readonly\n         */\n        readonly textHeight: number;\n        /**\n         * Register a bitmap font with data and a texture.\n         *\n         * @deprecated since 5.3.0\n         * @see PIXI.BitmapFont.install\n         * @static\n         */\n        static registerFont(): void;\n        /**\n         * Get the list of installed fonts.\n         *\n         * @see PIXI.BitmapFont.available\n         * @deprecated since 5.3.0\n         * @static\n         * @readonly\n         * @member {Object.<string, PIXI.BitmapFont>}\n         */\n        static readonly fonts: {\n            [key: string]: PIXI.BitmapFont;\n        };\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]} PIXI.Container#children\n         * @readonly\n         */\n        readonly children: PIXI.DisplayObject[];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean} PIXI.Container#sortableChildren\n         */\n        sortableChildren: boolean;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean} PIXI.Container#sortDirty\n         */\n        sortDirty: boolean;\n        /**\n         * Overridable method that can be used by Container subclasses whenever the children array is modified\n         *\n         * @protected\n         */\n        protected onChildrenChange(): void;\n        /**\n         * Adds one or more children to the container.\n         *\n         * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n         * @return {PIXI.DisplayObject} The first child that was added.\n         */\n        addChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n         *\n         * @param {PIXI.DisplayObject} child - The child to add\n         * @param {number} index - The index to place the child in\n         * @return {PIXI.DisplayObject} The child that was added.\n         */\n        addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T;\n        /**\n         * Swaps the position of 2 Display Objects within this container.\n         *\n         * @param {PIXI.DisplayObject} child - First display object to swap\n         * @param {PIXI.DisplayObject} child2 - Second display object to swap\n         */\n        swapChildren(child: PIXI.DisplayObject, child2: PIXI.DisplayObject): void;\n        /**\n         * Returns the index position of a child DisplayObject instance\n         *\n         * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n         * @return {number} The index position of the child display object to identify\n         */\n        getChildIndex(child: PIXI.DisplayObject): number;\n        /**\n         * Changes the position of an existing child in the display object container\n         *\n         * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n         * @param {number} index - The resulting index number for the child display object\n         */\n        setChildIndex(child: PIXI.DisplayObject, index: number): void;\n        /**\n         * Returns the child at the specified index\n         *\n         * @param {number} index - The index to get the child at\n         * @return {PIXI.DisplayObject} The child at the given index, if any.\n         */\n        getChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes one or more children from the container.\n         *\n         * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n         * @return {PIXI.DisplayObject} The first child that was removed.\n         */\n        removeChild<TChildren extends PIXI.DisplayObject[]>(...children: TChildren): TChildren[0];\n        /**\n         * Removes a child from the specified index position.\n         *\n         * @param {number} index - The index to get the child from\n         * @return {PIXI.DisplayObject} The child that was removed.\n         */\n        removeChildAt(index: number): PIXI.DisplayObject;\n        /**\n         * Removes all children from this container that are within the begin and end indexes.\n         *\n         * @param {number} [beginIndex=0] - The beginning position.\n         * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n         * @returns {PIXI.DisplayObject[]} List of removed children\n         */\n        removeChildren(beginIndex?: number, endIndex?: number): PIXI.DisplayObject[];\n        /**\n         * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n         */\n        sortChildren(): void;\n        /**\n         * Recalculates the bounds of the container.\n         *\n         */\n        calculateBounds(): void;\n        /**\n         * Recalculates the bounds of the object. Override this to\n         * calculate the bounds of the specific object (not including children).\n         *\n         * @protected\n         */\n        protected _calculateBounds(): void;\n        /**\n         * Renders the object using the WebGL renderer\n         *\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        render(renderer: PIXI.Renderer): void;\n        /**\n         * Render the object using the WebGL renderer and advanced features.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected renderAdvanced(renderer: PIXI.Renderer): void;\n        /**\n         * To be overridden by the subclasses.\n         *\n         * @protected\n         * @param {PIXI.Renderer} renderer - The renderer\n         */\n        protected _render(renderer: PIXI.Renderer): void;\n        /**\n         * Removes all internal references and listeners as well as removes children from the display list.\n         * Do not use a Container after calling `destroy`.\n         *\n         * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n         *  have been set to that value\n         * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n         *  method called as well. 'options' will be passed on to those calls.\n         * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n         *  Should it destroy the texture of the child sprite\n         * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n         *  Should it destroy the base texture of the child sprite\n         */\n        destroy(options?: {\n            children?: boolean;\n            texture?: boolean;\n            baseTexture?: boolean;\n        }): void;\n        /**\n         * The width of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        width: number;\n        /**\n         * The height of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        height: number;\n        /**\n         * Container default updateTransform, does update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.Container#\n         * @function containerUpdateTransform\n         */\n        containerUpdateTransform(): void;\n        /**\n         * Determines if the children to the displayObject can be clicked/touched\n         * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n         *\n         * @member {boolean}\n         * @memberof PIXI.Container#\n         */\n        interactiveChildren: boolean;\n        /**\n         * Returns the display object in the container.\n         *\n         * Recursive searches are done in a preorder traversal.\n         *\n         * @method getChildByName\n         * @memberof PIXI.Container#\n         * @param {string} name - Instance name.\n         * @param {boolean}[deep=false] - Whether to search recursively\n         * @return {PIXI.DisplayObject} The child with the specified name.\n         */\n        getChildByName(name: string, deep?: boolean): PIXI.DisplayObject;\n        /**\n         *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n         *   shadow div with attributes set\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessible: boolean;\n        /**\n         * Sets the title attribute of the shadow div\n         * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n         *\n         * @member {?string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleTitle: string;\n        /**\n         * Sets the aria-label attribute of the shadow div\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        accessibleHint: string;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleActive: boolean;\n        /**\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @todo Needs docs.\n         */\n        _accessibleDiv: boolean;\n        /**\n         * Specify the type of div the accessible layer is. Screen readers treat the element differently\n         * depending on this type. Defaults to button.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'button'\n         */\n        accessibleType: string;\n        /**\n         * Specify the pointer-events the accessible div will use\n         * Defaults to auto.\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         * @default 'auto'\n         */\n        accessiblePointerEvents: string;\n        /**\n         * Setting to false will prevent any children inside this container to\n         * be accessible. Defaults to true.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         * @default true\n         */\n        accessibleChildren: boolean;\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform} PIXI.DisplayObject#transform\n         */\n        transform: PIXI.Transform;\n        /**\n         * The opacity of the object.\n         *\n         * @member {number} PIXI.DisplayObject#alpha\n         */\n        alpha: number;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#visible\n         */\n        visible: boolean;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean} PIXI.DisplayObject#renderable\n         */\n        renderable: boolean;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container} PIXI.DisplayObject#parent\n         */\n        parent: PIXI.Container;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number} PIXI.DisplayObject#worldAlpha\n         * @readonly\n         */\n        readonly worldAlpha: number;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number} PIXI.DisplayObject#_lastSortedIndex\n         * @protected\n         */\n        protected _lastSortedIndex: number;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number} PIXI.DisplayObject#_zIndex\n         * @protected\n         */\n        protected _zIndex: number;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle} PIXI.DisplayObject#filterArea\n         */\n        filterArea: PIXI.Rectangle;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]} PIXI.DisplayObject#filters\n         */\n        filters: PIXI.Filter[];\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]} PIXI.DisplayObject#_enabledFilters\n         * @protected\n         */\n        protected _enabledFilters: PIXI.Filter[];\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_bounds\n         */\n        _bounds: PIXI.Bounds;\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBounds\n         */\n        _localBounds: PIXI.Bounds;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number} PIXI.DisplayObject#_boundsID\n         * @protected\n         */\n        protected _boundsID: number;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_boundsRect\n         * @protected\n         */\n        protected _boundsRect: PIXI.Bounds;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds} PIXI.DisplayObject#_localBoundsRect\n         * @protected\n         */\n        protected _localBoundsRect: PIXI.Bounds;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null} PIXI.DisplayObject#_mask\n         * @protected\n         */\n        protected _mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean} PIXI.DisplayObject#_destroyed\n         * @protected\n         */\n        protected _destroyed: boolean;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean} PIXI.DisplayObject#isSprite\n         */\n        isSprite: boolean;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean} PIXI.DisplayObject#isMask\n         */\n        isMask: boolean;\n        /**\n         * Recursively updates transform of all objects from the root to this one\n         * internal function for toLocal()\n         */\n        _recursivePostUpdateTransform(): void;\n        /**\n         * Retrieves the bounds of the displayObject as a rectangle object.\n         *\n         * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n         * @return {PIXI.Rectangle} The rectangular bounding area.\n         */\n        getBounds(skipUpdate?: boolean, rect?: PIXI.Rectangle): PIXI.Rectangle;\n        /**\n         * Calculates the global position of the display object.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n         * @return {PIXI.Point} A point object representing the position of this object.\n         */\n        toGlobal(position: PIXI.IPointData, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Calculates the local position of the display object relative to another point.\n         *\n         * @param {PIXI.IPointData} position - The world origin to calculate from.\n         * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n         * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n         *  (otherwise will create a new Point).\n         * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n         * @return {PIXI.Point} A point object representing the position of this object\n         */\n        toLocal(position: PIXI.IPointData, from?: PIXI.DisplayObject, point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n        /**\n         * Set the parent Container of this DisplayObject.\n         *\n         * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n         * @return {PIXI.Container} The Container that this DisplayObject was added to.\n         */\n        setParent(container: PIXI.Container): PIXI.Container;\n        /**\n         * Convenience function to set the position, scale, skew and pivot at once.\n         *\n         * @param {number} [x=0] - The X position\n         * @param {number} [y=0] - The Y position\n         * @param {number} [scaleX=1] - The X scale value\n         * @param {number} [scaleY=1] - The Y scale value\n         * @param {number} [rotation=0] - The rotation\n         * @param {number} [skewX=0] - The X skew value\n         * @param {number} [skewY=0] - The Y skew value\n         * @param {number} [pivotX=0] - The X pivot value\n         * @param {number} [pivotY=0] - The Y pivot value\n         * @return {PIXI.DisplayObject} The DisplayObject instance\n         */\n        setTransform(x?: number, y?: number, scaleX?: number, scaleY?: number, rotation?: number, skewX?: number, skewY?: number, pivotX?: number, pivotY?: number): PIXI.DisplayObject;\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        protected _tempDisplayObjectParent: PIXI.Container;\n        /**\n         * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n         *\n         * ```\n         * const cacheParent = elem.enableTempParent();\n         * elem.updateTransform();\n         * elem.disableTempParent(cacheParent);\n         * ```\n         *\n         * @returns {PIXI.DisplayObject} current parent\n         */\n        enableTempParent(): PIXI.DisplayObject;\n        /**\n         * Pair method for `enableTempParent`\n         * @param {PIXI.DisplayObject} cacheParent actual parent of element\n         */\n        disableTempParent(cacheParent: PIXI.DisplayObject): void;\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        x: number;\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        y: number;\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly worldTransform: PIXI.Matrix;\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        readonly localTransform: PIXI.Matrix;\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        position: PIXI.ObservablePoint;\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        scale: PIXI.ObservablePoint;\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        pivot: PIXI.ObservablePoint;\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        skew: PIXI.ObservablePoint;\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        rotation: number;\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        angle: number;\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        zIndex: number;\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        readonly worldVisible: boolean;\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        mask: PIXI.Container | PIXI.MaskData | null;\n        /**\n         * DisplayObject default updateTransform, does not update children of container.\n         * Will crash if there's no parent element.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @function displayObjectUpdateTransform\n         */\n        displayObjectUpdateTransform(): void;\n        /**\n         * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n         * events will not be emitted unless `interactive` is set to `true`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.on('tap', (event) => {\n         *    //handle event\n         * });\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        interactive: boolean;\n        /**\n         * Interaction shape. Children will be hit first, then this shape will be checked.\n         * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n         * @member {PIXI.IHitArea}\n         * @memberof PIXI.DisplayObject#\n         */\n        hitArea: PIXI.IHitArea;\n        /**\n         * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n         * Setting this changes the 'cursor' property to `'pointer'`.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.buttonMode = true;\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        buttonMode: boolean;\n        /**\n         * This defines what cursor mode is used when the mouse cursor\n         * is hovered over the displayObject.\n         *\n         * @example\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.interactive = true;\n         * sprite.cursor = 'wait';\n         * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n         *\n         * @member {string}\n         * @memberof PIXI.DisplayObject#\n         */\n        cursor: string;\n        /**\n         * Set this to true if you want this display object to be cached as a bitmap.\n         * This basically takes a snap shot of the display object as it is at that moment. It can\n         * provide a performance benefit for complex static displayObjects.\n         * To remove simply set this property to `false`\n         *\n         * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n         * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n         *\n         * @member {boolean}\n         * @memberof PIXI.DisplayObject#\n         */\n        cacheAsBitmap: boolean;\n        /**\n         * The instance name of the object.\n         *\n         * @memberof PIXI.DisplayObject#\n         * @member {string} name\n         */\n        name: string;\n        /**\n         * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n         *\n         * @method getGlobalPosition\n         * @memberof PIXI.DisplayObject#\n         * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n         * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n         *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n         *  nice performance boost.\n         * @return {PIXI.Point} The updated point.\n         */\n        getGlobalPosition(point?: PIXI.Point, skipUpdate?: boolean): PIXI.Point;\n    }\n    /**\n     * A Ticker class that runs an update loop that other objects listen to.\n     *\n     * This class is composed around listeners meant for execution on the next requested animation frame.\n     * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class Ticker {\n        constructor();\n        /**\n         * Whether or not this ticker should invoke the method\n         * {@link PIXI.Ticker#start} automatically\n         * when a listener is added.\n         *\n         * @member {boolean} PIXI.Ticker#autoStart\n         * @default false\n         */\n        autoStart: boolean;\n        /**\n         * Scalar time value from last frame to this frame.\n         * This value is capped by setting {@link PIXI.Ticker#minFPS}\n         * and is scaled with {@link PIXI.Ticker#speed}.\n         * **Note:** The cap may be exceeded by scaling.\n         *\n         * @member {number} PIXI.Ticker#deltaTime\n         * @default 1\n         */\n        deltaTime: number;\n        /**\n         * Scaler time elapsed in milliseconds from last frame to this frame.\n         * This value is capped by setting {@link PIXI.Ticker#minFPS}\n         * and is scaled with {@link PIXI.Ticker#speed}.\n         * **Note:** The cap may be exceeded by scaling.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 µs.\n         * Defaults to target frame time\n         *\n         * @member {number} PIXI.Ticker#deltaMS\n         * @default 16.66\n         */\n        deltaMS: number;\n        /**\n         * Time elapsed in milliseconds from last frame to this frame.\n         * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}\n         * is based, this value is neither capped nor scaled.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 µs.\n         * Defaults to target frame time\n         *\n         * @member {number} PIXI.Ticker#elapsedMS\n         * @default 16.66\n         */\n        elapsedMS: number;\n        /**\n         * The last time {@link PIXI.Ticker#update} was invoked.\n         * This value is also reset internally outside of invoking\n         * update, but only when a new animation frame is requested.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 µs.\n         *\n         * @member {number} PIXI.Ticker#lastTime\n         * @default -1\n         */\n        lastTime: number;\n        /**\n         * Factor of current {@link PIXI.Ticker#deltaTime}.\n         * @example\n         * // Scales ticker.deltaTime to what would be\n         * // the equivalent of approximately 120 FPS\n         * ticker.speed = 2;\n         *\n         * @member {number} PIXI.Ticker#speed\n         * @default 1\n         */\n        speed: number;\n        /**\n         * Whether or not this ticker has been started.\n         * `true` if {@link PIXI.Ticker#start} has been called.\n         * `false` if {@link PIXI.Ticker#stop} has been called.\n         * While `false`, this value may change to `true` in the\n         * event of {@link PIXI.Ticker#autoStart} being `true`\n         * and a listener is added.\n         *\n         * @member {boolean} PIXI.Ticker#started\n         * @default false\n         */\n        started: boolean;\n        /**\n         * Register a handler for tick events. Calls continuously unless\n         * it is removed or the ticker is stopped.\n         *\n         * @param {Function} fn - The listener function to be added for updates\n         * @param {*} [context] - The listener context\n         * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n         * @returns {PIXI.Ticker} This instance of a ticker\n         */\n        add(fn: (...params: any[]) => any, context?: any, priority?: number): PIXI.Ticker;\n        /**\n         * Add a handler for the tick event which is only execute once.\n         *\n         * @param {Function} fn - The listener function to be added for one update\n         * @param {*} [context] - The listener context\n         * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n         * @returns {PIXI.Ticker} This instance of a ticker\n         */\n        addOnce(fn: (...params: any[]) => any, context?: any, priority?: number): PIXI.Ticker;\n        /**\n         * Removes any handlers matching the function and context parameters.\n         * If no handlers are left after removing, then it cancels the animation frame.\n         *\n         * @param {Function} fn - The listener function to be removed\n         * @param {*} [context] - The listener context to be removed\n         * @returns {PIXI.Ticker} This instance of a ticker\n         */\n        remove(fn: (...params: any[]) => any, context?: any): PIXI.Ticker;\n        /**\n         * The number of listeners on this ticker, calculated by walking through linked list\n         *\n         * @readonly\n         * @member {number}\n         */\n        readonly count: number;\n        /**\n         * Starts the ticker. If the ticker has listeners\n         * a new animation frame is requested at this point.\n         */\n        start(): void;\n        /**\n         * Stops the ticker. If the ticker has requested\n         * an animation frame it is canceled at this point.\n         */\n        stop(): void;\n        /**\n         * Destroy the ticker and don't use after this. Calling\n         * this method removes all references to internal events.\n         */\n        destroy(): void;\n        /**\n         * Triggers an update. An update entails setting the\n         * current {@link PIXI.Ticker#elapsedMS},\n         * the current {@link PIXI.Ticker#deltaTime},\n         * invoking all listeners with current deltaTime,\n         * and then finally setting {@link PIXI.Ticker#lastTime}\n         * with the value of currentTime that was provided.\n         * This method will be called automatically by animation\n         * frame callbacks if the ticker instance has been started\n         * and listeners are added.\n         *\n         * @param {number} [currentTime=performance.now()] - the current time of execution\n         */\n        update(currentTime?: number): void;\n        /**\n         * The frames per second at which this ticker is running.\n         * The default is approximately 60 in most modern browsers.\n         * **Note:** This does not factor in the value of\n         * {@link PIXI.Ticker#speed}, which is specific\n         * to scaling {@link PIXI.Ticker#deltaTime}.\n         *\n         * @member {number}\n         * @readonly\n         */\n        readonly FPS: number;\n        /**\n         * Manages the maximum amount of milliseconds allowed to\n         * elapse between invoking {@link PIXI.Ticker#update}.\n         * This value is used to cap {@link PIXI.Ticker#deltaTime},\n         * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n         * When setting this property it is clamped to a value between\n         * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n         *\n         * @member {number}\n         * @default 10\n         */\n        minFPS: number;\n        /**\n         * Manages the minimum amount of milliseconds required to\n         * elapse between invoking {@link PIXI.Ticker#update}.\n         * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n         * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n         * Otherwise it will be at least `minFPS`\n         *\n         * @member {number}\n         * @default 0\n         */\n        maxFPS: number;\n        /**\n         * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n         * {@link PIXI.VideoResource} to update animation frames / video textures.\n         *\n         * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n         *\n         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n         * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n         *\n         * @example\n         * let ticker = PIXI.Ticker.shared;\n         * // Set this to prevent starting this ticker when listeners are added.\n         * // By default this is true only for the PIXI.Ticker.shared instance.\n         * ticker.autoStart = false;\n         * // FYI, call this to ensure the ticker is stopped. It should be stopped\n         * // if you have not attempted to render anything yet.\n         * ticker.stop();\n         * // Call this when you are ready for a running shared ticker.\n         * ticker.start();\n         *\n         * @example\n         * // You may use the shared ticker to render...\n         * let renderer = PIXI.autoDetectRenderer();\n         * let stage = new PIXI.Container();\n         * document.body.appendChild(renderer.view);\n         * ticker.add(function (time) {\n         *     renderer.render(stage);\n         * });\n         *\n         * @example\n         * // Or you can just update it manually.\n         * ticker.autoStart = false;\n         * ticker.stop();\n         * function animate(time) {\n         *     ticker.update(time);\n         *     renderer.render(stage);\n         *     requestAnimationFrame(animate);\n         * }\n         * animate(performance.now());\n         *\n         * @member {PIXI.Ticker}\n         * @static\n         */\n        static shared: PIXI.Ticker;\n        /**\n         * The system ticker instance used by {@link PIXI.InteractionManager} and by\n         * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n         * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n         *\n         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n         *\n         * @member {PIXI.Ticker}\n         * @static\n         */\n        static system: PIXI.Ticker;\n    }\n    /**\n     * Middleware for for Application Ticker.\n     *\n     * @example\n     * import {TickerPlugin} from '@pixi/ticker';\n     * import {Application} from '@pixi/app';\n     * Application.registerPlugin(TickerPlugin);\n     *\n     * @class\n     * @memberof PIXI\n     */\n    class TickerPlugin {\n    }\n    /**\n     * Represents the update priorities used by internal PIXI classes when registered with\n     * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n     * priority items, such as render, should go later.\n     *\n     * @static\n     * @constant\n     * @name UPDATE_PRIORITY\n     * @memberof PIXI\n     * @enum {number}\n     * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.InteractionManager}\n     * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n     * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.\n     * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.\n     * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.BasePrepare} utility.\n     */\n    enum UPDATE_PRIORITY {\n        INTERACTION,\n        HIGH,\n        NORMAL,\n        LOW,\n        UTILITY\n    }\n    /**\n     * Regexp for data URI.\n     * Based on: {@link https://github.com/ragingwind/data-uri-regex}\n     *\n     * @static\n     * @constant {RegExp|string} DATA_URI\n     * @memberof PIXI\n     * @example data:image/png;base64\n     */\n    var DATA_URI: RegExp | string;\n    /**\n     * Generalized convenience utilities for PIXI.\n     * @example\n     * // Extend PIXI's internal Event Emitter.\n     * class MyEmitter extends PIXI.utils.EventEmitter {\n     *   constructor() {\n     *      super();\n     *      console.log(\"Emitter created!\");\n     *   }\n     * }\n     *\n     * // Get info on current device\n     * console.log(PIXI.utils.isMobile);\n     *\n     * // Convert hex color to string\n     * console.log(PIXI.utils.hex2string(0xff00ff)); // returns: \"#ff00ff\"\n     * @namespace PIXI.utils\n     */\n    namespace utils {\n        /**\n         * Skips the hello message of renderers that are created after this is run.\n         *\n         * @function skipHello\n         * @memberof PIXI.utils\n         */\n        function skipHello(): void;\n        /**\n         * Logs out the version and renderer information for this running instance of PIXI.\n         * If you don't want to see this message you can run `PIXI.utils.skipHello()` before\n         * creating your renderer. Keep in mind that doing that will forever make you a jerk face.\n         *\n         * @static\n         * @function sayHello\n         * @memberof PIXI.utils\n         * @param {string} type - The string renderer type to log.\n         */\n        function sayHello(type: string): void;\n        /**\n         * Helper for checking for WebGL support.\n         *\n         * @memberof PIXI.utils\n         * @function isWebGLSupported\n         * @return {boolean} Is WebGL supported.\n         */\n        function isWebGLSupported(): boolean;\n        /**\n         * Converts a hexadecimal color number to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).\n         *\n         * @example\n         * PIXI.utils.hex2rgb(0xffffff); // returns [1, 1, 1]\n         * @memberof PIXI.utils\n         * @function hex2rgb\n         * @param {number} hex - The hexadecimal number to convert\n         * @param  {number[]} [out=[]] - If supplied, this array will be used rather than returning a new one\n         * @return {number[]} An array representing the [R, G, B] of the color where all values are floats.\n         */\n        function hex2rgb(hex: number, out?: number[]): number[];\n        /**\n         * Converts a hexadecimal color number to a string.\n         *\n         * @example\n         * PIXI.utils.hex2string(0xffffff); // returns \"#ffffff\"\n         * @memberof PIXI.utils\n         * @function hex2string\n         * @param {number} hex - Number in hex (e.g., `0xffffff`)\n         * @return {string} The string color (e.g., `\"#ffffff\"`).\n         */\n        function hex2string(hex: number): string;\n        /**\n         * Converts a hexadecimal string to a hexadecimal color number.\n         *\n         * @example\n         * PIXI.utils.string2hex(\"#ffffff\"); // returns 0xffffff\n         * @memberof PIXI.utils\n         * @function string2hex\n         * @param {string} string - The string color (e.g., `\"#ffffff\"`)\n         * @return {number} Number in hexadecimal.\n         */\n        function string2hex(string: string): number;\n        /**\n         * Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.\n         *\n         * @example\n         * PIXI.utils.rgb2hex([1, 1, 1]); // returns 0xffffff\n         * @memberof PIXI.utils\n         * @function rgb2hex\n         * @param {number[]} rgb - Array of numbers where all values are normalized floats from 0.0 to 1.0.\n         * @return {number} Number in hexadecimal.\n         */\n        function rgb2hex(rgb: number[]): number;\n        /**\n         * maps premultiply flag and blendMode to adjusted blendMode\n         * @memberof PIXI.utils\n         * @const premultiplyBlendMode\n         * @type {Array<number[]>}\n         */\n        var premultiplyBlendMode: number[][];\n        /**\n         * changes blendMode according to texture format\n         *\n         * @memberof PIXI.utils\n         * @function correctBlendMode\n         * @param {number} blendMode - supposed blend mode\n         * @param {boolean} premultiplied - whether source is premultiplied\n         * @returns {number} true blend mode for this texture\n         */\n        function correctBlendMode(blendMode: number, premultiplied: boolean): number;\n        /**\n         * combines rgb and alpha to out array\n         *\n         * @memberof PIXI.utils\n         * @function premultiplyRgba\n         * @param {Float32Array|number[]} rgb - input rgb\n         * @param {number} alpha - alpha param\n         * @param {Float32Array} [out] - output\n         * @param {boolean} [premultiply=true] - do premultiply it\n         * @returns {Float32Array} vec4 rgba\n         */\n        function premultiplyRgba(rgb: Float32Array | number[], alpha: number, out?: Float32Array, premultiply?: boolean): Float32Array;\n        /**\n         * premultiplies tint\n         *\n         * @memberof PIXI.utils\n         * @function premultiplyTint\n         * @param {number} tint - integer RGB\n         * @param {number} alpha - floating point alpha (0.0-1.0)\n         * @returns {number} tint multiplied by alpha\n         */\n        function premultiplyTint(tint: number, alpha: number): number;\n        /**\n         * converts integer tint and float alpha to vec4 form, premultiplies by default\n         *\n         * @memberof PIXI.utils\n         * @function premultiplyTintToRgba\n         * @param {number} tint - input tint\n         * @param {number} alpha - alpha param\n         * @param {Float32Array} [out] output\n         * @param {boolean} [premultiply=true] - do premultiply it\n         * @returns {Float32Array} vec4 rgba\n         */\n        function premultiplyTintToRgba(tint: number, alpha: number, out?: Float32Array, premultiply?: boolean): Float32Array;\n        /**\n         * Generic Mask Stack data structure\n         *\n         * @memberof PIXI.utils\n         * @function createIndicesForQuads\n         * @param {number} size - Number of quads\n         * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n         * @return {Uint16Array|Uint32Array} - Resulting index buffer\n         */\n        function createIndicesForQuads(size: number, outBuffer?: Uint16Array | Uint32Array): Uint16Array | Uint32Array;\n        /**\n         * Rounds to next power of two.\n         *\n         * @function nextPow2\n         * @memberof PIXI.utils\n         * @param {number} v - input value\n         * @return {number}\n         */\n        function nextPow2(v: number): number;\n        /**\n         * Checks if a number is a power of two.\n         *\n         * @function isPow2\n         * @memberof PIXI.utils\n         * @param {number} v - input value\n         * @return {boolean} `true` if value is power of two\n         */\n        function isPow2(v: number): boolean;\n        /**\n         * Computes ceil of log base 2\n         *\n         * @function log2\n         * @memberof PIXI.utils\n         * @param {number} v - input value\n         * @return {number} logarithm base 2\n         */\n        function log2(v: number): number;\n        /**\n         * Remove items from a javascript array without generating garbage\n         *\n         * @function removeItems\n         * @memberof PIXI.utils\n         * @param {Array<any>} arr - Array to remove elements from\n         * @param {number} startIdx - starting index\n         * @param {number} removeCount - how many to remove\n         */\n        function removeItems(arr: any[], startIdx: number, removeCount: number): void;\n        /**\n         * Returns sign of number\n         *\n         * @memberof PIXI.utils\n         * @function sign\n         * @param {number} n - the number to check the sign of\n         * @returns {number} 0 if `n` is 0, -1 if `n` is negative, 1 if `n` is positive\n         */\n        function sign(n: number): number;\n        /**\n         * Gets the next unique identifier\n         *\n         * @memberof PIXI.utils\n         * @function uid\n         * @return {number} The next unique identifier to use.\n         */\n        function uid(): number;\n        /**\n         * A simple JS library that detects mobile devices.\n         *\n         * @see {@link https://github.com/kaimallea/isMobile}\n         *\n         * @memberof PIXI.utils\n         * @name isMobile\n         * @type {Object}\n         * @property {boolean} any - `true` if current platform is tablet or phone device\n         * @property {boolean} tablet - `true` if current platform large-screen tablet device\n         * @property {boolean} phone - `true` if current platform small-screen phone device\n         * @property {object} apple\n         * @property {boolean} apple.device - `true` if any Apple device\n         * @property {boolean} apple.tablet - `true` if any Apple iPad\n         * @property {boolean} apple.phone - `true` if any Apple iPhone\n         * @property {boolean} apple.ipod - `true` if any iPod\n         * @property {object} android\n         * @property {boolean} android.device - `true` if any Android device\n         * @property {boolean} android.tablet - `true` if any Android tablet\n         * @property {boolean} android.phone - `true` if any Android phone\n         * @property {object} amazon\n         * @property {boolean} amazon.device - `true` if any Silk device\n         * @property {boolean} amazon.tablet - `true` if any Silk tablet\n         * @property {boolean} amazon.phone - `true` if any Silk phone\n         * @property {object} windows\n         * @property {boolean} windows.device - `true` if any Windows device\n         * @property {boolean} windows.tablet - `true` if any Windows tablet\n         * @property {boolean} windows.phone - `true` if any Windows phone\n         */\n        var isMobile: {\n            any: boolean;\n            tablet: boolean;\n            phone: boolean;\n            apple: {\n                device: boolean;\n                tablet: boolean;\n                phone: boolean;\n                ipod: boolean;\n            };\n            android: {\n                device: boolean;\n                tablet: boolean;\n                phone: boolean;\n            };\n            amazon: {\n                device: boolean;\n                tablet: boolean;\n                phone: boolean;\n            };\n            windows: {\n                device: boolean;\n                tablet: boolean;\n                phone: boolean;\n            };\n        };\n        /**\n         * A high performance event emitter\n         *\n         * @see {@link https://github.com/primus/eventemitter3}\n         *\n         * @memberof PIXI.utils\n         * @class EventEmitter\n         * @type {EventEmitter}\n         */\n        class EventEmitter {\n        }\n        /**\n         * A polygon triangulation library\n         *\n         * @see {@link https://github.com/mapbox/earcut}\n         *\n         * @memberof PIXI.utils\n         * @function earcut\n         * @param {number[]} vertices - A flat array of vertex coordinates\n         * @param {number[]} [holes] - An array of hole indices\n         * @param {number} [dimensions=2] - The number of coordinates per vertex in the input array\n         * @return {number[]} Triangulated polygon\n         */\n        function earcut(vertices: number[], holes?: number[], dimensions?: number): number[];\n        /**\n         * Node.js compatible URL utilities.\n         *\n         * @see https://www.npmjs.com/package/url\n         *\n         * @memberof PIXI.utils\n         * @name url\n         * @type {object}\n         */\n        var url: any;\n        /**\n         * Helper for warning developers about deprecated features & settings.\n         * A stack track for warnings is given; useful for tracking-down where\n         * deprecated methods/properties/classes are being used within the code.\n         *\n         * @memberof PIXI.utils\n         * @function deprecation\n         * @param {string} version - The version where the feature became deprecated\n         * @param {string} message - Message should include what is deprecated, where, and the new solution\n         * @param {number} [ignoreDepth=3] - The number of steps to ignore at the top of the error stack\n         *        this is mostly to ignore internal deprecation calls.\n         */\n        function deprecation(version: string, message: string, ignoreDepth?: number): void;\n        /**\n         * Creates a Canvas element of the given size to be used as a target for rendering to.\n         *\n         * @class\n         * @memberof PIXI.utils\n         */\n        class CanvasRenderTarget {\n            constructor(width: number, height: number, resolution?: number);\n            /**\n             * The Canvas object that belongs to this CanvasRenderTarget.\n             *\n             * @member {HTMLCanvasElement} PIXI.utils.CanvasRenderTarget#canvas\n             */\n            canvas: HTMLCanvasElement;\n            /**\n             * A CanvasRenderingContext2D object representing a two-dimensional rendering context.\n             *\n             * @member {CanvasRenderingContext2D} PIXI.utils.CanvasRenderTarget#context\n             */\n            context: CanvasRenderingContext2D;\n            /**\n             * Resizes the canvas to the specified width and height.\n             *\n             * @param {number} width - the new width of the canvas\n             * @param {number} height - the new height of the canvas\n             */\n            resize(width: number, height: number): void;\n            /**\n             * Destroys this canvas.\n             *\n             */\n            destroy(): void;\n            /**\n             * The width of the canvas buffer in pixels.\n             *\n             * @member {number}\n             */\n            width: number;\n            /**\n             * The height of the canvas buffer in pixels.\n             *\n             * @member {number}\n             */\n            height: number;\n        }\n        /**\n         * @todo Describe property usage\n         *\n         * @static\n         * @name ProgramCache\n         * @memberof PIXI.utils\n         * @type {Object}\n         */\n        var ProgramCache: any;\n        /**\n         * @todo Describe property usage\n         *\n         * @static\n         * @name TextureCache\n         * @memberof PIXI.utils\n         * @type {Object}\n         */\n        var TextureCache: any;\n        /**\n         * @todo Describe property usage\n         *\n         * @static\n         * @name BaseTextureCache\n         * @memberof PIXI.utils\n         * @type {Object}\n         */\n        var BaseTextureCache: any;\n        /**\n         * Destroys all texture in the cache\n         *\n         * @memberof PIXI.utils\n         * @function destroyTextureCache\n         */\n        function destroyTextureCache(): void;\n        /**\n         * Removes all textures from cache, but does not destroy them\n         *\n         * @memberof PIXI.utils\n         * @function clearTextureCache\n         */\n        function clearTextureCache(): void;\n        /**\n         * Trim transparent borders from a canvas\n         *\n         * @memberof PIXI.utils\n         * @function trimCanvas\n         * @param {HTMLCanvasElement} canvas - the canvas to trim\n         * @returns {object} Trim data\n         */\n        function trimCanvas(canvas: HTMLCanvasElement): any;\n        /**\n         * @memberof PIXI.utils\n         * @interface DecomposedDataUri\n         */\n        interface DecomposedDataUri {\n            /**\n             * type, eg. `image`\n             * @memberof PIXI.utils.DecomposedDataUri#\n             * @member {string} mediaType\n             */\n            mediaType: string;\n            /**\n             * Sub type, eg. `png`\n             * @memberof PIXI.utils.DecomposedDataUri#\n             * @member {string} subType\n             */\n            subType: string;\n            /**\n             * @memberof PIXI.utils.DecomposedDataUri#\n             * @member {string} charset\n             */\n            charset: string;\n            /**\n             * Data encoding, eg. `base64`\n             * @memberof PIXI.utils.DecomposedDataUri#\n             * @member {string} encoding\n             */\n            encoding: string;\n            /**\n             * The actual data\n             * @memberof PIXI.utils.DecomposedDataUri#\n             * @member {string} data\n             */\n            data: string;\n        }\n        /**\n         * Split a data URI into components. Returns undefined if\n         * parameter `dataUri` is not a valid data URI.\n         *\n         * @memberof PIXI.utils\n         * @function decomposeDataUri\n         * @param {string} dataUri - the data URI to check\n         * @return {PIXI.utils.DecomposedDataUri|undefined} The decomposed data uri or undefined\n         */\n        function decomposeDataUri(dataUri: string): PIXI.utils.DecomposedDataUri | undefined;\n        /**\n         * get the resolution / device pixel ratio of an asset by looking for the prefix\n         * used by spritesheets and image urls\n         *\n         * @memberof PIXI.utils\n         * @function getResolutionOfUrl\n         * @param {string} url - the image path\n         * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.\n         * @return {number} resolution / device pixel ratio of an asset\n         */\n        function getResolutionOfUrl(url: string, defaultValue?: number): number;\n    }\n}\n\n/**\n * @interface SharedArrayBuffer\n */\ndeclare interface SharedArrayBuffer {\n}\n\n/**\n * @interface OffscreenCanvas\n */\ndeclare interface OffscreenCanvas {\n}\n\n\ndeclare namespace PIXI {\n    namespace utils {\n// https://github.com/primus/eventemitter3\n        export interface EventEmitter {\n            /**\n             * Return an array listing the events for which the emitter has registered listeners.\n             *\n             * @returns {(string | symbol)[]}\n             */\n            eventNames(): Array<(string | symbol)>;\n\n            /**\n             * Return the listeners registered for a given event.\n             *\n             * @param {(string | symbol)} event The event name.\n             * @returns {Function[]}\n             */\n            //tslint:disable-next-line:ban-types forbidden-types\n            listeners(event: string | symbol): Array<Function>;\n\n            /**\n             * Return the number of listeners listening to a given event.\n             *\n             * @param {(string | symbol)} event The event name.\n             * @returns {number}\n             */\n            listenerCount(event: string | symbol): number;\n\n            /**\n             * Calls each of the listeners registered for a given event.\n             *\n             * @param {(string | symbol)} event The event name.\n             * @param {...*} args Arguments that are passed to registered listeners\n             * @returns {boolean} `true` if the event had listeners, else `false`.\n             */\n            emit(event: string | symbol, ...args: any[]): boolean;\n\n            /**\n             * Add a listener for a given event.\n             *\n             * @param {(string | symbol)} event The event name.\n             * @param {Function} fn The listener function.\n             * @param {*} [context=this] The context to invoke the listener with.\n             * @returns {EventEmitter} `this`.\n             */\n            //tslint:disable-next-line:ban-types forbidden-types\n            on(event: string | symbol, fn: Function, context?: any): this;\n\n            /**\n             * Add a one-time listener for a given event.\n             *\n             * @param {(string | symbol)} event The event name.\n             * @param {Function} fn The listener function.\n             * @param {*} [context=this] The context to invoke the listener with.\n             * @returns {EventEmitter} `this`.\n             */\n            //tslint:disable-next-line:ban-types forbidden-types\n            once(event: string | symbol, fn: Function, context?: any): this;\n\n            /**\n             * Remove the listeners of a given event.\n             *\n             * @param {(string | symbol)} event The event name.\n             * @param {Function} fn Only remove the listeners that match this function.\n             * @param {*} context Only remove the listeners that have this context.\n             * @param {boolean} once Only remove one-time listeners.\n             * @returns {EventEmitter} `this`.\n             */\n            //tslint:disable-next-line:ban-types forbidden-types\n            removeListener(event: string | symbol, fn?: Function, context?: any, once?: boolean): this;\n\n            /**\n             * Remove all listeners, or those of the specified event.\n             *\n             * @param {(string | symbol)} event The event name.\n             * @returns {EventEmitter} `this`.\n             */\n            removeAllListeners(event?: string | symbol): this;\n\n            /**\n             * Alias method for `removeListener`\n             */\n            //tslint:disable-next-line:ban-types forbidden-types\n            off(event: string | symbol, fn?: Function, context?: any, once?: boolean): this;\n\n            /**\n             * Alias method for `on`\n             */\n            //tslint:disable-next-line:ban-types forbidden-types\n            addListener(event: string | symbol, fn: Function, context?: any): this;\n        }\n    }\n\n\n    type InteractionPointerEvents = \"pointerdown\" | \"pointercancel\" | \"pointerup\" | \"pointertap\" | \"pointerupoutside\" | \"pointermove\" | \"pointerover\" | \"pointerout\";\n    type InteractionTouchEvents = \"touchstart\" | \"touchcancel\" | \"touchend\" | \"touchendoutside\" | \"touchmove\" | \"tap\";\n    type InteractionMouseEvents = \"rightdown\" | \"mousedown\" | \"rightup\" | \"mouseup\" | \"rightclick\" | \"click\" | \"rightupoutside\" | \"mouseupoutside\" | \"mousemove\" | \"mouseover\" | \"mouseout\";\n    type InteractionPixiEvents = \"added\" | \"removed\";\n    type InteractionEventTypes = InteractionPointerEvents | InteractionTouchEvents | InteractionMouseEvents | InteractionPixiEvents;\n\n    export interface DisplayObject {\n        on(event: InteractionEventTypes, fn: (event: InteractionEvent) => void, context?: any): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        on(event: string | symbol, fn: Function, context?: any): this;\n        once(event: InteractionEventTypes, fn: (event: InteractionEvent) => void, context?: any): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        once(event: string | symbol, fn: Function, context?: any): this;\n        removeListener(event: InteractionEventTypes, fn?: (event: InteractionEvent) => void, context?: any): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        removeListener(event: string | symbol, fn?: Function, context?: any): this;\n        removeAllListeners(event?: InteractionEventTypes): this;\n        removeAllListeners(event?: string | symbol): this;\n        off(event: InteractionEventTypes, fn?: (event: InteractionEvent) => void, context?: any): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        off(event: string | symbol, fn?: Function, context?: any): this;\n        addListener(event: InteractionEventTypes, fn: (event: InteractionEvent) => void, context?: any): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        addListener(event: string | symbol, fn: Function, context?: any): this;\n    }\n\n    export interface Container {\n        once(event: \"added\" | \"removed\", fn: (displayObject: DisplayObject) => void, context?: any): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        once(event: string, fn: Function, context?: any): this;\n        on(event: \"added\" | \"removed\", fn: (displayObject: DisplayObject) => void, context?: any): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        on(event: string, fn: Function, context?: any): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        off(event: \"added\" | \"removed\" | string, fn?: Function, context?: any): this;\n    }\n}\n\ndeclare namespace PIXI {\n    export interface Loader {\n        baseUrl: string;\n        progress: number;\n        loading: boolean;\n        defaultQueryString: string;\n        resources: IResourceDictionary;\n        concurrency: number;\n\n        add(...params: any[]): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        add(name: string, url: string, options?: ILoaderOptions, cb?: Function): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        add(obj: string | any | any[], options?: ILoaderOptions, cb?: Function): this;\n\n        //tslint:disable-next-line:ban-types forbidden-types\n        pre(fn: Function): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        use(fn: Function): this;\n        reset(): this;\n        //tslint:disable-next-line:ban-types forbidden-types\n        load(cb?: (loader: Loader, resources: Partial<Record<string, LoaderResource>>) => void): this;\n\n        destroy(): void;\n    }\n\n    export interface IResourceDictionary {\n        [index: string]: LoaderResource;\n    }\n\n    export interface ITextureDictionary {\n        [index: string]: Texture;\n    }\n\n    export interface ILoaderOptions {\n        crossOrigin?: boolean | string;\n        loadType?: number;\n        xhrType?: string;\n        metadata?: {\n            loadElement?: HTMLImageElement | HTMLAudioElement | HTMLVideoElement;\n            skipSource?: boolean;\n            mimeType?: string | string[];\n        };\n    }\n\n    export interface LoaderResource {\n        name: string;\n        url: string;\n        extension: string;\n        data: any;\n        crossOrigin: boolean | string;\n        loadType: number;\n        xhrType: string;\n        metadata: any;\n        error: Error;\n        xhr: XMLHttpRequest | null;\n        children: LoaderResource[];\n        type: number;\n        progressChunk: number;\n        isDataUrl: boolean;\n        isComplete: boolean;\n        isLoading: boolean;\n        complete(): void;\n        abort(message?: string): void;\n        //tslint:disable-next-line:ban-types forbidden-types\n        load(cb?: Function): void;\n        texture: Texture;\n        spineAtlas: any;\n        spineData: any;\n        spritesheet?: Spritesheet;\n        textures?: ITextureDictionary;\n    }\n\n    namespace LoaderResource {\n        function setExtensionLoadType(extname: string, loadType: number): void;\n        function setExtensionXhrType(extname: string, xhrType: string): void;\n\n        export enum STATUS_FLAGS {\n            NONE = 0,\n            DATA_URL = (1 << 0),\n            COMPLETE = (1 << 1),\n            LOADING = (1 << 2),\n        }\n\n        export enum TYPE {\n            UNKNOWN = 0,\n            JSON = 1,\n            XML = 2,\n            IMAGE = 3,\n            AUDIO = 4,\n            VIDEO = 5,\n            TEXT = 6,\n        }\n\n        export enum LOAD_TYPE {\n\n            /** Uses XMLHttpRequest to load the resource. */\n            XHR = 1,\n            /** Uses an `Image` object to load the resource. */\n            IMAGE = 2,\n            /** Uses an `Audio` object to load the resource. */\n            AUDIO = 3,\n            /** Uses a `Video` object to load the resource. */\n            VIDEO = 4,\n        }\n\n        export enum XHR_RESPONSE_TYPE {\n            /** string */\n            DEFAULT = 'text',\n            /** ArrayBuffer */\n            BUFFER = 'arraybuffer',\n            /** Blob */\n            BLOB = 'blob',\n            /** Document */\n            DOCUMENT = 'document',\n            /** Object */\n            JSON = 'json',\n            /** String */\n            TEXT = 'text',\n        }\n\n        let EMPTY_GIF: string;\n    }\n}\n\ndeclare module \"pixi.js\" {\n    export = PIXI;\n}"]},75045:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["simple-peer\\index.d.ts",'// Type definitions for simple-peer 9.11\n// Project: https://github.com/feross/simple-peer\n// Definitions by: Tomasz Łaziuk <https://github.com/tlaziuk>\n//                 xWiiLLz <https://github.com/xWiiLLz>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.0\n\n/// <reference types="node" />\n\nimport * as stream from "stream";\n\ndeclare const SimplePeer: SimplePeer.SimplePeer;\n\ndeclare namespace SimplePeer {\n    interface Options {\n        /** set to `true` if this is the initiating peer */\n        initiator?: boolean | undefined;\n        /** custom webrtc data channel configuration (used by [`createDataChannel`](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel)) */\n        channelConfig?: RTCDataChannelInit | undefined;\n        /** custom webrtc data channel name */\n        channelName?: string | undefined;\n        /** custom webrtc configuration (used by [`RTCPeerConnection`](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) constructor) */\n        config?: RTCConfiguration | undefined;\n        /** custom offer options (used by [`createOffer`](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer) method) */\n        offerOptions?: RTCOfferOptions | undefined;\n        /** custom answer options (used by [`createAnswer`](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer) method) */\n        answerOptions?: RTCAnswerOptions | undefined;\n        /** function to transform the generated SDP signaling data (for advanced users) */\n        sdpTransform?: ((this: Instance, sdp: string) => string) | undefined;\n        /** if video/voice is desired, pass stream returned from [`getUserMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia) */\n        stream?: MediaStream | undefined;\n        /** an array of MediaStreams returned from [`getUserMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia) */\n        streams?: MediaStream[] | undefined;\n        /**  set to `false` to disable [trickle ICE](http://webrtchacks.com/trickle-ice/) and get a single \'signal\' event (slower) */\n        trickle?: boolean | undefined;\n        /** custom webrtc implementation, mainly useful in node to specify in the [wrtc](https://npmjs.com/package/wrtc) package. */\n        wrtc?: {\n            RTCPeerConnection: typeof RTCPeerConnection;\n            RTCSessionDescription: typeof RTCSessionDescription;\n            RTCIceCandidate: typeof RTCIceCandidate;\n        } | undefined;\n        /** set to true to create the stream in Object Mode. In this mode, incoming string data is not automatically converted to Buffer objects. */\n        objectMode?: boolean | undefined;\n    }\n    interface SimplePeer {\n        prototype: Instance;\n        /**\n         * Create a new WebRTC peer connection.\n         *\n         * A "data channel" for text/binary communication is always established, because it\'s cheap and often useful. For video/voice communication, pass the stream option.\n         *\n         * If opts is specified, then the default options (see <https://github.com/feross/simple-peer#peer--new-peeropts>) will be overridden.\n         */\n        new (opts?: Options): Instance;\n\n        /** Detect native WebRTC support in the javascript environment. */\n        readonly WEBRTC_SUPPORT: boolean;\n\n        // ********************************\n        // methods which are not documented\n        // ********************************\n\n        /**\n         * Expose peer and data channel config for overriding all Peer\n         * instances. Otherwise, just set opts.config or opts.channelConfig\n         * when constructing a Peer.\n         */\n        config: RTCConfiguration;\n        /**\n         * Expose peer and data channel config for overriding all Peer\n         * instances. Otherwise, just set opts.config or opts.channelConfig\n         * when constructing a Peer.\n         */\n        channelConfig: RTCDataChannelInit;\n    }\n\n    type TypedArray =\n        | Int8Array\n        | Uint8Array\n        | Uint8ClampedArray\n        | Int16Array\n        | Uint16Array\n        | Int32Array\n        | Uint32Array\n        | Float32Array\n        | Float64Array;\n\n    type SimplePeerData = string | Buffer | TypedArray | ArrayBuffer | Blob;\n\n    type SignalData =\n        | {\n              type: "transceiverRequest";\n              transceiverRequest: {\n                  kind: string;\n                  init?: RTCRtpTransceiverInit | undefined;\n              };\n          }\n        | {\n              type: "renegotiate";\n              renegotiate: true;\n          }\n        | {\n              type: "candidate";\n              candidate: RTCIceCandidate;\n          }\n        | RTCSessionDescriptionInit;\n\n    interface Instance extends stream.Duplex {\n        /**\n         * Call this method whenever the remote peer emits a `peer.on(\'signal\')` event.\n         *\n         * The `data` will encapsulate a webrtc offer, answer, or ice candidate. These messages help\n         * the peers to eventually establish a direct connection to each other. The contents of these\n         * strings are an implementation detail that can be ignored by the user of this module;\n         * simply pass the data from \'signal\' events to the remote peer and call `peer.signal(data)`\n         * to get connected.\n         */\n        signal(data: string | SignalData): void;\n\n        /**\n         * Send text/binary data to the remote peer. `data` can be any of several types: `String`,\n         * `Buffer` (see [buffer](https://github.com/feross/buffer)), `ArrayBufferView` (`Uint8Array`,\n         * etc.), `ArrayBuffer`, or `Blob` (in browsers that support it).\n         *\n         * Note: If this method is called before the `peer.on(\'connect\')` event has fired,\n         * then an exception will be thrown. Use `peer.write(data)`\n         * (which is inherited from the node.js [duplex stream](http://nodejs.org/api/stream.html) interface)\n         * if you want this data to be buffered instead.\n         */\n        send(data: SimplePeerData): void;\n\n        /** Add a `MediaStream` to the connection. */\n        addStream(stream: MediaStream): void;\n\n        /** Remove a `MediaStream` from the connection. */\n        removeStream(stream: MediaStream): void;\n\n        /** Add a `MediaStreamTrack` to the connection. Must also pass the `MediaStream` you want to attach it to. */\n        addTrack(track: MediaStreamTrack, stream: MediaStream): void;\n\n        /** Remove a `MediaStreamTrack` from the connection. Must also pass the `MediaStream` that it was attached to. */\n        removeTrack(track: MediaStreamTrack, stream: MediaStream): void;\n\n        /** Replace a `MediaStreamTrack` with another track. Must also pass the `MediaStream` that the old track was attached to. */\n        replaceTrack(oldTrack: MediaStreamTrack, newTrack: MediaStreamTrack, stream: MediaStream): void;\n\n        /** Add a `RTCRtpTransceiver` to the connection. Can be used to add transceivers before adding tracks. Automatically called as necessary by `addTrack`. */\n        addTransceiver(kind: string, init?: RTCRtpTransceiverInit): void;\n\n        // TODO: https://github.com/feross/simple-peer/blob/d972548299a50f836ca91c36e39304ef0f9474b7/index.js#L427\n        // destroy(onclose?: () => void): void;\n        /**\n         * Destroy and cleanup this peer connection.\n         *\n         * If the optional `err` parameter is passed, then it will be emitted as an `\'error\'`\n         * event on the stream.\n         */\n        destroy(error?: Error): void;\n\n        // ********************************\n        // methods which are not documented\n        // ********************************\n\n        readonly bufferSize: number;\n        readonly connected: boolean;\n        address():\n            | { port: undefined; family: undefined; address: undefined }\n            | { port: number; family: "IPv6" | "IPv4"; address: string };\n\n        // used for debug logging\n        _debug(message?: any, ...optionalParams: any[]): void;\n\n        // ******\n        // events\n        // ******\n        addListener(event: "connect" | "close" | "end" | "pause" | "readable" | "resume", listener: () => void): this;\n        addListener(event: "signal", listener: (data: SignalData) => void): this;\n        addListener(event: "stream", listener: (stream: MediaStream) => void): this;\n        addListener(event: "track", listener: (track: MediaStreamTrack, stream: MediaStream) => void): this;\n        addListener(event: "data", listener: (chunk: any) => void): this;\n        addListener(event: "error", listener: (err: Error) => void): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n\n        emit(event: "connect" | "close" | "end" | "pause" | "readable" | "resume"): boolean;\n        emit(event: "signal", data: SignalData): this;\n        emit(event: "stream", stream: MediaStream): this;\n        emit(event: "track", track: MediaStreamTrack, stream: MediaStream): this;\n        emit(event: "data", chunk: any): boolean;\n        emit(event: "error", err: Error): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n\n        on(event: "connect" | "close" | "end" | "pause" | "readable" | "resume", listener: () => void): this;\n        on(event: "signal", listener: (data: SignalData) => void): this;\n        on(event: "stream", listener: (stream: MediaStream) => void): this;\n        on(event: "track", listener: (track: MediaStreamTrack, stream: MediaStream) => void): this;\n        on(event: "data", listener: (chunk: any) => void): this;\n        on(event: "error", listener: (err: Error) => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n\n        once(event: "connect" | "close" | "end" | "pause" | "readable" | "resume", listener: () => void): this;\n        once(event: "signal", listener: (data: SignalData) => void): this;\n        once(event: "stream", listener: (stream: MediaStream) => void): this;\n        once(event: "track", listener: (track: MediaStreamTrack, stream: MediaStream) => void): this;\n        once(event: "data", listener: (chunk: any) => void): this;\n        once(event: "error", listener: (err: Error) => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n\n        prependListener(\n            event: "connect" | "close" | "end" | "pause" | "readable" | "resume",\n            listener: () => void,\n        ): this;\n        prependListener(event: "signal", listener: (data: SignalData) => void): this;\n        prependListener(event: "stream", listener: (stream: MediaStream) => void): this;\n        prependListener(event: "track", listener: (track: MediaStreamTrack, stream: MediaStream) => void): this;\n        prependListener(event: "data", listener: (chunk: any) => void): this;\n        prependListener(event: "error", listener: (err: Error) => void): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n\n        prependOnceListener(\n            event: "connect" | "close" | "end" | "pause" | "readable" | "resume",\n            listener: () => void,\n        ): this;\n        prependOnceListener(event: "signal", listener: (data: SignalData) => void): this;\n        prependOnceListener(event: "stream", listener: (stream: MediaStream) => void): this;\n        prependOnceListener(event: "track", listener: (track: MediaStreamTrack, stream: MediaStream) => void): this;\n        prependOnceListener(event: "data", listener: (chunk: any) => void): this;\n        prependOnceListener(event: "error", listener: (err: Error) => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n\n        removeListener(\n            event: "connect" | "close" | "end" | "pause" | "readable" | "resume",\n            listener: () => void,\n        ): this;\n        removeListener(event: "signal", listener: (data: SignalData) => void): this;\n        removeListener(event: "stream", listener: (stream: MediaStream) => void): this;\n        removeListener(event: "track", listener: (track: MediaStreamTrack, stream: MediaStream) => void): this;\n        removeListener(event: "data", listener: (chunk: any) => void): this;\n        removeListener(event: "error", listener: (err: Error) => void): this;\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n}\n\nexport = SimplePeer;\n']},46327:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["socket.io-client\\build\\index.d.ts",'import { ManagerOptions } from "./manager";\nimport { Socket, SocketOptions } from "./socket";\n/**\n * Looks up an existing `Manager` for multiplexing.\n * If the user summons:\n *\n *   `io(\'http://localhost/a\');`\n *   `io(\'http://localhost/b\');`\n *\n * We reuse the existing instance based on same scheme/port/host,\n * and we initialize sockets for each namespace.\n *\n * @public\n */\ndeclare function lookup(opts?: Partial<ManagerOptions & SocketOptions>): Socket;\ndeclare function lookup(uri: string, opts?: Partial<ManagerOptions & SocketOptions>): Socket;\ndeclare function lookup(uri: string | Partial<ManagerOptions & SocketOptions>, opts?: Partial<ManagerOptions & SocketOptions>): Socket;\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from "socket.io-parser";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, ManagerOptions } from "./manager";\nexport { Socket } from "./socket";\nexport { lookup as io, SocketOptions };\nexport default lookup;\n']},42043:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["socket.io-client\\build\\manager.d.ts",'import { Socket, SocketOptions } from "./socket";\nimport { Packet } from "socket.io-parser";\nimport { DefaultEventsMap, EventsMap, StrictEventEmitter } from "./typed-events";\ninterface EngineOptions {\n    /**\n     * The host that we\'re connecting to. Set from the URI passed when connecting\n     */\n    host: string;\n    /**\n     * The hostname for our connection. Set from the URI passed when connecting\n     */\n    hostname: string;\n    /**\n     * If this is a secure connection. Set from the URI passed when connecting\n     */\n    secure: boolean;\n    /**\n     * The port for our connection. Set from the URI passed when connecting\n     */\n    port: string;\n    /**\n     * Any query parameters in our uri. Set from the URI passed when connecting\n     */\n    query: {\n        [key: string]: string;\n    };\n    /**\n     * `http.Agent` to use, defaults to `false` (NodeJS only)\n     */\n    agent: string | boolean;\n    /**\n     * Whether the client should try to upgrade the transport from\n     * long-polling to something better.\n     * @default true\n     */\n    upgrade: boolean;\n    /**\n     * Forces JSONP for polling transport.\n     */\n    forceJSONP: boolean;\n    /**\n     * Determines whether to use JSONP when necessary for polling. If\n     * disabled (by settings to false) an error will be emitted (saying\n     * "No transports available") if no other transports are available.\n     * If another transport is available for opening a connection (e.g.\n     * WebSocket) that transport will be used instead.\n     * @default true\n     */\n    jsonp: boolean;\n    /**\n     * Forces base 64 encoding for polling transport even when XHR2\n     * responseType is available and WebSocket even if the used standard\n     * supports binary.\n     */\n    forceBase64: boolean;\n    /**\n     * Enables XDomainRequest for IE8 to avoid loading bar flashing with\n     * click sound. default to `false` because XDomainRequest has a flaw\n     * of not sending cookie.\n     * @default false\n     */\n    enablesXDR: boolean;\n    /**\n     * The param name to use as our timestamp key\n     * @default \'t\'\n     */\n    timestampParam: string;\n    /**\n     * Whether to add the timestamp with each transport request. Note: this\n     * is ignored if the browser is IE or Android, in which case requests\n     * are always stamped\n     * @default false\n     */\n    timestampRequests: boolean;\n    /**\n     * A list of transports to try (in order). Engine.io always attempts to\n     * connect directly with the first one, provided the feature detection test\n     * for it passes.\n     * @default [\'polling\',\'websocket\']\n     */\n    transports: string[];\n    /**\n     * The port the policy server listens on\n     * @default 843\n     */\n    policyPost: number;\n    /**\n     * If true and if the previous websocket connection to the server succeeded,\n     * the connection attempt will bypass the normal upgrade process and will\n     * initially try websocket. A connection attempt following a transport error\n     * will use the normal upgrade process. It is recommended you turn this on\n     * only when using SSL/TLS connections, or if you know that your network does\n     * not block websockets.\n     * @default false\n     */\n    rememberUpgrade: boolean;\n    /**\n     * Are we only interested in transports that support binary?\n     */\n    onlyBinaryUpgrades: boolean;\n    /**\n     * Timeout for xhr-polling requests in milliseconds (0) (only for polling transport)\n     */\n    requestTimeout: number;\n    /**\n     * Transport options for Node.js client (headers etc)\n     */\n    transportOptions: Object;\n    /**\n     * (SSL) Certificate, Private key and CA certificates to use for SSL.\n     * Can be used in Node.js client environment to manually specify\n     * certificate information.\n     */\n    pfx: string;\n    /**\n     * (SSL) Private key to use for SSL. Can be used in Node.js client\n     * environment to manually specify certificate information.\n     */\n    key: string;\n    /**\n     * (SSL) A string or passphrase for the private key or pfx. Can be\n     * used in Node.js client environment to manually specify certificate\n     * information.\n     */\n    passphrase: string;\n    /**\n     * (SSL) Public x509 certificate to use. Can be used in Node.js client\n     * environment to manually specify certificate information.\n     */\n    cert: string;\n    /**\n     * (SSL) An authority certificate or array of authority certificates to\n     * check the remote host against.. Can be used in Node.js client\n     * environment to manually specify certificate information.\n     */\n    ca: string | string[];\n    /**\n     * (SSL) A string describing the ciphers to use or exclude. Consult the\n     * [cipher format list]\n     * (http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT) for\n     * details on the format.. Can be used in Node.js client environment to\n     * manually specify certificate information.\n     */\n    ciphers: string;\n    /**\n     * (SSL) If true, the server certificate is verified against the list of\n     * supplied CAs. An \'error\' event is emitted if verification fails.\n     * Verification happens at the connection level, before the HTTP request\n     * is sent. Can be used in Node.js client environment to manually specify\n     * certificate information.\n     */\n    rejectUnauthorized: boolean;\n    /**\n     * Headers that will be passed for each request to the server (via xhr-polling and via websockets).\n     * These values then can be used during handshake or for special proxies.\n     */\n    extraHeaders?: {\n        [header: string]: string;\n    };\n    /**\n     * Whether to include credentials (cookies, authorization headers, TLS\n     * client certificates, etc.) with cross-origin XHR polling requests\n     * @default false\n     */\n    withCredentials: boolean;\n    /**\n     * Whether to automatically close the connection whenever the beforeunload event is received.\n     * @default true\n     */\n    closeOnBeforeunload: boolean;\n}\nexport interface ManagerOptions extends EngineOptions {\n    /**\n     * Should we force a new Manager for this connection?\n     * @default false\n     */\n    forceNew: boolean;\n    /**\n     * Should we multiplex our connection (reuse existing Manager) ?\n     * @default true\n     */\n    multiplex: boolean;\n    /**\n     * The path to get our client file from, in the case of the server\n     * serving it\n     * @default \'/socket.io\'\n     */\n    path: string;\n    /**\n     * Should we allow reconnections?\n     * @default true\n     */\n    reconnection: boolean;\n    /**\n     * How many reconnection attempts should we try?\n     * @default Infinity\n     */\n    reconnectionAttempts: number;\n    /**\n     * The time delay in milliseconds between reconnection attempts\n     * @default 1000\n     */\n    reconnectionDelay: number;\n    /**\n     * The max time delay in milliseconds between reconnection attempts\n     * @default 5000\n     */\n    reconnectionDelayMax: number;\n    /**\n     * Used in the exponential backoff jitter when reconnecting\n     * @default 0.5\n     */\n    randomizationFactor: number;\n    /**\n     * The timeout in milliseconds for our connection attempt\n     * @default 20000\n     */\n    timeout: number;\n    /**\n     * Should we automatically connect?\n     * @default true\n     */\n    autoConnect: boolean;\n    /**\n     * weather we should unref the reconnect timer when it is\n     * create automatically\n     * @default false\n     */\n    autoUnref: boolean;\n    /**\n     * the parser to use. Defaults to an instance of the Parser that ships with socket.io.\n     */\n    parser: any;\n}\ninterface ManagerReservedEvents {\n    open: () => void;\n    error: (err: Error) => void;\n    ping: () => void;\n    packet: (packet: Packet) => void;\n    close: (reason: string) => void;\n    reconnect_failed: () => void;\n    reconnect_attempt: (attempt: number) => void;\n    reconnect_error: (err: Error) => void;\n    reconnect: (attempt: number) => void;\n}\nexport declare class Manager<ListenEvents extends EventsMap = DefaultEventsMap, EmitEvents extends EventsMap = ListenEvents> extends StrictEventEmitter<{}, {}, ManagerReservedEvents> {\n    /**\n     * The Engine.IO client instance\n     *\n     * @public\n     */\n    engine: any;\n    /**\n     * @private\n     */\n    _autoConnect: boolean;\n    /**\n     * @private\n     */\n    _readyState: "opening" | "open" | "closed";\n    /**\n     * @private\n     */\n    _reconnecting: boolean;\n    private readonly uri;\n    opts: Partial<ManagerOptions>;\n    private nsps;\n    private subs;\n    private backoff;\n    private _reconnection;\n    private _reconnectionAttempts;\n    private _reconnectionDelay;\n    private _randomizationFactor;\n    private _reconnectionDelayMax;\n    private _timeout;\n    private encoder;\n    private decoder;\n    private skipReconnect;\n    /**\n     * `Manager` constructor.\n     *\n     * @param uri - engine instance or engine uri/opts\n     * @param opts - options\n     * @public\n     */\n    constructor(opts: Partial<ManagerOptions>);\n    constructor(uri?: string, opts?: Partial<ManagerOptions>);\n    constructor(uri?: string | Partial<ManagerOptions>, opts?: Partial<ManagerOptions>);\n    /**\n     * Sets the `reconnection` config.\n     *\n     * @param {Boolean} v - true/false if it should automatically reconnect\n     * @return {Manager} self or value\n     * @public\n     */\n    reconnection(v: boolean): this;\n    reconnection(): boolean;\n    reconnection(v?: boolean): this | boolean;\n    /**\n     * Sets the reconnection attempts config.\n     *\n     * @param {Number} v - max reconnection attempts before giving up\n     * @return {Manager} self or value\n     * @public\n     */\n    reconnectionAttempts(v: number): this;\n    reconnectionAttempts(): number;\n    reconnectionAttempts(v?: number): this | number;\n    /**\n     * Sets the delay between reconnections.\n     *\n     * @param {Number} v - delay\n     * @return {Manager} self or value\n     * @public\n     */\n    reconnectionDelay(v: number): this;\n    reconnectionDelay(): number;\n    reconnectionDelay(v?: number): this | number;\n    /**\n     * Sets the randomization factor\n     *\n     * @param v - the randomization factor\n     * @return self or value\n     * @public\n     */\n    randomizationFactor(v: number): this;\n    randomizationFactor(): number;\n    randomizationFactor(v?: number): this | number;\n    /**\n     * Sets the maximum delay between reconnections.\n     *\n     * @param v - delay\n     * @return self or value\n     * @public\n     */\n    reconnectionDelayMax(v: number): this;\n    reconnectionDelayMax(): number;\n    reconnectionDelayMax(v?: number): this | number;\n    /**\n     * Sets the connection timeout. `false` to disable\n     *\n     * @param v - connection timeout\n     * @return self or value\n     * @public\n     */\n    timeout(v: number | boolean): this;\n    timeout(): number | boolean;\n    timeout(v?: number | boolean): this | number | boolean;\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    private maybeReconnectOnOpen;\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn?: (err?: Error) => void): this;\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn?: (err?: Error) => void): this;\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    private onopen;\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    private onping;\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    private ondata;\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    private ondecoded;\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    private onerror;\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp: string, opts?: Partial<SocketOptions>): Socket;\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket: Socket): void;\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet: Partial<Packet & {\n        query: string;\n        options: any;\n    }>): void;\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    private cleanup;\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close(): void;\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    private disconnect;\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    private onclose;\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    private reconnect;\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    private onreconnect;\n}\nexport {};\n']},5195:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["socket.io-client\\build\\socket.d.ts",'import { Packet } from "socket.io-parser";\nimport { Manager } from "./manager";\nimport { DefaultEventsMap, EventNames, EventParams, EventsMap, StrictEventEmitter } from "./typed-events";\nexport interface SocketOptions {\n    /**\n     * the authentication payload sent when connecting to the Namespace\n     */\n    auth: {\n        [key: string]: any;\n    } | ((cb: (data: object) => void) => void);\n}\ninterface SocketReservedEvents {\n    connect: () => void;\n    connect_error: (err: Error) => void;\n    disconnect: (reason: Socket.DisconnectReason) => void;\n}\nexport declare class Socket<ListenEvents extends EventsMap = DefaultEventsMap, EmitEvents extends EventsMap = ListenEvents> extends StrictEventEmitter<ListenEvents, EmitEvents, SocketReservedEvents> {\n    readonly io: Manager<ListenEvents, EmitEvents>;\n    id: string;\n    connected: boolean;\n    disconnected: boolean;\n    auth: {\n        [key: string]: any;\n    } | ((cb: (data: object) => void) => void);\n    receiveBuffer: Array<ReadonlyArray<any>>;\n    sendBuffer: Array<Packet>;\n    private readonly nsp;\n    private ids;\n    private acks;\n    private flags;\n    private subs?;\n    private _anyListeners;\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io: Manager, nsp: string, opts?: Partial<SocketOptions>);\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    private subEvents;\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active(): boolean;\n    /**\n     * "Opens" the socket.\n     *\n     * @public\n     */\n    connect(): this;\n    /**\n     * Alias for connect()\n     */\n    open(): this;\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args: any[]): this;\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it\'s emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit<Ev extends EventNames<EmitEvents>>(ev: Ev, ...args: EventParams<EmitEvents, Ev>): this;\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    private packet;\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    private onopen;\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    private onerror;\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    private onclose;\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    private onpacket;\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    private onevent;\n    private emitEvent;\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    private ack;\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    private onack;\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    private onconnect;\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    private emitBuffered;\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    private ondisconnect;\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don\'t get triggered for this.\n     *\n     * @private\n     */\n    private destroy;\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect(): this;\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close(): this;\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress: boolean): this;\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile(): this;\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener: (...args: any[]) => void): this;\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener: (...args: any[]) => void): this;\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener?: (...args: any[]) => void): this;\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny(): ((...args: any[]) => void)[];\n}\nexport declare namespace Socket {\n    type DisconnectReason = "io server disconnect" | "io client disconnect" | "ping timeout" | "transport close" | "transport error";\n}\nexport {};\n']},7358:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["socket.io-client\\build\\typed-events.d.ts",'import Emitter = require("component-emitter");\n/**\n * An events map is an interface that maps event names to their value, which\n * represents the type of the `on` listener.\n */\nexport interface EventsMap {\n    [event: string]: any;\n}\n/**\n * The default events map, used if no EventsMap is given. Using this EventsMap\n * is equivalent to accepting all event names, and any data.\n */\nexport interface DefaultEventsMap {\n    [event: string]: (...args: any[]) => void;\n}\n/**\n * Returns a union type containing all the keys of an event map.\n */\nexport declare type EventNames<Map extends EventsMap> = keyof Map & (string | symbol);\n/** The tuple type representing the parameters of an event listener */\nexport declare type EventParams<Map extends EventsMap, Ev extends EventNames<Map>> = Parameters<Map[Ev]>;\n/**\n * The event names that are either in ReservedEvents or in UserEvents\n */\nexport declare type ReservedOrUserEventNames<ReservedEventsMap extends EventsMap, UserEvents extends EventsMap> = EventNames<ReservedEventsMap> | EventNames<UserEvents>;\n/**\n * Type of a listener of a user event or a reserved event. If `Ev` is in\n * `ReservedEvents`, the reserved event listener is returned.\n */\nexport declare type ReservedOrUserListener<ReservedEvents extends EventsMap, UserEvents extends EventsMap, Ev extends ReservedOrUserEventNames<ReservedEvents, UserEvents>> = FallbackToUntypedListener<Ev extends EventNames<ReservedEvents> ? ReservedEvents[Ev] : Ev extends EventNames<UserEvents> ? UserEvents[Ev] : never>;\n/**\n * Returns an untyped listener type if `T` is `never`; otherwise, returns `T`.\n *\n * This is a hack to mitigate https://github.com/socketio/socket.io/issues/3833.\n * Needed because of https://github.com/microsoft/TypeScript/issues/41778\n */\ndeclare type FallbackToUntypedListener<T> = [T] extends [never] ? (...args: any[]) => void : T;\n/**\n * Strictly typed version of an `EventEmitter`. A `TypedEventEmitter` takes type\n * parameters for mappings of event names to event data types, and strictly\n * types method calls to the `EventEmitter` according to these event maps.\n *\n * @typeParam ListenEvents - `EventsMap` of user-defined events that can be\n * listened to with `on` or `once`\n * @typeParam EmitEvents - `EventsMap` of user-defined events that can be\n * emitted with `emit`\n * @typeParam ReservedEvents - `EventsMap` of reserved events, that can be\n * emitted by socket.io with `emitReserved`, and can be listened to with\n * `listen`.\n */\nexport declare abstract class StrictEventEmitter<ListenEvents extends EventsMap, EmitEvents extends EventsMap, ReservedEvents extends EventsMap = {}> extends Emitter {\n    /**\n     * Adds the `listener` function as an event listener for `ev`.\n     *\n     * @param ev Name of the event\n     * @param listener Callback function\n     */\n    on<Ev extends ReservedOrUserEventNames<ReservedEvents, ListenEvents>>(ev: Ev, listener: ReservedOrUserListener<ReservedEvents, ListenEvents, Ev>): this;\n    /**\n     * Adds a one-time `listener` function as an event listener for `ev`.\n     *\n     * @param ev Name of the event\n     * @param listener Callback function\n     */\n    once<Ev extends ReservedOrUserEventNames<ReservedEvents, ListenEvents>>(ev: Ev, listener: ReservedOrUserListener<ReservedEvents, ListenEvents, Ev>): this;\n    /**\n     * Emits an event.\n     *\n     * @param ev Name of the event\n     * @param args Values to send to listeners of this event\n     */\n    emit<Ev extends EventNames<EmitEvents>>(ev: Ev, ...args: EventParams<EmitEvents, Ev>): this;\n    /**\n     * Emits a reserved event.\n     *\n     * This method is `protected`, so that only a class extending\n     * `StrictEventEmitter` can emit its own reserved events.\n     *\n     * @param ev Reserved event name\n     * @param args Arguments to emit along with the event\n     */\n    protected emitReserved<Ev extends EventNames<ReservedEvents>>(ev: Ev, ...args: EventParams<ReservedEvents, Ev>): this;\n    /**\n     * Returns the listeners listening to an event.\n     *\n     * @param event Event name\n     * @returns Array of listeners subscribed to `event`\n     */\n    listeners<Ev extends ReservedOrUserEventNames<ReservedEvents, ListenEvents>>(event: Ev): ReservedOrUserListener<ReservedEvents, ListenEvents, Ev>[];\n}\nexport {};\n']},58524:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});const a=["tinymce\\tinymce.d.ts","interface StringPathBookmark {\n    start: string;\n    end?: string;\n}\ninterface RangeBookmark {\n    rng: Range;\n}\ninterface IdBookmark {\n    id: string;\n    keep?: boolean;\n}\ninterface IndexBookmark {\n    name: string;\n    index: number;\n}\ninterface PathBookmark {\n    start: number[];\n    end?: number[];\n}\ndeclare type Bookmark = StringPathBookmark | RangeBookmark | IdBookmark | IndexBookmark | PathBookmark;\ndeclare type MappedEvent<T, K extends string> = K extends keyof T ? T[K] : any;\ninterface NativeEventMap {\n    'beforepaste': Event;\n    'blur': FocusEvent;\n    'beforeinput': InputEvent;\n    'click': MouseEvent;\n    'compositionend': Event;\n    'compositionstart': Event;\n    'compositionupdate': Event;\n    'contextmenu': PointerEvent;\n    'copy': ClipboardEvent;\n    'cut': ClipboardEvent;\n    'dblclick': MouseEvent;\n    'drag': DragEvent;\n    'dragdrop': DragEvent;\n    'dragend': DragEvent;\n    'draggesture': DragEvent;\n    'dragover': DragEvent;\n    'dragstart': DragEvent;\n    'drop': DragEvent;\n    'focus': FocusEvent;\n    'focusin': FocusEvent;\n    'focusout': FocusEvent;\n    'input': InputEvent;\n    'keydown': KeyboardEvent;\n    'keypress': KeyboardEvent;\n    'keyup': KeyboardEvent;\n    'mousedown': MouseEvent;\n    'mouseenter': MouseEvent;\n    'mouseleave': MouseEvent;\n    'mousemove': MouseEvent;\n    'mouseout': MouseEvent;\n    'mouseover': MouseEvent;\n    'mouseup': MouseEvent;\n    'paste': ClipboardEvent;\n    'selectionchange': Event;\n    'submit': Event;\n    'touchend': TouchEvent;\n    'touchmove': TouchEvent;\n    'touchstart': TouchEvent;\n    'touchcancel': TouchEvent;\n    'wheel': WheelEvent;\n}\ndeclare type EditorEvent<T> = T & {\n    target: any;\n    type: string;\n    preventDefault: () => void;\n    isDefaultPrevented: () => boolean;\n    stopPropagation: () => void;\n    isPropagationStopped: () => boolean;\n    stopImmediatePropagation: () => void;\n    isImmediatePropagationStopped: () => boolean;\n};\ninterface EventDispatcherSettings {\n    scope?: any;\n    toggleEvent?: (name: string, state: boolean) => void | boolean;\n    beforeFire?: <T>(args: EditorEvent<T>) => void;\n}\ninterface EventDispatcherConstructor<T extends NativeEventMap> {\n    readonly prototype: EventDispatcher<T>;\n    new (settings?: EventDispatcherSettings): EventDispatcher<T>;\n    isNative: (name: string) => boolean;\n}\ndeclare class EventDispatcher<T> {\n    static isNative(name: string): boolean;\n    private readonly settings;\n    private readonly scope;\n    private readonly toggleEvent;\n    private bindings;\n    constructor(settings?: Record<string, any>);\n    fire<K extends string, U extends MappedEvent<T, K>>(nameIn: K, argsIn?: U): EditorEvent<U>;\n    on<K extends string>(name: K, callback: false | ((event: EditorEvent<MappedEvent<T, K>>) => void), prepend?: boolean, extra?: {}): this;\n    off<K extends string>(name?: K, callback?: (event: EditorEvent<MappedEvent<T, K>>) => void): this;\n    once<K extends string>(name: K, callback: (event: EditorEvent<MappedEvent<T, K>>) => void, prepend?: boolean): this;\n    has(name: string): boolean;\n}\ndeclare const enum UndoLevelType {\n    Fragmented = \"fragmented\",\n    Complete = \"complete\"\n}\ninterface UndoLevel {\n    type: UndoLevelType;\n    fragments: string[];\n    content: string;\n    bookmark: Bookmark;\n    beforeBookmark: Bookmark;\n}\ninterface UndoManager {\n    data: UndoLevel[];\n    typing: boolean;\n    add: (level?: UndoLevel, event?: EditorEvent<any>) => UndoLevel;\n    beforeChange: () => void;\n    undo: () => UndoLevel;\n    redo: () => UndoLevel;\n    clear: () => void;\n    reset: () => void;\n    hasUndo: () => boolean;\n    hasRedo: () => boolean;\n    transact: (callback: () => void) => UndoLevel;\n    ignore: (callback: () => void) => void;\n    extra: (callback1: () => void, callback2: () => void) => void;\n}\ndeclare type ArrayCallback<T, R> = (x: T, i: number, xs: ReadonlyArray<T>) => R;\ndeclare type ObjCallback<T, R> = (value: T, key: string, obj: Record<string, T>) => R;\ndeclare type ArrayCallback$1<T, R> = ArrayCallback<T, R>;\ndeclare type ObjCallback$1<T, R> = ObjCallback<T, R>;\ninterface Tools {\n    is: (obj: any, type: string) => boolean;\n    isArray: <T>(arr: any) => arr is Array<T>;\n    inArray: <T>(arr: ArrayLike<T>, value: T) => number;\n    grep: {\n        <T>(arr: ArrayLike<T> | null | undefined, pred?: ArrayCallback$1<T, boolean>): T[];\n        <T>(arr: Record<string, T> | null | undefined, pred?: ObjCallback$1<T, boolean>): T[];\n    };\n    trim: (str: string) => string;\n    toArray: <T>(obj: ArrayLike<T>) => T[];\n    hasOwn: (obj: any, name: string) => boolean;\n    makeMap: <T>(items: ArrayLike<T> | string, delim?: string | RegExp, map?: Record<string, T | string>) => Record<string, T | string>;\n    each: {\n        <T>(arr: ArrayLike<T> | null | undefined, cb: ArrayCallback$1<T, void | boolean>, scope?: any): boolean;\n        <T>(obj: Record<string, T> | null | undefined, cb: ObjCallback$1<T, void | boolean>, scope?: any): boolean;\n    };\n    map: {\n        <T, R>(arr: ArrayLike<T> | null | undefined, cb: ArrayCallback$1<T, R>): R[];\n        <T, R>(obj: Record<string, T> | null | undefined, cb: ObjCallback$1<T, R>): R[];\n    };\n    extend: (obj: Object, ext: Object, ...objs: Object[]) => any;\n    create: (name: string, p: Object, root?: Object) => void;\n    walk: <T = any>(obj: T, f: Function, n?: keyof T, scope?: any) => void;\n    createNS: (name: string, o?: Object) => any;\n    resolve: (path: string, o?: Object) => any;\n    explode: (s: string, d?: string | RegExp) => string[];\n    _addCacheSuffix: (url: string) => string;\n}\ndeclare type EventUtilsCallback<T> = (event: EventUtilsEvent<T>) => void;\ndeclare type EventUtilsEvent<T> = T & {\n    type: string;\n    target: any;\n    isDefaultPrevented: () => boolean;\n    preventDefault: () => void;\n    isPropagationStopped: () => boolean;\n    stopPropagation: () => void;\n    isImmediatePropagationStopped: () => boolean;\n    stopImmediatePropagation: () => void;\n};\ninterface EventUtilsConstructor {\n    readonly prototype: EventUtils;\n    new (): EventUtils;\n    Event: EventUtils;\n}\ndeclare class EventUtils {\n    static Event: EventUtils;\n    domLoaded: boolean;\n    events: Record<string, any>;\n    private readonly expando;\n    private hasFocusIn;\n    private hasMouseEnterLeave;\n    private mouseEnterLeave;\n    private count;\n    constructor();\n    bind<K extends keyof HTMLElementEventMap>(target: any, name: K, callback: EventUtilsCallback<HTMLElementEventMap[K]>, scope?: any): EventUtilsCallback<HTMLElementEventMap[K]>;\n    bind<T = any>(target: any, names: string, callback: EventUtilsCallback<T>, scope?: any): EventUtilsCallback<T>;\n    unbind<K extends keyof HTMLElementEventMap>(target: any, name: K, callback?: EventUtilsCallback<HTMLElementEventMap[K]>): this;\n    unbind<T = any>(target: any, names: string, callback?: EventUtilsCallback<T>): this;\n    unbind(target: any): this;\n    fire(target: any, name: string, args?: {}): this;\n    clean(target: any): this;\n    destroy(): void;\n    cancel<T = any>(e: EventUtilsEvent<T>): boolean;\n    private executeHandlers;\n}\ndeclare type DomQuerySelector<T extends Node> = string | T | T[] | DomQuery<T>;\ndeclare type DomQueryInitSelector<T extends Node> = DomQuerySelector<T> | Window;\ninterface Hook {\n    get: <T extends Node>(elm: T) => string;\n    set: <T extends Node>($elm: DomQuery<T>, value: string | null) => void;\n}\ninterface DomQueryConstructor {\n    readonly prototype: DomQuery;\n    attrHooks: Record<string, Hook>;\n    cssHooks: Record<string, Hook>;\n    fn: DomQuery;\n    find: any;\n    expr: {\n        cacheLength: number;\n        createPseudo: Function;\n        match: Record<string, RegExp>;\n        attrHandle: {};\n        find: Record<string, Function>;\n        relative: Record<string, {\n            dir: string;\n            first?: boolean;\n        }>;\n        preFilter: Record<string, Function>;\n        filter: Record<string, Function>;\n        pseudos: Record<string, Function>;\n    };\n    extend: Tools['extend'];\n    isArray: Tools['isArray'];\n    new <T extends Node = Node>(selector?: DomQueryInitSelector<T>, context?: Node): DomQuery<T>;\n    <T extends Node = Node>(selector?: DomQueryInitSelector<T>, context?: Node): DomQuery<T>;\n    overrideDefaults(callback: () => {\n        context: Node;\n        element: Element;\n    }): DomQueryConstructor;\n    makeArray<T>(object: T): T[];\n    inArray<T>(item: {}, array: T[]): number;\n    each<T>(obj: T[], callback: (i: number, value: T) => void): void;\n    each<T>(obj: T, callback: (key: string, obj: T[keyof T]) => void): void;\n    trim(str: string): string;\n    grep<T>(array: T[], callback: (item: any, i: number) => boolean): T[];\n    unique<T>(results: T[]): T[];\n    text(elem: Node): string;\n    contains(context: any, elem: Node): number;\n    filter(expr: string, elems: Node[], not?: boolean): any;\n}\ninterface DomQuery<T extends Node = Node> extends ArrayLike<T> {\n    init: (selector?: DomQueryInitSelector<T>, context?: Node) => void;\n    context: T;\n    length: number;\n    selector: string;\n    add(items: Array<string | T> | DomQuery<T>, sort?: boolean): this;\n    addClass(className: string): this;\n    after(content: DomQuerySelector<T>): this;\n    append(content: DomQuerySelector<T>): this;\n    appendTo(val: DomQuerySelector<T>): this;\n    attr(name: string, value: string | boolean | number | null): this;\n    attr(attrs: Record<string, string | boolean | number | null>): this;\n    attr(name: string): string;\n    before(content: DomQuerySelector<T>): this;\n    children(selector?: string): DomQuery<ChildNode>;\n    clone(): this;\n    closest(selector: DomQuerySelector<T>): this;\n    contents(selector?: string): DomQuery<ChildNode>;\n    css(name: string, value: string | number | null): this;\n    css(styles: Record<string, string | number | null>): this;\n    css(name: string): string;\n    each(callback: (i: number, value: T) => void): this;\n    empty(): this;\n    eq(index: number): this;\n    filter(selector: string | ((i: number, item: any) => boolean)): this;\n    find<K extends keyof HTMLElementTagNameMap>(selector: K): DomQuery<HTMLElementTagNameMap[K]>;\n    find<T extends Node>(selector: string): DomQuery<T>;\n    first(): this;\n    hasClass(className: string): boolean;\n    hide(): this;\n    html(value: string): this;\n    html(): string;\n    is(selector: string | ((i: number, item: any) => boolean)): boolean;\n    last(): this;\n    next(selector?: string): DomQuery<ChildNode>;\n    nextUntil(selector: DomQuerySelector<T>, until?: string): DomQuery<ChildNode>;\n    off<K extends keyof HTMLElementEventMap>(name: K, callback?: EventUtilsCallback<HTMLElementEventMap[K]>): this;\n    off<U>(name?: string, callback?: EventUtilsCallback<U>): this;\n    offset(offset?: {}): {} | this;\n    on<K extends keyof HTMLElementEventMap>(name: K, callback: EventUtilsCallback<HTMLElementEventMap[K]>): this;\n    on<U>(name: string, callback: EventUtilsCallback<U>): this;\n    parent(selector?: string): DomQuery<Node>;\n    parents(selector?: string): DomQuery<Node>;\n    parentsUntil(selector: DomQuerySelector<T>, filter?: string): DomQuery<Node>;\n    prepend(content: DomQuerySelector<T>): this;\n    prependTo(val: DomQuerySelector<T>): this;\n    prev(selector?: string): DomQuery<ChildNode>;\n    prevUntil(selector: DomQuerySelector<T>, filter?: string): DomQuery<ChildNode>;\n    prop(name: string, value: string): this;\n    prop(props: Record<string, string | number>): this;\n    prop(name: string): string;\n    push(...items: T[]): number;\n    remove(): this;\n    removeAttr(name: string): this;\n    removeClass(className: string): this;\n    replaceWith(content: DomQuerySelector<T>): this;\n    show(): this;\n    slice(start: number, end?: number): this;\n    splice(start: number, deleteCount?: number): T[];\n    sort(compareFn?: (a: T, b: T) => number): T[];\n    text(value: string): DomQuery;\n    text(): string;\n    toArray(): T[];\n    toggleClass(className: string, state?: boolean): this;\n    trigger(name: string | {\n        type: string;\n    }): this;\n    unwrap(): this;\n    wrap(content: DomQuerySelector<T>): this;\n    wrapAll(content: DomQuerySelector<T>): this;\n    wrapInner(content: string): this;\n}\ndeclare type SchemaType = 'html4' | 'html5' | 'html5-strict';\ninterface SchemaSettings {\n    block_elements?: string;\n    boolean_attributes?: string;\n    custom_elements?: string;\n    extended_valid_elements?: string;\n    invalid_elements?: string;\n    invalid_styles?: string | Record<string, string>;\n    move_caret_before_on_enter_elements?: string;\n    non_empty_elements?: string;\n    schema?: SchemaType;\n    self_closing_elements?: string;\n    short_ended_elements?: string;\n    special?: string;\n    text_block_elements?: string;\n    text_inline_elements?: string;\n    valid_children?: string;\n    valid_classes?: string | Record<string, string>;\n    valid_elements?: string;\n    valid_styles?: string | Record<string, string>;\n    verify_html?: boolean;\n    whitespace_elements?: string;\n}\ninterface Attribute {\n    required?: boolean;\n    defaultValue?: string;\n    forcedValue?: string;\n    validValues?: any;\n}\ninterface DefaultAttribute {\n    name: string;\n    value: string;\n}\ninterface AttributePattern {\n    defaultValue?: string;\n    forcedValue?: string;\n    pattern: RegExp;\n    required?: boolean;\n    validValues?: Record<string, string>;\n}\ninterface ElementRule {\n    attributes: Record<string, Attribute>;\n    attributesDefault?: DefaultAttribute[];\n    attributesForced?: DefaultAttribute[];\n    attributesOrder: string[];\n    attributePatterns?: AttributePattern[];\n    attributesRequired?: string[];\n    paddEmpty?: boolean;\n    removeEmpty?: boolean;\n    removeEmptyAttrs?: boolean;\n}\ninterface SchemaElement extends ElementRule {\n    outputName?: string;\n    parentsRequired?: string[];\n    pattern?: RegExp;\n}\ninterface SchemaMap {\n    [name: string]: {};\n}\ninterface SchemaRegExpMap {\n    [name: string]: RegExp;\n}\ninterface Schema {\n    children: Record<string, {}>;\n    elements: Record<string, SchemaElement>;\n    getValidStyles: () => SchemaMap;\n    getValidClasses: () => SchemaMap;\n    getBlockElements: () => SchemaMap;\n    getInvalidStyles: () => SchemaMap;\n    getShortEndedElements: () => SchemaMap;\n    getTextBlockElements: () => SchemaMap;\n    getTextInlineElements: () => SchemaMap;\n    getBoolAttrs: () => SchemaMap;\n    getElementRule: (name: string) => SchemaElement;\n    getSelfClosingElements: () => SchemaMap;\n    getNonEmptyElements: () => SchemaMap;\n    getMoveCaretBeforeOnEnterElements: () => SchemaMap;\n    getWhiteSpaceElements: () => SchemaMap;\n    getSpecialElements: () => SchemaRegExpMap;\n    isValidChild: (name: string, child: string) => boolean;\n    isValid: (name: string, attr?: string) => boolean;\n    getCustomElements: () => SchemaMap;\n    addValidElements: (validElements: string) => void;\n    setValidElements: (validElements: string) => void;\n    addCustomElements: (customElements: string) => void;\n    addValidChildren: (validChildren: any) => void;\n}\ndeclare type Attributes = Array<{\n    name: string;\n    value: string;\n}> & {\n    map: Record<string, string>;\n};\ninterface AstNodeConstructor {\n    readonly prototype: AstNode;\n    new (name: string, type: number): AstNode;\n    create(name: string, attrs?: Record<string, string>): AstNode;\n}\ndeclare class AstNode {\n    static create(name: string, attrs?: Record<string, string>): AstNode;\n    name: string;\n    type: number;\n    attributes?: Attributes;\n    value?: string;\n    shortEnded?: boolean;\n    parent?: AstNode;\n    firstChild?: AstNode;\n    lastChild?: AstNode;\n    next?: AstNode;\n    prev?: AstNode;\n    constructor(name: string, type: number);\n    replace(node: AstNode): AstNode;\n    attr(name: string, value: string | null): AstNode;\n    attr(name: Record<string, string | null>): AstNode;\n    attr(name: string): string;\n    clone(): AstNode;\n    wrap(wrapper: AstNode): AstNode;\n    unwrap(): void;\n    remove(): AstNode;\n    append(node: AstNode): AstNode;\n    insert(node: AstNode, refNode: AstNode, before?: boolean): AstNode;\n    getAll(name: string): AstNode[];\n    empty(): AstNode;\n    isEmpty(elements: SchemaMap, whitespace?: SchemaMap, predicate?: (node: AstNode) => boolean): boolean;\n    walk(prev?: boolean): AstNode;\n}\ndeclare type Content = string | AstNode;\ndeclare type ContentFormat = 'raw' | 'text' | 'html' | 'tree';\ninterface GetContentArgs {\n    format?: ContentFormat;\n    get?: boolean;\n    content?: string;\n    getInner?: boolean;\n    no_events?: boolean;\n    [key: string]: any;\n}\ninterface SetContentArgs {\n    format?: string;\n    set?: boolean;\n    content?: string;\n    no_events?: boolean;\n}\ninterface BlobCache {\n    create: (o: string | BlobInfoData, blob?: Blob, base64?: string, name?: string, filename?: string) => BlobInfo;\n    add: (blobInfo: BlobInfo) => void;\n    get: (id: string) => BlobInfo | undefined;\n    getByUri: (blobUri: string) => BlobInfo | undefined;\n    getByData: (base64: string, type: string) => BlobInfo | undefined;\n    findFirst: (predicate: (blobInfo: BlobInfo) => boolean) => BlobInfo | undefined;\n    removeByUri: (blobUri: string) => void;\n    destroy: () => void;\n}\ninterface BlobInfoData {\n    id?: string;\n    name?: string;\n    filename?: string;\n    blob: Blob;\n    base64: string;\n    blobUri?: string;\n    uri?: string;\n}\ninterface BlobInfo {\n    id: () => string;\n    name: () => string;\n    filename: () => string;\n    blob: () => Blob;\n    base64: () => string;\n    blobUri: () => string;\n    uri: () => string | undefined;\n}\ninterface NotificationManagerImpl {\n    open: (spec: NotificationSpec, closeCallback?: () => void) => NotificationApi;\n    close: <T extends NotificationApi>(notification: T) => void;\n    reposition: <T extends NotificationApi>(notifications: T[]) => void;\n    getArgs: <T extends NotificationApi>(notification: T) => NotificationSpec;\n}\ninterface NotificationSpec {\n    type?: 'info' | 'warning' | 'error' | 'success';\n    text: string;\n    icon?: string;\n    progressBar?: boolean;\n    timeout?: number;\n    closeButton?: boolean;\n}\ninterface NotificationApi {\n    close: () => void;\n    progressBar: {\n        value: (percent: number) => void;\n    };\n    text: (text: string) => void;\n    moveTo: (x: number, y: number) => void;\n    moveRel: (element: Element, rel: 'tc-tc' | 'bc-bc' | 'bc-tc' | 'tc-bc' | 'banner') => void;\n    getEl: () => HTMLElement;\n    settings: NotificationSpec;\n}\ninterface NotificationManager {\n    open: (spec: NotificationSpec) => NotificationApi;\n    close: () => void;\n    getNotifications: () => NotificationApi[];\n}\ninterface UploadFailureOptions {\n    remove?: boolean;\n}\ndeclare type UploadHandler = (blobInfo: BlobInfo, success: (url: string) => void, failure: (err: string, options?: UploadFailureOptions) => void, progress?: (percent: number) => void) => void;\ninterface UploadResult {\n    url: string;\n    blobInfo: BlobInfo;\n    status: boolean;\n    error?: {\n        options: UploadFailureOptions;\n        message: string;\n    };\n}\ninterface RangeLikeObject {\n    startContainer: Node;\n    startOffset: number;\n    endContainer: Node;\n    endOffset: number;\n}\ndeclare type ApplyFormat = BlockFormat | InlineFormat | SelectorFormat;\ndeclare type RemoveFormat = RemoveBlockFormat | RemoveInlineFormat | RemoveSelectorFormat;\ndeclare type Format = ApplyFormat | RemoveFormat;\ndeclare type Formats = Record<string, Format | Format[]>;\ndeclare type FormatAttrOrStyleValue = string | ((vars?: FormatVars) => string);\ndeclare type FormatVars = Record<string, string>;\ninterface CommonFormat<T> {\n    ceFalseOverride?: boolean;\n    classes?: string | string[];\n    collapsed?: boolean;\n    exact?: boolean;\n    expand?: boolean;\n    links?: boolean;\n    onmatch?: (node: Node, fmt: T, itemName: string) => boolean;\n    onformat?: (elm: Node, fmt: T, vars?: FormatVars, node?: Node | RangeLikeObject) => void;\n    remove_similar?: boolean;\n}\ninterface CommonApplyFormat<T> extends CommonFormat<T> {\n    attributes?: Record<string, FormatAttrOrStyleValue>;\n    preview?: string | boolean;\n    styles?: Record<string, FormatAttrOrStyleValue>;\n    toggle?: boolean;\n    wrapper?: boolean;\n    merge_siblings?: boolean;\n    merge_with_parents?: boolean;\n}\ninterface BlockFormat extends CommonApplyFormat<BlockFormat> {\n    block: string;\n    block_expand?: boolean;\n}\ninterface InlineFormat extends CommonApplyFormat<InlineFormat> {\n    inline: string;\n    clear_child_styles?: boolean;\n}\ninterface SelectorFormat extends CommonApplyFormat<SelectorFormat> {\n    selector: string;\n    defaultBlock?: string;\n    inherit?: boolean;\n}\ninterface CommonRemoveFormat<T> extends CommonFormat<T> {\n    remove?: 'none' | 'empty' | 'all';\n    attributes?: string[] | Record<string, FormatAttrOrStyleValue>;\n    styles?: string[] | Record<string, FormatAttrOrStyleValue>;\n    split?: boolean;\n    deep?: boolean;\n    mixed?: boolean;\n}\ninterface RemoveBlockFormat extends CommonRemoveFormat<RemoveBlockFormat> {\n    block: string;\n    list_block?: string;\n}\ninterface RemoveInlineFormat extends CommonRemoveFormat<RemoveInlineFormat> {\n    inline: string;\n    preserve_attributes?: string[];\n}\ninterface RemoveSelectorFormat extends CommonRemoveFormat<RemoveSelectorFormat> {\n    selector: string;\n}\ntype Format_d_Formats = Formats;\ntype Format_d_Format = Format;\ntype Format_d_ApplyFormat = ApplyFormat;\ntype Format_d_BlockFormat = BlockFormat;\ntype Format_d_InlineFormat = InlineFormat;\ntype Format_d_SelectorFormat = SelectorFormat;\ntype Format_d_RemoveFormat = RemoveFormat;\ntype Format_d_RemoveBlockFormat = RemoveBlockFormat;\ntype Format_d_RemoveInlineFormat = RemoveInlineFormat;\ntype Format_d_RemoveSelectorFormat = RemoveSelectorFormat;\ndeclare namespace Format_d {\n    export { Format_d_Formats as Formats, Format_d_Format as Format, Format_d_ApplyFormat as ApplyFormat, Format_d_BlockFormat as BlockFormat, Format_d_InlineFormat as InlineFormat, Format_d_SelectorFormat as SelectorFormat, Format_d_RemoveFormat as RemoveFormat, Format_d_RemoveBlockFormat as RemoveBlockFormat, Format_d_RemoveInlineFormat as RemoveInlineFormat, Format_d_RemoveSelectorFormat as RemoveSelectorFormat, };\n}\ndeclare type StyleFormat = BlockStyleFormat | InlineStyleFormat | SelectorStyleFormat;\ndeclare type AllowedFormat = Separator | FormatReference | StyleFormat | NestedFormatting;\ninterface Separator {\n    title: string;\n}\ninterface FormatReference {\n    title: string;\n    format: string;\n    icon?: string;\n}\ninterface NestedFormatting {\n    title: string;\n    items: Array<FormatReference | StyleFormat>;\n}\ninterface CommonStyleFormat {\n    name?: string;\n    title: string;\n    icon?: string;\n}\ninterface BlockStyleFormat extends BlockFormat, CommonStyleFormat {\n}\ninterface InlineStyleFormat extends InlineFormat, CommonStyleFormat {\n}\ninterface SelectorStyleFormat extends SelectorFormat, CommonStyleFormat {\n}\ninterface AlertBannerSpec {\n    type: 'alertbanner';\n    level: 'info' | 'warn' | 'error' | 'success';\n    text: string;\n    icon: string;\n    url?: string;\n}\ninterface ButtonSpec {\n    type: 'button';\n    text: string;\n    disabled?: boolean;\n    primary?: boolean;\n    name?: string;\n    icon?: string;\n    borderless?: boolean;\n}\ninterface CheckboxSpec {\n    name: string;\n    type: 'checkbox';\n    label: string;\n    disabled?: boolean;\n}\ninterface FormComponentSpec {\n    type: string;\n    name: string;\n}\ninterface FormComponentWithLabelSpec extends FormComponentSpec {\n    label?: string;\n}\ninterface CollectionSpec extends FormComponentWithLabelSpec {\n    type: 'collection';\n}\ninterface ColorInputSpec extends FormComponentWithLabelSpec {\n    type: 'colorinput';\n}\ninterface ColorPickerSpec extends FormComponentWithLabelSpec {\n    type: 'colorpicker';\n}\ninterface CustomEditorInit {\n    setValue: (value: string) => void;\n    getValue: () => string;\n    destroy: () => void;\n}\ndeclare type CustomEditorInitFn = (elm: HTMLElement, settings: any) => Promise<CustomEditorInit>;\ninterface CustomEditorOldSpec extends FormComponentSpec {\n    type: 'customeditor';\n    tag?: string;\n    init: (e: HTMLElement) => Promise<CustomEditorInit>;\n}\ninterface CustomEditorNewSpec extends FormComponentSpec {\n    type: 'customeditor';\n    tag?: string;\n    scriptId: string;\n    scriptUrl: string;\n    settings?: any;\n}\ndeclare type CustomEditorSpec = CustomEditorOldSpec | CustomEditorNewSpec;\ninterface DropZoneSpec extends FormComponentWithLabelSpec {\n    type: 'dropzone';\n}\ninterface GridSpec {\n    type: 'grid';\n    columns: number;\n    items: BodyComponentSpec[];\n}\ninterface HtmlPanelSpec {\n    type: 'htmlpanel';\n    html: string;\n    presets?: 'presentation' | 'document';\n}\ninterface IframeSpec extends FormComponentWithLabelSpec {\n    type: 'iframe';\n    sandboxed?: boolean;\n}\ninterface ImageToolsState {\n    blob: Blob;\n    url: string;\n}\ninterface ImageToolsSpec extends FormComponentWithLabelSpec {\n    type: 'imagetools';\n    currentState: ImageToolsState;\n}\ninterface InputSpec extends FormComponentWithLabelSpec {\n    type: 'input';\n    inputMode?: string;\n    placeholder?: string;\n    maximized?: boolean;\n    disabled?: boolean;\n}\ninterface LabelSpec {\n    type: 'label';\n    label: string;\n    items: BodyComponentSpec[];\n}\ninterface ListBoxSingleItemSpec {\n    text: string;\n    value: string;\n}\ninterface ListBoxNestedItemSpec {\n    text: string;\n    items: ListBoxItemSpec[];\n}\ndeclare type ListBoxItemSpec = ListBoxNestedItemSpec | ListBoxSingleItemSpec;\ninterface ListBoxSpec extends FormComponentWithLabelSpec {\n    type: 'listbox';\n    items: ListBoxItemSpec[];\n    disabled?: boolean;\n}\ninterface PanelSpec {\n    type: 'panel';\n    classes?: string[];\n    items: BodyComponentSpec[];\n}\ninterface SelectBoxItemSpec {\n    text: string;\n    value: string;\n}\ninterface SelectBoxSpec extends FormComponentWithLabelSpec {\n    type: 'selectbox';\n    items: SelectBoxItemSpec[];\n    size?: number;\n    disabled?: boolean;\n}\ninterface SizeInputSpec extends FormComponentWithLabelSpec {\n    type: 'sizeinput';\n    constrain?: boolean;\n    disabled?: boolean;\n}\ninterface TableSpec {\n    type: 'table';\n    header: string[];\n    cells: string[][];\n}\ninterface TextAreaSpec extends FormComponentWithLabelSpec {\n    type: 'textarea';\n    placeholder?: string;\n    maximized?: boolean;\n    disabled?: boolean;\n}\ninterface UrlInputSpec extends FormComponentWithLabelSpec {\n    type: 'urlinput';\n    filetype?: 'image' | 'media' | 'file';\n    disabled?: boolean;\n}\ndeclare type BodyComponentSpec = BarSpec | ButtonSpec | CheckboxSpec | TextAreaSpec | InputSpec | ListBoxSpec | SelectBoxSpec | SizeInputSpec | IframeSpec | HtmlPanelSpec | UrlInputSpec | DropZoneSpec | ColorInputSpec | GridSpec | ColorPickerSpec | ImageToolsSpec | AlertBannerSpec | CollectionSpec | LabelSpec | TableSpec | PanelSpec | CustomEditorSpec;\ninterface BarSpec {\n    type: 'bar';\n    items: BodyComponentSpec[];\n}\ninterface CommonMenuItemSpec {\n    disabled?: boolean;\n    text?: string;\n    value?: string;\n    meta?: Record<string, any>;\n    shortcut?: string;\n}\ninterface CommonMenuItemInstanceApi {\n    isDisabled: () => boolean;\n    setDisabled: (state: boolean) => void;\n}\ninterface DialogToggleMenuItemSpec extends CommonMenuItemSpec {\n    type?: 'togglemenuitem';\n    name: string;\n}\ndeclare type DialogFooterMenuButtonItemSpec = DialogToggleMenuItemSpec;\ninterface BaseDialogFooterButtonSpec {\n    name?: string;\n    align?: 'start' | 'end';\n    primary?: boolean;\n    disabled?: boolean;\n    icon?: string;\n}\ninterface DialogFooterNormalButtonSpec extends BaseDialogFooterButtonSpec {\n    type: 'submit' | 'cancel' | 'custom';\n    text: string;\n}\ninterface DialogFooterMenuButtonSpec extends BaseDialogFooterButtonSpec {\n    type: 'menu';\n    text?: string;\n    tooltip?: string;\n    icon?: string;\n    items: DialogFooterMenuButtonItemSpec[];\n}\ndeclare type DialogFooterButtonSpec = DialogFooterNormalButtonSpec | DialogFooterMenuButtonSpec;\ninterface TabSpec {\n    name?: string;\n    title: string;\n    items: BodyComponentSpec[];\n}\ninterface TabPanelSpec {\n    type: 'tabpanel';\n    tabs: TabSpec[];\n}\ndeclare type DialogDataItem = any;\ndeclare type DialogData = Record<string, DialogDataItem>;\ninterface DialogInstanceApi<T extends DialogData> {\n    getData: () => T;\n    setData: (data: Partial<T>) => void;\n    disable: (name: string) => void;\n    focus: (name: string) => void;\n    showTab: (name: string) => void;\n    redial: (nu: DialogSpec<T>) => void;\n    enable: (name: string) => void;\n    block: (msg: string) => void;\n    unblock: () => void;\n    close: () => void;\n}\ninterface DialogActionDetails {\n    name: string;\n    value?: any;\n}\ninterface DialogChangeDetails<T> {\n    name: keyof T;\n}\ninterface DialogTabChangeDetails {\n    newTabName: string;\n    oldTabName: string;\n}\ndeclare type DialogActionHandler<T> = (api: DialogInstanceApi<T>, details: DialogActionDetails) => void;\ndeclare type DialogChangeHandler<T> = (api: DialogInstanceApi<T>, details: DialogChangeDetails<T>) => void;\ndeclare type DialogSubmitHandler<T> = (api: DialogInstanceApi<T>) => void;\ndeclare type DialogCloseHandler = () => void;\ndeclare type DialogCancelHandler<T> = (api: DialogInstanceApi<T>) => void;\ndeclare type DialogTabChangeHandler<T> = (api: DialogInstanceApi<T>, details: DialogTabChangeDetails) => void;\ndeclare type DialogSize = 'normal' | 'medium' | 'large';\ninterface DialogSpec<T extends DialogData> {\n    title: string;\n    size?: DialogSize;\n    body: TabPanelSpec | PanelSpec;\n    buttons: DialogFooterButtonSpec[];\n    initialData?: T;\n    onAction?: DialogActionHandler<T>;\n    onChange?: DialogChangeHandler<T>;\n    onSubmit?: DialogSubmitHandler<T>;\n    onClose?: DialogCloseHandler;\n    onCancel?: DialogCancelHandler<T>;\n    onTabChange?: DialogTabChangeHandler<T>;\n}\ninterface UrlDialogInstanceApi {\n    block: (msg: string) => void;\n    unblock: () => void;\n    close: () => void;\n    sendMessage: (msg: any) => void;\n}\ninterface UrlDialogActionDetails {\n    name: string;\n    value?: any;\n}\ninterface UrlDialogMessage {\n    mceAction: string;\n    [key: string]: any;\n}\ndeclare type UrlDialogActionHandler = (api: UrlDialogInstanceApi, actions: UrlDialogActionDetails) => void;\ndeclare type UrlDialogCloseHandler = () => void;\ndeclare type UrlDialogCancelHandler = (api: UrlDialogInstanceApi) => void;\ndeclare type UrlDialogMessageHandler = (api: UrlDialogInstanceApi, message: UrlDialogMessage) => void;\ninterface UrlDialogFooterButtonSpec extends DialogFooterNormalButtonSpec {\n    type: 'cancel' | 'custom';\n}\ninterface UrlDialogSpec {\n    title: string;\n    url: string;\n    height?: number;\n    width?: number;\n    buttons?: UrlDialogFooterButtonSpec[];\n    onAction?: UrlDialogActionHandler;\n    onClose?: UrlDialogCloseHandler;\n    onCancel?: UrlDialogCancelHandler;\n    onMessage?: UrlDialogMessageHandler;\n}\ndeclare type CardContainerDirection = 'vertical' | 'horizontal';\ndeclare type CardContainerAlign = 'left' | 'right';\ndeclare type CardContainerValign = 'top' | 'middle' | 'bottom';\ninterface CardContainerSpec {\n    type: 'cardcontainer';\n    items: CardItemSpec[];\n    direction?: CardContainerDirection;\n    align?: CardContainerAlign;\n    valign?: CardContainerValign;\n}\ninterface CardImageSpec {\n    type: 'cardimage';\n    src: string;\n    alt?: string;\n    classes?: string[];\n}\ninterface CardTextSpec {\n    type: 'cardtext';\n    text: string;\n    name?: string;\n    classes?: string[];\n}\ndeclare type CardItemSpec = CardContainerSpec | CardImageSpec | CardTextSpec;\ninterface CardMenuItemInstanceApi extends CommonMenuItemInstanceApi {\n}\ninterface CardMenuItemSpec extends Omit<CommonMenuItemSpec, 'text' | 'shortcut'> {\n    type: 'cardmenuitem';\n    label?: string;\n    items: CardItemSpec[];\n    onSetup?: (api: CardMenuItemInstanceApi) => (api: CardMenuItemInstanceApi) => void;\n    onAction?: (api: CardMenuItemInstanceApi) => void;\n}\ninterface SeparatorMenuItemSpec {\n    type?: 'separator';\n    text?: string;\n}\ndeclare type ColumnTypes = number | 'auto';\ndeclare type SeparatorItemSpec = SeparatorMenuItemSpec;\ninterface AutocompleterItemSpec {\n    type?: 'autocompleteitem';\n    value: string;\n    text?: string;\n    icon?: string;\n    meta?: Record<string, any>;\n}\ndeclare type AutocompleterContents = SeparatorItemSpec | AutocompleterItemSpec | CardMenuItemSpec;\ninterface AutocompleterSpec {\n    type?: 'autocompleter';\n    ch: string;\n    minChars?: number;\n    columns?: ColumnTypes;\n    matches?: (rng: Range, text: string, pattern: string) => boolean;\n    fetch: (pattern: string, maxResults: number, fetchOptions: Record<string, any>) => Promise<AutocompleterContents[]>;\n    onAction: (autocompleterApi: AutocompleterInstanceApi, rng: any, value: string, meta: Record<string, any>) => void;\n    maxResults?: number;\n    highlightOn?: string[];\n}\ninterface AutocompleterInstanceApi {\n    hide: () => void;\n    reload: (fetchOptions: Record<string, any>) => void;\n}\ndeclare type ContextPosition = 'node' | 'selection' | 'line';\ndeclare type ContextScope = 'node' | 'editor';\ninterface ContextBarSpec {\n    predicate?: (elem: Element) => boolean;\n    position?: ContextPosition;\n    scope?: ContextScope;\n}\ninterface BaseToolbarButtonSpec<I extends BaseToolbarButtonInstanceApi> {\n    disabled?: boolean;\n    tooltip?: string;\n    icon?: string;\n    text?: string;\n    onSetup?: (api: I) => (api: I) => void;\n}\ninterface BaseToolbarButtonInstanceApi {\n    isDisabled: () => boolean;\n    setDisabled: (state: boolean) => void;\n}\ninterface ToolbarButtonSpec extends BaseToolbarButtonSpec<ToolbarButtonInstanceApi> {\n    type?: 'button';\n    onAction: (api: ToolbarButtonInstanceApi) => void;\n}\ninterface ToolbarButtonInstanceApi extends BaseToolbarButtonInstanceApi {\n}\ninterface BaseToolbarToggleButtonSpec<I extends BaseToolbarButtonInstanceApi> extends BaseToolbarButtonSpec<I> {\n    active?: boolean;\n}\ninterface BaseToolbarToggleButtonInstanceApi extends BaseToolbarButtonInstanceApi {\n    isActive: () => boolean;\n    setActive: (state: boolean) => void;\n}\ninterface ToolbarToggleButtonSpec extends BaseToolbarToggleButtonSpec<ToolbarToggleButtonInstanceApi> {\n    type?: 'togglebutton';\n    onAction: (api: ToolbarToggleButtonInstanceApi) => void;\n}\ninterface ToolbarToggleButtonInstanceApi extends BaseToolbarToggleButtonInstanceApi {\n}\ninterface ContextFormLaunchButtonApi extends BaseToolbarButtonSpec<BaseToolbarButtonInstanceApi> {\n    type: 'contextformbutton';\n}\ninterface ContextFormLaunchToggleButtonSpec extends BaseToolbarToggleButtonSpec<BaseToolbarToggleButtonInstanceApi> {\n    type: 'contextformtogglebutton';\n}\ninterface ContextFormButtonInstanceApi extends BaseToolbarButtonInstanceApi {\n}\ninterface ContextFormToggleButtonInstanceApi extends BaseToolbarToggleButtonInstanceApi {\n}\ninterface ContextFormButtonSpec extends BaseToolbarButtonSpec<ContextFormButtonInstanceApi> {\n    type?: 'contextformbutton';\n    primary?: boolean;\n    onAction: (formApi: ContextFormInstanceApi, api: ContextFormButtonInstanceApi) => void;\n}\ninterface ContextFormToggleButtonSpec extends BaseToolbarToggleButtonSpec<ContextFormToggleButtonInstanceApi> {\n    type?: 'contextformtogglebutton';\n    onAction: (formApi: ContextFormInstanceApi, buttonApi: ContextFormToggleButtonInstanceApi) => void;\n    primary?: boolean;\n}\ninterface ContextFormInstanceApi {\n    hide: () => void;\n    getValue: () => string;\n}\ninterface ContextFormSpec extends ContextBarSpec {\n    type?: 'contextform';\n    initValue?: () => string;\n    label?: string;\n    launch?: ContextFormLaunchButtonApi | ContextFormLaunchToggleButtonSpec;\n    commands: Array<ContextFormToggleButtonSpec | ContextFormButtonSpec>;\n}\ninterface ContextToolbarSpec extends ContextBarSpec {\n    type?: 'contexttoolbar';\n    items: string;\n}\ninterface ChoiceMenuItemSpec extends CommonMenuItemSpec {\n    type?: 'choiceitem';\n    icon?: string;\n}\ninterface ChoiceMenuItemInstanceApi extends CommonMenuItemInstanceApi {\n    isActive: () => boolean;\n    setActive: (state: boolean) => void;\n}\ninterface ContextMenuItem extends CommonMenuItemSpec {\n    text: string;\n    icon?: string;\n    type?: 'item';\n    onAction: () => void;\n}\ninterface ContextSubMenu extends CommonMenuItemSpec {\n    type: 'submenu';\n    text: string;\n    icon?: string;\n    getSubmenuItems: () => string | Array<ContextMenuContents>;\n}\ndeclare type ContextMenuContents = string | ContextMenuItem | SeparatorMenuItemSpec | ContextSubMenu;\ninterface ContextMenuApi {\n    update: (element: Element) => string | Array<ContextMenuContents>;\n}\ninterface FancyMenuItemSpec {\n    type: 'fancymenuitem';\n    fancytype: string;\n    onAction: (data: any) => void;\n}\ninterface MenuItemSpec extends CommonMenuItemSpec {\n    type?: 'menuitem';\n    icon?: string;\n    onSetup?: (api: MenuItemInstanceApi) => (api: MenuItemInstanceApi) => void;\n    onAction?: (api: MenuItemInstanceApi) => void;\n}\ninterface MenuItemInstanceApi extends CommonMenuItemInstanceApi {\n}\ndeclare type NestedMenuItemContents = string | MenuItemSpec | NestedMenuItemSpec | ToggleMenuItemSpec | SeparatorMenuItemSpec | FancyMenuItemSpec;\ninterface NestedMenuItemSpec extends CommonMenuItemSpec {\n    type?: 'nestedmenuitem';\n    icon?: string;\n    getSubmenuItems: () => string | Array<NestedMenuItemContents>;\n    onSetup?: (api: NestedMenuItemInstanceApi) => (api: NestedMenuItemInstanceApi) => void;\n}\ninterface NestedMenuItemInstanceApi extends CommonMenuItemInstanceApi {\n}\ninterface ToggleMenuItemSpec extends CommonMenuItemSpec {\n    type?: 'togglemenuitem';\n    icon?: string;\n    active?: boolean;\n    onSetup?: (api: ToggleMenuItemInstanceApi) => void;\n    onAction: (api: ToggleMenuItemInstanceApi) => void;\n}\ninterface ToggleMenuItemInstanceApi extends CommonMenuItemInstanceApi {\n    isActive: () => boolean;\n    setActive: (state: boolean) => void;\n}\ntype PublicDialog_d_AlertBannerSpec = AlertBannerSpec;\ntype PublicDialog_d_BarSpec = BarSpec;\ntype PublicDialog_d_BodyComponentSpec = BodyComponentSpec;\ntype PublicDialog_d_ButtonSpec = ButtonSpec;\ntype PublicDialog_d_CheckboxSpec = CheckboxSpec;\ntype PublicDialog_d_CollectionSpec = CollectionSpec;\ntype PublicDialog_d_ColorInputSpec = ColorInputSpec;\ntype PublicDialog_d_ColorPickerSpec = ColorPickerSpec;\ntype PublicDialog_d_CustomEditorSpec = CustomEditorSpec;\ntype PublicDialog_d_CustomEditorInit = CustomEditorInit;\ntype PublicDialog_d_CustomEditorInitFn = CustomEditorInitFn;\ntype PublicDialog_d_DialogData = DialogData;\ntype PublicDialog_d_DialogSize = DialogSize;\ntype PublicDialog_d_DialogSpec<_0> = DialogSpec<_0>;\ntype PublicDialog_d_DialogInstanceApi<_0> = DialogInstanceApi<_0>;\ntype PublicDialog_d_DialogFooterButtonSpec = DialogFooterButtonSpec;\ntype PublicDialog_d_DialogActionDetails = DialogActionDetails;\ntype PublicDialog_d_DialogChangeDetails<_0> = DialogChangeDetails<_0>;\ntype PublicDialog_d_DialogTabChangeDetails = DialogTabChangeDetails;\ntype PublicDialog_d_DropZoneSpec = DropZoneSpec;\ntype PublicDialog_d_GridSpec = GridSpec;\ntype PublicDialog_d_HtmlPanelSpec = HtmlPanelSpec;\ntype PublicDialog_d_IframeSpec = IframeSpec;\ntype PublicDialog_d_ImageToolsSpec = ImageToolsSpec;\ntype PublicDialog_d_InputSpec = InputSpec;\ntype PublicDialog_d_LabelSpec = LabelSpec;\ntype PublicDialog_d_ListBoxSpec = ListBoxSpec;\ntype PublicDialog_d_ListBoxItemSpec = ListBoxItemSpec;\ntype PublicDialog_d_ListBoxNestedItemSpec = ListBoxNestedItemSpec;\ntype PublicDialog_d_ListBoxSingleItemSpec = ListBoxSingleItemSpec;\ntype PublicDialog_d_PanelSpec = PanelSpec;\ntype PublicDialog_d_SelectBoxSpec = SelectBoxSpec;\ntype PublicDialog_d_SelectBoxItemSpec = SelectBoxItemSpec;\ntype PublicDialog_d_SizeInputSpec = SizeInputSpec;\ntype PublicDialog_d_TableSpec = TableSpec;\ntype PublicDialog_d_TabSpec = TabSpec;\ntype PublicDialog_d_TabPanelSpec = TabPanelSpec;\ntype PublicDialog_d_TextAreaSpec = TextAreaSpec;\ntype PublicDialog_d_UrlInputSpec = UrlInputSpec;\ntype PublicDialog_d_UrlDialogSpec = UrlDialogSpec;\ntype PublicDialog_d_UrlDialogFooterButtonSpec = UrlDialogFooterButtonSpec;\ntype PublicDialog_d_UrlDialogInstanceApi = UrlDialogInstanceApi;\ntype PublicDialog_d_UrlDialogActionDetails = UrlDialogActionDetails;\ntype PublicDialog_d_UrlDialogMessage = UrlDialogMessage;\ndeclare namespace PublicDialog_d {\n    export { PublicDialog_d_AlertBannerSpec as AlertBannerSpec, PublicDialog_d_BarSpec as BarSpec, PublicDialog_d_BodyComponentSpec as BodyComponentSpec, PublicDialog_d_ButtonSpec as ButtonSpec, PublicDialog_d_CheckboxSpec as CheckboxSpec, PublicDialog_d_CollectionSpec as CollectionSpec, PublicDialog_d_ColorInputSpec as ColorInputSpec, PublicDialog_d_ColorPickerSpec as ColorPickerSpec, PublicDialog_d_CustomEditorSpec as CustomEditorSpec, PublicDialog_d_CustomEditorInit as CustomEditorInit, PublicDialog_d_CustomEditorInitFn as CustomEditorInitFn, PublicDialog_d_DialogData as DialogData, PublicDialog_d_DialogSize as DialogSize, PublicDialog_d_DialogSpec as DialogSpec, PublicDialog_d_DialogInstanceApi as DialogInstanceApi, PublicDialog_d_DialogFooterButtonSpec as DialogFooterButtonSpec, PublicDialog_d_DialogActionDetails as DialogActionDetails, PublicDialog_d_DialogChangeDetails as DialogChangeDetails, PublicDialog_d_DialogTabChangeDetails as DialogTabChangeDetails, PublicDialog_d_DropZoneSpec as DropZoneSpec, PublicDialog_d_GridSpec as GridSpec, PublicDialog_d_HtmlPanelSpec as HtmlPanelSpec, PublicDialog_d_IframeSpec as IframeSpec, PublicDialog_d_ImageToolsSpec as ImageToolsSpec, PublicDialog_d_InputSpec as InputSpec, PublicDialog_d_LabelSpec as LabelSpec, PublicDialog_d_ListBoxSpec as ListBoxSpec, PublicDialog_d_ListBoxItemSpec as ListBoxItemSpec, PublicDialog_d_ListBoxNestedItemSpec as ListBoxNestedItemSpec, PublicDialog_d_ListBoxSingleItemSpec as ListBoxSingleItemSpec, PublicDialog_d_PanelSpec as PanelSpec, PublicDialog_d_SelectBoxSpec as SelectBoxSpec, PublicDialog_d_SelectBoxItemSpec as SelectBoxItemSpec, PublicDialog_d_SizeInputSpec as SizeInputSpec, PublicDialog_d_TableSpec as TableSpec, PublicDialog_d_TabSpec as TabSpec, PublicDialog_d_TabPanelSpec as TabPanelSpec, PublicDialog_d_TextAreaSpec as TextAreaSpec, PublicDialog_d_UrlInputSpec as UrlInputSpec, PublicDialog_d_UrlDialogSpec as UrlDialogSpec, PublicDialog_d_UrlDialogFooterButtonSpec as UrlDialogFooterButtonSpec, PublicDialog_d_UrlDialogInstanceApi as UrlDialogInstanceApi, PublicDialog_d_UrlDialogActionDetails as UrlDialogActionDetails, PublicDialog_d_UrlDialogMessage as UrlDialogMessage, };\n}\ntype PublicInlineContent_d_AutocompleterSpec = AutocompleterSpec;\ntype PublicInlineContent_d_AutocompleterItemSpec = AutocompleterItemSpec;\ntype PublicInlineContent_d_AutocompleterContents = AutocompleterContents;\ntype PublicInlineContent_d_AutocompleterInstanceApi = AutocompleterInstanceApi;\ntype PublicInlineContent_d_ContextPosition = ContextPosition;\ntype PublicInlineContent_d_ContextScope = ContextScope;\ntype PublicInlineContent_d_ContextFormSpec = ContextFormSpec;\ntype PublicInlineContent_d_ContextFormInstanceApi = ContextFormInstanceApi;\ntype PublicInlineContent_d_ContextFormButtonSpec = ContextFormButtonSpec;\ntype PublicInlineContent_d_ContextFormButtonInstanceApi = ContextFormButtonInstanceApi;\ntype PublicInlineContent_d_ContextFormToggleButtonSpec = ContextFormToggleButtonSpec;\ntype PublicInlineContent_d_ContextFormToggleButtonInstanceApi = ContextFormToggleButtonInstanceApi;\ntype PublicInlineContent_d_ContextToolbarSpec = ContextToolbarSpec;\ntype PublicInlineContent_d_SeparatorItemSpec = SeparatorItemSpec;\ndeclare namespace PublicInlineContent_d {\n    export { PublicInlineContent_d_AutocompleterSpec as AutocompleterSpec, PublicInlineContent_d_AutocompleterItemSpec as AutocompleterItemSpec, PublicInlineContent_d_AutocompleterContents as AutocompleterContents, PublicInlineContent_d_AutocompleterInstanceApi as AutocompleterInstanceApi, PublicInlineContent_d_ContextPosition as ContextPosition, PublicInlineContent_d_ContextScope as ContextScope, PublicInlineContent_d_ContextFormSpec as ContextFormSpec, PublicInlineContent_d_ContextFormInstanceApi as ContextFormInstanceApi, PublicInlineContent_d_ContextFormButtonSpec as ContextFormButtonSpec, PublicInlineContent_d_ContextFormButtonInstanceApi as ContextFormButtonInstanceApi, PublicInlineContent_d_ContextFormToggleButtonSpec as ContextFormToggleButtonSpec, PublicInlineContent_d_ContextFormToggleButtonInstanceApi as ContextFormToggleButtonInstanceApi, PublicInlineContent_d_ContextToolbarSpec as ContextToolbarSpec, PublicInlineContent_d_SeparatorItemSpec as SeparatorItemSpec, };\n}\ntype PublicMenu_d_MenuItemSpec = MenuItemSpec;\ntype PublicMenu_d_MenuItemInstanceApi = MenuItemInstanceApi;\ntype PublicMenu_d_NestedMenuItemContents = NestedMenuItemContents;\ntype PublicMenu_d_NestedMenuItemSpec = NestedMenuItemSpec;\ntype PublicMenu_d_NestedMenuItemInstanceApi = NestedMenuItemInstanceApi;\ntype PublicMenu_d_FancyMenuItemSpec = FancyMenuItemSpec;\ntype PublicMenu_d_ToggleMenuItemSpec = ToggleMenuItemSpec;\ntype PublicMenu_d_ToggleMenuItemInstanceApi = ToggleMenuItemInstanceApi;\ntype PublicMenu_d_ChoiceMenuItemSpec = ChoiceMenuItemSpec;\ntype PublicMenu_d_ChoiceMenuItemInstanceApi = ChoiceMenuItemInstanceApi;\ntype PublicMenu_d_SeparatorMenuItemSpec = SeparatorMenuItemSpec;\ntype PublicMenu_d_ContextMenuApi = ContextMenuApi;\ntype PublicMenu_d_ContextMenuContents = ContextMenuContents;\ntype PublicMenu_d_ContextMenuItem = ContextMenuItem;\ntype PublicMenu_d_ContextSubMenu = ContextSubMenu;\ntype PublicMenu_d_CardMenuItemSpec = CardMenuItemSpec;\ntype PublicMenu_d_CardMenuItemInstanceApi = CardMenuItemInstanceApi;\ntype PublicMenu_d_CardItemSpec = CardItemSpec;\ntype PublicMenu_d_CardContainerSpec = CardContainerSpec;\ntype PublicMenu_d_CardImageSpec = CardImageSpec;\ntype PublicMenu_d_CardTextSpec = CardTextSpec;\ndeclare namespace PublicMenu_d {\n    export { PublicMenu_d_MenuItemSpec as MenuItemSpec, PublicMenu_d_MenuItemInstanceApi as MenuItemInstanceApi, PublicMenu_d_NestedMenuItemContents as NestedMenuItemContents, PublicMenu_d_NestedMenuItemSpec as NestedMenuItemSpec, PublicMenu_d_NestedMenuItemInstanceApi as NestedMenuItemInstanceApi, PublicMenu_d_FancyMenuItemSpec as FancyMenuItemSpec, PublicMenu_d_ToggleMenuItemSpec as ToggleMenuItemSpec, PublicMenu_d_ToggleMenuItemInstanceApi as ToggleMenuItemInstanceApi, PublicMenu_d_ChoiceMenuItemSpec as ChoiceMenuItemSpec, PublicMenu_d_ChoiceMenuItemInstanceApi as ChoiceMenuItemInstanceApi, PublicMenu_d_SeparatorMenuItemSpec as SeparatorMenuItemSpec, PublicMenu_d_ContextMenuApi as ContextMenuApi, PublicMenu_d_ContextMenuContents as ContextMenuContents, PublicMenu_d_ContextMenuItem as ContextMenuItem, PublicMenu_d_ContextSubMenu as ContextSubMenu, PublicMenu_d_CardMenuItemSpec as CardMenuItemSpec, PublicMenu_d_CardMenuItemInstanceApi as CardMenuItemInstanceApi, PublicMenu_d_CardItemSpec as CardItemSpec, PublicMenu_d_CardContainerSpec as CardContainerSpec, PublicMenu_d_CardImageSpec as CardImageSpec, PublicMenu_d_CardTextSpec as CardTextSpec, };\n}\ninterface SidebarInstanceApi {\n    element: () => HTMLElement;\n}\ninterface SidebarSpec {\n    icon?: string;\n    tooltip?: string;\n    onShow?: (api: SidebarInstanceApi) => void;\n    onSetup?: (api: SidebarInstanceApi) => (api: SidebarInstanceApi) => void;\n    onHide?: (api: SidebarInstanceApi) => void;\n}\ntype PublicSidebar_d_SidebarSpec = SidebarSpec;\ntype PublicSidebar_d_SidebarInstanceApi = SidebarInstanceApi;\ndeclare namespace PublicSidebar_d {\n    export { PublicSidebar_d_SidebarSpec as SidebarSpec, PublicSidebar_d_SidebarInstanceApi as SidebarInstanceApi, };\n}\ninterface ToolbarGroupSetting {\n    name: string;\n    items: string[];\n}\ndeclare type ToolbarConfig = string | ToolbarGroupSetting[];\ninterface GroupToolbarButtonInstanceApi extends BaseToolbarButtonInstanceApi {\n}\ninterface GroupToolbarButtonSpec extends BaseToolbarButtonSpec<GroupToolbarButtonInstanceApi> {\n    type?: 'grouptoolbarbutton';\n    items?: ToolbarConfig;\n}\ndeclare type MenuButtonItemTypes = NestedMenuItemContents;\ndeclare type SuccessCallback = (menu: string | MenuButtonItemTypes[]) => void;\ninterface BaseMenuButtonSpec {\n    text?: string;\n    tooltip?: string;\n    icon?: string;\n    fetch: (success: SuccessCallback) => void;\n    onSetup?: (api: BaseMenuButtonInstanceApi) => (api: BaseMenuButtonInstanceApi) => void;\n}\ninterface BaseMenuButtonInstanceApi {\n    isDisabled: () => boolean;\n    setDisabled: (state: boolean) => void;\n    isActive: () => boolean;\n    setActive: (state: boolean) => void;\n}\ninterface ToolbarMenuButtonSpec extends BaseMenuButtonSpec {\n    type?: 'menubutton';\n    onSetup?: (api: ToolbarMenuButtonInstanceApi) => (api: ToolbarMenuButtonInstanceApi) => void;\n}\ninterface ToolbarMenuButtonInstanceApi extends BaseMenuButtonInstanceApi {\n}\ndeclare type ToolbarSplitButtonItemTypes = ChoiceMenuItemSpec | SeparatorMenuItemSpec;\ndeclare type SuccessCallback$1 = (menu: ToolbarSplitButtonItemTypes[]) => void;\ndeclare type SelectPredicate = (value: string) => boolean;\ndeclare type PresetTypes = 'color' | 'normal' | 'listpreview';\ndeclare type ColumnTypes$1 = number | 'auto';\ninterface ToolbarSplitButtonSpec {\n    type?: 'splitbutton';\n    tooltip?: string;\n    icon?: string;\n    text?: string;\n    select?: SelectPredicate;\n    presets?: PresetTypes;\n    columns?: ColumnTypes$1;\n    fetch: (success: SuccessCallback$1) => void;\n    onSetup?: (api: ToolbarSplitButtonInstanceApi) => (api: ToolbarSplitButtonInstanceApi) => void;\n    onAction: (api: ToolbarSplitButtonInstanceApi) => void;\n    onItemAction: (api: ToolbarSplitButtonInstanceApi, value: string) => void;\n}\ninterface ToolbarSplitButtonInstanceApi {\n    isDisabled: () => boolean;\n    setDisabled: (state: boolean) => void;\n    setIconFill: (id: string, value: string) => void;\n    setIconStroke: (id: string, value: string) => void;\n    isActive: () => boolean;\n    setActive: (state: boolean) => void;\n}\ntype PublicToolbar_d_ToolbarButtonSpec = ToolbarButtonSpec;\ntype PublicToolbar_d_ToolbarButtonInstanceApi = ToolbarButtonInstanceApi;\ntype PublicToolbar_d_ToolbarSplitButtonSpec = ToolbarSplitButtonSpec;\ntype PublicToolbar_d_ToolbarSplitButtonInstanceApi = ToolbarSplitButtonInstanceApi;\ntype PublicToolbar_d_ToolbarMenuButtonSpec = ToolbarMenuButtonSpec;\ntype PublicToolbar_d_ToolbarMenuButtonInstanceApi = ToolbarMenuButtonInstanceApi;\ntype PublicToolbar_d_ToolbarToggleButtonSpec = ToolbarToggleButtonSpec;\ntype PublicToolbar_d_ToolbarToggleButtonInstanceApi = ToolbarToggleButtonInstanceApi;\ntype PublicToolbar_d_GroupToolbarButtonSpec = GroupToolbarButtonSpec;\ntype PublicToolbar_d_GroupToolbarButtonInstanceApi = GroupToolbarButtonInstanceApi;\ndeclare namespace PublicToolbar_d {\n    export { PublicToolbar_d_ToolbarButtonSpec as ToolbarButtonSpec, PublicToolbar_d_ToolbarButtonInstanceApi as ToolbarButtonInstanceApi, PublicToolbar_d_ToolbarSplitButtonSpec as ToolbarSplitButtonSpec, PublicToolbar_d_ToolbarSplitButtonInstanceApi as ToolbarSplitButtonInstanceApi, PublicToolbar_d_ToolbarMenuButtonSpec as ToolbarMenuButtonSpec, PublicToolbar_d_ToolbarMenuButtonInstanceApi as ToolbarMenuButtonInstanceApi, PublicToolbar_d_ToolbarToggleButtonSpec as ToolbarToggleButtonSpec, PublicToolbar_d_ToolbarToggleButtonInstanceApi as ToolbarToggleButtonInstanceApi, PublicToolbar_d_GroupToolbarButtonSpec as GroupToolbarButtonSpec, PublicToolbar_d_GroupToolbarButtonInstanceApi as GroupToolbarButtonInstanceApi, };\n}\ninterface Registry {\n    addButton: (name: string, spec: ToolbarButtonSpec) => void;\n    addGroupToolbarButton: (name: string, spec: GroupToolbarButtonSpec) => void;\n    addToggleButton: (name: string, spec: ToolbarToggleButtonSpec) => void;\n    addMenuButton: (name: string, spec: ToolbarMenuButtonSpec) => void;\n    addSplitButton: (name: string, spec: ToolbarSplitButtonSpec) => void;\n    addMenuItem: (name: string, spec: MenuItemSpec) => void;\n    addNestedMenuItem: (name: string, spec: NestedMenuItemSpec) => void;\n    addToggleMenuItem: (name: string, spec: ToggleMenuItemSpec) => void;\n    addContextMenu: (name: string, spec: ContextMenuApi) => void;\n    addContextToolbar: (name: string, spec: ContextToolbarSpec) => void;\n    addContextForm: (name: string, spec: ContextFormSpec) => void;\n    addIcon: (name: string, svgData: string) => void;\n    addAutocompleter: (name: string, spec: AutocompleterSpec) => void;\n    addSidebar: (name: string, spec: SidebarSpec) => void;\n    getAll: () => {\n        buttons: Record<string, ToolbarButtonSpec | GroupToolbarButtonSpec | ToolbarMenuButtonSpec | ToolbarSplitButtonSpec | ToolbarToggleButtonSpec>;\n        menuItems: Record<string, MenuItemSpec | NestedMenuItemSpec | ToggleMenuItemSpec>;\n        popups: Record<string, AutocompleterSpec>;\n        contextMenus: Record<string, ContextMenuApi>;\n        contextToolbars: Record<string, ContextToolbarSpec | ContextFormSpec>;\n        icons: Record<string, string>;\n        sidebars: Record<string, SidebarSpec>;\n    };\n}\ninterface StyleSheetLoader {\n    load: (url: string, success: () => void, failure?: () => void) => void;\n    loadAll: (urls: string[], success: (urls: string[]) => void, failure: (urls: string[]) => void) => void;\n    unload: (url: string) => void;\n    unloadAll: (urls: string[]) => void;\n    _setReferrerPolicy: (referrerPolicy: ReferrerPolicy) => void;\n}\ninterface StyleSheetLoaderSettings {\n    maxLoadTime?: number;\n    contentCssCors?: boolean;\n    referrerPolicy?: ReferrerPolicy;\n}\ndeclare type Registry$1 = Registry;\ninterface EditorUiApi {\n    show: () => void;\n    hide: () => void;\n    enable: () => void;\n    disable: () => void;\n    isDisabled: () => boolean;\n}\ninterface EditorUi extends EditorUiApi {\n    registry: Registry$1;\n    styleSheetLoader: StyleSheetLoader;\n}\ntype Ui_d_EditorUiApi = EditorUiApi;\ntype Ui_d_EditorUi = EditorUi;\ndeclare namespace Ui_d {\n    export { Ui_d_EditorUiApi as EditorUiApi, Ui_d_EditorUi as EditorUi, Registry$1 as Registry, PublicDialog_d as Dialog, PublicInlineContent_d as InlineContent, PublicMenu_d as Menu, PublicSidebar_d as Sidebar, PublicToolbar_d as Toolbar, };\n}\ndeclare type EntityEncoding = 'named' | 'numeric' | 'raw' | 'named,numeric' | 'named+numeric' | 'numeric,named' | 'numeric+named';\ndeclare type ThemeInitFunc = (editor: Editor, elm: HTMLElement) => {\n    editorContainer: HTMLElement;\n    iframeContainer: HTMLElement;\n    height?: number;\n    iframeHeight?: number;\n    api?: EditorUiApi;\n};\ndeclare type SetupCallback = (editor: Editor) => void;\ndeclare type FilePickerCallback = (callback: Function, value: any, meta: Record<string, any>) => void;\ndeclare type FilePickerValidationStatus = 'valid' | 'unknown' | 'invalid' | 'none';\ndeclare type FilePickerValidationCallback = (info: {\n    type: string;\n    url: string;\n}, callback: (validation: {\n    status: FilePickerValidationStatus;\n    message: string;\n}) => void) => void;\ndeclare type URLConverter = (url: string, name: string, elm?: HTMLElement) => string;\ndeclare type URLConverterCallback = (url: string, node: Node, on_save: boolean, name: string) => void;\ninterface ToolbarGroup {\n    name?: string;\n    items: string[];\n}\ndeclare type ToolbarMode = 'floating' | 'sliding' | 'scrolling' | 'wrap';\ninterface BaseEditorSettings {\n    add_form_submit_trigger?: boolean;\n    add_unload_trigger?: boolean;\n    allow_conditional_comments?: boolean;\n    allow_html_data_urls?: boolean;\n    allow_html_in_named_anchor?: boolean;\n    allow_script_urls?: boolean;\n    allow_svg_data_urls?: boolean;\n    allow_unsafe_link_target?: boolean;\n    anchor_bottom?: false | string;\n    anchor_top?: false | string;\n    auto_focus?: string | true;\n    automatic_uploads?: boolean;\n    base_url?: string;\n    block_formats?: string;\n    block_unsupported_drop?: boolean;\n    body_id?: string;\n    body_class?: string;\n    br_in_pre?: boolean;\n    br_newline_selector?: string;\n    browser_spellcheck?: boolean;\n    branding?: boolean;\n    cache_suffix?: string;\n    color_cols?: number;\n    color_map?: string[];\n    content_css?: boolean | string | string[];\n    content_css_cors?: boolean;\n    content_security_policy?: string;\n    content_style?: string;\n    font_css?: string | string[];\n    contextmenu?: string | false;\n    contextmenu_never_use_native?: boolean;\n    convert_fonts_to_spans?: boolean;\n    convert_urls?: boolean;\n    custom_colors?: boolean;\n    custom_elements?: string;\n    custom_ui_selector?: string;\n    custom_undo_redo_levels?: number;\n    directionality?: 'ltr' | 'rtl';\n    doctype?: string;\n    document_base_url?: string;\n    element_format?: 'xhtml' | 'html';\n    elementpath?: boolean;\n    encoding?: string;\n    end_container_on_empty_block?: boolean;\n    entities?: string;\n    entity_encoding?: EntityEncoding;\n    extended_valid_elements?: string;\n    event_root?: string;\n    file_picker_callback?: FilePickerCallback;\n    file_picker_types?: string;\n    file_picker_validator_handler?: FilePickerValidationCallback;\n    fix_list_elements?: boolean;\n    fixed_toolbar_container?: string;\n    fixed_toolbar_container_target?: HTMLElement;\n    font_formats?: string;\n    font_size_classes?: string;\n    font_size_legacy_values?: string;\n    font_size_style_values?: string;\n    fontsize_formats?: string;\n    force_hex_style_colors?: boolean;\n    forced_root_block?: boolean | string;\n    forced_root_block_attrs?: Record<string, string>;\n    formats?: Formats;\n    gecko_spellcheck?: boolean;\n    height?: number | string;\n    hidden_input?: boolean;\n    icons?: string;\n    icons_url?: string;\n    id?: string;\n    images_dataimg_filter?: (imgElm: HTMLImageElement) => boolean;\n    images_file_types?: string;\n    images_replace_blob_uris?: boolean;\n    images_reuse_filename?: boolean;\n    images_upload_base_path?: string;\n    images_upload_credentials?: boolean;\n    images_upload_handler?: UploadHandler;\n    images_upload_url?: string;\n    indent?: boolean;\n    indent_after?: string;\n    indent_before?: string;\n    indent_use_margin?: boolean;\n    indentation?: string;\n    init_instance_callback?: SetupCallback;\n    inline?: boolean;\n    inline_boundaries?: boolean;\n    inline_boundaries_selector?: string;\n    inline_styles?: boolean;\n    invalid_elements?: string;\n    invalid_styles?: string;\n    keep_styles?: boolean;\n    language?: string;\n    language_load?: boolean;\n    language_url?: string;\n    lineheight_formats?: string;\n    max_height?: number;\n    max_width?: number;\n    menu?: Record<string, {\n        title: string;\n        items: string;\n    }>;\n    menubar?: boolean | string;\n    min_height?: number;\n    min_width?: number;\n    no_newline_selector?: string;\n    nowrap?: boolean;\n    object_resizing?: boolean | string;\n    placeholder?: string;\n    preserve_cdata?: boolean;\n    preview_styles?: boolean | string;\n    protect?: RegExp[];\n    readonly?: boolean;\n    referrer_policy?: ReferrerPolicy;\n    relative_urls?: boolean;\n    remove_script_host?: boolean;\n    remove_trailing_brs?: boolean;\n    removed_menuitems?: string;\n    resize?: boolean | 'both';\n    resize_img_proportional?: boolean;\n    root_name?: string;\n    schema?: SchemaType;\n    selector?: string;\n    setup?: SetupCallback;\n    skin?: boolean | string;\n    skin_url?: string;\n    statusbar?: boolean;\n    style_formats?: AllowedFormat[];\n    style_formats_autohide?: boolean;\n    style_formats_merge?: boolean;\n    submit_patch?: boolean;\n    suffix?: string;\n    target?: HTMLElement;\n    theme?: string | ThemeInitFunc;\n    theme_url?: string;\n    toolbar?: boolean | string | string[] | Array<ToolbarGroup>;\n    toolbar1?: string;\n    toolbar2?: string;\n    toolbar3?: string;\n    toolbar4?: string;\n    toolbar5?: string;\n    toolbar6?: string;\n    toolbar7?: string;\n    toolbar8?: string;\n    toolbar9?: string;\n    toolbar_mode?: ToolbarMode;\n    typeahead_urls?: boolean;\n    url_converter?: URLConverter;\n    url_converter_scope?: any;\n    urlconverter_callback?: string | URLConverterCallback;\n    valid_children?: string;\n    valid_classes?: string | Record<string, string>;\n    valid_elements?: string;\n    valid_styles?: string | Record<string, string>;\n    visual?: boolean;\n    visual_anchor_class?: string;\n    visual_table_class?: string;\n    width?: number | string;\n    toolbar_drawer?: false | 'floating' | 'sliding' | 'scrolling';\n    editor_deselector?: string;\n    editor_selector?: string;\n    elements?: string;\n    filepicker_validator_handler?: FilePickerValidationCallback;\n    mode?: 'exact' | 'textareas' | 'specific_textareas';\n    types?: Record<string, any>[];\n    block_elements?: string;\n    boolean_attributes?: string;\n    move_caret_before_on_enter_elements?: string;\n    non_empty_elements?: string;\n    self_closing_elements?: string;\n    short_ended_elements?: string;\n    text_block_elements?: string;\n    text_inline_elements?: string;\n    whitespace_elements?: string;\n    disable_nodechange?: boolean;\n    forced_plugins?: string | string[];\n    plugin_base_urls?: Record<string, string>;\n    service_message?: string;\n    validate?: boolean;\n    [key: string]: any;\n}\ninterface RawEditorSettings extends BaseEditorSettings {\n    external_plugins?: Record<string, string>;\n    mobile?: RawEditorSettings;\n    plugins?: string | string[];\n}\ninterface EditorSettings extends BaseEditorSettings {\n    external_plugins: Record<string, string>;\n    plugins: string;\n}\ninterface ParamTypeMap {\n    'hash': Record<string, string>;\n    'string': string;\n    'number': number;\n    'boolean': boolean;\n    'string[]': string[];\n    'array': any[];\n}\ninterface BlobInfoImagePair {\n    image: HTMLImageElement;\n    blobInfo: BlobInfo;\n}\ndeclare class NodeChange {\n    private readonly editor;\n    private lastPath;\n    constructor(editor: Editor);\n    nodeChanged(args?: any): void;\n    private isSameElementPath;\n}\ninterface SelectionOverrides {\n    showCaret: (direction: number, node: Element, before: boolean, scrollIntoView?: boolean) => Range | null;\n    showBlockCaretContainer: (blockCaretContainer: Element) => void;\n    hideFakeCaret: () => void;\n    destroy: () => void;\n}\ninterface Quirks {\n    refreshContentEditable(): void;\n    isHidden(): boolean;\n}\ndeclare type DecoratorData = Record<string, any>;\ndeclare type Decorator = (uid: string, data: DecoratorData) => {\n    attributes?: {};\n    classes?: string[];\n};\ndeclare type AnnotationListener = (state: boolean, name: string, data?: {\n    uid: string;\n    nodes: any[];\n}) => void;\ndeclare type AnnotationListenerApi = AnnotationListener;\ninterface AnnotatorSettings {\n    decorate: Decorator;\n    persistent?: boolean;\n}\ninterface Annotator {\n    register: (name: string, settings: AnnotatorSettings) => void;\n    annotate: (name: string, data: DecoratorData) => void;\n    annotationChanged: (name: string, f: AnnotationListenerApi) => void;\n    remove: (name: string) => void;\n    getAll: (name: string) => Record<string, Element[]>;\n}\ninterface GeomRect {\n    readonly x: number;\n    readonly y: number;\n    readonly w: number;\n    readonly h: number;\n}\ninterface Rect {\n    inflate: (rect: GeomRect, w: number, h: number) => GeomRect;\n    relativePosition: (rect: GeomRect, targetRect: GeomRect, rel: string) => GeomRect;\n    findBestRelativePosition: (rect: GeomRect, targetRect: GeomRect, constrainRect: GeomRect, rels: string[]) => string | null;\n    intersect: (rect: GeomRect, cropRect: GeomRect) => GeomRect | null;\n    clamp: (rect: GeomRect, clampRect: GeomRect, fixedSize?: boolean) => GeomRect;\n    create: (x: number, y: number, w: number, h: number) => GeomRect;\n    fromClientRect: (clientRect: ClientRect) => GeomRect;\n}\ninterface StyleMap {\n    [s: string]: string | number;\n}\ninterface StylesSettings {\n    allow_script_urls?: boolean;\n    allow_svg_data_urls?: boolean;\n    url_converter?: URLConverter;\n    url_converter_scope?: any;\n}\ninterface Styles {\n    toHex: (color: string) => string;\n    parse: (css: string) => Record<string, string>;\n    serialize: (styles: StyleMap, elementName?: string) => string;\n}\ninterface DOMUtilsSettings {\n    schema: Schema;\n    url_converter: URLConverter;\n    url_converter_scope: any;\n    ownEvents: boolean;\n    keep_values: boolean;\n    hex_colors: boolean;\n    update_styles: boolean;\n    root_element: HTMLElement;\n    collect: Function;\n    onSetAttrib: Function;\n    contentCssCors: boolean;\n    referrerPolicy: ReferrerPolicy;\n}\ndeclare type Target = Node | Window;\ndeclare type RunArguments<T extends Node = Node> = string | T | Array<string | T>;\ndeclare type BoundEvent = [\n    Target,\n    string,\n    EventUtilsCallback<any>,\n    any\n];\ndeclare type Callback<K extends string> = EventUtilsCallback<MappedEvent<HTMLElementEventMap, K>>;\ninterface DOMUtils {\n    doc: Document;\n    settings: Partial<DOMUtilsSettings>;\n    win: Window;\n    files: Record<string, boolean>;\n    stdMode: boolean;\n    boxModel: boolean;\n    styleSheetLoader: StyleSheetLoader;\n    boundEvents: BoundEvent[];\n    styles: Styles;\n    schema: Schema;\n    events: EventUtils;\n    root: Node;\n    $: DomQueryConstructor;\n    $$: {\n        <T extends Node>(elm: T | T[] | DomQuery<T>): DomQuery<T>;\n        (elm: string): DomQuery<Node>;\n    };\n    isBlock: (node: string | Node) => boolean;\n    clone: (node: Node, deep: boolean) => Node;\n    getRoot: () => HTMLElement;\n    getViewPort: (argWin?: Window) => GeomRect;\n    getRect: (elm: string | HTMLElement) => GeomRect;\n    getSize: (elm: string | HTMLElement) => {\n        w: number;\n        h: number;\n    };\n    getParent: {\n        <K extends keyof HTMLElementTagNameMap>(node: string | Node, selector: K, root?: Node): HTMLElementTagNameMap[K] | null;\n        <T extends HTMLElement>(node: string | Node, selector: (node: HTMLElement) => node is T, root?: Node): T | null;\n        <T extends Element = Element>(node: string | Node, selector?: string | ((node: HTMLElement) => boolean | void), root?: Node): T | null;\n    };\n    getParents: {\n        <K extends keyof HTMLElementTagNameMap>(elm: string | Node, selector: K, root?: Node, collect?: boolean): Array<HTMLElementTagNameMap[K]>;\n        <T extends HTMLElement>(node: string | Node, selector: (node: HTMLElement) => node is T, root?: Node): T[];\n        <T extends Element = Element>(elm: string | Node, selector?: string | ((node: HTMLElement) => boolean | void), root?: Node, collect?: boolean): T[];\n    };\n    get: (elm: string | Node) => HTMLElement | null;\n    getNext: (node: Node, selector: string | ((node: Node) => boolean)) => Node | null;\n    getPrev: (node: Node, selector: string | ((node: Node) => boolean)) => Node | null;\n    select: {\n        <K extends keyof HTMLElementTagNameMap>(selector: K, scope?: string | Node): Array<HTMLElementTagNameMap[K]>;\n        <T extends HTMLElement = HTMLElement>(selector: string, scope?: string | Node): T[];\n    };\n    is: (elm: Node | Node[], selector: string) => boolean;\n    add: (parentElm: RunArguments, name: string | Node, attrs?: Record<string, string | boolean | number>, html?: string | Node, create?: boolean) => HTMLElement;\n    create: {\n        <K extends keyof HTMLElementTagNameMap>(name: K, attrs?: Record<string, string | boolean | number>, html?: string | Node): HTMLElementTagNameMap[K];\n        (name: string, attrs?: Record<string, string | boolean | number>, html?: string | Node): HTMLElement;\n    };\n    createHTML: (name: string, attrs?: Record<string, string>, html?: string) => string;\n    createFragment: (html?: string) => DocumentFragment;\n    remove: <T extends Node>(node: string | T | T[] | DomQuery<T>, keepChildren?: boolean) => T | T[];\n    setStyle: {\n        (elm: string | Node | Node[], name: string, value: string | number | null): void;\n        (elm: string | Node | Node[], styles: StyleMap): void;\n    };\n    getStyle: (elm: string | Node, name: string, computed?: boolean) => string;\n    setStyles: (elm: string | Node | Node[], stylesArg: StyleMap) => void;\n    removeAllAttribs: (e: RunArguments<Element>) => void;\n    setAttrib: (elm: string | Node | Node[], name: string, value: string | boolean | number | null) => void;\n    setAttribs: (elm: string | Node | Node[], attrs: Record<string, string | boolean | number | null>) => void;\n    getAttrib: (elm: string | Node, name: string, defaultVal?: string) => string;\n    getPos: (elm: string | Node, rootElm?: Node) => {\n        x: number;\n        y: number;\n    };\n    parseStyle: (cssText: string) => Record<string, string>;\n    serializeStyle: (stylesArg: StyleMap, name?: string) => string;\n    addStyle: (cssText: string) => void;\n    loadCSS: (url: string) => void;\n    addClass: (elm: string | Node | Node[], cls: string) => void;\n    removeClass: (elm: string | Node | Node[], cls: string) => void;\n    hasClass: (elm: string | Node, cls: string) => boolean;\n    toggleClass: (elm: string | Node | Node[], cls: string, state?: boolean) => void;\n    show: (elm: string | Node | Node[]) => void;\n    hide: (elm: string | Node | Node[]) => void;\n    isHidden: (elm: string | Node) => boolean;\n    uniqueId: (prefix?: string) => string;\n    setHTML: (elm: string | Node | Node[], html: string) => void;\n    getOuterHTML: (elm: string | Node) => string;\n    setOuterHTML: (elm: string | Node | Node[], html: string) => void;\n    decode: (text: string) => string;\n    encode: (text: string) => string;\n    insertAfter: {\n        <T extends Node>(node: T | T[], reference: string | Node): T;\n        <T extends Node>(node: RunArguments<T>, reference: string | Node): false | T;\n    };\n    replace: {\n        <T extends Node>(newElm: Node, oldElm: T | T[], keepChildren?: boolean): T;\n        <T extends Node>(newElm: Node, oldElm: RunArguments<T>, keepChildren?: boolean): false | T;\n    };\n    rename: {\n        <K extends keyof HTMLElementTagNameMap>(elm: Element, name: K): HTMLElementTagNameMap[K];\n        (elm: Element, name: string): Element;\n    };\n    findCommonAncestor: (a: Node, b: Node) => Node;\n    toHex: (rgbVal: string) => string;\n    run<R, T extends Node>(this: DOMUtils, elm: T | T[], func: (node: T) => R, scope?: any): R;\n    run<R, T extends Node>(this: DOMUtils, elm: RunArguments<T>, func: (node: T) => R, scope?: any): false | R;\n    getAttribs: (elm: string | Node) => NamedNodeMap | Attr[];\n    isEmpty: (node: Node, elements?: Record<string, any>) => boolean;\n    createRng: () => Range;\n    nodeIndex: (node: Node, normalized?: boolean) => number;\n    split: {\n        <T extends Node>(parentElm: Node, splitElm: Node, replacementElm: T): T;\n        <T extends Node>(parentElm: Node, splitElm: T): T;\n    };\n    bind: {\n        <K extends string>(target: Target, name: K, func: Callback<K>, scope?: any): Callback<K>;\n        <K extends string>(target: Target[], name: K, func: Callback<K>, scope?: any): Callback<K>[];\n    };\n    unbind: {\n        <K extends string>(target: Target, name?: K, func?: EventUtilsCallback<MappedEvent<HTMLElementEventMap, K>>): EventUtils;\n        <K extends string>(target: Target[], name?: K, func?: EventUtilsCallback<MappedEvent<HTMLElementEventMap, K>>): EventUtils[];\n    };\n    fire: (target: Node | Window, name: string, evt?: {}) => EventUtils;\n    getContentEditable: (node: Node) => string | null;\n    getContentEditableParent: (node: Node) => string | null;\n    destroy: () => void;\n    isChildOf: (node: Node, parent: Node) => boolean;\n    dumpRng: (r: Range) => string;\n}\ninterface GetSelectionContentArgs extends GetContentArgs {\n    selection?: boolean;\n    contextual?: boolean;\n}\ninterface SelectionSetContentArgs extends SetContentArgs {\n    selection?: boolean;\n}\ninterface BookmarkManager {\n    getBookmark: (type: number, normalized?: boolean) => Bookmark;\n    moveToBookmark: (bookmark: Bookmark) => void;\n}\ninterface ControlSelection {\n    isResizable: (elm: Element) => boolean;\n    showResizeRect: (elm: Element) => void;\n    hideResizeRect: () => void;\n    updateResizeRect: (evt: EditorEvent<any>) => void;\n    destroy: () => void;\n}\ninterface ParserArgs {\n    getInner?: boolean | number;\n    forced_root_block?: boolean | string;\n    context?: string;\n    isRootContent?: boolean;\n    format?: string;\n    [key: string]: any;\n}\ndeclare type ParserFilterCallback = (nodes: AstNode[], name: string, args: ParserArgs) => void;\ninterface ParserFilter {\n    name: string;\n    callbacks: ParserFilterCallback[];\n}\ninterface DomParserSettings {\n    allow_html_data_urls?: boolean;\n    allow_svg_data_urls?: boolean;\n    allow_conditional_comments?: boolean;\n    allow_html_in_named_anchor?: boolean;\n    allow_script_urls?: boolean;\n    allow_unsafe_link_target?: boolean;\n    convert_fonts_to_spans?: boolean;\n    fix_list_elements?: boolean;\n    font_size_legacy_values?: string;\n    forced_root_block?: boolean | string;\n    forced_root_block_attrs?: Record<string, string>;\n    padd_empty_with_br?: boolean;\n    preserve_cdata?: boolean;\n    remove_trailing_brs?: boolean;\n    root_name?: string;\n    validate?: boolean;\n    inline_styles?: boolean;\n    blob_cache?: BlobCache;\n    images_dataimg_filter?: (img: HTMLImageElement) => boolean;\n}\ninterface DomParser {\n    schema: Schema;\n    addAttributeFilter: (name: string, callback: (nodes: AstNode[], name: string, args: ParserArgs) => void) => void;\n    getAttributeFilters: () => ParserFilter[];\n    addNodeFilter: (name: string, callback: (nodes: AstNode[], name: string, args: ParserArgs) => void) => void;\n    getNodeFilters: () => ParserFilter[];\n    filterNode: (node: AstNode) => AstNode;\n    parse: (html: string, args?: ParserArgs) => AstNode;\n}\ninterface WriterSettings {\n    element_format?: 'xhtml' | 'html';\n    entities?: string;\n    entity_encoding?: EntityEncoding;\n    indent?: boolean;\n    indent_after?: string;\n    indent_before?: string;\n}\ndeclare type Attributes$1 = Array<{\n    name: string;\n    value: string;\n}>;\ninterface Writer {\n    cdata: (text: string) => void;\n    comment: (text: string) => void;\n    doctype: (text: string) => void;\n    end: (name: string) => void;\n    getContent: () => string;\n    pi: (name: string, text?: string) => void;\n    reset: () => void;\n    start: (name: string, attrs?: Attributes$1, empty?: boolean) => void;\n    text: (text: string, raw?: boolean) => void;\n}\ninterface HtmlSerializerSettings extends WriterSettings {\n    inner?: boolean;\n    validate?: boolean;\n}\ninterface HtmlSerializer {\n    serialize: (node: AstNode) => string;\n}\ninterface DomSerializerArgs extends ParserArgs {\n    format?: string;\n}\ninterface DomSerializerSettings extends DomParserSettings, WriterSettings, SchemaSettings, HtmlSerializerSettings {\n    url_converter?: URLConverter;\n    url_converter_scope?: {};\n}\ninterface DomSerializerImpl {\n    schema: Schema;\n    addNodeFilter: (name: string, callback: (nodes: AstNode[], name: string, args: ParserArgs) => void) => void;\n    addAttributeFilter: (name: string, callback: (nodes: AstNode[], name: string, args: ParserArgs) => void) => void;\n    getNodeFilters: () => ParserFilter[];\n    getAttributeFilters: () => ParserFilter[];\n    serialize: {\n        (node: Element, parserArgs: {\n            format: 'tree';\n        } & DomSerializerArgs): AstNode;\n        (node: Element, parserArgs?: DomSerializerArgs): string;\n    };\n    addRules: (rules: string) => void;\n    setRules: (rules: string) => void;\n    addTempAttr: (name: string) => void;\n    getTempAttrs: () => string[];\n}\ninterface DomSerializer extends DomSerializerImpl {\n}\ninterface EditorSelection {\n    bookmarkManager: BookmarkManager;\n    controlSelection: ControlSelection;\n    dom: DOMUtils;\n    win: Window;\n    serializer: DomSerializer;\n    editor: Editor;\n    collapse: (toStart?: boolean) => void;\n    setCursorLocation: {\n        (node: Node, offset: number): void;\n        (): void;\n    };\n    getContent: {\n        (args: {\n            format: 'tree';\n        } & GetSelectionContentArgs): AstNode;\n        (args?: GetSelectionContentArgs): string;\n    };\n    setContent: (content: string, args?: SelectionSetContentArgs) => void;\n    getBookmark: (type?: number, normalized?: boolean) => Bookmark;\n    moveToBookmark: (bookmark: Bookmark) => void;\n    select: (node: Node, content?: boolean) => Node;\n    isCollapsed: () => boolean;\n    isForward: () => boolean;\n    setNode: (elm: Element) => Element;\n    getNode: () => Element;\n    getSel: () => Selection | null;\n    setRng: (rng: Range, forward?: boolean) => void;\n    getRng: () => Range;\n    getStart: (real?: boolean) => Element;\n    getEnd: (real?: boolean) => Element;\n    getSelectedBlocks: (startElm?: Element, endElm?: Element) => Element[];\n    normalize: () => Range;\n    selectorChanged: (selector: string, callback: (active: boolean, args: {\n        node: Node;\n        selector: String;\n        parents: Element[];\n    }) => void) => EditorSelection;\n    selectorChangedWithUnbind: (selector: string, callback: (active: boolean, args: {\n        node: Node;\n        selector: String;\n        parents: Element[];\n    }) => void) => {\n        unbind: () => void;\n    };\n    getScrollContainer: () => HTMLElement;\n    scrollIntoView: (elm: Element, alignToTop?: boolean) => void;\n    placeCaretAt: (clientX: number, clientY: number) => void;\n    getBoundingClientRect: () => ClientRect;\n    destroy: () => void;\n}\ndeclare type EditorCommandCallback = (ui: boolean, value: any, args: any) => void;\ndeclare type EditorCommandsCallback = (command: string, ui: boolean, value: any, args: any) => void;\ninterface Commands {\n    state: Record<string, (command: string) => boolean>;\n    exec: Record<string, EditorCommandsCallback>;\n    value: Record<string, (command: string) => string>;\n}\ninterface EditorCommandsConstructor {\n    readonly prototype: EditorCommands;\n    new (editor: Editor): EditorCommands;\n}\ndeclare class EditorCommands {\n    private readonly editor;\n    private selectionBookmark;\n    private commands;\n    constructor(editor: Editor);\n    execCommand(command: string, ui?: boolean, value?: any, args?: any): boolean;\n    queryCommandState(command: string): boolean;\n    queryCommandValue(command: string): string;\n    addCommands<K extends keyof Commands>(commandList: Commands[K], type: K): void;\n    addCommands(commandList: Record<string, EditorCommandsCallback>): void;\n    addCommand(command: string, callback: EditorCommandCallback, scope?: any): void;\n    queryCommandSupported(command: string): boolean;\n    addQueryStateHandler(command: string, callback: () => boolean, scope?: any): void;\n    addQueryValueHandler(command: string, callback: () => string, scope?: any): void;\n    hasCustomCommand(command: string): boolean;\n    private execNativeCommand;\n    private isFormatMatch;\n    private toggleFormat;\n    private storeSelection;\n    private restoreSelection;\n    private setupCommands;\n}\ninterface WindowParams {\n    readonly inline?: 'cursor' | 'toolbar';\n    readonly ariaAttrs?: boolean;\n}\ninterface WindowManager {\n    open: <T>(config: DialogSpec<T>, params?: WindowParams) => DialogInstanceApi<T>;\n    openUrl: (config: UrlDialogSpec) => UrlDialogInstanceApi;\n    alert: (message: string, callback?: () => void, scope?: any) => void;\n    confirm: (message: string, callback?: (state: boolean) => void, scope?: any) => void;\n    close: () => void;\n}\ndeclare type InstanceApi<T> = UrlDialogInstanceApi | DialogInstanceApi<T>;\ninterface WindowManagerImpl {\n    open: <T>(config: DialogSpec<T>, params: WindowParams, closeWindow: (dialog: DialogInstanceApi<T>) => void) => DialogInstanceApi<T>;\n    openUrl: (config: UrlDialogSpec, closeWindow: (dialog: UrlDialogInstanceApi) => void) => UrlDialogInstanceApi;\n    alert: (message: string, callback: () => void) => void;\n    confirm: (message: string, callback: (state: boolean) => void) => void;\n    close: (dialog: InstanceApi<any>) => void;\n}\ninterface ExecCommandEvent {\n    command: string;\n    ui?: boolean;\n    value?: any;\n}\ndeclare type GetContentEvent = GetContentArgs & {\n    source_view?: boolean;\n    selection?: boolean;\n    save?: boolean;\n};\ndeclare type SetContentEvent = SetContentArgs & {\n    paste?: boolean;\n    selection?: boolean;\n};\ninterface NewBlockEvent {\n    newBlock: Element;\n}\ninterface NodeChangeEvent {\n    element: Element;\n    parents: Node[];\n    selectionChange?: boolean;\n    initial?: boolean;\n}\ninterface ObjectResizeEvent {\n    target: HTMLElement;\n    width: number;\n    height: number;\n    origin: string;\n}\ninterface ObjectSelectedEvent {\n    target: Node;\n    targetClone?: Node;\n}\ninterface ScrollIntoViewEvent {\n    elm: HTMLElement;\n    alignToTop: boolean;\n}\ninterface SetSelectionRangeEvent {\n    range: Range;\n    forward: boolean;\n}\ninterface ShowCaretEvent {\n    target: Node;\n    direction: number;\n    before: boolean;\n}\ninterface SwitchModeEvent {\n    mode: string;\n}\ninterface AddUndoEvent {\n    level: UndoLevel;\n    lastLevel: UndoLevel;\n    originalEvent: Event;\n}\ninterface UndoRedoEvent {\n    level: UndoLevel;\n}\ninterface WindowEvent<T extends DialogData> {\n    dialog: InstanceApi<T>;\n}\ninterface ProgressStateEvent {\n    state: boolean;\n    time?: number;\n}\ninterface AfterProgressStateEvent {\n    state: boolean;\n}\ninterface PlaceholderToggleEvent {\n    state: boolean;\n}\ninterface LoadErrorEvent {\n    message: string;\n}\ninterface EditorEventMap extends Omit<NativeEventMap, 'blur' | 'focus'> {\n    'activate': {\n        relatedTarget: Editor;\n    };\n    'deactivate': {\n        relatedTarget: Editor;\n    };\n    'focus': {\n        blurredEditor: Editor;\n    };\n    'blur': {\n        focusedEditor: Editor;\n    };\n    'resize': UIEvent;\n    'scroll': UIEvent;\n    'detach': {};\n    'remove': {};\n    'init': {};\n    'ScrollIntoView': ScrollIntoViewEvent;\n    'AfterScrollIntoView': ScrollIntoViewEvent;\n    'ObjectResized': ObjectResizeEvent;\n    'ObjectResizeStart': ObjectResizeEvent;\n    'SwitchMode': SwitchModeEvent;\n    'ScrollWindow': UIEvent;\n    'ResizeWindow': UIEvent;\n    'SkinLoaded': {};\n    'SkinLoadError': LoadErrorEvent;\n    'PluginLoadError': LoadErrorEvent;\n    'IconsLoadError': LoadErrorEvent;\n    'LanguageLoadError': LoadErrorEvent;\n    'BeforeExecCommand': ExecCommandEvent;\n    'ExecCommand': ExecCommandEvent;\n    'NodeChange': NodeChangeEvent;\n    'ShowCaret': ShowCaretEvent;\n    'SelectionChange': {};\n    'ObjectSelected': ObjectSelectedEvent;\n    'BeforeObjectSelected': ObjectSelectedEvent;\n    'GetSelectionRange': {\n        range: Range;\n    };\n    'SetSelectionRange': SetSelectionRangeEvent;\n    'AfterSetSelectionRange': SetSelectionRangeEvent;\n    'BeforeGetContent': GetContentEvent;\n    'GetContent': GetContentEvent;\n    'BeforeSetContent': SetContentEvent;\n    'SetContent': SetContentEvent;\n    'LoadContent': {};\n    'PreviewFormats': {};\n    'AfterPreviewFormats': {};\n    'ScriptsLoaded': {};\n    'PreInit': {};\n    'PostRender': {};\n    'NewBlock': NewBlockEvent;\n    'ClearUndos': {};\n    'TypingUndo': {};\n    'Redo': UndoRedoEvent;\n    'Undo': UndoRedoEvent;\n    'BeforeAddUndo': AddUndoEvent;\n    'AddUndo': AddUndoEvent;\n    'CloseWindow': WindowEvent<any>;\n    'OpenWindow': WindowEvent<any>;\n    'ProgressState': ProgressStateEvent;\n    'AfterProgressState': AfterProgressStateEvent;\n    'PlaceholderToggle': PlaceholderToggleEvent;\n    'tap': TouchEvent;\n    'longpress': TouchEvent;\n    'longpresscancel': {};\n}\ninterface EditorManagerEventMap {\n    'AddEditor': {\n        editor: Editor;\n    };\n    'RemoveEditor': {\n        editor: Editor;\n    };\n    'BeforeUnload': {\n        returnValue: any;\n    };\n}\ntype EventTypes_d_ExecCommandEvent = ExecCommandEvent;\ntype EventTypes_d_GetContentEvent = GetContentEvent;\ntype EventTypes_d_SetContentEvent = SetContentEvent;\ntype EventTypes_d_NewBlockEvent = NewBlockEvent;\ntype EventTypes_d_NodeChangeEvent = NodeChangeEvent;\ntype EventTypes_d_ObjectResizeEvent = ObjectResizeEvent;\ntype EventTypes_d_ObjectSelectedEvent = ObjectSelectedEvent;\ntype EventTypes_d_ScrollIntoViewEvent = ScrollIntoViewEvent;\ntype EventTypes_d_SetSelectionRangeEvent = SetSelectionRangeEvent;\ntype EventTypes_d_ShowCaretEvent = ShowCaretEvent;\ntype EventTypes_d_SwitchModeEvent = SwitchModeEvent;\ntype EventTypes_d_AddUndoEvent = AddUndoEvent;\ntype EventTypes_d_UndoRedoEvent = UndoRedoEvent;\ntype EventTypes_d_WindowEvent<_0> = WindowEvent<_0>;\ntype EventTypes_d_ProgressStateEvent = ProgressStateEvent;\ntype EventTypes_d_AfterProgressStateEvent = AfterProgressStateEvent;\ntype EventTypes_d_PlaceholderToggleEvent = PlaceholderToggleEvent;\ntype EventTypes_d_LoadErrorEvent = LoadErrorEvent;\ntype EventTypes_d_EditorEventMap = EditorEventMap;\ntype EventTypes_d_EditorManagerEventMap = EditorManagerEventMap;\ndeclare namespace EventTypes_d {\n    export { EventTypes_d_ExecCommandEvent as ExecCommandEvent, EventTypes_d_GetContentEvent as GetContentEvent, EventTypes_d_SetContentEvent as SetContentEvent, EventTypes_d_NewBlockEvent as NewBlockEvent, EventTypes_d_NodeChangeEvent as NodeChangeEvent, EventTypes_d_ObjectResizeEvent as ObjectResizeEvent, EventTypes_d_ObjectSelectedEvent as ObjectSelectedEvent, EventTypes_d_ScrollIntoViewEvent as ScrollIntoViewEvent, EventTypes_d_SetSelectionRangeEvent as SetSelectionRangeEvent, EventTypes_d_ShowCaretEvent as ShowCaretEvent, EventTypes_d_SwitchModeEvent as SwitchModeEvent, EventTypes_d_AddUndoEvent as AddUndoEvent, EventTypes_d_UndoRedoEvent as UndoRedoEvent, EventTypes_d_WindowEvent as WindowEvent, EventTypes_d_ProgressStateEvent as ProgressStateEvent, EventTypes_d_AfterProgressStateEvent as AfterProgressStateEvent, EventTypes_d_PlaceholderToggleEvent as PlaceholderToggleEvent, EventTypes_d_LoadErrorEvent as LoadErrorEvent, EventTypes_d_EditorEventMap as EditorEventMap, EventTypes_d_EditorManagerEventMap as EditorManagerEventMap, };\n}\ninterface RawString {\n    raw: string;\n}\ndeclare type Primitive = string | number | boolean | Record<string | number, any> | Function;\ndeclare type TokenisedString = [\n    string,\n    ...Primitive[]\n];\ndeclare type Untranslated = Primitive | TokenisedString | RawString;\ndeclare type TranslatedString = string;\ninterface I18n {\n    getData: () => Record<string, Record<string, string>>;\n    setCode: (newCode: string) => void;\n    getCode: () => string;\n    add: (code: string, items: Record<string, string>) => void;\n    translate: (text: Untranslated) => TranslatedString;\n    isRtl: () => boolean;\n    hasCode: (code: string) => boolean;\n}\ninterface Observable<T> {\n    fire<K extends string, U extends MappedEvent<T, K>>(name: K, args?: U, bubble?: boolean): EditorEvent<U>;\n    on<K extends string>(name: K, callback: (event: EditorEvent<MappedEvent<T, K>>) => void, prepend?: boolean): EventDispatcher<T>;\n    off<K extends string>(name?: K, callback?: (event: EditorEvent<MappedEvent<T, K>>) => void): EventDispatcher<T>;\n    once<K extends string>(name: K, callback: (event: EditorEvent<MappedEvent<T, K>>) => void): EventDispatcher<T>;\n    hasEventListeners(name: string): boolean;\n}\ninterface URISettings {\n    base_uri?: URI;\n}\ninterface URIConstructor {\n    readonly prototype: URI;\n    new (url: string, settings?: URISettings): URI;\n    getDocumentBaseUrl: (loc: {\n        protocol: string;\n        host?: string;\n        href?: string;\n        pathname?: string;\n    }) => string;\n    parseDataUri: (uri: string) => {\n        type: string;\n        data: string;\n    };\n}\ndeclare class URI {\n    static parseDataUri(uri: string): {\n        type: string;\n        data: string;\n    };\n    static getDocumentBaseUrl(loc: {\n        protocol: string;\n        host?: string;\n        href?: string;\n        pathname?: string;\n    }): string;\n    source: string;\n    protocol: string;\n    authority: string;\n    userInfo: string;\n    user: string;\n    password: string;\n    host: string;\n    port: string;\n    relative: string;\n    path: string;\n    directory: string;\n    file: string;\n    query: string;\n    anchor: string;\n    settings: URISettings;\n    constructor(url: string, settings?: URISettings);\n    setPath(path: string): void;\n    toRelative(uri: string): string;\n    toAbsolute(uri: string, noHost?: boolean): string;\n    isSameOrigin(uri: URI): boolean;\n    toRelPath(base: string, path: string): string;\n    toAbsPath(base: string, path: string): string;\n    getURI(noProtoHost?: boolean): string;\n}\ninterface EditorManager extends Observable<EditorManagerEventMap> {\n    $: DomQueryConstructor;\n    defaultSettings: RawEditorSettings;\n    majorVersion: string;\n    minorVersion: string;\n    releaseDate: string;\n    editors: Editor[];\n    activeEditor: Editor;\n    focusedEditor: Editor;\n    settings: RawEditorSettings;\n    baseURI: URI;\n    baseURL: string;\n    documentBaseURL: string;\n    i18n: I18n;\n    suffix: string;\n    add(this: EditorManager, editor: Editor): Editor;\n    addI18n: (code: string, item: Record<string, string>) => void;\n    createEditor(this: EditorManager, id: string, settings: RawEditorSettings): Editor;\n    execCommand(this: EditorManager, cmd: string, ui: boolean, value: any): boolean;\n    get(this: EditorManager): Editor[];\n    get(this: EditorManager, id: number | string): Editor;\n    init(this: EditorManager, settings: RawEditorSettings): Promise<Editor[]>;\n    overrideDefaults(this: EditorManager, defaultSettings: Partial<RawEditorSettings>): void;\n    remove(this: EditorManager): void;\n    remove(this: EditorManager, selector: string | Editor): Editor | void;\n    setActive(this: EditorManager, editor: Editor): void;\n    setup(this: EditorManager): void;\n    translate: (text: Untranslated) => TranslatedString;\n    triggerSave: () => void;\n    _setBaseUrl(this: EditorManager, baseUrl: string): void;\n}\ninterface EditorObservable extends Observable<EditorEventMap> {\n    bindPendingEventDelegates(this: Editor): void;\n    toggleNativeEvent(this: Editor, name: string, state: boolean): any;\n    unbindAllNativeEvents(this: Editor): void;\n}\ninterface UploadResult$1 {\n    element: HTMLImageElement;\n    status: boolean;\n    blobInfo: BlobInfo;\n    uploadUri: string;\n}\ndeclare type UploadCallback = (results: UploadResult$1[]) => void;\ninterface EditorUpload {\n    blobCache: BlobCache;\n    addFilter: (filter: (img: HTMLImageElement) => boolean) => void;\n    uploadImages: (callback?: UploadCallback) => Promise<UploadResult$1[]>;\n    uploadImagesAuto: (callback?: UploadCallback) => void | Promise<UploadResult$1[]>;\n    scanForImages: () => Promise<BlobInfoImagePair[]>;\n    destroy: () => void;\n}\ndeclare type FormatChangeCallback = (state: boolean, data: {\n    node: Node;\n    format: string;\n    parents: any;\n}) => void;\ninterface FormatRegistry {\n    get: {\n        (name: string): Format[];\n        (): Record<string, Format[]>;\n    };\n    has: (name: string) => boolean;\n    register: (name: string | Formats, format?: Format[] | Format) => void;\n    unregister: (name: string) => Formats;\n}\ninterface Formatter extends FormatRegistry {\n    apply: (name: string, vars?: FormatVars, node?: Node | RangeLikeObject) => void;\n    remove: (name: string, vars?: FormatVars, node?: Node | Range, similar?: boolean) => void;\n    toggle: (name: string, vars?: FormatVars, node?: Node) => void;\n    match: (name: string, vars?: FormatVars, node?: Node) => boolean;\n    closest: (names: any) => string | null;\n    matchAll: (names: string[], vars?: FormatVars) => string[];\n    matchNode: (node: Node, name: string, vars?: FormatVars, similar?: boolean) => boolean;\n    canApply: (name: string) => boolean;\n    formatChanged: (names: string, callback: FormatChangeCallback, similar?: boolean) => {\n        unbind: () => void;\n    };\n    getCssText: (format: string | Format) => string;\n}\ninterface EditorMode {\n    isReadOnly: () => boolean;\n    set: (mode: string) => void;\n    get: () => string;\n    register: (mode: string, api: EditorModeApi) => void;\n}\ninterface EditorModeApi {\n    activate: () => void;\n    deactivate: () => void;\n    editorReadOnly: boolean;\n}\ninterface Plugin {\n    getMetadata?: () => {\n        name: string;\n        url: string;\n    };\n    [key: string]: any;\n}\ndeclare type PluginManager = AddOnManager<Plugin>;\ninterface ShortcutsConstructor {\n    readonly prototype: Shortcuts;\n    new (editor: Editor): Shortcuts;\n}\ndeclare type CommandFunc = string | [\n    string,\n    boolean,\n    any\n] | (() => void);\ndeclare class Shortcuts {\n    private readonly editor;\n    private readonly shortcuts;\n    private pendingPatterns;\n    constructor(editor: Editor);\n    add(pattern: string, desc: string, cmdFunc: CommandFunc, scope?: any): boolean;\n    remove(pattern: string): boolean;\n    private normalizeCommandFunc;\n    private createShortcut;\n    private hasModifier;\n    private isFunctionKey;\n    private matchShortcut;\n    private executeShortcutAction;\n}\ninterface Theme {\n    ui?: any;\n    inline?: any;\n    execCommand?: (command: string, ui?: boolean, value?: any) => boolean;\n    destroy?: () => void;\n    init?: (editor: Editor, url: string, $: DomQueryConstructor) => void;\n    renderUI?: () => {\n        iframeContainer?: HTMLIFrameElement;\n        editorContainer: HTMLElement;\n        api?: Partial<EditorUiApi>;\n    };\n    getNotificationManagerImpl?: () => NotificationManagerImpl;\n    getWindowManagerImpl?: () => WindowManagerImpl;\n}\ndeclare type ThemeManager = AddOnManager<Theme>;\ninterface EditorConstructor {\n    readonly prototype: Editor;\n    new (id: string, settings: RawEditorSettings, editorManager: EditorManager): Editor;\n}\ndeclare class Editor implements EditorObservable {\n    documentBaseUrl: string;\n    baseUri: URI;\n    settings: EditorSettings;\n    id: string;\n    plugins: Record<string, Plugin>;\n    documentBaseURI: URI;\n    baseURI: URI;\n    contentCSS: string[];\n    contentStyles: string[];\n    ui: EditorUi;\n    mode: EditorMode;\n    setMode: (mode: string) => void;\n    $: DomQueryConstructor;\n    shortcuts: Shortcuts;\n    loadedCSS: Record<string, any>;\n    editorCommands: EditorCommands;\n    suffix: string;\n    editorManager: EditorManager;\n    inline: boolean;\n    isNotDirty: boolean;\n    callbackLookup: any;\n    _nodeChangeDispatcher: NodeChange;\n    editorUpload: EditorUpload;\n    annotator: Annotator;\n    bodyElement: HTMLElement;\n    bookmark: any;\n    composing: boolean;\n    container: HTMLElement;\n    contentAreaContainer: HTMLElement;\n    contentDocument: Document;\n    contentWindow: Window;\n    delegates: Record<string, (event: any) => void>;\n    destroyed: boolean;\n    dom: DOMUtils;\n    editorContainer: HTMLElement;\n    eventRoot?: Element;\n    formatter: Formatter;\n    formElement: HTMLElement;\n    formEventDelegate: (e: Event) => void;\n    hasHiddenInput: boolean;\n    hasVisual: boolean;\n    hidden: boolean;\n    iframeElement: HTMLIFrameElement | null;\n    iframeHTML: string;\n    initialized: boolean;\n    notificationManager: NotificationManager;\n    orgDisplay: string;\n    orgVisibility: string;\n    parser: DomParser;\n    quirks: Quirks;\n    readonly: boolean;\n    removed: boolean;\n    schema: Schema;\n    selection: EditorSelection;\n    serializer: DomSerializer;\n    startContent: string;\n    targetElm: HTMLElement;\n    theme: Theme;\n    undoManager: UndoManager;\n    validate: boolean;\n    windowManager: WindowManager;\n    _beforeUnload: () => void;\n    _eventDispatcher: EventDispatcher<NativeEventMap>;\n    _mceOldSubmit: any;\n    _pendingNativeEvents: string[];\n    _selectionOverrides: SelectionOverrides;\n    _skinLoaded: boolean;\n    bindPendingEventDelegates: EditorObservable['bindPendingEventDelegates'];\n    toggleNativeEvent: EditorObservable['toggleNativeEvent'];\n    unbindAllNativeEvents: EditorObservable['unbindAllNativeEvents'];\n    fire: EditorObservable['fire'];\n    on: EditorObservable['on'];\n    off: EditorObservable['off'];\n    once: EditorObservable['once'];\n    hasEventListeners: EditorObservable['hasEventListeners'];\n    constructor(id: string, settings: RawEditorSettings, editorManager: EditorManager);\n    render(): void;\n    focus(skipFocus?: boolean): void;\n    hasFocus(): boolean;\n    execCallback(name: string, ...x: any[]): any;\n    translate(text: Untranslated): TranslatedString;\n    getParam<K extends keyof ParamTypeMap>(name: string, defaultVal: ParamTypeMap[K], type: K): ParamTypeMap[K];\n    getParam<K extends keyof EditorSettings>(name: K, defaultVal?: EditorSettings[K], type?: string): EditorSettings[K];\n    getParam<T>(name: string, defaultVal: T, type?: string): T;\n    hasPlugin(name: string, loaded?: boolean): boolean;\n    nodeChanged(args?: any): void;\n    addCommand(name: string, callback: EditorCommandCallback, scope?: object): void;\n    addQueryStateHandler(name: string, callback: () => boolean, scope?: any): void;\n    addQueryValueHandler(name: string, callback: () => string, scope?: any): void;\n    addShortcut(pattern: string, desc: string, cmdFunc: string | [\n        string,\n        boolean,\n        any\n    ] | (() => void), scope?: any): void;\n    execCommand(cmd: string, ui?: boolean, value?: any, args?: any): boolean;\n    queryCommandState(cmd: string): boolean;\n    queryCommandValue(cmd: string): string;\n    queryCommandSupported(cmd: string): boolean;\n    show(): void;\n    hide(): void;\n    isHidden(): boolean;\n    setProgressState(state: boolean, time?: number): void;\n    load(args?: any): string;\n    save(args?: any): string;\n    setContent(content: string, args?: SetContentArgs): string;\n    setContent(content: AstNode, args?: SetContentArgs): AstNode;\n    setContent(content: Content, args?: SetContentArgs): Content;\n    getContent(args: {\n        format: 'tree';\n    } & GetContentArgs): AstNode;\n    getContent(args?: GetContentArgs): string;\n    insertContent(content: string, args?: any): void;\n    resetContent(initialContent?: string): void;\n    isDirty(): boolean;\n    setDirty(state: boolean): void;\n    getContainer(): HTMLElement;\n    getContentAreaContainer(): HTMLElement;\n    getElement(): HTMLElement;\n    getWin(): Window;\n    getDoc(): Document;\n    getBody(): HTMLElement;\n    convertURL(url: string, name: string, elm?: any): string;\n    addVisual(elm?: HTMLElement): void;\n    remove(): void;\n    destroy(automatic?: boolean): void;\n    uploadImages(callback?: UploadCallback): Promise<UploadResult$1[]>;\n    _scanForImages(): Promise<BlobInfoImagePair[]>;\n    addButton(): void;\n    addSidebar(): void;\n    addMenuItem(): void;\n    addContextToolbar(): void;\n}\ninterface UrlObject {\n    prefix: string;\n    resource: string;\n    suffix: string;\n}\ndeclare type WaitState = 'added' | 'loaded';\ndeclare type AddOnCallback<T> = (editor: Editor, url: string, $?: DomQueryConstructor) => void | T;\ndeclare type AddOnConstructor<T> = new (editor: Editor, url: string, $?: DomQueryConstructor) => T;\ninterface AddOnManager<T> {\n    items: AddOnConstructor<T>[];\n    urls: Record<string, string>;\n    lookup: Record<string, {\n        instance: AddOnConstructor<T>;\n        dependencies?: string[];\n    }>;\n    _listeners: {\n        name: string;\n        state: WaitState;\n        callback: () => void;\n    }[];\n    get: (name: string) => AddOnConstructor<T>;\n    dependencies: (name: string) => string[];\n    requireLangPack: (name: string, languages: string) => void;\n    add: (id: string, addOn: AddOnCallback<T>, dependencies?: string[]) => AddOnConstructor<T>;\n    remove: (name: string) => void;\n    createUrl: (baseUrl: UrlObject, dep: string | UrlObject) => UrlObject;\n    addComponents: (pluginName: string, scripts: string[]) => void;\n    load: (name: string, addOnUrl: string | UrlObject, success?: () => void, scope?: any, failure?: () => void) => void;\n    waitFor: (name: string, callback: () => void, state?: WaitState) => void;\n}\ninterface RangeUtils {\n    walk: (rng: Range, callback: (nodes: Node[]) => void) => void;\n    split: (rng: Range) => RangeLikeObject;\n    normalize: (rng: Range) => boolean;\n}\ninterface ScriptLoaderSettings {\n    referrerPolicy?: ReferrerPolicy;\n}\ninterface ScriptLoaderConstructor {\n    readonly prototype: ScriptLoader;\n    new (): ScriptLoader;\n    ScriptLoader: ScriptLoader;\n}\ndeclare class ScriptLoader {\n    static ScriptLoader: ScriptLoader;\n    private settings;\n    private states;\n    private queue;\n    private scriptLoadedCallbacks;\n    private queueLoadedCallbacks;\n    private loading;\n    constructor(settings?: ScriptLoaderSettings);\n    _setReferrerPolicy(referrerPolicy: ReferrerPolicy): void;\n    loadScript(url: string, success?: () => void, failure?: () => void): void;\n    isDone(url: string): boolean;\n    markDone(url: string): void;\n    add(url: string, success?: () => void, scope?: any, failure?: () => void): void;\n    load(url: string, success?: () => void, scope?: any, failure?: () => void): void;\n    remove(url: string): void;\n    loadQueue(success?: () => void, scope?: any, failure?: (urls: string[]) => void): void;\n    loadScripts(scripts: string[], success?: () => void, scope?: any, failure?: (urls: string[]) => void): void;\n}\ndeclare type TextProcessCallback = (node: Text, offset: number, text: string) => number;\ninterface Spot {\n    container: Text;\n    offset: number;\n}\ninterface TextSeeker {\n    backwards: (node: Node, offset: number, process: TextProcessCallback, root?: Node) => Spot | null;\n    forwards: (node: Node, offset: number, process: TextProcessCallback, root?: Node) => Spot | null;\n}\ninterface DomTreeWalkerConstructor {\n    readonly prototype: DomTreeWalker;\n    new (startNode: Node, rootNode: Node): DomTreeWalker;\n}\ndeclare class DomTreeWalker {\n    private readonly rootNode;\n    private node;\n    constructor(startNode: Node, rootNode: Node);\n    current(): Node;\n    next(shallow?: boolean): Node;\n    prev(shallow?: boolean): Node;\n    prev2(shallow?: boolean): Node;\n    private findSibling;\n    private findPreviousNode;\n}\ninterface Version {\n    major: number;\n    minor: number;\n}\ninterface Env {\n    opera: boolean;\n    webkit: boolean;\n    ie: false | number;\n    gecko: boolean;\n    mac: boolean;\n    iOS: boolean;\n    android: boolean;\n    contentEditable: boolean;\n    transparentSrc: string;\n    caretAfter: boolean;\n    range: boolean;\n    documentMode: number;\n    fileApi: boolean;\n    ceFalse: boolean;\n    cacheSuffix: any;\n    container: any;\n    experimentalShadowDom: boolean;\n    canHaveCSP: boolean;\n    desktop: boolean;\n    windowsPhone: boolean;\n    browser: {\n        current: string | undefined;\n        version: Version;\n        isEdge: () => boolean;\n        isChrome: () => boolean;\n        isIE: () => boolean;\n        isOpera: () => boolean;\n        isFirefox: () => boolean;\n        isSafari: () => boolean;\n    };\n    os: {\n        current: string | undefined;\n        version: Version;\n        isWindows: () => boolean;\n        isiOS: () => boolean;\n        isAndroid: () => boolean;\n        isOSX: () => boolean;\n        isLinux: () => boolean;\n        isSolaris: () => boolean;\n        isFreeBSD: () => boolean;\n        isChromeOS: () => boolean;\n    };\n    deviceType: {\n        isiPad: () => boolean;\n        isiPhone: () => boolean;\n        isTablet: () => boolean;\n        isPhone: () => boolean;\n        isTouch: () => boolean;\n        isWebView: () => boolean;\n        isDesktop: () => boolean;\n    };\n}\ninterface FocusManager {\n    isEditorUIElement: (elm: Element) => boolean;\n}\ninterface EntitiesMap {\n    [name: string]: string;\n}\ninterface Entities {\n    encodeRaw: (text: string, attr?: boolean) => string;\n    encodeAllRaw: (text: string) => string;\n    encodeNumeric: (text: string, attr?: boolean) => string;\n    encodeNamed: (text: string, attr?: boolean, entities?: EntitiesMap) => string;\n    getEncodeFunc: (name: string, entities?: EntitiesMap | string) => (text: string, attr?: boolean) => string;\n    decode: (text: string) => string;\n}\ndeclare type AttrList = Array<{\n    name: string;\n    value: string;\n}> & {\n    map: Record<string, string>;\n};\ninterface SaxParserSettings {\n    allow_conditional_comments?: boolean;\n    allow_html_data_urls?: boolean;\n    allow_script_urls?: boolean;\n    allow_svg_data_urls?: boolean;\n    fix_self_closing?: boolean;\n    preserve_cdata?: boolean;\n    remove_internals?: boolean;\n    self_closing_elements?: Record<string, {}>;\n    validate?: boolean;\n    cdata?: (text: string) => void;\n    comment?: (text: string) => void;\n    doctype?: (text: string) => void;\n    end?: (name: string) => void;\n    pi?: (name: string, text: string) => void;\n    start?: (name: string, attrs: AttrList, empty: boolean) => void;\n    text?: (text: string, raw?: boolean) => void;\n}\ndeclare type ParserFormat = 'html' | 'xhtml' | 'xml';\ninterface SaxParser {\n    parse: (html: string, format?: ParserFormat) => void;\n}\ninterface IconPack {\n    icons: Record<string, string>;\n}\ninterface IconManager {\n    add: (id: string, iconPack: IconPack) => void;\n    get: (id: string) => IconPack;\n    has: (id: string) => boolean;\n}\ninterface Resource {\n    load: <T = any>(id: string, url: string) => Promise<T>;\n    add: (id: string, data: any) => void;\n}\ndeclare type WithSubItems<T, K extends keyof T> = T[K] extends Array<any> ? (T & T[K][number]) : T;\ninterface Props<A extends any[] = any[]> {\n    Mixins?: Array<Record<string, any>>;\n    Methods?: string;\n    Properties?: string;\n    Statics?: Record<string, any>;\n    Defaults?: Record<string, any>;\n    init?: (...args: A) => void;\n}\ndeclare type ExtendedClass<T extends Props<A>, A extends any[]> = WithSubItems<T, 'Mixins'>;\ninterface ExtendedClassConstructor<T extends Props<A>, A extends any[] = any[]> extends Class {\n    readonly prototype: ExtendedClass<T, A>;\n    new (...args: A): ExtendedClass<T, A>;\n    [key: string]: T['Statics'];\n}\ninterface Class {\n    extend<T extends Props<A>, A extends any[] = any[]>(props: T): ExtendedClassConstructor<T, A>;\n}\ninterface RGB {\n    r: number;\n    g: number;\n    b: number;\n}\ninterface HSV {\n    h: number;\n    s: number;\n    v: number;\n}\ninterface Color {\n    toRgb: () => RGB;\n    toHsv: () => HSV;\n    toHex: () => string;\n    parse: (value: string | RGB | HSV) => Color;\n}\ndeclare type ColorConstructor = new (value?: string | RGB | HSV) => Color;\ninterface DebounceFunc<T extends (...args: any[]) => void> {\n    (...args: Parameters<T>): void;\n    stop: () => void;\n}\ninterface Delay {\n    requestAnimationFrame: (callback: () => void, element?: HTMLElement) => void;\n    setEditorInterval: (editor: Editor, callback: () => void, time?: number) => number;\n    setEditorTimeout: (editor: Editor, callback: () => void, time?: number) => number;\n    setInterval: (callback: () => void, time?: number) => number;\n    setTimeout: (callback: () => void, time?: number) => number;\n    clearInterval: (id?: number) => void;\n    clearTimeout: (id?: number) => void;\n    debounce: <T extends (...args: any[]) => any>(callback: T, time?: number) => DebounceFunc<T>;\n    throttle: <T extends (...args: any[]) => any>(callback: T, time?: number) => DebounceFunc<T>;\n}\ndeclare type UploadResult$2 = UploadResult;\ninterface ImageUploader {\n    upload: (blobInfos: BlobInfo[], showNotification?: boolean) => Promise<UploadResult$2[]>;\n}\ninterface JSONUtils {\n    serialize: (obj: any) => string;\n    parse: (text: string) => any;\n}\ninterface JSONPSettings {\n    count?: number;\n    url: string;\n    callback: (json: string) => void;\n}\ninterface JSONP {\n    callbacks: {};\n    count: number;\n    send(this: JSONP, settings: JSONPSettings): void;\n}\ninterface JSONRequestSettings {\n    crossDomain?: boolean;\n    requestheaders?: Record<string, {\n        key: string;\n        value: string;\n    }>;\n    type?: string;\n    url?: string;\n    error_scope?: any;\n    success_scope?: any;\n    success?: (data: any) => void;\n    error?: (error: any, xhr: XMLHttpRequest) => void;\n}\ninterface JSONRequestArgs extends JSONRequestSettings {\n    id?: string;\n    method?: string;\n    params?: string;\n}\ninterface JSONRequestConstructor {\n    readonly prototype: JSONRequest;\n    new (settings?: JSONRequestSettings): JSONRequest;\n    sendRPC: (o: JSONRequestArgs) => void;\n}\ndeclare class JSONRequest {\n    static sendRPC(o: JSONRequestArgs): void;\n    settings: JSONRequestSettings;\n    count: number;\n    constructor(settings?: JSONRequestSettings);\n    send(args: JSONRequestArgs): void;\n}\ninterface KeyboardLikeEvent {\n    shiftKey: boolean;\n    ctrlKey: boolean;\n    altKey: boolean;\n    metaKey: boolean;\n}\ninterface VK {\n    BACKSPACE: number;\n    DELETE: number;\n    DOWN: number;\n    ENTER: number;\n    LEFT: number;\n    RIGHT: number;\n    SPACEBAR: number;\n    TAB: number;\n    UP: number;\n    PAGE_UP: number;\n    PAGE_DOWN: number;\n    END: number;\n    HOME: number;\n    modifierPressed: (e: KeyboardLikeEvent) => boolean;\n    metaKeyPressed: (e: KeyboardLikeEvent) => boolean;\n}\ninterface XHRSettings {\n    async?: boolean;\n    content_type?: string;\n    crossDomain?: boolean;\n    data?: Document | BodyInit;\n    requestheaders?: Record<string, {\n        key: string;\n        value: string;\n    }>;\n    scope?: any;\n    type?: string;\n    url: string;\n    error_scope?: any;\n    success_scope?: any;\n    error?: (message: 'TIMED_OUT' | 'GENERAL', xhr: XMLHttpRequest, settings: XHRSettings) => void;\n    success?: (text: string, xhr: XMLHttpRequest, settings: XHRSettings) => void;\n}\ninterface XHREventMap {\n    beforeInitialize: {\n        settings: XHRSettings;\n    };\n    beforeSend: {\n        xhr: XMLHttpRequest;\n        settings: XHRSettings;\n    };\n}\ninterface XHR extends Observable<XHREventMap> {\n    send(this: XHR, settings: XHRSettings): void;\n}\ninterface DOMUtilsNamespace {\n    new (doc: Document, settings: Partial<DOMUtilsSettings>): DOMUtils;\n    DOM: DOMUtils;\n    nodeIndex: (node: Node, normalized?: boolean) => number;\n}\ninterface RangeUtilsNamespace {\n    new (dom: DOMUtils): RangeUtils;\n    compareRanges: (rng1: RangeLikeObject, rng2: RangeLikeObject) => boolean;\n    getCaretRangeFromPoint: (clientX: number, clientY: number, doc: Document) => Range;\n    getSelectedNode: (range: Range) => Node;\n    getNode: (container: Node, offset: number) => Node;\n}\ninterface AddOnManagerNamespace {\n    new <T>(): AddOnManager<T>;\n    language: string | undefined;\n    languageLoad: boolean;\n    baseURL: string;\n    PluginManager: PluginManager;\n    ThemeManager: ThemeManager;\n}\ninterface BookmarkManagerNamespace {\n    (selection: EditorSelection): BookmarkManager;\n    isBookmarkNode: (node: Node) => boolean;\n}\ninterface SaxParserNamespace {\n    new (settings?: SaxParserSettings, schema?: Schema): SaxParser;\n    findEndTag: (schema: Schema, html: string, startIndex: number) => number;\n}\ninterface TinyMCE extends EditorManager {\n    geom: {\n        Rect: Rect;\n    };\n    util: {\n        Promise: PromiseConstructor;\n        Delay: Delay;\n        Tools: Tools;\n        VK: VK;\n        URI: URIConstructor;\n        Class: Class;\n        EventDispatcher: EventDispatcherConstructor<any>;\n        Observable: Observable<any>;\n        I18n: I18n;\n        XHR: XHR;\n        JSON: JSONUtils;\n        JSONRequest: JSONRequestConstructor;\n        JSONP: JSONP;\n        LocalStorage: Storage;\n        Color: ColorConstructor;\n        ImageUploader: ImageUploader;\n    };\n    dom: {\n        EventUtils: EventUtilsConstructor;\n        Sizzle: any;\n        DomQuery: DomQueryConstructor;\n        TreeWalker: DomTreeWalkerConstructor;\n        TextSeeker: new (dom: DOMUtils, isBlockBoundary?: (node: Node) => boolean) => TextSeeker;\n        DOMUtils: DOMUtilsNamespace;\n        ScriptLoader: ScriptLoaderConstructor;\n        RangeUtils: RangeUtilsNamespace;\n        Serializer: new (settings: DomSerializerSettings, editor?: Editor) => DomSerializer;\n        ControlSelection: (selection: EditorSelection, editor: Editor) => ControlSelection;\n        BookmarkManager: BookmarkManagerNamespace;\n        Selection: new (dom: DOMUtils, win: Window, serializer: DomSerializer, editor: Editor) => EditorSelection;\n        StyleSheetLoader: new (documentOrShadowRoot: Document | ShadowRoot, settings: StyleSheetLoaderSettings) => StyleSheetLoader;\n        Event: EventUtils;\n    };\n    html: {\n        Styles: new (settings?: StylesSettings, schema?: Schema) => Styles;\n        Entities: Entities;\n        Node: AstNodeConstructor;\n        Schema: new (settings?: SchemaSettings) => Schema;\n        SaxParser: SaxParserNamespace;\n        DomParser: new (settings?: DomParserSettings, schema?: Schema) => DomParser;\n        Writer: new (settings?: WriterSettings) => Writer;\n        Serializer: new (settings?: HtmlSerializerSettings, schema?: Schema) => HtmlSerializer;\n    };\n    AddOnManager: AddOnManagerNamespace;\n    Annotator: new (editor: Editor) => Annotator;\n    Editor: EditorConstructor;\n    EditorCommands: EditorCommandsConstructor;\n    EditorManager: EditorManager;\n    EditorObservable: EditorObservable;\n    Env: Env;\n    FocusManager: FocusManager;\n    Formatter: new (editor: Editor) => Formatter;\n    NotificationManager: new (editor: Editor) => NotificationManager;\n    Shortcuts: ShortcutsConstructor;\n    UndoManager: new (editor: Editor) => UndoManager;\n    WindowManager: new (editor: Editor) => WindowManager;\n    DOM: DOMUtils;\n    ScriptLoader: ScriptLoader;\n    PluginManager: PluginManager;\n    ThemeManager: ThemeManager;\n    IconManager: IconManager;\n    Resource: Resource;\n    trim: Tools['trim'];\n    isArray: Tools['isArray'];\n    is: Tools['is'];\n    toArray: Tools['toArray'];\n    makeMap: Tools['makeMap'];\n    each: Tools['each'];\n    map: Tools['map'];\n    grep: Tools['grep'];\n    inArray: Tools['inArray'];\n    extend: Tools['extend'];\n    create: Tools['create'];\n    walk: Tools['walk'];\n    createNS: Tools['createNS'];\n    resolve: Tools['resolve'];\n    explode: Tools['explode'];\n    _addCacheSuffix: Tools['_addCacheSuffix'];\n    isOpera: boolean;\n    isWebKit: boolean;\n    isIE: false | number;\n    isGecko: boolean;\n    isMac: boolean;\n}\ndeclare const tinymce: TinyMCE;\nexport default tinymce;\nexport { AddOnManager, Annotator, AstNode, Bookmark, BookmarkManager, Class, Color, ControlSelection, DOMUtils, Delay, DomParser, DomParserSettings, DomQuery, DomSerializer, DomSerializerSettings, DomTreeWalker, Editor, EditorCommands, EditorEvent, EditorManager, EditorModeApi, EditorObservable, EditorSelection, EditorSettings, Entities, Env, EventDispatcher, EventUtils, EventTypes_d as Events, FocusManager, Format_d as Formats, Formatter, GeomRect, HtmlSerializer, HtmlSerializerSettings, I18n, IconManager, JSONUtils as JSON, JSONP, JSONRequest, JSONRequestArgs, JSONRequestSettings, NotificationApi, NotificationManager, NotificationSpec, Observable, Plugin, PluginManager, RangeUtils, RawEditorSettings, Rect, Resource, SaxParser, SaxParserSettings, Schema, SchemaSettings, ScriptLoader, Shortcuts, StyleSheetLoader, Styles, TextSeeker, Theme, ThemeManager, TinyMCE, Tools, URI, Ui_d as Ui, UndoManager, VK, WindowManager, Writer, WriterSettings, XHR, XHRSettings };\n"]}}]);